WEBVTT

00:00:00.000 --> 00:00:05.179
Добрый день, уважаемые студенты!
Я рад вас видеть на очередной

00:00:05.203 --> 00:00:09.786
сессии разбора лабораторной работы.
Тема лабораторной работы – AWS Lambda.

00:00:09.810 --> 00:00:19.000
Итак, начинаем. Для начала работы нам
необходимо добраться до AWS Management Console.

00:00:19.000 --> 00:00:26.000
Для этого на основной странице
лабораторной работы нажимаем на кнопку AWS.

00:00:26.000 --> 00:00:31.000
После этого мы попадаем на основную
страницу AWS Management Console.

00:00:31.000 --> 00:00:40.000
При этом можно увидеть, что вверху
справа отображено “временный пользователь”.

00:00:40.000 --> 00:00:46.586
Теперь в строке поиска сервисов
вводим Lambda и в выдаче вы увидите

00:00:46.610 --> 00:00:53.197
сервис, на который нам необходимо перейти.
После перехода на основную

00:00:53.221 --> 00:00:59.850
страницу AWS Lambda, выйдет
следующее сообщение об ошибке, но мы его

00:00:59.874 --> 00:01:07.000
игнорируем, т.к. на реальном AWS
аккаунте подобного сообщения не будет.

00:01:07.000 --> 00:01:13.240
Далее необходимо в левом
навигационном меню выбрать “Functions”

00:01:13.264 --> 00:01:19.000
и на основной странице
нажать кнопку “Create Function”.

00:01:19.000 --> 00:01:29.000
В рамках нашей лабораторной работы мы создаем новую
функцию, поэтому выбираем опцию Author From Scratch.

00:01:29.000 --> 00:01:34.988
Ниже вводим название функции,
она будет называться myStopinator.

00:01:35.012 --> 00:01:41.000
Как runtime, т.е.
среда исполнения, выбираем Python версии 3.8.

00:01:41.000 --> 00:01:48.973
Еще ниже находятся настройки
роли для этой функции, мы будем

00:01:48.997 --> 00:01:59.000
использовать существующую роль, т.е.
из списка выбираем myStopinatorRole.

00:01:59.000 --> 00:02:10.000
Эта роль создана специально для нас, она доступна для
Lambda, у нее есть права для остановки EC2 инстансов.

00:02:10.000 --> 00:02:20.000
После введения всех необходимых настроек мы
нажимаем внизу справа на кнопку Create Function.

00:02:20.000 --> 00:02:26.488
Нас перенаправит на страницу с нашей
функцией и появится соответствующее сообщение

00:02:26.512 --> 00:02:33.000
о том, что функция успешно создана.
Следующий наш шаг – создание триггер-ивента.

00:02:33.000 --> 00:02:42.000
Нажав кнопку “Add Trigger”, мы будем направлены
на страницу, где необходимо выбрать источник.

00:02:42.000 --> 00:02:47.802
Источником, т.е. триггером, будет
выступать Event Rule, следовательно, начинаем

00:02:47.826 --> 00:02:54.000
вводить event, и в выпадающем меню
выбираем опцию EventBridge (CloudWatch Events).

00:02:54.000 --> 00:03:00.000
У нас появится возможность выбрать
существующий ивент, либо создать новый.

00:03:00.000 --> 00:03:08.000
Выбираем опцию создать новый ивент
(Create a new rule) и назовем его “everyMinute”.

00:03:08.000 --> 00:03:14.000
Как тип выберем Schedule Expression, т.е.
повторяющиеся по расписанию события.

00:03:14.000 --> 00:03:18.729
В нашем случае, это будет 
rate (1 minute). Это нужно для

00:03:18.753 --> 00:03:24.000
того, чтобы этот ивент триггерил
нашу лямбду каждую минуту.

00:03:24.000 --> 00:03:30.000
После введения всех настроек необходимо
нажать на кнопку Add внизу чуть справа.

00:03:30.000 --> 00:03:36.732
Как только вы ее нажмете, вас
перенаправит обратно на страницу с нашей

00:03:36.756 --> 00:03:43.488
функцией, там будет сообщение, что
наш триггер успешно создан и у нас на

00:03:43.512 --> 00:03:50.579
странице появился один существующий
триггер, EventBridge, который триггерит

00:03:50.603 --> 00:03:57.000
нашу лямбда-функцию. Теперь необходимо 
изменить код нашей функции.

00:03:57.000 --> 00:04:06.000
Для этого прокрутим ниже и во вкладке
“Code” откроем специальный редактор кода.

00:04:06.000 --> 00:04:14.000
Здесь выбираем lambda_function.py
и открываем код этого файла.

00:04:14.000 --> 00:04:25.000
Необходимо очистить все то, что там есть и
вставить шаблон кода из нашей лабораторной работы.

00:04:25.000 --> 00:04:33.000
Здесь необходимо будет внести некоторые
изменения в код, а именно заменить регион.

00:04:33.000 --> 00:04:40.000
В нашем случае, это North Virginia, поэтому
вставляем системное название “us-east-1”.

00:04:40.000 --> 00:04:45.000
Далее необходимо
вставить ID EC2 инстанса.

00:04:45.000 --> 00:04:56.000
Переходим на этот сервис, затем в левом
навигационном меню переходим на вкладку Instances.

00:04:56.000 --> 00:05:03.000
Следует удостовериться, что вы находитесь в
нужном регионе, а именно North Virginia. После этого

00:05:03.000 --> 00:05:11.000
вы увидите в списке инстансов один или два инстанса,
нам нужен тот, который называется instance1.

00:05:11.000 --> 00:05:16.000
Обратите внимание на его статус, он должен
быть в состоянии running. Далее выбираем

00:05:16.000 --> 00:05:31.000
этот инстанс, в дополнительной информации
переходим во вкладку Details и копируем Instance ID.

00:05:31.000 --> 00:05:37.634
После того, как мы скопировали его, возвращаемся
обратно к нашей лямбда-функции и на третьей

00:05:37.658 --> 00:05:44.000
строке вставляем значение Instance ID,
который мы скопировали на предыдущей странице.

00:05:44.000 --> 00:05:50.041
После этого необходимо сохранить код.
Это можно сделать, нажав

00:05:50.065 --> 00:05:57.000
комбинацию клавиш Ctrl+S, либо
выбрать опцию Save в пункте меню File.

00:05:57.000 --> 00:06:05.988
Чтобы новый код лямбда-функции начал работать,
необходимо его задеплоить путем нажатия кнопки

00:06:06.012 --> 00:06:15.000
Deploy и через несколько секунд появится
сообщение о том, что код функции успешно обновлен.

00:06:18.000 --> 00:06:26.000
Пройдемся вкратце по коду, который мы сохранили.
В первой строке мы импортируем наш SDK.

00:06:26.000 --> 00:06:31.000
SDK для Python – это Boto3,
поэтому здесь будет import boto3.

00:06:31.000 --> 00:06:39.000
Далее, вторая и третья строки это объявление
переменных, а именно регион и информация о наших

00:06:39.000 --> 00:06:47.000
инстансах. В первом случае – это текстовый тип
данных, а во втором случае – это массив из string-ов.

00:06:47.000 --> 00:06:52.988
Таким образом, если необходимо
останавливать не один, а несколько

00:06:53.012 --> 00:06:59.000
инстансов, можно передавать
дополнительные значения в этом массиве.

00:06:59.000 --> 00:07:04.445
Далее, в четвертой строке, мы
инициируем клиент Boto3 для сервиса

00:07:04.469 --> 00:07:09.488
EC2, т.е. мы вызываем Boto3.client, 
указываем какой сервис

00:07:09.512 --> 00:07:14.531
нам нужен, в нашем случае это
EC2, и дополнительно указываем

00:07:14.555 --> 00:07:20.000
название нашего региона.
Все это мы присваиваем переменной EC2.

00:07:20.000 --> 00:07:32.000
Далее идет стандартная конструкция для Python
кода внутри AWS, а именно lambda_handler функция.

00:07:32.000 --> 00:07:36.541
На вход она принимает event и context.
Это две переменные,

00:07:36.565 --> 00:07:41.107
которые заполняются системно, 
т.е. в момент, когда что-то

00:07:41.131 --> 00:07:45.553
вызывает нашу лямбда-функцию,
то при передаче некоторых

00:07:45.577 --> 00:07:50.000
данных эти данные будут
находиться в переменной event.

00:07:50.000 --> 00:07:55.304
Также есть некоторая мета
информация по исполнению этого

00:07:55.328 --> 00:08:00.632
кода, вся эта информация
хранится в переменной context.

00:08:00.656 --> 00:08:11.000
Внутри функции в седьмой строке мы используем наш
клиент ec2.stop_instances, мы вызываем этот action.

00:08:11.000 --> 00:08:20.000
Мы помним, что для совершения некоторых
действий в AWS можно использовать три варианта.

00:08:20.000 --> 00:08:25.000
Первый – это использовать саму консоль, т.е.
можем через консоль остановить самостоятельно.

00:08:25.000 --> 00:08:30.635
Во-вторых, мы можем воспользоваться 
AWS CLI, т.е. командная строка, в ней

00:08:30.659 --> 00:08:37.000
вызываем команду Stop Instances и этой
командой мы останавливаем наши инстансы.

00:08:37.000 --> 00:08:42.709
И третий вариант – это использование SDK,
это написание кода более высокого уровня,

00:08:42.733 --> 00:08:49.000
которое производит некоторые действия в облаке.
В нашем случае мы останавливаем инстансы.

00:08:49.000 --> 00:08:56.715
Внутри в скобках передаются дополнительные
параметры, в нашем случае параметр instance

00:08:56.739 --> 00:09:05.000
IDs, который равен нашей переменной instances, 
т.е. мы передаем на вход список instanceID.

00:09:05.000 --> 00:09:17.000
Далее, в восьмой строке мы делаем вывод
сообщения с информацией о наших инстансах.

00:09:17.000 --> 00:09:23.467
Это был самый простейший
пример кода Лямбды и все, что вы

00:09:23.491 --> 00:09:31.000
будете писать в будущем, будет
плюс-минус похоже на этот пример.

00:09:31.000 --> 00:09:37.859
Наиболее часто вы будете использовать
SDK, это Boto3 в случае использования

00:09:37.883 --> 00:09:44.000
языка программирования Python,
и на самом деле это не так сложно.

00:09:44.000 --> 00:09:52.587
Более того, мы только что подготовили код,
который будет запускаться в облаке и при этом

00:09:52.611 --> 00:10:01.000
вам не пришлось настраивать отдельный
сервер или настраивать что-либо дополнительно.

00:10:01.000 --> 00:10:09.000
Мы лишь загрузили наш код, задеплоили его, сохранили
и теперь этот код будет запускаться каждую минуту.

00:10:09.000 --> 00:10:16.631
Теперь перейдем на вкладку “Monitor”,
где можно посмотреть, какая информация

00:10:16.655 --> 00:10:25.000
доступна касательно запусков этой лямбды.
Мы остановимся только на трех графиках.

00:10:25.000 --> 00:10:30.000
Первый – это Invocations, количество
запусков нашей лямбда-функции во времени.

00:10:30.000 --> 00:10:35.000
Здесь видно небольшая линия, это говорит о
том, что наша лямбда запускалась два раза.

00:10:35.000 --> 00:10:40.826
Далее, второй график Duration
показывает, какое количество миллисекунд

00:10:40.850 --> 00:10:46.000
запускалась наша функция, в
нашем случае это 18 миллисекунд.

00:10:46.000 --> 00:10:52.032
Третий график – Error count and
success rate, он показывает процентное

00:10:52.056 --> 00:10:58.000
соотношение удачных и неудачных
совершений исполнения лямбда-кода.

00:10:58.000 --> 00:11:04.488
В нашем случае красный индикатор
находится на уровне 0, т.е. все

00:11:04.512 --> 00:11:11.000
наши запуски прошли успешно,
а зеленый на уровне 1, т.е. 100%.

00:11:11.000 --> 00:11:16.730
Отлично! Теперь вернемся на страницу с
нашими инстансами. Мы убедились, что наш

00:11:16.754 --> 00:11:23.000
код уже несколько раз запустился, теперь
попробуем обновить список наших инстансов.

00:11:23.000 --> 00:11:30.077
Нажав на иконку обновить, вы увидите,
что состояние инстанса instance1 изменилось

00:11:30.101 --> 00:11:37.000
с Running на Stopped, т.е. наш код 
отработал и успешно остановил наш инстанс.

00:11:37.000 --> 00:11:41.899
На этом наша лабораторная 
работа завершается. Я вам

00:11:41.923 --> 00:11:48.000
напоминаю, что нам необходимо
правильно выйти со всех систем.

00:11:48.000 --> 00:11:53.000
В первую очередь нам необходимо
выйти с AWS Management Console.

00:11:53.000 --> 00:12:04.000
Для этого вверху справа нажимаем на название вашего
пользователя и в выпадающем меню кнопку “Sign Out”.

00:12:04.000 --> 00:12:09.678
Далее, уже на странице с
лабораторной работой надо остановить

00:12:09.702 --> 00:12:15.000
лабораторную работу, чтобы
наш AWS аккаунт был удален.

00:12:15.000 --> 00:12:20.789
Для этого нажимаем кнопку End Lab,
подтверждаем, что мы завершаем лабораторную

00:12:20.813 --> 00:12:26.000
работу и дожидаемся сообщения
“You may close this message box now”.

00:12:26.000 --> 00:12:37.000
После этого вы можете закрыть все
окна и успешно выйти из этих систем.

00:12:37.000 --> 00:12:41.000
На этом мы завершаем сессию
разбора лабораторной работы.

00:12:41.000 --> 00:12:49.000
Надеюсь, вы узнали что-то новое и получили
более полное представление о сервисе AWS Lambda.

00:12:49.000 --> 00:13:12.000
Спасибо, увидимся на
следующих наших активностях!
