WEBVTT

00:00:00.000 --> 00:00:08.000
Добрый день, уважаемые студенты! Я рад вас видеть на очередной сессии разбора лабораторной работы.

00:00:08.000 --> 00:00:15.000
Тема лабораторной работы AWS Lambda. Итак, давайте начнем.

00:00:15.000 --> 00:00:19.000
С самого начала нам необходимо добраться до AWS Management Console.

00:00:19.000 --> 00:00:26.000
Для этого на основной странице лабораторной работы необходимо нажать на кнопку AWS.

00:00:26.000 --> 00:00:31.000
Как только вы на нее нажмете, вы попадете на основную страницу AWS Management Console.

00:00:31.000 --> 00:00:40.000
Вы это можете увидеть также, что вверху справа отображается временный пользователь.

00:00:40.000 --> 00:00:45.000
Теперь нам необходимо в строке поиска сервисов начать вводить Lambda.

00:00:45.000 --> 00:00:51.000
В выдаче вы увидите необходимый нам сервис. Давайте на нее перейдем.

00:00:51.000 --> 00:01:00.000
Как только вы перейдете на основную страницу AWS Lambda, вы можете увидеть следующее сообщение с ошибкой.

00:01:00.000 --> 00:01:07.000
Вы можете игнорировать это сообщение, потому как на реальном AWS аккаунте подобного сообщения не будет.

00:01:07.000 --> 00:01:19.000
Вам необходимо в левом навигационном меню попасть на пункт Functions и на основной странице нажать на кнопку Create Function.

00:01:19.000 --> 00:01:29.000
В рамках лабораторной работы мы создаем новую функцию, поэтому мы выбираем опцию After From Scratch.

00:01:29.000 --> 00:01:34.000
Чуть ниже необходимо ввести название функции. Это будет My Stop Inator.

00:01:34.000 --> 00:01:41.000
И как runtime, то есть среда исполнения, выбираем Python версии 3.8.

00:01:41.000 --> 00:01:50.000
Если вы прокрутите страницу чуть ниже, вы также увидите настройки для роли для этой функции.

00:01:50.000 --> 00:01:59.000
Нам необходимо выбрать, что мы будем использовать существующую роль, и в списке выберем My Stop Inator � оль.

00:01:59.000 --> 00:02:02.000
Это специальная созданная для нас роль.

00:02:02.000 --> 00:02:10.000
Она доступна для Lambda, и у нее есть права для остановки C2-инстенсов.

00:02:10.000 --> 00:02:20.000
Как только мы введем все необходимые настройки, давайте нажмем внизу справа на кнопку Create Function.

00:02:20.000 --> 00:02:28.000
Нас перенаправит на страницу с нашей функцией. Вы также увидите соответствующее сообщение, что функция была успешно создана.

00:02:28.000 --> 00:02:33.000
Теперь следующим шагом нам необходимо создать триггер-ивент.

00:02:33.000 --> 00:02:37.000
Для этого необходимо нажать на кнопку Add Trigger.

00:02:37.000 --> 00:02:42.000
Как только вы ее нажмете, вас направят на страницу, где нам необходимо выбрать источник.

00:02:42.000 --> 00:02:47.000
Источником, то есть триггером, будет выступать Event Rule.

00:02:47.000 --> 00:02:54.000
Поэтому начнем вводить ивент, и в выпадающем меню выберем опцию Event Preach CloudWatch Events.

00:02:54.000 --> 00:03:00.000
Как только мы ее выберем, у нас есть возможность выбрать либо существующий ивент, либо создать новый.

00:03:00.000 --> 00:03:08.000
Давайте выберем опцию создать новый ивент, дадим ему имя every minute.

00:03:08.000 --> 00:03:14.000
Как тип выберем Schedule Expression, то есть это повторяющиеся по расписанию события.

00:03:14.000 --> 00:03:19.000
И как Schedule Expression выберем Rate в скобках 1 минут.

00:03:19.000 --> 00:03:24.000
Это нужно для того, чтобы этот ивент триггерил нашу лямбу каждую минуту.

00:03:24.000 --> 00:03:30.000
Как только введем все настройки внизу справа, необходимо нажать на кнопку Add.

00:03:30.000 --> 00:03:36.000
Как только вы на нее нажмете, вас перенаправят обратно на страницу с нашей функцией.

00:03:36.000 --> 00:03:40.000
Вы увидите сообщение о том, что триггер был успешно создан.

00:03:40.000 --> 00:03:48.000
А также вы увидите на странице, что у нас есть один существующий триггер, Event Preach,

00:03:48.000 --> 00:03:54.000
который триггерит нашу лямбда функцию.

00:03:54.000 --> 00:03:57.000
Теперь нам необходимо изменить код нашей функции.

00:03:57.000 --> 00:04:06.000
Для этого прокрутим чуть ниже и во вкладке код откроем специальный редактор кода.

00:04:06.000 --> 00:04:14.000
Здесь нам необходимо выбрать lambda function.py и откроется код этого файла.

00:04:14.000 --> 00:04:25.000
Необходимо очистить все то, что там есть и вставить шаблон кода с нашей лабораторной работы.

00:04:25.000 --> 00:04:33.000
Здесь необходимо будет внести некоторые изменения в код, а именно заменить регион.

00:04:33.000 --> 00:04:40.000
В нашем случае это Норр-Свержение, поэтому мы вставляем системное название US East One.

00:04:40.000 --> 00:04:45.000
Далее нам необходимо вставить ID EC2 Instance.

00:04:45.000 --> 00:04:56.000
Для этого необходимо перейти на этот сервис и в левом навигационном меню перейти на вкладку Instances.

00:04:56.000 --> 00:05:03.000
Здесь вам следует удостовериться, что вы находитесь в нужном регионе, а именно Норр-Свержение.

00:05:03.000 --> 00:05:08.000
Как только вы в этом убедились, вы увидите в списке инстанцев один либо два инстанца.

00:05:08.000 --> 00:05:11.000
И нам нужен тот, который называется instance1.

00:05:11.000 --> 00:05:16.000
Обратите внимание на его состояние, он должен быть в состоянии running.

00:05:16.000 --> 00:05:26.000
Далее нам необходимо выбрать этот instance и в дополнительные информации об этом инстанце перейти во вкладку details.

00:05:26.000 --> 00:05:31.000
Там вы можете увидеть и скопировать instance ID.

00:05:31.000 --> 00:05:36.000
Давайте это сделаем и вернемся обратно к нашей лямбда функции.

00:05:36.000 --> 00:05:44.000
На третьей строчке необходимо вставить значение ID instance, который мы скопировали на предыдущей странице.

00:05:44.000 --> 00:05:48.000
Как только вы это сделаете, нам необходимо сохранить код.

00:05:48.000 --> 00:05:57.000
Для этого вы можете нажать на словосочетание Ctrl S, либо нажать на пункт меню File и там выбрать опцию Save.

00:05:57.000 --> 00:06:04.000
Для того, чтобы новый код лямбда функции начал работать, необходимо ее задеплоить.

00:06:04.000 --> 00:06:07.000
Для этого нажмите на кнопку deploy.

00:06:07.000 --> 00:06:15.000
Через несколько секунд вы увидите сообщение о том, что код функции был успешно обновлен.

00:06:18.000 --> 00:06:22.000
Давайте пройдемся вкратце по тому коду, который мы сохранили.

00:06:22.000 --> 00:06:26.000
В самом начале первая строчка, мы импортируем наш SDK.

00:06:26.000 --> 00:06:31.000
SDK для Python это Boto3, поэтому import Boto3.

00:06:31.000 --> 00:06:39.000
Далее вторая и третья строчка это объявление переменных, а именно регион и информацию о наших инстенсах.

00:06:39.000 --> 00:06:47.000
В первом случае это текстовый тип данных, а во втором случае это массив из стрингов.

00:06:47.000 --> 00:06:59.000
Таким образом, если вы хотите останавливать не только одну, а несколько инстенсов, то вы можете передать дополнительные значения в этом массиве.

00:06:59.000 --> 00:07:04.000
Далее четвертая строчка, мы иницируем клиент Boto3 для сервиса EC2.

00:07:04.000 --> 00:07:15.000
Таким образом, мы вызываем Boto3.client, мы указываем какой сервис нам нужен в нашем случае EC2 и дополнительно указываем название нашего региона.

00:07:15.000 --> 00:07:20.000
Это все мы присваиваем переменной EC2.

00:07:20.000 --> 00:07:32.000
Далее идет стандартная конструкция для Python кода внутри AWS, а именно мы говорим, что у нас есть LambdaHandler функция.

00:07:32.000 --> 00:07:34.000
На вход она принимает event и context.

00:07:34.000 --> 00:07:38.000
Это две переменные, которые заполняются системно.

00:07:38.000 --> 00:07:50.000
То есть в момент, когда что-то вызывает нашу лямбда функцию, то при передаче некоторых данных эти данные будут находиться в переменной event.

00:07:50.000 --> 00:07:58.000
Также есть некоторая мета информация по исполнению этого кода, вся эта информация хранится в переменной context.

00:07:58.000 --> 00:08:11.000
Внутри этой функции мы на седьмой строчке используем наш клиент EC2.stopInstances, мы вызываем этот action.

00:08:11.000 --> 00:08:20.000
Мы с вами помним, мы можем использовать для совершения некоторых действий в AWS три варианта.

00:08:20.000 --> 00:08:25.000
Первый это использовать саму консоль, то есть можем через консоль пойти и самостоятельно остановить.

00:08:25.000 --> 00:08:37.000
Далее мы можем воспользоваться awcli, то есть командная строка, в котором вызываем команду stopInstances и этой одной командой мы останавливаем наши инстанции.

00:08:37.000 --> 00:08:46.000
И третий вариант это использование SDK, это написание кода более высокого уровня, которое производит некоторые действия в облаке.

00:08:46.000 --> 00:08:49.000
В нашем случае мы останавливаем инстанции.

00:08:49.000 --> 00:08:59.000
Внутри скобках передаются дополнительные параметры, в нашем случае параметр instanceIDs, которое равно нашей переменной instances.

00:08:59.000 --> 00:09:05.000
То есть мы передаем на вход список instanceID.

00:09:05.000 --> 00:09:17.000
Далее на восьмой строчке мы делаем вывод сообщения с информацией о наших инстанциях.

00:09:17.000 --> 00:09:25.000
Окей, это самый простейший пример кода лямды.

00:09:25.000 --> 00:09:31.000
Все то, что вы будете писать в будущем, оно плюс-минус будет похоже.

00:09:31.000 --> 00:09:40.000
Наиболее часто будете использовать SDK, это Boto3, в случае использования языка программирования Python.

00:09:40.000 --> 00:09:44.000
И вы видите, что это не так сложно делается.

00:09:44.000 --> 00:09:51.000
Более того, мы сейчас подготовили код, который будет запускаться в облаке.

00:09:51.000 --> 00:10:01.000
При этом вам не было необходимости настраивать отдельный сервер, нет необходимости настраивать что-либо дополнительно.

00:10:01.000 --> 00:10:09.000
Мы лишь загрузили наш код, его задеплоили, сохранили и теперь этот код будет запускаться каждую минуту.

00:10:09.000 --> 00:10:23.000
Давайте теперь перейдем на вкладку Монитор, для того чтобы посмотреть, что мы видим, какую информацию можем получить, касательно запусков этой лямды.

00:10:23.000 --> 00:10:25.000
Мы остановимся только на трех графиках.

00:10:25.000 --> 00:10:30.000
Первый это Invocations, это количество запусков нашей лямда функции во времени.

00:10:30.000 --> 00:10:35.000
Вы видите небольшую линию, это говорит о том, что наша лямда запустилась два раза.

00:10:35.000 --> 00:10:43.000
Далее во втором графике Duration мы видим, какое количество миллисекунд запускалась наша функция.

00:10:43.000 --> 00:10:46.000
В нашем случае это 18 миллисекунд.

00:10:46.000 --> 00:10:58.000
Ну и третий график это ErrorCount and SuccessRate, это процентное соотношение, какое количество успешных и неуспешных совершений исполнения лямда кода было.

00:10:58.000 --> 00:11:11.000
В нашем случае красное находится на уровне ноль, то есть все наши запуски были успешные и видите, что зеленые на уровне единички, то есть 100%.

00:11:11.000 --> 00:11:16.000
Отлично. Давайте теперь вернемся на страницу с нашими инстанциями.

00:11:16.000 --> 00:11:19.000
Мы уже увидели, что наш код несколько раз запустился.

00:11:19.000 --> 00:11:23.000
Теперь попробуем обновить список наших инстанций.

00:11:23.000 --> 00:11:32.000
Как только вы нажмете на иконку обновить, вы увидите, что состояние инстанца Instance1 изменилось с ранним на 100%.

00:11:32.000 --> 00:11:37.000
То есть отработал наш код и успешно остановил наш инстанс.

00:11:37.000 --> 00:11:44.000
Отлично. На этом мы завершаем нашу лабораторную работу.

00:11:44.000 --> 00:11:48.000
Я вам напоминаю, что нам необходимо правильно выйти со всех систем.

00:11:48.000 --> 00:11:53.000
В первую очередь нам необходимо выйти с AWS Management консоли.

00:11:53.000 --> 00:12:04.000
Для этого сверху справа необходимо нажать на название вашего пользователя и в выпадающем меню нажать на кнопку Sign Out.

00:12:04.000 --> 00:12:15.000
Далее уже на странице с лабораторной работой необходимо остановить эту лабораторную работу, чтобы наш AWS аккаунт был удален.

00:12:15.000 --> 00:12:26.000
Для этого необходимо нажать на кнопку End Lab, подтвердить, что мы завершаем лабораторную работу и дождаться, пока не выйдет сообщение You may close this message box now.

00:12:26.000 --> 00:12:37.000
Как только вы это увидите, вы можете закрывать все окна и успешно выходить с этих систем.

00:12:37.000 --> 00:12:41.000
На этом мы завершаем сессию разбора лабораторной работы.

00:12:41.000 --> 00:12:49.000
Я надеюсь, вы узнали что-то новое и получили более полное представление о сервисе AWS Lambda.

00:12:49.000 --> 00:13:12.000
Спасибо, увидимся с вами на следующих наших активностях.