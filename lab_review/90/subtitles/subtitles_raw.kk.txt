Қайырлы күн, құрметті студенттер! Сіздерді келесі зертханалық шолу сессиясында көргеніме қуаныштымын. Зертханалық тақырып - AWS Lambda. Сонымен, бастайық. Жұмысты бастау үшін біз AWS басқару консоліне жетуіміз керек. Мұны істеу үшін негізгі зертханалық беттегі AWS түймесін басыңыз.
Осыдан кейін біз AWS басқару консолінің басты бетіне апарамыз. Сонымен бірге, сіз “уақытша пайдаланушы” жоғарғы оң жақта көрсетілетінін көре аласыз. Енді Lambda қызметін іздеу жолағына енгізіңіз және іздеу нәтижелерінде сіз бізге бару керек қызметті көресіз. AWS Lambda басты бетіне өткеннен кейін сіз келесі қате туралы хабарды аласыз, бірақ біз оны елемейміз, себебі сіздің нақты AWS есептік жазбаңызда мұндай қате туралы хабар болмайды. Әрі қарай, сол жақ шарлау мәзіріндегі “Функциялар” тармағын таңдап, негізгі беттегі “Функция жасау” түймесін басыңыз. Зертханалық жұмысымыздың бір бөлігі ретінде біз жаңа функция жасаймыз, сондықтан Автордан Scratch опциясын таңдаймыз. Төмендегі функцияның атын енгізіңіз, ол MyStopinator деп аталады. Орындау уақыты, яғни орындау уақыты ортасы ретінде біз Python 3.8 нұсқасын таңдаймыз. Төменде де осы мүмкіндіктің рөл параметрлері бар, біз бар рөлді қолданамыз, яғни тізімнен MyStopinatorRole таңдаңыз. Бұл рөл тек біз үшін жасалған, ол Lambda үшін қол жетімді және EC2 даналарын тоқтату артықшылықтары бар. Барлық қажетті параметрлерді енгізгеннен кейін біз төменгі оң жақтағы функцияны жасау түймесін басамыз. Біз функция бетіне қайта бағытталамыз және мүмкіндіктің сәтті жасалғаны туралы тиісті хабарлама пайда болады.
Біздің келесі қадамымыз - триггер оқиғасын жасау. “Триггерді қосу” түймесін басу арқылы біз көзді таңдау керек бетке бағытталамыз. Дереккөз, яғни триггер оқиға ережесі болады, сондықтан біз оқиғаны енгізуді бастаймыз және ашылмалы мәзірден EventBridge (CloudWatch Events) опциясын таңдаңыз. Біз бар оқиғаны таңдай аламыз немесе жаңасын жасай аламыз. Жаңа ереже жасау опциясын таңдап, оны “EveryMinute” деп атаңыз. Түрі ретінде біз кесте өрнегін таңдаймыз, яғни. жоспарланған қайталанатын оқиғалар. Біздің жағдайда, бұл мөлшерлеме (1 минут) болар еді. Бұл оқиға біздің ламбданы әр минут сайын іске қосу үшін қажет. Барлық параметрлерді енгізгеннен кейін, төменгі жағындағы Қосу түймесін оң жақта басыңыз. Сіз оны басқаннан кейін сіз біздің функция бетіне қайта бағытталасыз, біздің триггер сәтті жасалғаны туралы хабарлама болады және біздің парағымызда бар бір триггер бар, EventBridge, бұл біздің лямбда функциясын іске қосады.
Енді біз өзіміздің функция кодын өзгертуіміз керек. Мұны істеу үшін төмен қарай жылжып, “Код” қойындысында арнайы код редакторын ашыңыз. Мұнда lambda_function.py тармағын таңдап, осы файлдың кодын ашыңыз. Біз ондағы барлық нәрсені тазалап, зертханалық жұмысымыздан код үлгісін енгізуіміз керек. Мұнда кодқа бірнеше өзгерістер енгізу қажет, атап айтқанда аймақты ауыстыру қажет болады. Біздің жағдайда бұл Солтүстік Вирджиния, сондықтан “Шығыс-1” жүйелік атауын салыңыз. Әрі қарай, EC2 данасының идентификаторын енгізу керек. Осы қызметке өтіңіз, содан кейін сол жақ шарлау мәзіріндегі даналар қойындысына өтіңіз. Дұрыс аймақта екеніңізге көз жеткізіңіз, атап айтқанда Солтүстік Вирджиния. Осыдан кейін сіз даналар тізімінде бір немесе екі дананы көресіз, және бізге instance1 деп аталатын бір қажет. Оның күйін ескеріңіз, ол жұмыс істеуі керек. Әрі қарай, осы дананы таңдаңыз, қосымша ақпараттағы мәліметтер қойындысына өтіп, Instance идентификаторын көшіріңіз. Біз оны көшіргеннен кейін, біз ламбда функциясына ораламыз және үшінші жолда алдыңғы бетте көшірілген Instance ID мәнін қоямыз. Осыдан кейін сіз кодты сақтауыңыз керек. Мұны Ctrl+S пернелер тіркесімін басу арқылы немесе Файл мәзірінің элементінен Сақтау опциясын таңдау арқылы жасауға болады. Lambda функциясының жаңа коды жұмыс істей бастауы үшін оны орналастыру түймесін басу арқылы орналастыру керек және бірнеше секундтан кейін сіз функция коды сәтті жаңартылғаны туралы хабарлама аласыз.
Біз сақтаған кодты жылдам қарастырайық. Бірінші жолда біз SDK импорттаймыз. Python SDK - Boto3, сондықтан импорттау boto3 осында болады. Әрі қарай, екінші және үшінші жолдар - айнымалылар туралы декларация, атап айтқанда аймақ және біздің даналарымыз туралы ақпарат. Бірінші жағдайда бұл мәтіндік деректер түрі, ал екінші жағдайда бұл жолдар массиві. Осылайша, егер сіз бірнеше дананы тоқтатқыңыз келсе, сіз осы массивке қосымша мәндерді бере аласыз. Әрі қарай, төртінші жолда біз EC2 қызметі үшін Boto3 клиентін бастаймыз, яғни біз Boto3.client деп атаймыз, бізге қандай қызмет қажет екенін көрсетіңіз, біздің жағдайда EC2 және қосымша аймақтың атауын көрсетіңіз. Мұның бәрін EC2 айнымалысына тағайындаймыз. Әрі қарай - AWS ішіндегі Python кодының стандартты құрылысы, атап айтқанда lambda_handler функциясы. Бұл оқиға мен контексті енгізу ретінде қабылдайды. Бұл жүйелік түрде толтырылған екі айнымалы, яғни бір нәрсе біздің ламбда функциясын шақырғанда, кейбір деректер тасымалданған кезде, бұл деректер оқиға айнымалысында болады. Сондай-ақ, осы кодтың орындалуы туралы кейбір мета ақпараты бар, барлық осы ақпарат контекст айнымалысында сақталады. Бұл функцияның ішінде жеті жолда біз ec2.stop_instances клиентін пайдаланып жатырмыз, біз бұл әрекетті шақырамыз. AWS-те кейбір нәрселерді жасауға болатын үш әдіс бар екенін есте сақтаймыз. Біріншісі - консольді өзі пайдалану, яғни. біз консольден өтіп, оны өзіміз тоқтата аламыз. Екіншіден, біз командалық жол болып табылатын AWS CLI қолдана аламыз, онда біз даналарды тоқтату пәрменін шақырамыз және біздің даналарымызды тоқтату үшін осы пәрменді қолданамыз. Үшінші нұсқа - SDK пайдалану, бұлттағы кейбір әрекеттерді жасайтын жоғары деңгейлі кодты жазу. Біздің жағдайда біз даналарды тоқтатамыз. Ішінде қосымша параметрлер жақшада өтеді, біздің жағдайда, InstanceIds параметрі, ол біздің даналар айнымалысына тең, яғни. InstanceID тізімін енгізу ретінде өткіземіз. Әрі қарай, сегізінші жолда біз өз даналарымыз туралы ақпаратпен хабарлама шығарамыз.
Бұл Lambda коды қарапайым мысал болды, және сіз болашақта жазамын бәрі осы мысал плюс немесе минус сияқты көрінеді. Сіз қолданатын ең көп таралған SDK - Python бағдарламалау тілін қолданған кезде Boto3, және бұл қиын емес. Сонымен қатар, біз жай ғана жеке серверді орнату немесе басқа ештеңе теңшеу қажетінсіз бұлтта іске болады код дайындады болатынмын. Біз тек біздің кодты жүктеп алдық, оны орналастырдық, сақтадық, енді бұл код әр минут сайын жұмыс істейді.
Енді “Монитор” қойындысына барайық, онда сіз осы ламбданың іске қосылуына қатысты қандай ақпарат бар екенін көре аласыз. Біз тек үш графикке назар аударамыз. Біріншісі - шақыру, біздің ламбда функциясы уақыт өте келе жұмыс істейді. Сіз мұнда кішкене сызықты көре аласыз, яғни біздің ламбда екі рет іске қосылды. Әрі қарай, екінші Ұзақтық графигі біздің функциямыздың қанша миллисекундта жұмыс істегенін көрсетеді, біздің жағдайда 18 миллисекунд. Үшінші график Қате санау және табысты ставка болып табылады, ол табысты және сәтсіз ламбда кодын орындау пайызын көрсетеді. Біздің жағдайда қызыл индикатор 0 деңгейінде, яғни біздің барлық ұшырылымдарымыз сәтті өтті, ал жасыл индикатор 1 деңгейде, яғни 100%. Бұл керемет! Енді біздің даналар парағына оралайық. Біздің код бірнеше рет іске қосылғанын тексердік, енді біздің даналар тізімін жаңартуға тырысамыз. Жаңарту белгішесін басу арқылы сіз instance1 данасының күйі Жүгіруден Тоқтатылған күйіне өзгергенін көресіз, яғни біздің код біздің дананы іске қосып, сәтті тоқтатты.
Бұл біздің зертханалық жұмысымызды аяқтайды. Естеріңізге сала кетейік, біз барлық жүйелерден дұрыс шығуымыз керек. Біріншіден, біз жасауымыз керек - AWS басқару консолінен шығу. Мұны істеу үшін жоғарғы оң жақтағы пайдаланушы атын нұқыңыз және ашылмалы мәзірдегі “Шығу” түймесін басыңыз. Әрі қарай, зертханалық бетте біздің AWS есептік жазбасын жою үшін зертханалық жұмысты тоқтату керек. Мұны істеу үшін End Lab түймесін басып, зертханалық жұмысты аяқтап, “Сіз бұл хабарлама жолағын қазір жабуыңыз мүмкін” деген хабарды күтетінімізді растаңыз. Осыдан кейін сіз барлық терезелерді жауып, осы жүйелерден сәтті кіре аласыз.
Бұл біздің зертханалық шолу сессиясын аяқтайды. Сіз жаңа нәрсені үйрендіңіз және AWS Lambda туралы жақсы түсіндіңіз деп үміттенемін. Рахмет, біз сізді келесі іс-шараларда көреміз!