WEBVTT

00:00:00.000 --> 00:00:05.069
Қайырлы күн, құрметті студенттер!
Зертханалық жұмысты талдаудың келесі сессиясында

00:00:05.093 --> 00:00:09.786
кездесуге қуаныштымын. Бүгінгі зертханалық 

жұмыстың тақырыбы – AWS Lambda.

00:00:09.810 --> 00:00:19.000
Ендеше, бастайық. Жұмысты бастау үшін біз
AWS Management Console-ге жетуіміз керек.

00:00:19.000 --> 00:00:26.000
Ол үшін зертханалық жұмыстың негізгі
парақшасында AWS батырмасын басыңыз.

00:00:26.000 --> 00:00:31.000
Осыдан кейін біз AWS Management
Console-дің негізгі парақшасына өтеміз.

00:00:31.000 --> 00:00:40.000
Сонымен қатар, жоғарғы оң жақта "уақытша
пайдаланушы" деп тұрғанын көруге болады.

00:00:40.000 --> 00:00:46.073
Енді біз сервистерді іздеу
жолағына Lambda деп енгіземіз және

00:00:46.097 --> 00:00:53.488
шығарылымда бізге керек сервисті көресіз.
AWS Lambda негізгі парақшасына

00:00:53.512 --> 00:00:59.942
өткеннен кейін қате туралы
хабарлама шығады, бірақ біз оған назар

00:00:59.966 --> 00:01:07.000
аудармаймыз, өйткені нақты AWS
аккаунтында мұндай хабарлама болмайды.

00:01:07.000 --> 00:01:12.624
Әрі қарай, сол жақ навигациялық
мәзірден "Functions" қойындысын

00:01:12.648 --> 00:01:19.000
таңдап, негізгі парақшасында "Create
Function" батырмасын басу керек.

00:01:19.000 --> 00:01:29.000
Зертханалық жұмыстың аясында жаңа функция жасаймыз,
сондықтан Author from Scratch опциясын таңдаймыз.

00:01:29.000 --> 00:01:34.988
Төменде функцияның атын енгізіңіз,
ол myStopinator деп аталады.

00:01:35.012 --> 00:01:41.000
Runtime ретінде, яғни орындау ортасы,
Python 3.8 нұсқасын таңдаңыз.

00:01:41.000 --> 00:01:49.506
Төменде осы функция үшін
рөл параметрлері бар, біз бар

00:01:49.530 --> 00:01:59.000
рөлді қолданамыз, яғни тізімнен
myStopinatorRole таңдаңыз.

00:01:59.000 --> 00:02:10.000
Бұл рөл біз үшін арнайы жасалған, ол Lambda үшін қол
жетімді, оның EC2 инстанстарын тоқтатуға құқығы бар.

00:02:10.000 --> 00:02:20.000
Барлық қажетті параметрлерді енгізгеннен кейін біз
төменгі оң жағындағы Create Function батырмасының

00:02:20.000 --> 00:02:26.488
басамыз. Бізді осы функциямыз бар парақшаға
бағыттайды және функция сәтті жасалғандығы

00:02:26.512 --> 00:02:33.000
туралы тиісті хабарлама пайда болады.
Біздің келесі қадамымыз – триггер-ивент жасау.

00:02:33.000 --> 00:02:42.000
"Add Trigger" батырмасын басу арқылы біз
дереккөз таңдайтын парақшаға бағытталамыз.

00:02:42.000 --> 00:02:48.259
Дереккөз, яғни триггер Event Rule болады,
сондықтан біз event деп енгізе бастаймыз

00:02:48.283 --> 00:02:54.000
және ашылмалы мәзірде EventBridge
(CloudWatch Events) опциясын таңдаймыз.

00:02:54.000 --> 00:03:00.000
Бізде бар ивентті таңдау немесе
жаңасын жасау мүмкіндігі пайда болады.

00:03:00.000 --> 00:03:08.000
Жаңа ивент жасау (Create a new rule)
опциясын таңдап, оны "everyMinute" деп атайық.

00:03:08.000 --> 00:03:14.000
Түрі ретінде біз Schedule Expression, яғни кесте
бойынша қайталанатын оқиғаларды таңдаймыз.

00:03:14.000 --> 00:03:24.000
Біздің жағдайда бұл rate (1 minute) болады. Бұл ивент
біздің лямбданы минут сайын қоздыруы үшін қажет.

00:03:24.000 --> 00:03:30.000
Барлық параметрлерді енгізгеннен кейін
төменгі оң жақтағы Add батырмасын басу керек.

00:03:30.000 --> 00:03:35.647
Оны басқаннан кейін сіз біздің
функциямыз бар парақшаға қайта

00:03:35.671 --> 00:03:42.733
бағытталасыз, онда біздің триггер сәтті
жасалғандығы және біздің парақшада

00:03:42.757 --> 00:03:50.059
лямбда-функциясын іске қосатын бір
триггер, EventBridge триггері бар екендігі

00:03:50.083 --> 00:03:57.000
туралы хабарлама болады. Енді біздің 
функциямыздың кодын өзгерту керек.

00:03:57.000 --> 00:04:06.000
Ол үшін төменге айналдырып, "Code"
қойындысында арнайы код редакторын ашамыз.

00:04:06.000 --> 00:04:14.000
Мұнда біз lambda_function.py таңдаймыз
және осы файлдың кодын ашамыз.

00:04:14.000 --> 00:04:25.000
Сол кодтың ішіндегі барлық нәрсені тазалап,
зертханалық жұмыста берілген код үлгісін енгізу

00:04:25.000 --> 00:04:33.000
керек. Мұнда кодқа кейбір өзгерістер енгізу
қажет болады, атап айтқанда аймақты ауыстыру.

00:04:33.000 --> 00:04:40.000
Біздің жағдайда, бұл North Virginia, сондықтан
біз "us-east-1" жүйелік атауын енгіземіз.

00:04:40.000 --> 00:04:45.000
Әрі қарай, EC2 инстанстың
идентификаторын (ID) енгізу керек.

00:04:45.000 --> 00:04:56.000
Осы сервиске өтеміз, одан кейін сол жақ
навигация мәзірінде Instances қойындысына өтеміз.

00:04:56.000 --> 00:04:59.800
Бұл ретте сіз дұрыс аймақта,
атап айтқанда North Virginia

00:04:59.824 --> 00:05:03.283
аймағында екеніңізге көз 
жеткізуіңіз керек. Осыдан

00:05:03.307 --> 00:05:07.282
кейін сіз инстанстардың
тізімінде бір немесе екі инстансты

00:05:07.306 --> 00:05:11.000
көресіз, бізге instance1
деп аталатын инстанс қажет.

00:05:11.000 --> 00:05:20.352
Оның статусына назар аударыңыз, ол running 
күйінде болуы керек. Әрі қарай, біз осы

00:05:20.376 --> 00:05:31.000
инстансты таңдаймыз, қосымша ақпаратта Details 
қойындысына өтіп, Instance ID-ді көшіреміз.

00:05:31.000 --> 00:05:37.488
Оны көшіргеннен кейін
лямбда-функциясына ораламыз және үшінші

00:05:37.512 --> 00:05:44.000
жолда алдыңғы парақшадан
көшірген Instance ID мәнін енгіземіз.

00:05:44.000 --> 00:05:50.617
Осыдан кейін кодты сақтау керек.
Мұны Ctrl+S батырмалар тіркесімін басу арқылы

00:05:50.641 --> 00:05:57.000
немесе File мәзір элементінен Save
опциясын таңдау арқылы жасауға болады.

00:05:57.000 --> 00:06:05.988
Лямбда-функцияның жаңа коды жұмыс істей бастауы
үшін оны Deploy батырмасын басу арқылы орнату керек

00:06:06.012 --> 00:06:15.000
және бірнеше секундтан кейін функцияның коды
сәтті жаңартылғандығы туралы хабарлама пайда болады.

00:06:18.000 --> 00:06:26.000
Сақталған код бойынша қысқаша шолу жасап өтейік.
Бірінші жолда біз SDK импорттаймыз.

00:06:26.000 --> 00:06:31.000
Python үшін SDK – бұл Boto3,
сондықтан мұнда import boto3 болады.

00:06:31.000 --> 00:06:34.898
Әрі қарай, екінші және үшінші
жолдар айнымалыларды жариялау

00:06:34.922 --> 00:06:40.157
болып табылады, атап айтқанда аймақ және 
біздің инстанстарымыз туралы ақпарат.

00:06:40.181 --> 00:06:47.000
Бірінші жағдайда – бұл мәтіндік деректер түрі, ал 
екінші жағдайда – strings-тардан тұратын массив.

00:06:47.000 --> 00:06:52.661
Осылайша, егер бір емес,
бірнеше инстанстарды тоқтату

00:06:52.685 --> 00:06:59.000
қажет болса, осы массивте
қосымша мәндерді беруге болады.

00:06:59.000 --> 00:07:04.406
Әрі қарай, төртінші жолда біз EC2
сервис үшін Boto3 клиентін бастаймыз,

00:07:04.430 --> 00:07:09.604
яғни, біз Boto3.client-ті іске
косамыз, қандай сервис қажет екенін

00:07:09.628 --> 00:07:14.802
көрсетеміз, біздің жағдайда бұл
EC2, және қосымша біздің аймақтың

00:07:14.826 --> 00:07:20.000
атауын көрсетеміз. Мұның бәрін біз 
EC2 айнымалысына тағайындаймыз.

00:07:20.000 --> 00:07:32.000
Келесі – AWS ішіндегі Python кодының стандартты
құрылысы, атап айтқанда lambda_handler функциясы.

00:07:32.000 --> 00:07:40.302
Кіру үшін ол event пен context қабылдайды. Бұл
жүйелі түрде толтырылатын екі айнымалы, яғни 

00:07:40.326 --> 00:07:44.759
біздің лямбда-функциясы шақырылған
кезде, кейбір деректерді

00:07:44.783 --> 00:07:50.000
тасымалдау кезінде бұл деректер
event айнымалысында болады.

00:07:50.000 --> 00:07:55.304
Сондай-ақ, осы кодтың орындалуы
туралы кейбір мета-ақпарат

00:07:55.328 --> 00:08:00.632
бар, бұл ақпараттың барлығы context
айнымалысында сақталады. Бұл функцияның

00:08:00.656 --> 00:08:11.000
ішінде жетінші жолда біз ec2.stop_instances
клиентін қолданамыз, біз бұл action-ді шақырамыз.

00:08:11.000 --> 00:08:20.000
Сондай ақ, AWS-те белгілі бір әрекеттерді орындау
үшін үш нұсқаны қолдануға болатынын есімізде бар.

00:08:20.000 --> 00:08:25.000
Біріншісі – консольдің өзін пайдалану, яғни
біз консоль арқылы өзіміз тоқтата аламыз.

00:08:25.000 --> 00:08:30.988
Екіншіден, біз AWS CLI-ді қолдана
аламыз, яғни, командалық жол, онда біз Stop

00:08:31.012 --> 00:08:37.000
Instances командасын шақырамыз және
осы командамен біз инстанстарды тоқтатамыз.

00:08:37.000 --> 00:08:42.988
Үшінші нұсқа – SDK пайдалану, бұл
бұлтта белгілі бір әрекеттерді жасайтын

00:08:43.012 --> 00:08:49.000
жоғары деңгейлі кодты жазу.
Біздің жағдайда біз инстанстарды тоқтатамыз.

00:08:49.000 --> 00:08:56.257
Ішінде жақша ішінде қосымша
параметрлер жіберіледі, біздің жағдайда

00:08:56.281 --> 00:09:02.988
біздің instances айнымалысына
тең instanceID параметрі, яғни

00:09:03.012 --> 00:09:09.666
біз instanceID тізімін кіріске 
жібереміз. Әрі қарай, сегізінші

00:09:09.690 --> 00:09:17.000
жолда біз инстанстар туралы
ақпаратты хабарлама ретінде шығарамыз.

00:09:17.000 --> 00:09:31.000
Бұл Лямбда кодының ең қарапайым мысалы және
сіз болашақта жазатын кез келген код ұқсас болады.

00:09:31.000 --> 00:09:36.559
Сіз SDK-ді жиі қолданатын
боласыз, бұл Boto3, Python

00:09:36.583 --> 00:09:44.000
бағдарламалау тілін қолданған
жағдайда, негізі бұл онша қиын емес.

00:09:44.000 --> 00:09:52.124
Сонымен қатар, біз бұлтта жұмыс
істейтін кодты дайындадық және сізге

00:09:52.148 --> 00:10:01.000
жеке серверді орнатудың немесе
қосымша ештеңе орнатудың қажеті болмады.

00:10:01.000 --> 00:10:09.000
Біз тек кодты жүктеп алдық, оны орнаттық,
сақтадық, енді бұл код минут сайын іске қосылады.

00:10:09.000 --> 00:10:16.561
Енді "Monitor" қойындысына өтіңіз,
онда сіз осы лямбданың іске қосылуына

00:10:16.585 --> 00:10:25.000
қатысты қандай ақпарат бар екенін көре аласыз.
Біз тек үш графикке тоқталамыз.

00:10:25.000 --> 00:10:30.000
Біріншісі – Invocations, уақыт бойынша
біздің лямбда-функцияның іске қосылу саны.

00:10:30.000 --> 00:10:35.000
Мұнда кішкене сызық көрініп тұр, бұл біздің
лямбданың екі рет іске қосылғанын көрсетеді.

00:10:35.000 --> 00:10:40.812
Әрі қарай, екінші Duration графигі
біздің функциямыздың қанша миллисекунд

00:10:40.836 --> 00:10:46.000
іске қосылғанын көрсетеді, біздің
жағдайда бұл 18 миллисекунд.

00:10:46.000 --> 00:10:52.037
Үшінші график – Error count and
success rate, ол лямбда-кодының

00:10:52.061 --> 00:10:58.000
сәтті және сәтсіз орындалуының
пайыздық қатынасын көрсетеді.

00:10:58.000 --> 00:11:04.130
Біздің жағдайда қызыл индикатор
0-де, яғни біздің барлық іске

00:11:04.154 --> 00:11:11.000
қосуларымыз сәтті өтті, ал жасыл
1 деңгейінде, яғни 100%. Керемет!

00:11:11.000 --> 00:11:16.988
Енді біздің инстанстарымыз бар парақшаға 
оралайық. Біз кодтың бірнеше рет

00:11:17.012 --> 00:11:23.000
іске қосылғанына көз жеткіздік, енді
инстанстар тізімін жаңартып көрейік.

00:11:23.000 --> 00:11:30.342
Жаңарту батырмасын басу арқылы сіз instance1-дің 
инстанс күйі Running-тен Stopped-ке

00:11:30.366 --> 00:11:37.000
өзгергенін көресіз, яғни біздің код
жұмыс істеп, инстансты сәтті тоқтатты.

00:11:37.000 --> 00:11:48.000
Осымен біздің зертханалық жұмысымыз аяқталады. 
Барлық жүйелерден дұрыс шығу керек екенін еске 

00:11:48.000 --> 00:11:53.000
саламын. Ең алдымен, AWS Management
Console-дан шығуымыз керек.

00:11:53.000 --> 00:12:04.000
Ол үшін жоғарғы оң жақта пайдаланушы атын және
ашылмалы мәзірде "Sign Out" батырмасын басыңыз.

00:12:04.000 --> 00:12:09.231
Әрі қарай, зертханалық
жұмыс парақшасында біздің AWS

00:12:09.255 --> 00:12:15.000
аккаунт жойылуы үшін
зертханалық жұмысты тоқтату керек.

00:12:15.000 --> 00:12:20.178
Ол үшін End Lab батырмасын басып,
зертханалық жұмысты аяқтағанымызды

00:12:20.202 --> 00:12:26.000
растаймыз және "You may close this
message box now" хабарламасын күтеміз.

00:12:26.000 --> 00:12:37.000
Осыдан кейін сіз барлық терезелерді
жауып, жүйелерден сәтті шыға аласыз.

00:12:37.000 --> 00:12:41.000
Осымен біз зертханалық жұмысты
талдау сессиясын аяқтаймыз.

00:12:41.000 --> 00:12:49.000
Сіз жаңа нәрсе білдіңіз және AWS Lambda сервисі
туралы толық түсінік алдыңыз деп үміттенемін.

00:12:49.000 --> 00:13:12.000
Рахмет, келесі
белсенділіктерімізде кездескенше!