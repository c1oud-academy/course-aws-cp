 Добрый день, уважаемые студенты! Я рад вас видеть на очередной сессии разбора лабораторной работы. Тема лабораторной работы AWS Lambda. Итак, давайте начнем. С самого начала нам необходимо добраться до AWS Management Console. Для этого на основной странице лабораторной работы необходимо нажать на кнопку AWS. Как только вы на нее нажмете, вы попадете на основную страницу AWS Management Console. Вы это можете увидеть также, что вверху справа отображается временный пользователь. Теперь нам необходимо в строке поиска сервисов начать вводить Lambda. В выдаче вы увидите необходимый нам сервис. Давайте на нее перейдем. Как только вы перейдете на основную страницу AWS Lambda, вы можете увидеть следующее сообщение с ошибкой. Вы можете игнорировать это сообщение, потому как на реальном AWS аккаунте подобного сообщения не будет. Вам необходимо в левом навигационном меню попасть на пункт Functions и на основной странице нажать на кнопку Create Function. В рамках лабораторной работы мы создаем новую функцию, поэтому мы выбираем опцию After From Scratch. Чуть ниже необходимо ввести название функции. Это будет My Stop Inator. И как runtime, то есть среда исполнения, выбираем Python версии 3.8. Если вы прокрутите страницу чуть ниже, вы также увидите настройки для роли для этой функции. Нам необходимо выбрать, что мы будем использовать существующую роль, и в списке выберем My Stop Inator Роль. Это специальная созданная для нас роль. Она доступна для Lambda, и у нее есть права для остановки C2-инстенсов. Как только мы введем все необходимые настройки, давайте нажмем внизу справа на кнопку Create Function. Нас перенаправит на страницу с нашей функцией. Вы также увидите соответствующее сообщение, что функция была успешно создана. Теперь следующим шагом нам необходимо создать триггер-ивент. Для этого необходимо нажать на кнопку Add Trigger. Как только вы ее нажмете, вас направят на страницу, где нам необходимо выбрать источник. Источником, то есть триггером, будет выступать Event Rule. Поэтому начнем вводить ивент, и в выпадающем меню выберем опцию Event Preach CloudWatch Events. Как только мы ее выберем, у нас есть возможность выбрать либо существующий ивент, либо создать новый. Давайте выберем опцию создать новый ивент, дадим ему имя every minute. Как тип выберем Schedule Expression, то есть это повторяющиеся по расписанию события. И как Schedule Expression выберем Rate в скобках 1 минут. Это нужно для того, чтобы этот ивент триггерил нашу лямбу каждую минуту. Как только введем все настройки внизу справа, необходимо нажать на кнопку Add. Как только вы на нее нажмете, вас перенаправят обратно на страницу с нашей функцией. Вы увидите сообщение о том, что триггер был успешно создан. А также вы увидите на странице, что у нас есть один существующий триггер, Event Preach, который триггерит нашу лямбда функцию. Теперь нам необходимо изменить код нашей функции. Для этого прокрутим чуть ниже и во вкладке код откроем специальный редактор кода. Здесь нам необходимо выбрать lambda function.py и откроется код этого файла. Необходимо очистить все то, что там есть и вставить шаблон кода с нашей лабораторной работы. Здесь необходимо будет внести некоторые изменения в код, а именно заменить регион. В нашем случае это Норр-Свержение, поэтому мы вставляем системное название US East One. Далее нам необходимо вставить ID EC2 Instance. Для этого необходимо перейти на этот сервис и в левом навигационном меню перейти на вкладку Instances. Здесь вам следует удостовериться, что вы находитесь в нужном регионе, а именно Норр-Свержение. Как только вы в этом убедились, вы увидите в списке инстанцев один либо два инстанца. И нам нужен тот, который называется instance1. Обратите внимание на его состояние, он должен быть в состоянии running. Далее нам необходимо выбрать этот instance и в дополнительные информации об этом инстанце перейти во вкладку details. Там вы можете увидеть и скопировать instance ID. Давайте это сделаем и вернемся обратно к нашей лямбда функции. На третьей строчке необходимо вставить значение ID instance, который мы скопировали на предыдущей странице. Как только вы это сделаете, нам необходимо сохранить код. Для этого вы можете нажать на словосочетание Ctrl S, либо нажать на пункт меню File и там выбрать опцию Save. Для того, чтобы новый код лямбда функции начал работать, необходимо ее задеплоить. Для этого нажмите на кнопку deploy. Через несколько секунд вы увидите сообщение о том, что код функции был успешно обновлен. Давайте пройдемся вкратце по тому коду, который мы сохранили. В самом начале первая строчка, мы импортируем наш SDK. SDK для Python это Boto3, поэтому import Boto3. Далее вторая и третья строчка это объявление переменных, а именно регион и информацию о наших инстенсах. В первом случае это текстовый тип данных, а во втором случае это массив из стрингов. Таким образом, если вы хотите останавливать не только одну, а несколько инстенсов, то вы можете передать дополнительные значения в этом массиве. Далее четвертая строчка, мы иницируем клиент Boto3 для сервиса EC2. Таким образом, мы вызываем Boto3.client, мы указываем какой сервис нам нужен в нашем случае EC2 и дополнительно указываем название нашего региона. Это все мы присваиваем переменной EC2. Далее идет стандартная конструкция для Python кода внутри AWS, а именно мы говорим, что у нас есть LambdaHandler функция. На вход она принимает event и context. Это две переменные, которые заполняются системно. То есть в момент, когда что-то вызывает нашу лямбда функцию, то при передаче некоторых данных эти данные будут находиться в переменной event. Также есть некоторая мета информация по исполнению этого кода, вся эта информация хранится в переменной context. Внутри этой функции мы на седьмой строчке используем наш клиент EC2.stopInstances, мы вызываем этот action. Мы с вами помним, мы можем использовать для совершения некоторых действий в AWS три варианта. Первый это использовать саму консоль, то есть можем через консоль пойти и самостоятельно остановить. Далее мы можем воспользоваться awcli, то есть командная строка, в котором вызываем команду stopInstances и этой одной командой мы останавливаем наши инстанции. И третий вариант это использование SDK, это написание кода более высокого уровня, которое производит некоторые действия в облаке. В нашем случае мы останавливаем инстанции. Внутри скобках передаются дополнительные параметры, в нашем случае параметр instanceIDs, которое равно нашей переменной instances. То есть мы передаем на вход список instanceID. Далее на восьмой строчке мы делаем вывод сообщения с информацией о наших инстанциях. Окей, это самый простейший пример кода лямды. Все то, что вы будете писать в будущем, оно плюс-минус будет похоже. Наиболее часто будете использовать SDK, это Boto3, в случае использования языка программирования Python. И вы видите, что это не так сложно делается. Более того, мы сейчас подготовили код, который будет запускаться в облаке. При этом вам не было необходимости настраивать отдельный сервер, нет необходимости настраивать что-либо дополнительно. Мы лишь загрузили наш код, его задеплоили, сохранили и теперь этот код будет запускаться каждую минуту. Давайте теперь перейдем на вкладку Монитор, для того чтобы посмотреть, что мы видим, какую информацию можем получить, касательно запусков этой лямды. Мы остановимся только на трех графиках. Первый это Invocations, это количество запусков нашей лямда функции во времени. Вы видите небольшую линию, это говорит о том, что наша лямда запустилась два раза. Далее во втором графике Duration мы видим, какое количество миллисекунд запускалась наша функция. В нашем случае это 18 миллисекунд. Ну и третий график это ErrorCount and SuccessRate, это процентное соотношение, какое количество успешных и неуспешных совершений исполнения лямда кода было. В нашем случае красное находится на уровне ноль, то есть все наши запуски были успешные и видите, что зеленые на уровне единички, то есть 100%. Отлично. Давайте теперь вернемся на страницу с нашими инстанциями. Мы уже увидели, что наш код несколько раз запустился. Теперь попробуем обновить список наших инстанций. Как только вы нажмете на иконку обновить, вы увидите, что состояние инстанца Instance1 изменилось с ранним на 100%. То есть отработал наш код и успешно остановил наш инстанс. Отлично. На этом мы завершаем нашу лабораторную работу. Я вам напоминаю, что нам необходимо правильно выйти со всех систем. В первую очередь нам необходимо выйти с AWS Management консоли. Для этого сверху справа необходимо нажать на название вашего пользователя и в выпадающем меню нажать на кнопку Sign Out. Далее уже на странице с лабораторной работой необходимо остановить эту лабораторную работу, чтобы наш AWS аккаунт был удален. Для этого необходимо нажать на кнопку End Lab, подтвердить, что мы завершаем лабораторную работу и дождаться, пока не выйдет сообщение You may close this message box now. Как только вы это увидите, вы можете закрывать все окна и успешно выходить с этих систем. На этом мы завершаем сессию разбора лабораторной работы. Я надеюсь, вы узнали что-то новое и получили более полное представление о сервисе AWS Lambda. Спасибо, увидимся с вами на следующих наших активностях.
