WEBVTT

00:00:00.000 --> 00:00:02.600
Добрый день, уважаемые студенты!

00:00:02.600 --> 00:00:05.760
Я рад вас всех видеть на очередной сессии вопросов

00:00:05.760 --> 00:00:06.760
и ответов.

00:00:06.760 --> 00:00:09.960
Мы получили от вас очередной набор вопросов, которые

00:00:09.960 --> 00:00:11.700
вас интересуют.

00:00:11.700 --> 00:00:14.520
На этой сессии мы каждый вопрос детально рассмотрим

00:00:14.520 --> 00:00:15.520
и разберем.

00:00:15.520 --> 00:00:17.640
Итак, давайте начнем.

00:00:17.640 --> 00:00:24.040
Вопрос, что означает термин «инфраструктура виртуализации»?

00:00:24.040 --> 00:00:25.040
Отвечаю.

00:00:25.040 --> 00:00:30.440
Начнем с того, что как такого термина «инфраструктура

00:00:30.440 --> 00:00:32.360
виртуализации» не существует.

00:00:32.360 --> 00:00:35.920
Это два отдельно стоящих термина сами по себе.

00:00:35.920 --> 00:00:39.040
Что такое инфраструктура мы с вами уже разобрали.

00:00:39.040 --> 00:00:42.120
Что такое виртуализация я сейчас вам объясню.

00:00:42.120 --> 00:00:44.880
Для того, чтобы объяснить, что такое виртуализация,

00:00:44.880 --> 00:00:48.640
давайте вспомним, что такое Data Center AWS.

00:00:48.640 --> 00:00:53.200
Как мы с вами помним, Data Center AWS – это достаточно большое

00:00:53.200 --> 00:00:58.480
помещение, в котором расположены серверы.

00:00:58.480 --> 00:01:03.560
Каждый сервер расположен следующим образом в виде

00:01:03.560 --> 00:01:04.560
шкафа.

00:01:04.560 --> 00:01:09.720
На каждой полке этого шкафа находится каждый отдельно

00:01:09.720 --> 00:01:10.720
взятый сервер.

00:01:10.720 --> 00:01:18.180
AWS стремится в один шкаф поместить наибольшее количество

00:01:18.180 --> 00:01:21.200
вычислительных мощностей для того, чтобы оптимально

00:01:21.200 --> 00:01:24.680
использовать физическое пространство.

00:01:24.680 --> 00:01:28.320
Таким образом, каждый сервер внутри этого шкафа серверов

00:01:28.320 --> 00:01:33.920
в десятки раз мощнее наших самых продвинутых персональных

00:01:33.920 --> 00:01:36.640
компьютеров и ноутбуков.

00:01:36.640 --> 00:01:39.400
Теперь двигаемся дальше.

00:01:39.400 --> 00:01:43.240
Мы с вами помним, что внутри AWS у вас есть возможность

00:01:43.240 --> 00:01:46.960
выбрать несколько разных типов инстанцев.

00:01:46.960 --> 00:01:52.040
То есть вы можете выбрать самый слабый с одним ядром

00:01:52.040 --> 00:01:59.680
процессора, с двумя гигабайтами оперативной памяти и дальше

00:01:59.680 --> 00:02:03.880
мощнее и мощнее можно выбрать очень мощный сервер, который

00:02:03.880 --> 00:02:08.840
несколько десятков процессорных мощностей, а также несколько

00:02:08.840 --> 00:02:12.680
сотен гигабайт в оперативной памяти.

00:02:12.680 --> 00:02:16.360
Теперь для того, чтобы предоставить возможность вот так делить

00:02:16.360 --> 00:02:20.480
и выбирать что большой, что маленький сервер, была

00:02:20.480 --> 00:02:22.440
разработана технология виртуализации.

00:02:22.440 --> 00:02:23.960
Что она означает?

00:02:23.960 --> 00:02:27.480
Она означает простыми словами, есть определенный физический

00:02:27.480 --> 00:02:30.640
сервер со своими, скажем так, мощностями.

00:02:30.640 --> 00:02:34.080
Это процессорное количество процессоров, а также количество

00:02:34.080 --> 00:02:35.520
оперативной памяти.

00:02:35.520 --> 00:02:40.440
Виртуализация позволяет нам разделить вот эти мощности

00:02:40.440 --> 00:02:46.920
одного сервера и виртуально получить отдельных независимых

00:02:46.920 --> 00:02:50.760
друг от друга серверов меньшей мощности.

00:02:50.760 --> 00:02:55.440
Таким образом мы можем, например, сервер, в котором

00:02:55.440 --> 00:02:59.240
два процессора и четыре оперативной памяти, через

00:02:59.240 --> 00:03:02.160
технологию виртуализации поделить на два.

00:03:02.160 --> 00:03:04.920
Таким образом получить два отдельных, отдельно

00:03:04.920 --> 00:03:08.160
работающих независимых друг от друга сервера по

00:03:08.160 --> 00:03:11.640
одному процессору и два гигабайта оперативной

00:03:11.640 --> 00:03:12.640
памяти.

00:03:12.640 --> 00:03:19.280
Теперь, если мы возвращаемся к инфраструктуре виртуализации,

00:03:19.280 --> 00:03:23.800
в этом случае подразумевается все то железо, программное

00:03:23.800 --> 00:03:28.000
обеспечение и другое оборудование, будь то физическое либо

00:03:28.000 --> 00:03:31.280
виртуальное, которое помогает поддерживать вот этот процесс

00:03:31.280 --> 00:03:35.760
виртуализации физических серверов AWS, подразделять,

00:03:35.760 --> 00:03:39.400
делить на несколько маленьких частей и нам как клиентам

00:03:39.400 --> 00:03:43.400
AWS предоставлять возможность выбирать от самого маленького

00:03:43.400 --> 00:03:46.960
сервера отдельно стоящего до супермощного.

00:03:46.960 --> 00:03:53.640
Вопрос, можете ли объяснить суть implicit allow implicit

00:03:53.640 --> 00:03:56.120
deny на конкретном примере?

00:03:56.120 --> 00:03:57.120
Отвечаю.

00:03:57.120 --> 00:04:02.320
Следует понимать, что такое implicit.

00:04:02.320 --> 00:04:07.600
Implicit это что-то, что есть по умолчанию изначально.

00:04:07.600 --> 00:04:10.760
Таким образом, когда мы говорим implicit allow, это

00:04:10.760 --> 00:04:12.800
значит по умолчанию разрешено.

00:04:12.800 --> 00:04:16.620
Когда мы говорим implicit deny, это значит по умолчанию

00:04:16.620 --> 00:04:17.620
запрещено.

00:04:17.620 --> 00:04:24.800
Если мы говорим про AWS, то все то, что связано с доступами

00:04:24.800 --> 00:04:27.560
изначально по умолчанию запрещено.

00:04:27.560 --> 00:04:31.960
Таким образом, есть только implicit deny.

00:04:31.960 --> 00:04:35.720
Implicit allow в рамках AWS такого не существует.

00:04:35.720 --> 00:04:40.080
Таким образом, если приводить пример, вы создаете нового

00:04:40.080 --> 00:04:43.860
пользователя и у этого пользователя нет никаких

00:04:43.860 --> 00:04:48.760
прописанных policy, будь то inline прописанное для конкретного

00:04:48.760 --> 00:04:55.040
пользователя, будь то привязанное к нему отдельно стоящее

00:04:55.040 --> 00:04:56.040
policy.

00:04:56.040 --> 00:04:59.520
Если таковых не имеется, то у этого пользователя

00:04:59.520 --> 00:05:03.880
по умолчанию никаких доступов ни на какой сервис не будет.

00:05:03.880 --> 00:05:10.760
Так как у нас внутри AWS implicit deny.

00:05:10.760 --> 00:05:15.320
Вопрос можете ли объяснить суть explicit allow и explicit

00:05:15.320 --> 00:05:17.800
deny на конкретном примере?

00:05:17.800 --> 00:05:19.080
Отвечаю.

00:05:19.080 --> 00:05:24.080
Когда мы говорим про explicit allow и explicit deny, подразумевается

00:05:24.080 --> 00:05:26.240
что-то явно прописанное.

00:05:26.240 --> 00:05:29.800
То есть мы явно либо разрешаем пользователю какое-то

00:05:29.800 --> 00:05:34.960
действие на какие-то ресурсы, либо явно запрещаем.

00:05:34.960 --> 00:05:37.120
То есть explicit deny.

00:05:37.120 --> 00:05:39.440
Есть третий вариант implicit deny.

00:05:39.440 --> 00:05:41.800
Это что-то, что по умолчанию.

00:05:41.800 --> 00:05:45.560
По умолчанию, если явно ничего не прописано, то

00:05:45.560 --> 00:05:50.880
в этом случае доступ запрещается.

00:05:50.880 --> 00:05:56.920
Теперь давайте на примере разберем, какие шаги предпринимает

00:05:56.920 --> 00:06:01.520
AWS для того, чтобы понять разрешен или запрещен

00:06:01.520 --> 00:06:08.160
доступ к конкретному identity на определенную операцию

00:06:08.160 --> 00:06:12.400
и на определенные AWS ресурсы.

00:06:12.400 --> 00:06:20.520
Представим, что мой пользователь, юзер Ель Жан, хочет открыть

00:06:20.520 --> 00:06:26.560
список объектов внутри бакета, там, bucket01.

00:06:26.560 --> 00:06:33.160
В этом случае пользователь юзер Ель Жан, операция,

00:06:33.160 --> 00:06:38.440
которую я хочу произвести это list objects и ресурс, над

00:06:38.440 --> 00:06:42.560
которыми происходит эта операция это bucket01.

00:06:42.560 --> 00:06:45.240
То есть rn конкретного ресурса.

00:06:45.240 --> 00:06:50.920
Теперь, как действует AWS.

00:06:50.920 --> 00:06:54.240
Как только он получает вот это действие, то он

00:06:54.240 --> 00:06:57.360
начинает проверять наличие explicit deny.

00:06:57.360 --> 00:07:01.320
То есть, есть ли хотя бы одна полиси, которая явно

00:07:01.320 --> 00:07:03.440
запрещает конкретное действие.

00:07:03.440 --> 00:07:09.920
Если explicit deny находится, то в этом случае любое

00:07:09.920 --> 00:07:14.360
количество explicit allow, оно перечеркивается и доступ

00:07:14.360 --> 00:07:15.360
не предоставляется.

00:07:15.360 --> 00:07:22.400
В другой случае, если AWS не находит explicit deny, то есть

00:07:22.400 --> 00:07:26.680
явно вот это действие не запрещено, в этом случае

00:07:26.680 --> 00:07:28.480
он переходит на следующий этап.

00:07:28.480 --> 00:07:32.320
Второй этап это проверка на наличие explicit allow.

00:07:32.320 --> 00:07:37.600
То есть, есть ли хотя бы одно полиси, которое явно

00:07:37.600 --> 00:07:41.120
предоставляет доступ к нашей операции.

00:07:41.120 --> 00:07:45.400
Если он находит это полиси, то доступ моему пользователю

00:07:45.400 --> 00:07:51.680
посмотреть список объектов внутри bucket01 предоставляется.

00:07:51.680 --> 00:08:00.920
В случае, если AWS не находит полиси, которые явно предоставляют

00:08:00.920 --> 00:08:06.440
доступ к конкретной операции, в этом случае значит конкретная

00:08:06.440 --> 00:08:12.440
операция case, он не прописан для этого пользователя по всех его полиси.

00:08:12.440 --> 00:08:16.640
В этом случае срабатывает поведение по умолчанию,

00:08:16.640 --> 00:08:21.680
это implicit deny, в этом случае доступ по умолчанию не предоставляется.

00:08:21.680 --> 00:08:29.680
Вопрос, насколько AWS подвержен атакам злоумышленников?

00:08:29.680 --> 00:08:33.320
Отвечаю, мы с вами на лекции разобрали, что такое shared

00:08:33.320 --> 00:08:34.880
responsibility model.

00:08:34.880 --> 00:08:38.800
Это такая модель, которая в зависимости от модели

00:08:38.800 --> 00:08:43.680
предоставления сервиса определяет за какую часть

00:08:43.680 --> 00:08:48.960
инфраструктуры отвечает AWS и пользователей AWS.

00:08:48.960 --> 00:08:54.760
То есть, мы под моделью предоставления сервиса имеются в виду три

00:08:54.760 --> 00:08:58.960
опции это IaaS infrastructure as a service, когда у нас есть

00:08:58.960 --> 00:09:03.840
полный контроль над ресурсами платформа as a service, когда у

00:09:03.840 --> 00:09:08.240
нас за часть отвечает AWS, за часть отвечаем мы.

00:09:08.240 --> 00:09:11.440
И третий software as a service, когда сервис предоставляется

00:09:11.440 --> 00:09:17.640
как готовый продукт и за большую часть как сервиса,

00:09:17.640 --> 00:09:20.720
так и с точки зрения безопасности ответственность лежит

00:09:20.720 --> 00:09:22.360
на стороне AWS.

00:09:22.360 --> 00:09:28.040
Мы можем только на уровне настроек менять это по

00:09:28.040 --> 00:09:32.840
сервису и ровно только за эту часть ответственность

00:09:32.840 --> 00:09:34.560
с точки зрения безопасности.

00:09:34.560 --> 00:09:38.440
То есть, мы должны ответственно сделать настройку этого

00:09:38.440 --> 00:09:43.680
сервиса таким образом, чтобы не открывать потенциальные

00:09:43.680 --> 00:09:46.240
места угрозы за злоумышленниками.

00:09:46.240 --> 00:09:54.520
Вне зависимости от того, по какой модели предоставляется

00:09:54.520 --> 00:09:59.520
сервис и вот то, что относится к физической составляющей,

00:09:59.520 --> 00:10:02.960
начиная от одного сервера, заканчивая дата-центром

00:10:02.960 --> 00:10:07.920
и глобальной инфраструктурой AWS, ответственность лежит

00:10:07.920 --> 00:10:09.840
за облачным провайдером.

00:10:09.840 --> 00:10:17.960
Если мы говорим, возможные места атаки злоумышленников,

00:10:17.960 --> 00:10:20.560
то подразделяются соответственно на два.

00:10:20.560 --> 00:10:24.320
Это те места, где ответственны мы и те места, за которые

00:10:24.320 --> 00:10:26.520
ответственны AWS.

00:10:26.520 --> 00:10:32.080
Насколько я понял из вопроса, подразумевается, что мы,

00:10:32.080 --> 00:10:37.160
как пользователи AWS, максимально все правильно настроили

00:10:37.160 --> 00:10:41.240
и обезопасили свою IT-инфраструктуру в облаке.

00:10:41.240 --> 00:10:49.120
Имеется в виду тот случай, когда место, где было проникновение

00:10:49.120 --> 00:10:55.760
и проведена соответствующая злоумышленническая операция,

00:10:55.760 --> 00:11:01.040
она прошла в том месте, где ответственна сам AWS.

00:11:01.040 --> 00:11:05.600
В этом случае необходимо вспомнить, что на постоянной

00:11:05.600 --> 00:11:12.560
основе AWS проходит процедуры сертификации в соответствии

00:11:12.560 --> 00:11:17.240
стандартам качества, регуляторным требованиям и положениям.

00:11:17.240 --> 00:11:21.760
И все полученные подтвержденные сертификаты публикуют

00:11:21.760 --> 00:11:26.480
в сервисе AWS Artifact, где вы можете на бесплатной основе

00:11:26.480 --> 00:11:30.140
по требованию эти сертификаты и эти документы скачать

00:11:30.140 --> 00:11:32.760
к себе.

00:11:32.760 --> 00:11:38.640
Наличие различных сертификатов качества, соответствия

00:11:38.640 --> 00:11:44.000
различным регуляторным требованиям у AWS дают несколько возможностей.

00:11:44.000 --> 00:11:45.800
Две самые очевидные.

00:11:45.800 --> 00:11:52.840
Это первое, вам уже нет необходимости получать

00:11:52.840 --> 00:11:55.680
этот сертификат, так как за вас этот сертификат

00:11:55.680 --> 00:11:57.000
получил AWS.

00:11:57.000 --> 00:12:03.560
И если вы хостите свою, разворачиваете свою инфраструктуру в облаке

00:12:03.560 --> 00:12:09.200
AWS, то вы можете эти сертификаты предоставлять по требованию

00:12:09.200 --> 00:12:12.200
соответствующие органы и они будут валидными.

00:12:12.200 --> 00:12:17.520
Второе, это то, что каждый этот сертификат для того,

00:12:17.520 --> 00:12:21.400
чтобы успешно пройти, необходимо в зависимости от готовности

00:12:21.400 --> 00:12:25.280
компании от нескольких месяцев до нескольких

00:12:25.280 --> 00:12:26.280
лет.

00:12:26.280 --> 00:12:29.340
Таким образом, во время прохождения внутри компании

00:12:29.340 --> 00:12:33.440
многие процессы, аспекты функционирования этой

00:12:33.440 --> 00:12:38.880
компании меняются и большинство потенциальных мест атаки

00:12:38.880 --> 00:12:44.280
злоумышленников, они исключаются либо настраиваются верным

00:12:44.280 --> 00:12:51.840
образом и риск того, что злоумышленник успешно

00:12:51.840 --> 00:12:57.040
произведет эту атаку, она минимизируется.

00:12:57.040 --> 00:13:03.520
Из всего этого следует, что наличие этих сертификатов

00:13:03.520 --> 00:13:07.160
дает некоторую гарантию и уверенность в том, что

00:13:07.160 --> 00:13:15.720
в частности AWS минимально подвержен атакам злоумышленников

00:13:15.720 --> 00:13:18.800
по сравнению с любыми другими компаниями, у которых

00:13:18.800 --> 00:13:22.380
этих сертификатов качество, соответствия качеству

00:13:22.380 --> 00:13:23.380
не имеется.

00:13:23.380 --> 00:13:28.520
Вопрос, что такое ключи шифрования?

00:13:28.520 --> 00:13:32.520
Отвечаю, что такое ключи шифрования более подробно

00:13:32.520 --> 00:13:36.800
вы познакомитесь в отдельной дисциплине внутри вашего

00:13:36.800 --> 00:13:40.120
университета по безопасности, я лишь объясню основные

00:13:40.120 --> 00:13:44.400
моменты, которые достаточно вам знать для работы в облаке

00:13:44.400 --> 00:13:46.040
AWS.

00:13:46.040 --> 00:13:50.680
Давайте рассмотрим пример самого простейшего метода

00:13:50.680 --> 00:13:51.760
шифрования.

00:13:51.760 --> 00:13:56.000
Представим, у нас есть слово папа и нам необходимо

00:13:56.000 --> 00:13:57.960
этот текст зашифровать.

00:13:57.960 --> 00:14:02.120
Наш метод шифрования это сдвиг по алфавиту на следующую

00:14:02.120 --> 00:14:03.120
букву.

00:14:03.120 --> 00:14:09.440
Таким образом, в слове папа, p становится re, a становится

00:14:09.440 --> 00:14:10.440
be.

00:14:10.440 --> 00:14:15.680
И на выходе мы получаем зашифрованный текст, который

00:14:15.680 --> 00:14:19.800
rbrb.

00:14:19.800 --> 00:14:26.160
Таким образом, вы получили общее понимание, что такое

00:14:26.160 --> 00:14:27.160
шифрование.

00:14:27.160 --> 00:14:33.280
В случае, когда мы говорим, что у нас есть текст определенной

00:14:33.280 --> 00:14:39.800
длины, который тем или иным способом применяется

00:14:39.800 --> 00:14:45.440
для того, чтобы входной незашифрованный текст привести в выходной

00:14:45.440 --> 00:14:49.760
зашифрованный текст, то этот текст мы говорим

00:14:49.760 --> 00:14:50.760
ключом шифрования.

00:14:50.760 --> 00:14:55.600
С этим ключом шифрования вы можете зашифрованный

00:14:55.600 --> 00:14:59.360
текст обратно расшифровать и прочитать исходное сообщение

00:14:59.360 --> 00:15:00.640
без этого ключа.

00:15:00.640 --> 00:15:06.600
Вы даже при наличии зашифрованного текста ничего с ним сделать

00:15:06.600 --> 00:15:10.440
и никакую полезную информацию от него получить не сможете.

00:15:10.440 --> 00:15:16.320
Так вот, encryption keys у нас встречается в сервисе KMS,

00:15:16.320 --> 00:15:19.880
то есть Key Management Service, в котором мы более подробно

00:15:19.880 --> 00:15:26.320
поговорим, какие методы шифрования используются

00:15:26.320 --> 00:15:30.760
и как он управляет всеми этими ключами шифрования.

00:15:30.760 --> 00:15:34.320
Вопрос.

00:15:34.320 --> 00:15:41.720
Какая организация верифицирует соответствие сертификатам

00:15:41.720 --> 00:15:45.000
облачного провайдера AWS или в целом любого облачного

00:15:45.000 --> 00:15:46.000
провайдера?

00:15:46.000 --> 00:15:50.120
Отвечаю, когда мы говорим про сертификаты, будь то

00:15:50.120 --> 00:15:53.440
сертификат в соответствии с стандартным качеством,

00:15:53.440 --> 00:15:56.560
либо в соответствии с некоторым регуляторным требованиям,

00:15:56.560 --> 00:16:01.440
то за каждым этим сертификатом стоит некоторая компания

00:16:01.440 --> 00:16:05.800
или организация, которая узконаправленно занимается

00:16:05.800 --> 00:16:10.840
разработкой этих требований и верифицирует компании,

00:16:10.840 --> 00:16:13.120
которым необходим этот сертификат, после чего

00:16:13.120 --> 00:16:16.640
выдает этот сертификат.

00:16:16.640 --> 00:16:21.360
Ценность отдельного сертификата зависит от того, насколько

00:16:21.360 --> 00:16:24.200
популярна и важна эта организация.

00:16:24.200 --> 00:16:29.680
Когда мы говорим про AWS, и в частности, Examine AWS Certified

00:16:29.680 --> 00:16:35.960
Cloud Practitioner, чаще всего упоминаются три сертификата.

00:16:35.960 --> 00:16:39.880
Первый сертификат – это HIPAA, два А в конце.

00:16:39.880 --> 00:16:44.880
Это сертификат, который прописывает стандарты

00:16:44.880 --> 00:16:49.480
качества для IT-компаний, которые работают в сфере

00:16:49.480 --> 00:16:50.480
медицины.

00:16:50.480 --> 00:16:53.120
Второе – это GDPR.

00:16:53.120 --> 00:16:59.040
Это тот документ, который регулирует хранение, обработку

00:16:59.040 --> 00:17:03.160
и передача персональных данных пользователей,

00:17:03.160 --> 00:17:07.400
людей, которые находятся в ЕС в Европе.

00:17:07.400 --> 00:17:15.040
И третий, который также часто приходит, это ISO 27001.

00:17:15.040 --> 00:17:17.480
Это общеизвестный стандарт качества.

00:17:17.480 --> 00:17:24.760
Он состоит из нескольких различных разделов, относящихся

00:17:24.760 --> 00:17:30.320
к различным аспектам функционирования компании, является достаточно

00:17:30.320 --> 00:17:31.320
общим.

00:17:31.320 --> 00:17:35.400
И при наличии этого сертификата стандарта, стандарта качества,

00:17:35.400 --> 00:17:43.520
говорят, что процессы внутри компании максимально правильно

00:17:43.520 --> 00:17:47.220
выстроены для того, чтобы эффективно работать и

00:17:47.220 --> 00:17:52.200
делать свою работу.

00:17:52.200 --> 00:17:55.040
На этом мы рассмотрели все вопросы, полученные

00:17:55.040 --> 00:17:56.040
от вас.

00:17:56.040 --> 00:17:58.200
Я надеюсь, вы получили ответы.

00:17:58.200 --> 00:18:01.400
На этом мы завершаем сессию вопросов и ответов.

00:18:01.400 --> 00:18:05.960
Увидимся с вами на следующих наших активностях.