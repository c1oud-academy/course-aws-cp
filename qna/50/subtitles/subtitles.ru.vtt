WEBVTT

00:00:00.000 --> 00:00:06.760
Добрый день, уважаемые студенты! Я рад вас всех 
видеть на очередной сессии вопросов и ответов.

00:00:06.760 --> 00:00:11.700
Мы получили от вас очередной набор 
вопросов, которые вас интересуют.

00:00:11.700 --> 00:00:17.640
На этой сессии мы каждый вопрос детально 
рассмотрим и разберем. Итак, давайте начнем. 

00:00:17.640 --> 00:00:24.040
Вопрос: «Что означает 
термин «инфраструктура виртуализации»?» 

00:00:24.040 --> 00:00:32.360
Отвечаю. Начнем с того, что как такого термина 
«инфраструктура виртуализации» не существует. 

00:00:32.360 --> 00:00:39.040
Это два отдельно стоящих термина сами по себе. 
Что такое инфраструктура мы уже разобрали. 

00:00:39.040 --> 00:00:44.880
Что такое виртуализация сейчас вам объясню. Для 
того чтобы объяснить, что такое виртуализация,

00:00:44.880 --> 00:00:53.200
давайте вспомним, что такое дата-центр AWS. Как 
мы с вами помним, дата-центр AWS – это достаточно

00:00:53.200 --> 00:01:03.560
большое помещение, в котором расположены серверы. 
Каждый сервер расположен следующим образом:

00:01:03.560 --> 00:01:10.720
в виде шкафа, на каждой полке этого шкафа 
находится каждый отдельно взятый сервер. 

00:01:10.720 --> 00:01:20.180
AWS стремится поместить в один шкаф наибольшее 
количество вычислительных мощностей для того,

00:01:20.180 --> 00:01:26.200
чтобы оптимально использовать физическое 
пространство. Таким образом, каждый сервер  

00:01:26.680 --> 00:01:33.920
внутри этого шкафа серверов в десятки раз 
мощнее наших самых продвинутых персональных

00:01:33.920 --> 00:01:43.240
компьютеров и ноутбуков. Двигаемся дальше. Мы 
помним, что внутри AWS у вас есть возможность

00:01:43.240 --> 00:01:52.040
выбрать несколько разных типов инстансов, т.е. 
вы можете выбрать самый слабый с одним ядром

00:01:52.040 --> 00:02:00.680
процессора, с двумя гигабайтами оперативной 
памяти и дальше мощнее и мощнее,

00:02:00.680 --> 00:02:06.880
можно выбрать очень мощный сервер, 
который несколько десятков процессорных

00:02:06.880 --> 00:02:12.680
мощностей, а также несколько сотен 
гигабайтов оперативной памяти.

00:02:12.680 --> 00:02:17.360
Теперь для того, чтобы предоставить 
возможность вот так делить и выбирать 

00:02:17.360 --> 00:02:22.440
что большой, что маленький сервер, была 
разработана технология виртуализации.

00:02:22.440 --> 00:02:30.640
Что она означает? Простыми словами, есть определенный 
физический сервер со своими мощностями.

00:02:30.640 --> 00:02:35.520
Это количество процессоров, а также 
количество оперативной памяти. 

00:02:35.520 --> 00:02:42.440
Виртуализация позволяет нам разделить вот эти 
мощности одного сервера и виртуально получить 

00:02:42.920 --> 00:02:50.760
получить отдельные независимые 
друг от друга сервера меньшей мощности.

00:02:50.760 --> 00:02:57.440
Таким образом, мы можем, например, 
сервер, в котором два процессора

00:02:57.440 --> 00:03:02.160
и четыре оперативной памяти, через 
технологию виртуализации поделить на два.

00:03:02.160 --> 00:03:08.160
Таким образом получить два отдельных, отдельно 
работающих независимых друг от друга сервера

00:03:08.160 --> 00:03:18.280
по одному процессору и два гигабайта оперативной 
памяти. Теперь, если мы возвращаемся к инфраструктуре 

00:03:18.280 --> 00:03:23.800
виртуализации, в этом случае подразумевается 
все то железо, программное обеспечение

00:03:23.800 --> 00:03:28.000
и другое оборудование, будь то 
физическое, либо виртуальное, которое

00:03:28.000 --> 00:03:35.760
помогает поддерживать процесс виртуализации
физических серверов AWS, подразделять, 

00:03:35.760 --> 00:03:41.400
делить на несколько маленьких частей и нам 
как клиентам AWS предоставлять возможность

00:03:41.400 --> 00:03:46.960
выбирать от самого маленького сервера 
отдельно стоящего до супермощного. 

00:03:46.960 --> 00:03:56.120
Вопрос: «Можете ли объяснить суть implicit 
allow и implicit deny на конкретном примере?»

00:03:56.120 --> 00:04:02.320
Отвечаю. Следует понимать, 
что такое implicit.

00:04:02.320 --> 00:04:07.600
Implicit – это что-то, что 
есть по умолчанию изначально.

00:04:07.600 --> 00:04:12.800
Таким образом, когда мы говорим implicit allow, 
это значит по умолчанию разрешено.

00:04:12.800 --> 00:04:17.620
Когда мы говорим implicit deny, 
это значит по умолчанию запрещено.

00:04:17.620 --> 00:04:27.560
Если мы говорим про AWS, то все то, что связано 
с доступами изначально по умолчанию запрещено.

00:04:27.560 --> 00:04:35.720
Таким образом, есть только implicit deny. 
Implicit allow в рамках AWS такого не существует.

00:04:35.720 --> 00:04:43.860
Таким образом, если приводить пример, вы создаете 
нового пользователя и у этого пользователя нет

00:04:43.860 --> 00:04:48.760
никаких прописанных policy, будь то 
inline прописанное для конкретного

00:04:48.760 --> 00:04:56.040
пользователя, будь то привязанное 
к нему отдельно стоящее policy. 

00:04:56.040 --> 00:05:03.880
Если таковых не имеется, то у этого 
пользователя по умолчанию никаких доступов 

00:05:03.880 --> 00:05:10.760
ни на какой сервис не будет. 
Так как у нас внутри AWS implicit deny.

00:05:10.760 --> 00:05:17.800
Вопрос: «Можете ли объяснить суть explicit 
allow и explicit deny на конкретном примере?» 

00:05:17.800 --> 00:05:24.080
Отвечаю: Когда мы говорим про explicit 
allow и explicit deny, подразумевается 

00:05:24.080 --> 00:05:29.800
что-то явно прописанное, т.е. мы явно 
либо разрешаем пользователю какое-то

00:05:29.800 --> 00:05:39.440
действие на какие-то ресурсы, либо явно 
запрещаем. Есть третий вариант implicit deny.

00:05:39.440 --> 00:05:45.560
Это что-то, что по умолчанию. По умолчанию, 
если явно ничего не прописано, то в этом случае

00:05:45.560 --> 00:05:56.920
доступ запрещается. Теперь давайте на примере 
разберем, какие шаги предпринимает

00:05:56.920 --> 00:06:04.520
AWS для того, чтобы понять разрешен 
или запрещен доступ к конкретному 

00:06:04.520 --> 00:06:12.400
identity на определенную операцию 
и на определенные AWS ресурсы.

00:06:12.400 --> 00:06:20.520
Представим, что мой пользователь, 
user Yelzhan, хочет открыть список объектов

00:06:20.520 --> 00:06:33.160
внутри бакета, там, bucket01. В этом случае 
пользователь user Yelzhan, операция, которую я

00:06:33.160 --> 00:06:42.560
хочу произвести это list objects и ресурс, над 
которыми происходит эта операция это bucket01.

00:06:42.560 --> 00:06:50.920
То есть ARN конкретного ресурса. 
Теперь, как действует AWS. 

00:06:50.920 --> 00:06:57.360
Как только он получает вот это действие, то 
он начинает проверять наличие explicit deny.

00:06:57.360 --> 00:07:03.440
То есть, есть ли хотя бы одна policy, 
которая явно запрещает конкретное действие.

00:07:03.440 --> 00:07:13.360
Если explicit deny находится, то в этом случае 
любое количество explicit allow перечеркивается

00:07:13.360 --> 00:07:22.400
и доступ не предоставляется. В другом случае, 
если AWS не находит explicit deny, то есть

00:07:22.400 --> 00:07:28.480
явно вот это действие не запрещено, в этом 
случае он переходит на следующий этап.

00:07:28.480 --> 00:07:32.320
Второй этап – это проверка на 
наличие explicit allow, т.е. есть ли

00:07:32.320 --> 00:07:41.120
хотя бы одна policy, которое явно 
предоставляет доступ к нашей операции.

00:07:41.120 --> 00:07:45.400
Если он находит эту policy, 
то доступ моему пользователю 

00:07:45.400 --> 00:07:51.680
посмотреть список объектов 
внутри bucket01 предоставляется.

00:07:51.680 --> 00:08:00.920
В случае, если AWS не находит 
policy, которые явно предоставляют 

00:08:00.920 --> 00:08:06.440
доступ к конкретной операции, 
в этом случае конкретная

00:08:06.440 --> 00:08:12.440
операция case не прописана для этого 
пользователя во всех его policy. 

00:08:12.440 --> 00:08:16.640
В этом случае срабатывает 
поведение по умолчанию, это 

00:08:16.640 --> 00:08:21.680
implicit deny, в этом случае 
доступ по умолчанию не предоставляется.

00:08:21.680 --> 00:08:29.680
Вопрос: «Насколько AWS подвержен
атакам злоумышленников?» 

00:08:29.680 --> 00:08:34.880
Отвечаю. Мы с вами на лекции разобрали, 
что такое Shared Responsibility Model. 

00:08:34.880 --> 00:08:43.680
Это такая модель, которая в зависимости от 
модели предоставления сервиса определяет 

00:08:43.680 --> 00:08:50.960
за какую часть инфраструктуры отвечает 
AWS и пользователи AWS, т.е. мы.

00:08:50.960 --> 00:08:54.760
Под моделью предоставления 
сервиса имеются в виду три опции:

00:08:54.760 --> 00:09:02.840
это IaaS – Infrastructure as a service, когда 
у нас есть полный контроль над ресурсами.

00:09:02.840 --> 00:09:08.240
PaaS – Platform as a service, когда у нас за 
часть отвечает AWS, за часть отвечаем мы.

00:09:08.240 --> 00:09:14.440
И третий SaaS – Software as a service, когда 
сервис предоставляется как готовый продукт и за 

00:09:14.440 --> 00:09:22.360
большую часть как сервиса, так и с точки зрения 
безопасности ответственность лежит на стороне AWS.

00:09:22.360 --> 00:09:28.040
Мы можем только на уровне 
настроек менять это ПО сервис и 

00:09:28.040 --> 00:09:34.560
ровно только за эту часть ответственность 
с точки зрения безопасности.

00:09:34.560 --> 00:09:40.440
То есть, мы должны ответственно сделать 
настройку этого сервиса таким образом,

00:09:40.440 --> 00:09:46.240
чтобы не открывать потенциальные 
места угрозы злоумышленникам. 

00:09:46.240 --> 00:09:54.520
Вне зависимости от того, по какой 
модели предоставляется сервис и то, 

00:09:54.520 --> 00:10:02.960
что относится к физической составляющей, начиная 
от одного сервера, заканчивая дата-центром

00:10:02.960 --> 00:10:11.840
и глобальной инфраструктурой AWS, ответственность 
лежит на облачном провайдере. Если мы говорим

00:10:11.840 --> 00:10:20.560
возможные места атаки злоумышленников, 
то подразделяются соответственно на два.

00:10:20.560 --> 00:10:26.520
Это те места, где ответственны мы и 
те места, за которые ответственны AWS.

00:10:26.520 --> 00:10:36.080
Насколько я понял из вопроса, подразумевается, 
что мы, как пользователи AWS, максимально все 

00:10:36.080 --> 00:10:41.240
правильно настроили и обезопасили 
свою IT-инфраструктуру в облаке 

00:10:41.240 --> 00:10:51.120
и имеется в виду тот случай, когда место, где 
было проникновение и проведена соответствующая 

00:10:51.120 --> 00:11:01.040
злоумышленническая операция, она прошла 
в том месте, где ответственен сам AWS.

00:11:01.040 --> 00:11:10.600
В этом случае необходимо вспомнить, что на 
постоянной основе AWS проходит процедуры

00:11:10.600 --> 00:11:17.240
сертификации соответствии стандартам качества, 
регуляторным требованиям и положениям.

00:11:17.240 --> 00:11:25.760
И все полученные подтвержденные сертификаты 
публикуют в сервисе AWS Artifact, где вы можете

00:11:25.760 --> 00:11:32.760
на бесплатной основе по требованию эти 
сертификаты и эти документы скачать к себе.

00:11:32.760 --> 00:11:38.640
Наличие различных сертификатов 
качества, соответствия различным 

00:11:38.640 --> 00:11:44.000
регуляторным требованиям у 
AWS дают несколько возможностей.

00:11:44.000 --> 00:11:52.840
Две самые очевидные: это первое – вам 
уже нет необходимости получать

00:11:52.840 --> 00:11:57.000
этот сертификат, так как за 
вас этот сертификат получил AWS.

00:11:57.000 --> 00:12:06.560
И если вы разворачиваете свою инфраструктуру 
в облаке AWS, то вы можете эти сертификаты 

00:12:06.560 --> 00:12:12.200
предоставлять по требованию в соответствующие 
органы и они будут валидными.

00:12:12.200 --> 00:12:19.520
Второе – это то, что каждый этот сертификат 
для того, чтобы успешно пройти, необходимо

00:12:19.520 --> 00:12:26.280
в зависимости от готовности компании от 
нескольких месяцев до нескольких лет.

00:12:26.280 --> 00:12:30.340
Таким образом, во время прохождения 
внутри компании многие процессы, 

00:12:30.340 --> 00:12:39.880
аспекты функционирования этой компании меняются 
и большинство потенциальных мест атаки

00:12:39.880 --> 00:12:47.280
злоумышленников исключаются либо 
настраиваются верным образом и риск

00:12:47.280 --> 00:12:57.040
того, что злоумышленник успешно 
произведет эту атаку минимизируется.

00:12:57.040 --> 00:13:04.520
Из всего этого следует, 
что наличие этих сертификатов 

00:13:04.520 --> 00:13:10.160
дает некоторую гарантию и 
уверенность в том, что в частности 

00:13:10.160 --> 00:13:18.720
AWS минимально подвержен атакам злоумышленников 
по сравнению с любыми другими компаниями, 

00:13:18.720 --> 00:13:23.380
у которых этих сертификатов 
соответствия качеству не имеется. 

00:13:23.380 --> 00:13:32.520
Вопрос: «Что такое ключи шифрования?» Отвечаю: 
что такое ключи шифрования более подробно 

00:13:32.520 --> 00:13:39.800
вы познакомитесь в отдельной дисциплине внутри 
вашего университета по безопасности, я лишь

00:13:39.800 --> 00:13:46.040
объясню основные моменты, которые достаточно 
вам знать для работы в облаке AWS.

00:13:46.040 --> 00:13:51.760
Давайте рассмотрим пример 
самого простейшего метода шифрования.

00:13:51.760 --> 00:13:57.960
Представим, у нас есть слово «папа» и
нам необходимо этот текст зашифровать.

00:13:57.960 --> 00:14:03.120
Наш метод шифрования – это сдвиг 
по алфавиту на следующую букву.

00:14:03.120 --> 00:14:10.440
Таким образом, в слове папа, 
п становится р, а становится б.

00:14:10.440 --> 00:14:19.800
И на выходе мы получаем 
зашифрованный текст, который рбрб.

00:14:19.800 --> 00:14:27.160
Таким образом, вы получили общее 
понимание, что такое шифрование.

00:14:27.160 --> 00:14:33.280
В случае, когда мы говорим, что 
у нас есть текст определенной длины,

00:14:33.280 --> 00:14:42.800
который тем или иным способом применяется 
для того, чтобы входной незашифрованный

00:14:42.800 --> 00:14:50.760
текст привести в выходной зашифрованный текст, 
то этот текст мы говорим ключом шифрования.

00:14:50.760 --> 00:14:55.600
С этим ключом шифрования вы 
можете зашифрованный текст 

00:14:55.600 --> 00:15:00.640
обратно расшифровать и 
прочитать исходное сообщение.

00:15:00.640 --> 00:15:06.600
Без этого ключа вы даже при наличии 
зашифрованного текста ничего с ним 

00:15:06.600 --> 00:15:10.440
сделать и никакую полезную информацию
от него получить не сможете. 

00:15:10.440 --> 00:15:17.320
Так вот, encryption keys у нас встречается в 
сервисе KMS, то есть Key Management Service, 

00:15:17.320 --> 00:15:25.320
в котором мы более подробно 
поговорим, какие методы шифрования 

00:15:25.320 --> 00:15:30.760
используются и как он управляет 
всеми этими ключами шифрования. 

00:15:30.760 --> 00:15:41.720
Вопрос: «Какая организация верифицирует 
соответствие сертификатам

00:15:41.720 --> 00:15:46.000
облачного провайдера AWS или в целом 
любого облачного провайдера?»

00:15:46.000 --> 00:15:53.440
Отвечаю, когда мы говорим про сертификаты, будь 
то сертификат соответствия стандартам качества,

00:15:53.440 --> 00:15:56.560
либо соответствия некоторым 
регуляторным требованиям,

00:15:56.560 --> 00:16:01.440
то за каждым этим сертификатом стоит 
некоторая компания или организация,

00:16:01.440 --> 00:16:09.840
которая узконаправленно занимается 
разработкой этих требований и верифицирует

00:16:09.840 --> 00:16:16.640
компании, которым необходим этот сертификат, 
после чего выдает этот сертификат.

00:16:16.640 --> 00:16:24.200
Ценность отдельного сертификата зависит от того,
насколько популярна и важна эта организация. 

00:16:24.200 --> 00:16:32.680
Когда мы говорим про AWS, и в частности, экзамен 
AWS Certified Cloud Practitioner, чаще всего

00:16:32.680 --> 00:16:39.880
упоминаются три сертификата. Первый 
сертификат – это HIPAA, два А в конце.

00:16:39.880 --> 00:16:48.480
Это сертификат, который прописывает стандарты 
качества для IT-компаний, которые работают

00:16:48.480 --> 00:16:59.040
в сфере медицины. Второе – это GDPR. Это тот 
документ, который регулирует хранение, обработку

00:16:59.040 --> 00:17:07.400
и передачу персональных данных пользователей, 
людей, которые находятся в ЕС в Европе.

00:17:07.400 --> 00:17:17.480
И третий, который также часто приходит, это ISO 
27001. Это общеизвестный стандарт качества. 

00:17:17.480 --> 00:17:24.760
Он состоит из нескольких 
различных разделов, относящихся 

00:17:24.760 --> 00:17:31.320
к различным аспектам функционирования 
компании, является достаточно общим. 

00:17:31.320 --> 00:17:35.400
И при наличии этого сертификата 
стандарта качества, говорят,

00:17:35.400 --> 00:17:43.520
что процессы внутри компании 
максимально правильно выстроены 

00:17:43.520 --> 00:17:52.200
для того, чтобы эффективно 
работать и делать свою работу. 

00:17:52.200 --> 00:17:58.200
На этом мы рассмотрели все вопросы, полученные 
от вас. Я надеюсь, вы получили ответы.

00:17:58.200 --> 00:18:05.960
На этом мы завершаем сессию вопросов и ответов. 
Увидимся на следующих активностях. До встречи!