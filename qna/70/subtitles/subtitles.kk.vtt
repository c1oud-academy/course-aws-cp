WEBVTT

00:00:00.000 --> 00:00:05.500
Добрый день, уважаемые студенты! Я рад вас
видеть на очередной сессии вопросов и ответов.

00:00:05.500 --> 00:00:09.500
Спасибо за ваши вопросы. Давайте перейдем 
к ним и попробуем на них ответить.

00:00:11.500 --> 00:00:17.107
Вопрос. Что такое Proxy Server и как 
оно работает? Отвечаю. Proxy Server

00:00:17.131 --> 00:00:22.500
- это общий IT термин, который не
привязан к облачным технологиям.

00:00:22.500 --> 00:00:27.500
В любом случае, я дам вам ответ простыми
словами, чтобы у вас сложилось общее понимание.

00:00:27.500 --> 00:00:32.988
Когда вы подключаетесь через
браузер к некому веб-сайту, при

00:00:33.012 --> 00:00:38.500
подключении этот веб-сайт
видит ваш IP-адрес в интернете.

00:00:38.500 --> 00:00:45.500
Также может получить дополнительную информацию,
в том числе информацию по вашей стране нахождения.

00:00:45.500 --> 00:00:49.143
В случае, когда мы говорим
про Proxy Server, это некое

00:00:49.167 --> 00:00:53.500
промежуточное звено между
пользователями интернета и сайтами.

00:00:53.500 --> 00:01:01.500
Таким образом, вы как пользователь интернета вначале
подключаетесь к Proxy Server со своим IP-адресом.

00:01:01.500 --> 00:01:06.438
Дальше, ваш запрос
транслируется в таком же виде уже на

00:01:06.462 --> 00:01:12.500
конечный веб-сайт, но при этом
подключение идет от Proxy Server.

00:01:12.500 --> 00:01:17.500
Таким образом, веб-сайт видит не
ваш IP-адрес, а IP-адрес Proxy Server.

00:01:17.500 --> 00:01:24.500
В том числе и дополнительную информацию: он
видит ту страну, где находится этот Proxy Server.

00:01:24.500 --> 00:01:30.582
Когда обычно используют Proxy Server?
Представим, что вы находитесь в стране А, и вам нужно

00:01:30.606 --> 00:01:37.500
подключиться к какому-то сайту, но у вас прямого
доступа нет, он заблокирован интернет-провайдерами.

00:01:37.500 --> 00:01:45.500
Для того, чтобы получить доступ к этому сайту,
вам необходимо отправить запрос через Proxy Server.

00:01:45.500 --> 00:01:48.500
Таким образом вы
подключаетесь к Proxy Server.

00:01:48.500 --> 00:01:55.500
Дальше Proxy Server уже подключает
ваш запрос от своего имени к веб-сайту.

00:01:55.500 --> 00:02:00.500
Там уже будет скорее всего
другая страна - страна С.

00:02:00.500 --> 00:02:06.488
И в случае, если веб-сайт не
заблокировал себе доступ к стране

00:02:06.512 --> 00:02:12.500
B, так же как и к вашей стране
A, то доступ будет предоставлен.

00:02:12.500 --> 00:02:19.500
Касательно того, как работает Proxy Server:
это тот ресурс в интернете, который принимает

00:02:19.500 --> 00:02:25.500
ваш запрос, и ваш запрос в том же виде
отправляет на конечный ресурс в интернете, т.е.

00:02:25.500 --> 00:02:35.500
ничего сложного в нем нет, это обычное
перенаправление запросов пользователей.

00:02:35.500 --> 00:02:41.488
Вопрос. Какое количество Amazon
EC2 инстансов вы можете запускать в

00:02:41.512 --> 00:02:47.500
вашем AWS аккаунте? А также есть 
ли лимиты? Да, лимиты существуют.

00:02:47.500 --> 00:02:53.500
Есть hard limits, которые нельзя изменить,
есть soft limits, которые можно поднимать.

00:02:53.500 --> 00:02:59.500
И те, и другие варианты вы
видите в соответствующей вкладке.

00:02:59.500 --> 00:03:03.488
Если вы откроете в AWS
Management Console сервис Amazon EC2,

00:03:03.512 --> 00:03:07.500
 там в левом навигационном
меню будет вкладка Limits.

00:03:07.500 --> 00:03:13.500
Мы с вами проделаем это в наших
лабораторных работах, там подробнее посмотрите.

00:03:13.500 --> 00:03:17.488
Как только вы попадаете в
эту вкладку Limits, вы видите все

00:03:17.512 --> 00:03:21.500
те ограничения, которые есть
в рамках сервиса Amazon EC2.

00:03:21.500 --> 00:03:30.500
Если есть необходимость или вы на текущий
момент используете такое значение ресурсов,

00:03:30.500 --> 00:03:34.500
либо чего бы ни было близко к Limit, вы всегда
можете через Support увеличить эти soft limits.

00:03:34.500 --> 00:03:43.500
Вопрос. Что такое ephemeral volume? Отвечаю,
ephemeral volume - это временный жесткий диск.

00:03:43.500 --> 00:03:49.500
Он доступен для вас, когда вы используете
feature Instance Store сервиса Amazon EC2.

00:03:49.500 --> 00:03:59.673
Этот ephemeral volume и есть физический жесткий
диск, который находится на том же сервере, а на этом

00:03:59.697 --> 00:04:09.500
сервере в рамках сервиса Amazon EC2 получаете часть
оперативной памяти и количество ядер процессора.

00:04:09.500 --> 00:04:20.500
Это первый вариант хранилища, куда устанавливались
операционные системы в рамках сервиса Amazon EC2.

00:04:20.500 --> 00:04:27.500
Далее через какое-то время вышел новый сервис
Amazon EBS, который предоставляет значительное

00:04:27.500 --> 00:04:33.500
улучшение, является best practice и рекомендуемым
вариантом от AWS для ваших Root Volumes.

00:04:33.500 --> 00:04:37.500
Root Volumes это тот жесткий диск, на который
вы устанавливаете операционную систему.

00:04:37.500 --> 00:04:42.500
Чем они отличаются, вы всегда можете посмотреть в
наших лекциях, а также дополнительную информацию

00:04:42.500 --> 00:04:51.500
сможете одним запросом в поисковик выйти на
необходимую страницу и подробнее ознакомиться.

00:04:51.500 --> 00:04:57.500
Вопрос. Что обозначает слово Elastic в
контексте AWS или облачных технологий?

00:04:57.500 --> 00:05:03.988
Отвечаю. Elastic, прямой перевод означает
гибкий, в контексте облачных технологий и

00:05:04.012 --> 00:05:10.500
AWS получает тот же смысл. Идея в том,
что вам предоставляются IT ресурсы гибкими.

00:05:10.500 --> 00:05:15.988
Гибкими, значит, вы можете выбирать
конфигурацию, а также вы оплачиваете только за то

00:05:16.012 --> 00:05:21.500
время и тот объем, который вы фактически
использовали, то есть pay as you go pricing.

00:05:21.500 --> 00:05:32.500
Вопрос. 
Что произойдет с метриками Amazon EC2 Instance, 
если отключить передачу этих данных в CloudWatch?

00:05:32.500 --> 00:05:39.488
Они будут сохранены или утеряны? Отвечаю.
Если вы не будете передавать в рамках сервиса EC2

00:05:39.512 --> 00:05:46.500
метрики в CloudWatch, то этих данных там не
окажется, вы не сможете с этими данными работать.

00:05:46.500 --> 00:05:51.988
В этом случае у вас есть два
варианта, либо не генерировать

00:05:52.012 --> 00:05:57.500
метрики и не настраивать
мониторинг, это очень плохой совет.

00:05:57.500 --> 00:06:05.488
Так можно делать только для тестовых либо нагрузок,
которые относятся к Dev среде, но на Production среде

00:06:05.512 --> 00:06:13.500
всегда должна быть настроена с мониторингом, вы
должны отслеживать и видеть состояние инстансов.

00:06:13.500 --> 00:06:17.988
Другой вариант, если по тем или
иным причинам использование сервиса

00:06:18.012 --> 00:06:22.500
CloudWatch вам не подошло, то вы
можете настроить свой мониторинг.

00:06:22.500 --> 00:06:29.988
Этот мониторинг будет хранить данные, скорее
всего, внутри этого инстанса и вы сможете настроить

00:06:30.012 --> 00:06:37.500
программу, чтобы эти метрики подтягивались и
отображались вам в какой-то другой программе в ПО.

00:06:37.500 --> 00:06:42.982
Минус такого подхода в том, что в случае,
если что-то произойдет с вашим инстансом,

00:06:43.006 --> 00:06:48.488
а вы потеряете доступ к этому инстансу,
то, соответственно, вы не сможете добраться

00:06:48.512 --> 00:06:54.060
до данных ваших метрик и не сможете
проделать некий troubleshooting, то есть какое-то

00:06:54.084 --> 00:06:59.500
исследование для того, чтобы понять, где
возникла проблема, что явилось причиной.

00:06:59.500 --> 00:07:07.988
В случае с CloudWatch ваши данные по метрикам
централизованно собираются со всех инстансов и в

00:07:08.012 --> 00:07:16.500
случае возникновения какой-то проблемы с вашим
инстансом, потери доступа, любой проблемы, которая

00:07:16.500 --> 00:07:22.594
произошла с вашим инстансом, логи не потеряются,
они централизованно будут храниться в сервисе

00:07:22.618 --> 00:07:29.500
CloudWatch и вы можете отфильтровать по необходимому
инстансу и посмотреть необходимые для вас метрики.

00:07:29.500 --> 00:07:36.205
Использование сервиса CloudWatch является
best practice и рекомендуемым подходом для

00:07:36.229 --> 00:07:43.500
хранения метрик и дальнейшего мониторинга
в состоянии ваших инстансов и других сервисов.

00:07:43.500 --> 00:07:47.500
Здесь я бы хотел также
внести небольшое уточнение.

00:07:47.500 --> 00:07:53.935
Сервис CloudWatch может использоваться
для хранения как метрик, так и

00:07:53.959 --> 00:08:00.868
логов. Логи также у вас могут быть
системными и логи вашего application.

00:08:00.892 --> 00:08:06.796
Пройдемся более подробно.
Метрики - это когда вы информацию по

00:08:06.820 --> 00:08:13.500
состоянию показателей вашего
инстанса передаете в сервис CloudWatch.

00:08:13.500 --> 00:08:17.595
К примеру, как загружен процессор,
какое количество оперативной

00:08:17.619 --> 00:08:21.715
памяти используется, какое
количество свободно, какое количество

00:08:21.739 --> 00:08:25.607
записей на жесткий диск сейчас
происходит, какое количество

00:08:25.631 --> 00:08:29.500
операций на чтение у вас
происходит в вашем жестком диске.

00:08:29.500 --> 00:08:34.354
Вся эта информация передается
в виде метрик и вы можете в

00:08:34.378 --> 00:08:39.232
виде графиков видеть изменения 
этих показателей. Когда мы

00:08:39.256 --> 00:08:44.410
говорим про логи, логи это
выходная информация после запуска

00:08:44.434 --> 00:08:49.500
тех или иных команд для
отработки тех или иных процессов.

00:08:49.500 --> 00:08:57.488
Когда мы говорим системные логи, то скорее всего сюда
относятся логи, которые генерируют ваш EC2 Instance

00:08:57.512 --> 00:09:05.500
во время первоначального запуска, когда вы
устанавливаете различные обновления, программы и т.д.

00:09:05.500 --> 00:09:12.074
Когда мы говорим логи приложения, то
есть ваше приложение работает внутри

00:09:12.098 --> 00:09:18.672
вашего инстанса и генерирует некоторые 
логи. Например, поступил запрос на

00:09:18.696 --> 00:09:25.862
ваш веб-сайт и вы логируете у себя в
приложении, что пришел запрос от такого-то

00:09:25.886 --> 00:09:32.500
IP адреса на такой-то API, например,
get users с такими-то параметрами.

00:09:32.500 --> 00:09:36.982
В этом случае вот эта запись
сохранится в логах приложения. Эти

00:09:37.006 --> 00:09:41.488
логи, что системные, что application
логи вы также можете хранить

00:09:41.512 --> 00:09:45.713
в сервисе CloudWatch.
Но в этом случае используется подсервис

00:09:45.737 --> 00:09:50.500
внутри CloudWatch, есть CloudWatch
Logs, а есть CloudWatch metrics.

00:09:50.500 --> 00:10:03.378
Вопрос. Отличается ли оплата за
мониторинг CloudWatch в зависимости от типа

00:10:03.402 --> 00:10:17.500
инстанса? Отвечаю. Нет, не зависит от 
типа инстанса. Если мы говорим CloudWatch

00:10:17.500 --> 00:10:22.232
metrics, под сервис в рамках CloudWatch, который
работает с метриками, этими показателями, то там

00:10:22.256 --> 00:10:26.988
вы оплачиваете за каждую метрику. Если мы
говорим про CloudWatch Logs, который хранит системные

00:10:27.012 --> 00:10:31.523
либо логи ваших приложений, то здесь вы
оплачиваете за объем ваших логов, то есть за гигабайт

00:10:31.547 --> 00:10:36.500
оплачиваете определенную сумму. Более подробнее
вы можете посмотреть на странице CloudWatch Pricing.

00:10:36.500 --> 00:10:48.048
Вопрос. Почему AWS приостановил модель оплаты
Scheduled Reserved Instances для сервиса Amazon EC2?

00:10:48.072 --> 00:10:59.500
Отвечаю. Так как я не являюсь сотрудником AWS,
я не владею официальным ответом на этот вопрос.

00:10:59.500 --> 00:11:09.988
Мы лишь можем предположить, что затраты на
обслуживание и поддержку модели Scheduled Reserved

00:11:10.012 --> 00:11:20.500
Instances себя не окупили, и в связи с этим эта
фича была свернута и более не предоставляется.

00:11:20.500 --> 00:11:25.132
Есть очень много примеров
внутри AWS, когда либо сервис, либо

00:11:25.156 --> 00:11:30.484
какая-то фича перестает быть
доступной, но взамен в той же новости о

00:11:30.508 --> 00:11:35.557
прекращении того или иного сервиса
также пишется о том, что вышел

00:11:35.581 --> 00:11:41.500
следующий сервис, который вы можете
использовать как альтернативу старому.

00:11:41.500 --> 00:11:45.982
В случае со Scheduled Reserved
Instances ничего подобного я,

00:11:46.006 --> 00:11:50.488
к сожалению, не находил, и
предполагаю, что в целом эта идея

00:11:50.512 --> 00:11:54.699
с Scheduled Reserved Instances
является не очень удачной и

00:11:54.723 --> 00:11:59.500
прибыльной для облачного
провайдера, поэтому этого варианта нет.

00:11:59.500 --> 00:12:07.918
Но при этом я нисколько не разочарован,
потому что мы с вами рассмотрели на

00:12:07.942 --> 00:12:17.500
лекции, что есть более трех различных
вариантов моделей оплаты сервиса Amazon EC2.

00:12:17.500 --> 00:12:22.989
Более того, есть также подход Serverless,
вы можете использовать контейнеры.

00:12:23.013 --> 00:12:27.988
Таким образом в зависимости от
вашей бизнес-задачи вы всегда можете

00:12:28.012 --> 00:12:33.244
найти подходящий для вас сервис,
связку сервисов, которые предоставят вам

00:12:33.268 --> 00:12:38.500
максимальную выгоду и позволят
компании, бизнесу увеличить свою прибыль.

00:12:38.500 --> 00:12:46.488
Вопрос. Представим такой случай. Компания
приобрела определенный объем Instances EC2 по модели

00:12:46.512 --> 00:12:54.500
оплаты Reserved Instances, а именно AURI,
то есть All Upfront Reserved Instances на 3 года.

00:12:54.500 --> 00:12:58.708
То есть на 3 года наперед с
учетом скидки оплатила этот

00:12:58.732 --> 00:13:03.488
объем инстансов. Далее, через год 
эта компания обанкротилась

00:13:03.512 --> 00:13:08.493
и что произойдет с оставшейся частью?
Будет ли она пропорционально

00:13:08.517 --> 00:13:12.500
возвращена? Будет ли какая-либо 
компенсация от AWS?

00:13:12.500 --> 00:13:18.982
Отвечаю. Reserved Instances - это
та модель оплаты за сервисы EC2,

00:13:19.006 --> 00:13:25.488
которая предоставляет Amazon
некоторую полезную информацию.

00:13:25.512 --> 00:13:31.994
А это та информация, которая означает,
что вы как клиент будете год либо

00:13:32.018 --> 00:13:38.500
3 года гарантированно использовать
некоторую часть инстансов EC2.

00:13:38.500 --> 00:13:42.488
С этой информацией AWS может
планировать наперед развитие своей

00:13:42.512 --> 00:13:46.500
глобальной инфраструктуры, а
также развитие своих дата-центров.

00:13:46.500 --> 00:13:51.982
Amazon не будет компенсировать вам
оставшуюся, неиспользованную часть

00:13:52.006 --> 00:13:57.488
Reserved Instances, а иначе бы
сломалась вся идея Reserved Instances.

00:13:57.512 --> 00:14:02.994
Поэтому есть один вариант с некоторой
долей вероятности компенсировать

00:14:03.018 --> 00:14:08.500
свои затраты. Это продать ваши
Reserved Instances в AWS Marketplace.

00:14:08.500 --> 00:14:17.614
AWS Marketplace - некий виртуальный рынок, где можно
продавать или покупать IT-ресурсы. Там же вы можете

00:14:17.638 --> 00:14:26.500
продать или купить Reserved Instances. В случае, если
находится покупатель, вы возвращаете ваши расходы.

00:14:26.500 --> 00:14:37.601
В случае, если не находится, то с каждым днем у
вас будет впустую отрабатывать ваши инстансы. Таким

00:14:37.625 --> 00:14:48.500
образом пройдет срок покупки Reserved Instances
и какая-то часть ваших вложений уйдет впустую.

00:14:48.500 --> 00:14:59.488
Поэтому общая рекомендация, перед тем как вы будете
покупать Reserved Instances, необходимо максимально

00:14:59.512 --> 00:15:10.500
проработать этот вопрос и исключить тот случай, когда
часть Reserved Instances перестанет быть нужной.

00:15:10.500 --> 00:15:16.488
Эти кейсы максимально нужно исключить.
В тот момент, когда вы будете максимально в

00:15:16.512 --> 00:15:22.500
этом уверены, покупка Reserved Instances
является оправданным и правильным решением.

00:15:22.500 --> 00:15:26.738
На этом мы закончили разбор всех
вопросов, полученных от вас. Еще раз

00:15:26.762 --> 00:15:31.500
спасибо за отправленные вами вопросы.
Ждем новые интересующие вас вопросы.

00:15:31.500 --> 00:15:41.500
На этом мы закрываем сессию вопросов и ответов
и увидимся с вами на следующих наших активностях.
