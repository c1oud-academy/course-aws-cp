WEBVTT

00:00:00.000 --> 00:00:07.000
Қайырлы күн, құрметті студенттер! Сіздерді бүгінгі
сұрақ-жауап сессиясында көргеніме қуаныштымын.

00:00:07.000 --> 00:00:14.000
Сіздерден келген көптеген сұрақтарға
жауаптар дайындап қойдық. Ендеше, бастайық.

00:00:16.000 --> 00:00:21.190
Сұрақ. Басқа стандартты
провайдерлер контейнерге қатысты

00:00:21.214 --> 00:00:27.000
қызметтерді ұсына ма, әлде
бұл тек AWS ерекшелігі ме?

00:00:27.000 --> 00:00:32.678
Жауабым. Контейнерге қатысты сервистер бұлтты
провайдерлердің көпшілігінде қолжетімді.

00:00:32.702 --> 00:00:38.000
Алайда олардың даму
дәрежесі әртүрлі болуы мүмкін.

00:00:38.000 --> 00:00:42.655
Мысалы, бір жерде бұл бұрыннан бері
жүзеге асырылып келе жатқан және

00:00:42.679 --> 00:00:48.000
контейнерлермен жұмыс істеу үшін белсенді
қолданылатын жақсы сервис болса,

00:00:48.000 --> 00:00:53.988
басқа провайдерлер бұл сервиске жақында
ие болғандықтан әлі толық дамымай,

00:00:54.012 --> 00:00:57.806
тиісінше, пайдаланушылар оны әзір
пайдаланғысы келмеуі мүмкін. 

00:00:57.830 --> 00:01:02.000
Сондықтан мұның бәрі нақты жағдайларға байланысты
және әр жағдайды мұқият талдау керек.

00:01:02.000 --> 00:01:13.112
Айта кететін екі жағдай бар. Біріншіден,
сервистердің көпшілігі алдымен AWS-те қолданысқа

00:01:13.136 --> 00:01:20.000
еніп, содан кейін оларды басқа
бұлт провайдерлері тез көшіріп алады.

00:01:20.000 --> 00:01:30.000
Екіншіден, AWS көшбасшылығына қарамастан, әрбір
бұлт провайдері белгілі бір бағытта ерекшеленеді.

00:01:30.000 --> 00:01:36.095
Олар өз негізгі салаларында
жаңа сервистерді ертерек енгізіп,

00:01:36.119 --> 00:01:42.000
сонымен қатар жетілдірілген
шешімдерді ұсына алады.

00:01:42.000 --> 00:01:51.000
Кез келген провайдердің қай бағытта озық екенін
Интернет арқылы өз бетіңізше зерттей аласыз.

00:01:51.000 --> 00:01:59.000
Бұл біздің курстың тақырыбы емес, десек те
бұл жағдайдың шынайлығын атап өткен жөн.

00:01:59.000 --> 00:02:10.000
Сұрақ. Docker-контейнерлермен жұмыс істеудің
қандай артықшылықтары бар? Жауабым.

00:02:10.000 --> 00:02:14.746
Біріншіден, егер сізде осындай сұрақ туындаса,
мен сізге дәрісті қайта қарап шығуды ұсынамын,

00:02:14.770 --> 00:02:20.000
себебі біз бұл тақырыпты
егжей-тегжейлі талқылаған едік.

00:02:20.000 --> 00:02:24.631
Бұл кезеңде мен Docker-контейнерлерінің
неге назар аударуға тұрарлық екенін және

00:02:24.655 --> 00:02:30.000
олар компанияға қандай пайда әкелетінін
қарапайым тілмен түсіндіргім келеді.

00:02:30.000 --> 00:02:41.000
Docker-контейнерлерінің негізгі бәсекелесі
дәстүрлі виртуалды машиналар болып табылады.

00:02:41.000 --> 00:02:50.000
Біз білетіндей, виртуалды машиналар қарапайым,
әлсіз, сонымен қатар өте қуатты болуы мүмкін.

00:02:50.000 --> 00:02:59.000
Алайда кейде бізге белгілі бір жүктемелер немесе
тапсырмалар үшін өте аз сыйымдылық қажет,

00:02:59.000 --> 00:03:09.000
немесе біз өте нақты ресурстарды қажет
ететін қосымшаларға тап боламыз.

00:03:09.000 --> 00:03:19.000
Мысалды қарастырайық: бізде ақпараттық
бюллетеньге жазылу үшін сайтта батырма бар.

00:03:19.000 --> 00:03:25.000
Бұл батырма сирек қолданылатындықтан
оған бүкіл серверді арнау орынсыз.

00:03:25.000 --> 00:03:33.669
Сонымен қатар, тіпті кішкентай сервер де осы
функцияға төленетін инвестициядан көп ақша жұмсайды.

00:03:33.693 --> 00:03:43.036
Көбіне ол босқа тұратын болады. Бұл жерде
Docker-контейнерлер бір машинада мыңдаған

00:03:43.060 --> 00:03:52.165
шағын контейнерлерді орналастыра алып,
олардың әрқайсысы тәуелсіз және нақты

00:03:52.189 --> 00:04:01.000
сұраныстарды өңдей алатынымен ыңғайлы. Бұл
қосымшаның кішкене бөліктері болуы мүмкін.

00:04:01.000 --> 00:04:11.689
Осылайша, біз қажетті қуаттарды нақты
жүктемелерге бейімдеу арқылы шығындарымызды

00:04:11.713 --> 00:04:24.000
едәуір азайтып, оңтайландыра аламыз.
Бұл Docker-контейнерлердің артықшылығы.

00:04:24.000 --> 00:04:31.016
Келесі сұрақ алдыңғысымен байланысты, бірақ
кері жағдайы. Docker контейнерлерінің

00:04:31.040 --> 00:04:38.667
кемшіліктері қандай? Менде
Docker-контейнерлерімен тығыз жұмыс істеу

00:04:38.691 --> 00:04:46.989
мүмкіндігі болмады, бірақ менің бақылауларым
мен пікірлерге сүйене отырып,

00:04:47.013 --> 00:04:55.000
Docker-контейнерінің жақсы маманын табу өте
қиын болуы мүмкін екенін атап өткім келеді.

00:04:55.000 --> 00:05:02.155
Сонымен қатар, мұндай мамандардың қызметі, әдетте,
қымбат тұрады. Сондықтан тиімді жол – өз

00:05:02.179 --> 00:05:09.000
мамандарыңызды даярлау. Алайда олардың барлығы
жаңа нәрселерді үйренуге дайын емес болуы мүмкін.

00:05:09.000 --> 00:05:17.703
Егер мұндай адамдар бар болса, олардың еңбек
нарығындағы құны артады және бір сәтте олар көбірек

00:05:17.727 --> 00:05:27.000
ақы төленетін жұмыс таба алады немесе біліктілігін
арттыру үшін жоғары жалақы сұрауы мүмкін.

00:05:27.000 --> 00:05:31.488
Бұл компанияның бизнес-процестеріне
қатысты мәселелер,

00:05:31.512 --> 00:05:36.000
сондықтан басшылық осы
тармақтарды ескеруі керек.

00:05:36.000 --> 00:05:43.536
Кейде жоғары білікті маманды ұстау құны
виртуалды машиналардан Docker-контейнерлеріне

00:05:43.560 --> 00:05:51.000
көшу кезінде қол жеткізілген
үнемдеуден асып кетуі мүмкін.

00:05:51.000 --> 00:05:58.988
Виртуалды машиналардың мөлшері сіздің жұмыс
жүктемелеріңіз үшін өте қолайлы болмаса да, бұл

00:05:59.012 --> 00:06:07.000
бір маманның жалақысынан арзан болуы мүмкін.
Мұның бәрі сіздің бизнесіңіздің көлеміне байланысты.

00:06:07.000 --> 00:06:15.289
Егер сізде үлкен жүктемелері бар
үлкен инфрақұрылым болса,

00:06:15.313 --> 00:06:23.000
қуаттылықты оңтайландырудан үнемдеу
маманның жалақысын жаба алады.

00:06:23.000 --> 00:06:31.000
Сондықтан бәрі нақты жағдайға
байланысты шешім шығару керек.

00:06:31.000 --> 00:06:38.000
Сұрақ. Docker-контейнерлерінің виртуалды
машиналардан айырмашылығы неде? Жауабым.

00:06:38.000 --> 00:06:43.488
Біз мұны да дәрісте егжей-тегжейлі талқыладық,
егер сұрақтар туындаса, қайталауды ұсынамын.

00:06:43.512 --> 00:06:49.000
Мұнда мен келесі сәттерді қарапайым тілмен
түсіндіргім келеді: Docker-контейнерлері әдеттегі

00:06:49.000 --> 00:06:57.000
виртуалды машиналарға қарағанда әлдеқайда аз, бұл
бір серверде мыңдаған контейнерлерді орналастыруға

00:06:57.000 --> 00:07:02.488
мүмкіндік береді. Осылайша, Docker-контейнерлерін
қолдана отырып, серверлік қуаттарды

00:07:02.512 --> 00:07:08.000
қолданыстағы жүктемелерге
мүмкіндігінше дәл реттеуге болады.

00:07:08.000 --> 00:07:18.927
Сонымен қатар, олардың ерекшеліктеріне
байланысты контейнерлер әлдеқайда жылдам

00:07:18.951 --> 00:07:31.000
жұмыс істейді, бұл сіздің инфрақұрылымыңызды
жылдамдатады және ресурстарды үнемдейді.

00:07:31.000 --> 00:07:34.988
Виртуалды машиналар әмбебаптығы
мен ұзақ тарихына байланысты

00:07:35.012 --> 00:07:39.000
бұлтты технологиялар дәуірінің
басынан бері нарықта болды.

00:07:39.000 --> 00:07:46.000
Виртуалды машиналармен жұмысты оңтайландыру
үшін көптеген шешімдер әзірленді

00:07:46.000 --> 00:07:53.000
және олармен жұмыс істей
алатын көптеген мамандар бар.

00:07:53.000 --> 00:07:58.000
Docker-контейнерлері жағдайында
білікті маман табу қиын болуы мүмкін.

00:07:58.000 --> 00:08:01.988
Сонымен қатар, егер сіз ондай
маман тапсаңыз да, оның қызметі

00:08:02.012 --> 00:08:06.000
өзінің тар мамандануына
байланысты өте қымбат болуы мүмкін.

00:08:06.000 --> 00:08:13.000
Сұрақ. Docker-контейнерлер
виртуалды машиналарды алмастыра ала ма?

00:08:13.000 --> 00:08:16.488
Жауабым. Иә, контейнерлер виртуалды
машиналарды алмастыра алады,

00:08:16.512 --> 00:08:20.000
өйткені олар танымал болып
келе жатқан балама технология.

00:08:20.000 --> 00:08:29.000
Алайда біз мұнда кішкене ескертпе жасауымыз
керек: контейнерлер әлі де виртуалды машинада

00:08:29.000 --> 00:08:33.501
жұмыс істейді. Бірақ айырмашылық жұмыс
деңгейінде жатыр. Егер біз бұрын

00:08:33.525 --> 00:08:38.544
виртуалды машина деңгейінде жұмыс
істейтін болсақ, қазір виртуалды машина

00:08:38.568 --> 00:08:43.772
көп қабатты ғимарат сияқты, ондағы әрбір
“пәтер” біздің контейнер болып табылады.

00:08:43.796 --> 00:08:49.000
Осылайша, біз контейнер
деңгейінде жұмыс істеп жатырмыз.

00:08:49.000 --> 00:08:59.000
Болашақта контейнерлерді пайдалану одан да
кең таралып, мамандар саны артады,

00:08:59.000 --> 00:09:07.000
яғни компания Docker және Kubernetes-пен
таныс мамандарға қол жеткізе алады.

00:09:07.000 --> 00:09:13.000
Сонымен қатар, контейнерлермен жұмыс істеуді одан
әрі жеңілдететін жаңа сервистер пайда болады деп

00:09:13.000 --> 00:09:21.000
күтілуде, бұл IT-инфрақұрылымның одан әрі
таралуына әкеледі, олар бастапқыда немесе соңында

00:09:21.000 --> 00:09:29.000
контейнерлерге ауысады және таза виртуалды
машиналарды пайдаланудан бас тартады.

00:09:29.000 --> 00:09:40.000
Тағы бір маңызды мәселе – біздің дәрістерімізде
айтылған тағы бір Serverless технологияның болуы.

00:09:40.000 --> 00:09:51.000
Бұл балама және тиімді шешім, бірақ оның қолданылуы
нақты бизнес мақсаттары мен контекстіне байланысты.

00:09:54.000 --> 00:09:58.000
Сұрақ. Open source бағдарламалық
жасақтама нені білдіреді?

00:09:58.000 --> 00:10:01.103
Жауабым. Бұл ақпараттық
технологиялардың жалпы саласында

00:10:01.127 --> 00:10:04.000
қолданылатын және бұлтты
технологиялармен шектелмейтін термин.

00:10:04.000 --> 00:10:11.000
Оның идеясы – әртүрлі шешімдерді әзірлеп,
халықаралық қауымдастықпен

00:10:11.000 --> 00:10:16.000
тегін бөлісуге дайын
көптеген энтузиасттардың болуы.

00:10:16.000 --> 00:10:28.000
Бұл тәсіл жалпы мәселені шешуге тырысатын әлемнің
түкпір-түкпірінен келген энтузиасттарды біріктіреді

00:10:28.000 --> 00:10:39.000
және олар нақты мәселелерді шешетін бағдарламалық
жасақтаманы әзірлеу үшін командаларда ынтымақтасады.

00:10:42.000 --> 00:10:49.000
Open source-ке қатысты бөлек
тақырып – лицензиялар, соның ішінде

00:10:49.000 --> 00:10:53.000
оpen source PLO және онымен байланысты
нюанстар. Олар әр лицензияның пайдалану

00:10:53.000 --> 00:10:55.000
шарттарын, шектеулері
мен ерекшеліктерін анықтайды.

00:10:55.000 --> 00:11:01.000
Алайда бұл тақырып біздің курстың шеңберінен тыс,
сондықтан оны өзіңіз зерттеп алуыңыз керек.

00:11:02.000 --> 00:11:10.000
Бизнесте оpen source-ті пайдалану
туралы айтатын болсақ, бұл жалпы сұрақ.

00:11:10.000 --> 00:11:15.000
Оған біржақты жауап беру мүмкін емес,
өйткені бәрі нақты бизнеске және сіздің

00:11:15.000 --> 00:11:20.000
инфрақұрылымыңызда оpen source шешімді
қайда қолданатындығыңызға байланысты.

00:11:20.000 --> 00:11:27.100
Сонымен қатар, оpen source
шешімнің өзін бағалау қажет:

00:11:27.124 --> 00:11:35.000
танымалдылық, сенімділік,
қателердің болмауы және қауіпсіздік.

00:11:35.000 --> 00:11:45.440
Мысалы, бұл мәселе қаржы секторындағы
компаниялар үшін өте маңызды,

00:11:45.464 --> 00:11:55.627
өйткені хакерлер оларды компанияның жұмысына
шабуыл жасау және бұзу үшін пайдаланса,

00:11:55.651 --> 00:12:08.000
болашақта бизнеске теріс әсер етуі
ықтимал осалдықтар болуы мүмкін.

00:12:08.000 --> 00:12:18.037
Егер сіздің бизнесіңіз шектеулі болса, оpen source
шешімдерді қолдануды қарастырған жөн, өйткені қазіргі

00:12:18.061 --> 00:12:28.000
уақытта ірі компаниялар мен корпоративтік ортада
сәтті қолданылатын көптеген озық бағдарламалар бар.

00:12:28.000 --> 00:12:33.000
Сұрақ. Kubernetes пайдаланудың
негізгі артықшылықтары қандай?

00:12:33.000 --> 00:12:43.000
Жауабым. Kubernetes – Docker-контейнерлерін
оркестрлеуге арналған қондырма.

00:12:43.000 --> 00:12:50.218
Docker-контейнерлерін пайдалану,
әсіресе 100-ден 1000-ға дейін

00:12:50.242 --> 00:12:57.000
немесе одан да көп контейнерлер
болған кезде орынды.

00:12:57.000 --> 00:13:06.988
Мұндай жағдайларда Kubernetes
контейнерлерін басқарудың жетілдірілген

00:13:07.012 --> 00:13:17.000
әдістерін ұсынады,
олар әр түрлі болуы мүмкін.

00:13:17.000 --> 00:13:23.931
Docker-контейнерлерінің аз санымен сіз
Docker-контейнерлерін ұйымдастыратын, бірақ

00:13:23.955 --> 00:13:32.000
Kubernetes қолданбайтын Amazon ECS (Elastic
Container Service) пайдалануды қарастыра аласыз.

00:13:32.000 --> 00:13:42.000
Сондай-ақ, Docker-контейнерлерімен
тікелей жұмыс істейтін басқа шешімдер бар.

00:13:42.000 --> 00:13:49.000
Таңдау сіздің нақты міндеттеріңізге
және бизнесіңізге байланысты.

00:13:49.000 --> 00:13:54.103
Компаниялар өз саласына қарай ерекшеленеді.
Кейбір компаниялар, мысалы, өнім компаниялары,

00:13:54.127 --> 00:13:59.000
Kubernetes және Docker-контейнерлерін
пайдалану үшін әрдайым орынды болмауы мүмкін.

00:13:59.000 --> 00:14:07.031
Кейде компаниялар, әсіресе бірнеше қосымшаларды
әзірлейтін немесе тәуелсіз шағын қосымшалардан

00:14:07.055 --> 00:14:15.000
тұратын архитектурасы бар компаниялар
Docker-контейнерлерін пайдалануды қарастыруы мүмкін.

00:14:15.000 --> 00:14:25.000
Алайда, өтпелі кезеңге дейін алдын-ала есептеуді
жүргізіп, өтпелі процестің өзі қымбат

00:14:25.000 --> 00:14:33.000
болғандықтан, ауысудың іс жүзінде пайдалы
болатынына көз жеткізу керек.

00:14:33.000 --> 00:14:39.488
Ол мамандарды, оқытуды, қайта құруды, жөндеуді
және Docker-контейнерлерін қолдана отырып, ағымдағы

00:14:39.512 --> 00:14:46.000
күйден жаңасына көшудің барлық процесін қажет
етеді. Сондықтан мұның бәрі мұқият есептелуі керек.

00:14:46.000 --> 00:14:53.240
Егер артықшылықтар шынымен маңызды
болса, компания Docker-контейнерлерін,

00:14:53.264 --> 00:15:00.000
мүмкін олармен бірге Kubernetes
пайдалануға ауысуды шешуі мүмкін.

00:15:00.000 --> 00:15:08.000
Сұрақ. Нақты AWS сервистерін пайдаланатын
компаниялардың мысалдарын келтіріңіз.

00:15:08.000 --> 00:15:15.488
Жауабым. Ең қызықты мысалдардың кейбірін
қарастырайық. Біз есептеу сервистерімен,

00:15:15.512 --> 00:15:23.000
соның ішінде контейнерлермен жұмыс
істейтіндермен таныстық. ECR-ден бастайық.

00:15:23.000 --> 00:15:27.000
Бұл сервис, және егер сіз осы сервистің
парақшасында, «Customers» қойындысын ашсаңыз,

00:15:27.000 --> 00:15:35.000
осы сервисті белсенді қолданатын
компаниялардың мысалдарын көресіз.

00:15:35.000 --> 00:15:43.000
Сондай-ақ, онда Reinvent конференциясының
презентациялары мен бейнелеріне сілтемелер бар.

00:15:43.000 --> 00:15:49.170
Reinvent – серіктестер мен AWS
сервистерінің негізгі пайдаланушыларын

00:15:49.194 --> 00:15:55.000
біріктіретін AWS ұйымдастыратын
жыл сайынғы үлкен конференция.

00:15:55.000 --> 00:16:01.717
Amazon Elastic Container Registry (Amazon
ECR) сервисі туралы айтатын болсақ, ең танымал

00:16:01.741 --> 00:16:09.000
пайдаланушылардың бірі – Pinterest, біздің
өмірімізде танымал және жиі қолданылатын қосымша.

00:16:09.000 --> 00:16:14.662
Тағы бір мысал – Amazon Elastic
Container Service (Amazon ECS)

00:16:14.686 --> 00:16:21.000
сервисі, оны танымал автомобиль
өндірушісі Volkswagen пайдаланады.

00:16:21.000 --> 00:16:27.000
Autodesk, 3D модельдеуге арналған бағдарламалық
жасақтаманы әзірлейтін компанияны атап өткен жөн.

00:16:27.000 --> 00:16:33.988
Amazon Elastic Kubernetes Service (Amazon EKS)
сервисі туралы айтатын болсақ, танымал

00:16:34.012 --> 00:16:41.000
пайдалану жағдайы – біз күн сайын
қолданатын қосымша Snapchat.

00:16:41.000 --> 00:16:48.988
Сонымен қатар, 2018-2019 жылдардағы Snapchat
презентацияларына сілтемелер бар, онда

00:16:49.012 --> 00:16:57.000
олар өз тәжірибелерімен және сервистің
артықшылықтарымен бөліседі.

00:16:57.000 --> 00:17:10.000
Тағы бір мысал – HSBC, Amazon EKS сервисін
кеңінен қолданатын ірі инвестициялық банк.

00:17:10.000 --> 00:17:14.285
Сервистің басты парақшасын ашып, сервисті
тағы кім пайдаланып жатқанын көру үшін

00:17:14.309 --> 00:17:19.000
«Customers» қойындысына өту арқылы
қосымша мысалдарды таба аласыз.

00:17:19.000 --> 00:17:23.988
Презентациялар мен бейнелерге
сілтемелер де бар, онда компаниялар

00:17:24.012 --> 00:17:29.000
сервисті пайдалану тәжірибесі мен
алған жеңілдіктері туралы айтады.

00:17:29.000 --> 00:17:35.779
Олардың кейбіреулері айтарлықтай
ақша үнемдеуге немесе ішкі процестерді

00:17:35.803 --> 00:17:42.000
оңтайландыруға мүмкіндік беретін
бірегей тәжірибемен бөліседі.

00:17:42.000 --> 00:17:47.000
Презентациялар графиктермен көрнекіленген,
бұл оларды зерттеуді одан әрі қызықты етеді.

00:17:47.000 --> 00:17:59.000
Сұрақ. Amazon SNS және Amazon SQS сервистерінің
мысалында pull және push архитектураларының

00:17:59.000 --> 00:18:05.157
айырмашылығы неде? Жауабым.
Егер архитектурадағы pull және push

00:18:05.181 --> 00:18:10.841
принциптерін қарастыратын болсақ, қарапайым
тілмен айтқанда, pull архитектурасы

00:18:10.865 --> 00:18:17.166
жағдайында сұрау көзі жіберілетін сұранысты
бастайды және алушыны іске қосады.

00:18:17.190 --> 00:18:24.000
Содан кейін алушы
бұл хабарды өңдейді.

00:18:24.000 --> 00:18:30.988
Екінші жағынан, push
архитектурасында біз кейінірек

00:18:31.012 --> 00:18:38.000
өңдеу үшін бастапқы жағында
хабарламалар жиынтығын жинаймыз.

00:18:38.000 --> 00:18:47.988
Дайын болған кезде, осы хабарламаларды
өңдеуді қажет ететін тарап кезекке (pull-ге) кіреді

00:18:48.012 --> 00:18:58.000
және осы хабарламаларды дәйекті түрде өңдейді.
Әрбір тәсілдің оң және теріс жақтары бар.

00:18:58.000 --> 00:19:01.507
Amazon SNS және Amazon
SQS сервситерінде pull тәсілін

00:19:01.531 --> 00:19:05.714
қолдана отырып, сіз еркін
байланысқан архитектураларды жасай

00:19:05.738 --> 00:19:09.227
аласыз. Архитектураның әлсіздігі 
жоғары байланысқан

00:19:09.251 --> 00:19:14.000
архитектураларға қарағанда икемді
және жақсы балама болып табылады.

00:19:14.000 --> 00:19:19.000
Біз мұны соңғы апталардағы дәрістерде
толығырақ талқылайтын боламыз.

00:19:19.000 --> 00:19:26.988
Еркін байланысқан архитектураларда
кейбір компоненттерді қажетсіз

00:19:27.012 --> 00:19:35.000
болған кезде ауыстыру, жаңарту
немесе алып тастау әлдеқайда оңай.

00:19:35.000 --> 00:19:41.146
Барлық компоненттер бір-бірімен
тығыз байланысты болған

00:19:41.170 --> 00:19:48.000
кезде, жақсарту, жаңарту
немесе жою процесі қиынға соғады.

00:19:48.000 --> 00:19:54.000
Бұл тұрғыда Amazon SNS және Amazon SQS
айтарлықтай көмек көрсетеді.

00:19:56.000 --> 00:19:59.000
Сұрақ. Lambda-функциясы дегеніміз не?
Жауабым.

00:19:59.000 --> 00:20:05.000
Lambda-функциясы AWS Lambda сервисі
аясындағы ІТ-ресурс болып табылады.

00:20:05.000 --> 00:20:10.000
AWS Lambda серверсіз есептеу
қуатын қамтамасыз етеді.

00:20:10.000 --> 00:20:18.000
Lambda-функциясын жасау үшін функция ішінде
орындалуы керек кодты жүктеу керек.

00:20:18.000 --> 00:20:23.988
Қажет болса, сіз Lambda-функциясы
жұмыс үшін ақпарат алатын деректер

00:20:24.012 --> 00:20:30.000
көздерін көрсете аласыз. Мысалы, дерек
көзі API Gateway болуы мүмкін.

00:20:30.000 --> 00:20:34.000
API Gateway пайдаланған кезде
сіз бөлек URL мекенжайын аласыз.

00:20:34.000 --> 00:20:38.488
Осы URL мекенжайына кірген кезде
сіз қосымша параметрлерді жібере

00:20:38.512 --> 00:20:43.000
аласыз, олар API Gateway сервисінен
өтіп, lambda-функциясына өтеді.

00:20:43.000 --> 00:20:47.045
API Gateway lambda-функциясын
шақырады, ал функция

00:20:47.069 --> 00:20:51.860
енгізілген кіріс деректерін
пайдаланып өз кодын өңдейді.

00:20:51.884 --> 00:20:56.930
Lambda-функциясын ешқандай
кіріс деректерін қабылдамайтын,

00:20:56.954 --> 00:21:02.000
бірдей логиканы ғана орындайтындай
конфигурациялауға болады.

00:21:02.000 --> 00:21:07.092
Алайда кіріс деректері кіргенде,
осы деректерге байланысты

00:21:07.116 --> 00:21:14.000
lambda-функциясының динамикалық
әрекетін код ішінде бағдарламалауға болады.

00:21:14.000 --> 00:21:23.690
Lambda-функциясын пайдаланудың
тағы бір мысалы – белгілі бір оқиға немесе

00:21:23.714 --> 00:21:33.000
кесте бойынша функцияны шақыру
үшін AWS EventBridge конфигурациясы.

00:21:33.000 --> 00:21:36.000
Бұл көбінесе ІТ-инфрақұрылымында
автоматтандыру үшін қолданылады.

00:21:36.000 --> 00:21:42.783
Мысалы, біз Amazon EC2 инстанстарын
күнделікті қосу және өшіру үшін

00:21:42.807 --> 00:21:49.488
жоспарлай аламыз: оларды
таңғы 7-де қосып, түнгі 2-де өшіресіз,

00:21:49.512 --> 00:21:56.244
осылайша біз пайдаланылмайтын
және ешкім жүйеге кірмейтін аралықта

00:21:56.268 --> 00:22:03.000
Amazon EC2 инстанстарын өшіру
арқылы ресурстарды үнемдей аламыз.

00:22:03.000 --> 00:22:08.982
Тұтастай алғанда, “serverless”
функциялары мен сервистері кең тақырыпты

00:22:09.006 --> 00:22:14.988
қамтиды. Бұл дамудың жаңа бағыты.
Кейбір IT-инфрақұрылымдар толығымен

00:22:15.012 --> 00:22:20.526
серверсіз технологияларға негізделген,
бұл ресурстарды айтарлықтай

00:22:20.550 --> 00:22:27.000
үнемдей алады, әсіресе ауыспалы
жүктемелері бар сервистер мен бизнес үшін.

00:22:27.000 --> 00:22:35.988
Біздің Cloud Academy шешімі API Gateway,
AWS Lambda, DynamoDB және Amazon S3

00:22:36.012 --> 00:22:45.000
сияқты серверсіз технологияларды қолдана
отырып жасалғанын атап өткім келеді.

00:22:49.000 --> 00:22:53.211
Сұрақ. Неліктен lambda-функциясы
максимум 15 минут жұмыс істей

00:22:53.235 --> 00:22:58.000
алады? Бұл басқа сервистермен
салыстырғанда тым аз ба, әлде көп пе?

00:22:58.000 --> 00:23:02.988
Жауабым. Иә, бұл дұрыс. Lambda-функциясының
максималды жұмыс уақыты – 15 минут, және бұл

00:23:03.012 --> 00:23:10.000
soft limit емес, бұл hard limit, сондықтан біз
оны өзгерте алмаймыз. 15 минут – 900 секунд.

00:23:12.000 --> 00:23:16.953
Өзімнің де, басқа
компаниялардағы әріптестерімнің де

00:23:16.977 --> 00:23:23.000
тәжірибесінен айта аламын,
99% жағдайда 15 минут жеткілікті.

00:23:23.000 --> 00:23:28.000
AWS Lambda және API Gateway
тіркесімі өте жиі қолданылады.

00:23:28.000 --> 00:23:33.000
Дегенмен, API Gateway өзінің 29 секундтық
hard limit-i бар екенін ескерген жөн.

00:23:33.000 --> 00:23:45.410
Егер AWS Lambda 29 секунд ішінде жауап бермесе, сұрау
күту уақытынан (timeout) асып кетті деп есептеледі

00:23:45.434 --> 00:23:57.000
және тиісті қате сіздің пайдаланушыларыңыз
көретін frontend, UI немесе веб-сайтқа қайтарылады.

00:23:57.000 --> 00:24:03.000
Бұл жағдайда сіз 15 минуттың 29 секундтан
әлдеқайда ұзақ екенін көре аласыз.

00:24:03.000 --> 00:24:11.422
Белгілі бір сайттар бар екеніне сүйене
отырып, яғни API Gateway арқылы қолданылатын

00:24:11.446 --> 00:24:21.000
frontend және жұмыс істейтін backend-те lambdа
құрылған болса, 29 секунд жеткілікті болады.

00:24:21.000 --> 00:24:29.536
Одан әрі жүрсек, веб-сайттар жұмысты тездететінін
және пайдаланушылардың көңілін қалдырып,

00:24:29.560 --> 00:24:38.000
сайттан кетіп қалмас үшін сайт ішінде кейбір
әрекеттерді орындайтынын бәріміз білеміз.

00:24:38.000 --> 00:24:42.155
Егер сіз бір-екі секунд
ішінде жауап алмасаңыз, бұл

00:24:42.179 --> 00:24:47.000
веб-ресурста отыру жағымсыз әрі
ыңғайсыз сезім тудырады. Компаниялар

00:24:47.000 --> 00:25:00.802
веб-сайттарды әзірлеу кезінде барлық сұраныстарын
бір немесе екі секундқа сәйкестендіруге тырысады.

00:25:00.826 --> 00:25:14.000
Осылайша көптеген жағдайларда AWS Lambda қолданған
кезде тіпті 29 секунд емес, 1-2 минут та жеткілікті.

00:25:14.000 --> 00:25:18.271
Иә, бізде AWS Lambda-ны асинхронды
түрде іске қосуға болатын жағдайлар

00:25:18.295 --> 00:25:23.000
бар, яғни сол сұраныс API Gateway
арқылы келіп, біздің lambda-ны шақырады.

00:25:23.000 --> 00:25:27.000
Содан соң AWS Lambda ұзақ
мерзімді тапсырманы орындайды.

00:25:27.000 --> 00:25:31.193
Ал UI, яғни API Gateway
сіздің сұранысыңызды өңдеуге

00:25:31.217 --> 00:25:35.988
қабылдап, бұдан былай ешқандай
нәтижені қайтара алмайды,

00:25:36.012 --> 00:25:40.577
өйткені өзін-өзі өңдеу 29
секундтан астам уақытты алады.

00:25:40.601 --> 00:25:45.000
Сондықтан бұл lambda-ны
асинхронды түрде шақырыңыз.

00:25:45.000 --> 00:25:51.000
Сол кезде Lambda осы тапсырманы орындау
үшін 15 минутқа дейін жұмыс істей алады.

00:25:51.000 --> 00:25:59.488
Енді келесі жағдайға назар аударайық. Егер
lambdа-функциясы өз жұмысын 15 минут ішінде

00:25:59.512 --> 00:26:08.000
аяқтамаса (бұл сирек, бірақ мүмкін), AWS Lambda
және AWS Step Functions тіркесі жиі қолданылады.

00:26:08.000 --> 00:26:16.000
AWS Step Functions – бұл lambdа-функцияларын
оркестрлеуге арналған функция.

00:26:16.000 --> 00:26:20.000
Бұл lambdа-функцияларын қосып қана қоймайды,
сонымен қатар басқа сервистермен өзара әрекеттесе

00:26:20.000 --> 00:26:22.000
алады, дегенмен AWS Lambda-мен біріктіру
кең таралған нұсқа болып табылады.

00:26:22.000 --> 00:26:28.739
Егер сіздің тапсырмаңызды тоқтатып, жалғастыруға
болатын болса, lambda-функциясы 15 минут ішінде

00:26:28.763 --> 00:26:36.000
немесе сәл аз жұмыс істейді. Содан кейін ол өз
күйін сақтайды және оны AWS Step Functions-ке береді.

00:26:36.000 --> 00:26:41.988
AWS Step Functions бірінші
lambda-функциясынан шығыс деректерін

00:26:42.012 --> 00:26:48.000
алады және оны келесі
lambda-функциясына кіріс ретінде береді.

00:26:48.000 --> 00:26:51.000
Бұл процесс әрбір дәйекті lambda-функциясы
өз жұмысын аяқтағанша жалғасады.

00:26:51.000 --> 00:26:55.488
AWS Step Functions ішінде сіз
барлық жұмыс аяқталғанша келесі

00:26:55.512 --> 00:27:00.000
lambda-функциялары дәйекті түрде
шақырылатын цикл жасай аласыз.

00:27:00.000 --> 00:27:05.000
AWS Step Functions сонымен қатар AWS толық
басқаратын серверсіз шешім болып табылады.

00:27:05.000 --> 00:27:20.000
Ол тез бапталынады және инфрақұрылымды қолдаудың
көптеген міндеттері оның көмегімен шешіледі.

00:27:20.000 --> 00:27:26.823
AWS Lambda-ны басқа сервистермен
салыстыру өте қиын, өйткені олардың өзіндік

00:27:26.847 --> 00:27:33.488
ерекшеліктері бар. Алайда, сіздің 
бірінші сұрағыңызға жауап бере отырып,

00:27:33.512 --> 00:27:40.604
мен 15 минут әдетте жеткілікті екенін
түсіндіруге тырыстым. Егер бұл жеткіліксіз

00:27:40.628 --> 00:27:47.000
болса, ішкі бизнес мәселелерін шешу
үшін қолдануға болатын шешім бар.

00:27:47.000 --> 00:27:52.000
Сұрақ. Serverless дегеніміз не?
Жауабым.

00:27:52.000 --> 00:27:57.523
Serverless – бұл Serverless-сервисті
пайдаланушыларға IT-ресурстарға,

00:27:57.547 --> 00:28:02.988
соның ішінде виртуалды серверлерге
және сіздің есептеу қуатыңызға

00:28:03.012 --> 00:28:08.614
қызмет көрсетуге алаңдамауға,
сонымен қатар бизнес міндеттеріне көбірек

00:28:08.638 --> 00:28:14.000
көңіл бөлуге мүмкіндік беретін жаңа 
технология. Мысал келтірейін.

00:28:14.000 --> 00:28:18.000
AWS Lambda – ең көрнекті
мысалдардың бірі.

00:28:18.000 --> 00:28:27.488
Бұл кодты жүктеуге мүмкіндік беретін сервис,
ал іске қосуға байланысты барлық нәрсені AWS

00:28:27.512 --> 00:28:37.000
басқарады. Яғни, ол сізден техникалық қызмет
көрсету тапсырмаларын толығымен өзіне алады.

00:28:37.000 --> 00:28:41.988
Serverless шешімнің тағы бір
мысалы – API Gateway сервисі, ол да

00:28:42.012 --> 00:28:47.000
танымал. Ол AWS Lambda компаниясымен 
серіктестікте жұмыс істейді.

00:28:47.000 --> 00:28:56.845
Бұл сервистің көмегімен API сұрауларын өңдейтін
серверлерді әзірлеу және қолдау қажет емес.

00:28:56.869 --> 00:29:06.604
Оның орнына сіз SDK, CLI көмегімен AWS
Management Console-де қажетті параметрлерді жасай

00:29:06.628 --> 00:29:16.802
аласыз немесе CloudFormation бағдарламасында
конфигурацияны жаза аласыз. Содан кейін сіз бұл

00:29:16.826 --> 00:29:27.000
параметрлерді API автоматты түрде баптайтын
және қолдайтын API Gateway сервисіне жібересіз.

00:29:27.000 --> 00:29:37.000
Сіз тек өңдейтін сұрауларыңыздың саны үшін төлейсіз,
ал қалған сұрау қызметі AWS арқылы өңделеді.

00:29:37.000 --> 00:29:45.060
AWS жағында сонымен қатар бірге
пайдалануға болатын көптеген Serverless-сервистер

00:29:45.084 --> 00:29:52.034
бар. Бұл DynamoDB, Amazon S3,
Step Functions және т.б. Осылайша, сіз

00:29:52.058 --> 00:30:00.017
serverless-сервистердің өте үлкен
жиынтығы бар екенін көре аласыз және әлемде

00:30:00.041 --> 00:30:08.000
IT-инфрақұрылымдар serverless-шешімдерде
толығымен өсіп келе жатқан үрдіс бар.

00:30:08.000 --> 00:30:13.000
Осылайша, бұл жағдайда қызметкерлердің үлкен
штатын ұстап тұрудың қажеті жоқ, сонымен бірге

00:30:13.000 --> 00:30:22.000
бұл шешім тұрақты жұмыс жүктемелері болмаса,
мүмкіндігінше ақша үнемдеуге мүмкіндік береді.

00:30:22.000 --> 00:30:25.030
Тұрақты жүктемелер туралы айтатын
болсақ, барлық serverless-шешімдер

00:30:25.054 --> 00:30:29.119
оңтайлы бола бермейді. Мұндай жағдайларда 
компаниялар контейнерлерге көшуді

00:30:29.143 --> 00:30:36.000
немесе дәстүрлі виртуалды машиналарды
пайдалануды қарастыра бастайды.

00:30:36.000 --> 00:30:42.000
Алайда, бастапқы кезеңдегі үнемдеу
маңызды артықшылық болып табылады.

00:30:42.000 --> 00:30:48.963
Әсіресе, компания жаңадан құрылған
кезде немесе стартап болған кезде.

00:30:48.987 --> 00:30:57.591
Пайдаланылмаған ресурстарға төлем жасамай
ақша үнемдеу мүмкіндігі құнды артықшылық

00:30:57.615 --> 00:31:05.348
болып табылады, бұл сізге бастапқыда
қажетсіз шығындардан аулақ болуға және

00:31:05.372 --> 00:31:13.000
қолда бар қаражатты басқа қажеттіліктерге 
пайдалануға мүмкіндік береді.

00:31:13.000 --> 00:31:17.482
Сондай-ақ, бұл іске қосу
қалыпты жағдайға жетіп, тұрақты

00:31:17.506 --> 00:31:21.988
жұмыс жүктемелерімен күресу 
ықтималдығын арттырады. Осыдан

00:31:22.012 --> 00:31:26.179
кейін сіз компанияның ішкі
процестері мен мақсаттарына

00:31:26.203 --> 00:31:31.000
байланысты басқа архитектураларға
ауысуды қарастыра аласыз.

00:31:31.000 --> 00:31:39.000
Осымен, біз осы аптадағы дәріске
қатысты барлық сұрақтарды қарастырдық.

00:31:39.000 --> 00:31:42.453
Менің ойымша, сіз қажетті
жауаптарыңызды алдыңыз және AWS

00:31:42.477 --> 00:31:46.301
бұлтымен жұмыс істеудің кейбір
аспектілерін жақсы түсіндіңіз

00:31:46.325 --> 00:31:50.150
деп үміттенемін. Егер сізде 
сұрақтар туындаса, бізге жазыңыз,

00:31:50.174 --> 00:31:54.000
біз оларды сұрақ-жауап сессиясы
түрінде жинап, жариялаймыз.

00:31:54.000 --> 00:32:17.000
Осымен бүгінгі сессиямыз аяқталды.
Сізді келесі белсенділіктерде күтеміз.