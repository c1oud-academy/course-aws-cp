WEBVTT

00:00:00.000 --> 00:00:07.000
Добрый день, уважаемые студенты! Я рад видеть вас
всех на очередной сессии вопросов и ответов.

00:00:07.000 --> 00:00:14.000
Мы получили множество ваших вопросов
и подготовили ответы. Итак, начнем.

00:00:16.000 --> 00:00:21.190
Вопрос. Предоставляют ли другие
стандартные провайдеры услуги,

00:00:21.214 --> 00:00:27.000
связанные с работой с контейнерами,
или это особенность только AWS?

00:00:27.000 --> 00:00:32.678
Отвечаю. Сервисы, связанные с работой
с контейнерами, доступны у большинства

00:00:32.702 --> 00:00:38.000
облачных провайдеров. Однако степень 
их развития может варьироваться.

00:00:38.000 --> 00:00:42.655
Где-то, например, это уже
хорошо отлаженный сервис, давно

00:00:42.679 --> 00:00:48.000
внедренный и активно использующийся
для работы с контейнерами.

00:00:48.000 --> 00:00:53.988
У других провайдеров данный сервис
появился относительно недавно, он еще не

00:00:54.012 --> 00:01:00.000
до конца отработан, и, соответственно,
пользователи неохотно его применяют.

00:01:00.000 --> 00:01:02.000
Поэтому все это зависит от конкретных условий, и
нужно внимательно анализировать каждый случай.

00:01:02.000 --> 00:01:07.000
Хотелось бы дополнительно
отметить два момента.

00:01:07.000 --> 00:01:13.112
Во-первых, большинство сервисов
первоначально появляются у

00:01:13.136 --> 00:01:20.000
AWS, а затем быстро копируются
другими облачными провайдерами.

00:01:20.000 --> 00:01:30.000
Во-вторых, несмотря на лидерство AWS, каждый облачный
провайдер выделяется в определенных направлениях.

00:01:30.000 --> 00:01:36.095
В своих ключевых областях они
могут внедрять новые сервисы

00:01:36.119 --> 00:01:42.000
раньше, а также предлагать
более продвинутые решения.

00:01:42.000 --> 00:01:51.000
Можете самостоятельно изучить, в каких направлениях
сильны те или иные провайдеры, через интернет.

00:01:51.000 --> 00:01:59.000
Это не является темой нашего курса, однако
стоит отметить, что данная ситуация вполне реальна.

00:01:59.000 --> 00:02:10.000
Вопрос. Какие есть преимущества при работе
с Docker-контейнерами? Отвечаю.

00:02:10.000 --> 00:02:14.746
В первую очередь, если у вас
возник такой вопрос, рекомендую

00:02:14.770 --> 00:02:20.000
пересмотреть лекцию: мы обсуждали
эту тему достаточно подробно.

00:02:20.000 --> 00:02:24.631
На данном этапе мне бы хотелось простыми
словами объяснить, почему иногда стоит

00:02:24.655 --> 00:02:30.000
обратить внимание на Docker-контейнеры и
какие преимущества они могут принести компании.

00:02:30.000 --> 00:02:41.000
Главным конкурентом Docker-контейнеров
являются традиционные виртуальные машины.

00:02:41.000 --> 00:02:50.000
Как мы знаем, виртуальные машины могут быть
как простыми и слабыми, так и достаточно мощными.

00:02:50.000 --> 00:02:59.000
Однако иногда нам требуются очень небольшие
мощности для определенных нагрузок или задач,

00:02:59.000 --> 00:03:09.000
или мы сталкиваемся с приложениями,
которые нуждаются в очень специфичных ресурсах.

00:03:09.000 --> 00:03:19.000
Рассмотрим пример: у нас есть кнопка
на сайте для подписки на рассылку.

00:03:19.000 --> 00:03:25.000
Эта кнопка редко используется, поэтому
нецелесообразно выделять для нее целый сервер.

00:03:25.000 --> 00:03:33.669
Более того, даже маленький сервер потребляет
больше средств, чем мы хотели бы вложить в эту

00:03:33.693 --> 00:03:43.036
функцию. В большинстве случаев он просто будет
простаивать. Вот здесь Docker-контейнеры приходят

00:03:43.060 --> 00:03:52.165
на помощь: на одной машине мы можем разместить
тысячи маленьких контейнеров, каждый из которых

00:03:52.189 --> 00:04:01.000
независим и обрабатывает определенные запросы.
Это могут быть маленькие части приложения.

00:04:01.000 --> 00:04:11.689
Таким образом, мы можем значительно сократить
и оптимизировать свои расходы, адаптировав

00:04:11.713 --> 00:04:24.000
необходимые мощности под реальные нагрузки. Вот
в чем заключается преимущество Docker-контейнеров.

00:04:24.000 --> 00:04:31.016
Следующий вопрос связан с предыдущим,
но обратная ситуация. Какие есть

00:04:31.040 --> 00:04:38.667
недостатки у Docker-контейнеров?
Я не имел возможности тесно поработать с

00:04:38.691 --> 00:04:46.989
Docker-контейнерами, но основываясь на
моих наблюдениях и отзывах, хочу отметить,

00:04:47.013 --> 00:04:55.000
что найти хорошего специалиста по
Docker-контейнерам бывает очень непросто.

00:04:55.000 --> 00:05:02.155
Более того, такие специалисты обычно стоят 
дорого. Иначе говоря, альтернативой является

00:05:02.179 --> 00:05:09.000
подготовка собственных специалистов.
Однако не все из них готовы учиться новому.

00:05:09.000 --> 00:05:13.420
Если такие люди все-таки
находятся, их ценность на рынке

00:05:13.444 --> 00:05:17.703
труда возрастает, и в
определенный момент они могут

00:05:17.727 --> 00:05:21.892
найти более высокооплачиваемую
работу или попросить

00:05:21.916 --> 00:05:27.000
увеличения зарплаты в связи с
повышением своей квалификации.

00:05:27.000 --> 00:05:31.488
Это вопросы, связанные с
бизнес-процессами компании, и

00:05:31.512 --> 00:05:36.000
руководству следует принимать
во внимание эти моменты.

00:05:36.000 --> 00:05:43.536
Иногда стоимость содержания высококвалифицированного
 специалиста может превысить

00:05:43.560 --> 00:05:51.000
экономию, достигаемую при переходе с
виртуальных машин на Docker-контейнеры.

00:05:51.000 --> 00:05:58.988
Даже если размеры виртуальных машин не
идеально подходят под ваши нагрузки, это может

00:05:59.012 --> 00:06:07.000
быть дешевле, чем зарплата одного специалиста.
Все зависит от масштаба вашего бизнеса.

00:06:07.000 --> 00:06:15.289
Если у вас большая инфраструктура с
значительными нагрузками, экономия

00:06:15.313 --> 00:06:23.000
от оптимизации мощностей может
перекрыть зарплату специалиста.

00:06:23.000 --> 00:06:31.000
Поэтому все очень зависит от конкретной
ситуации, и именно от нее следует исходить.

00:06:31.000 --> 00:06:38.000
Вопрос. Чем отличаются Docker-контейнеры
от виртуальных машин? Отвечаю.

00:06:38.000 --> 00:06:46.000
Мы подробно обсуждали это на лекции, и если
остались вопросы, рекомендую к ней обратиться.

00:06:46.000 --> 00:06:49.000
Здесь же хотел бы простыми словами пояснить
следующее: Docker-контейнеры обычно гораздо меньше

00:06:49.000 --> 00:06:57.000
обычных виртуальных машин, что позволяет
разместить на одном сервере тысячи контейнеров.

00:06:57.000 --> 00:07:02.488
Таким образом, с помощью
Docker-контейнеров можно максимально

00:07:02.512 --> 00:07:08.000
точно подогнать мощности
сервера под существующие нагрузки.

00:07:08.000 --> 00:07:16.000
Кроме того, благодаря своей специфике,
контейнеры запускаются гораздо быстрее,

00:07:16.000 --> 00:07:31.000
что ускоряет работу вашей инфраструктуры
и позволяет экономить ресурсы.

00:07:31.000 --> 00:07:34.988
Виртуальные машины, в силу своей
универсальности и долгой истории,

00:07:35.012 --> 00:07:39.000
присутствуют на рынке с самого
начала эпохи облачных технологий.

00:07:39.000 --> 00:07:46.000
Множество решений было разработано
для оптимизации работы с виртуальными

00:07:46.000 --> 00:07:53.000
машинами, и специалистов, умеющих
с ними работать, гораздо больше.

00:07:53.000 --> 00:07:58.000
В случае с Docker-контейнерами могут возникнуть
сложности при поиске квалифицированного специалиста.

00:07:58.000 --> 00:08:01.988
Кроме того, если вы его
найдете, такой специалист может

00:08:02.012 --> 00:08:06.000
оказаться достаточно дорогим
из-за узкой специализации.

00:08:06.000 --> 00:08:13.000
Вопрос. Могут ли Docker-контейнеры
заменить виртуальные машины?

00:08:13.000 --> 00:08:16.488
Отвечаю. Да, контейнеры могут заменить
виртуальные машины, поскольку они

00:08:16.512 --> 00:08:20.000
представляют собой альтернативную
технологию, набирающую популярность.

00:08:20.000 --> 00:08:29.000
Однако здесь стоит сделать небольшую оговорку:
контейнеры все равно запускаются на виртуальной

00:08:29.000 --> 00:08:33.501
машине. Но отличие заключается 
в уровне работы. Если раньше мы

00:08:33.525 --> 00:08:38.544
работали на уровне виртуальной
машины, то теперь виртуальная машина

00:08:38.568 --> 00:08:43.772
становится своего рода многоэтажным
домом, где каждая 'квартира' - это

00:08:43.796 --> 00:08:49.000
наш контейнер. Таким образом, 
мы работаем уже на уровне контейнеров.

00:08:49.000 --> 00:08:59.000
В будущем, скорее всего, использование контейнеров
станет еще более массовым, количество специалистов

00:08:59.000 --> 00:09:07.000
увеличится, а значит, компания получит доступ к
профессионалам, знакомым с Docker и Kubernetes.

00:09:07.000 --> 00:09:13.000
Кроме того, ожидается появление новых сервисов,
которые дополнительно упростят работу с контейнерами,

00:09:13.000 --> 00:09:21.000
что приведет к дальнейшему распространению
IT-инфраструктуры, которая изначально или со временем

00:09:21.000 --> 00:09:29.000
перейдет на контейнеры и откажется от
использования чистых виртуальных машин.

00:09:29.000 --> 00:09:37.000
Еще одним важным моментом является
существование другой технологии - Serverless, которая

00:09:37.000 --> 00:09:46.000
была упомянута на наших лекциях.
Она представляет собой альтернативное и выгодное

00:09:46.000 --> 00:09:51.000
решение, но применимость зависит от
конкретных бизнес-задач и контекста.

00:09:54.000 --> 00:09:58.000
Вопрос. Что означает open source 
программное обеспечение?

00:09:58.000 --> 00:10:01.103
Отвечаю. Это термин, который
применяется в общей сфере информационных

00:10:01.127 --> 00:10:04.000
технологий и не ограничивается
только облачными технологиями.

00:10:04.000 --> 00:10:11.000
Его идея заключается в том, что
существует множество энтузиастов,

00:10:11.000 --> 00:10:16.000
разрабатывающих различные решения
и готовых делиться ими с мировым

00:10:16.000 --> 00:10:22.000
сообществом безвозмездно.
Такой подход позволяет объединять

00:10:22.000 --> 00:10:28.000
энтузиастов со всего мира, которые
стремятся решить общую проблему, и они

00:10:28.000 --> 00:10:39.000
сотрудничают в группах для разработки программного
обеспечения, решающего конкретные задачи.

00:10:42.000 --> 00:10:49.000
Отдельная тема, связанная с
open source, - это лицензии, включая

00:10:49.000 --> 00:10:53.000
open source PLO, и связанные с ними 
нюансы. Они определяют условия

00:10:53.000 --> 00:10:55.000
использования, ограничения и
особенности каждой лицензии.

00:10:55.000 --> 00:11:01.000
Однако эта тема не входит в рамки нашего курса,
поэтому вам рекомендуется изучить ее самостоятельно.

00:11:02.000 --> 00:11:10.000
Когда мы говорим о применении open
source в бизнесе, это общий вопрос. 

00:11:10.000 --> 00:11:15.000
Нельзя однозначно на него ответить, так
как все зависит от конкретного бизнеса

00:11:15.000 --> 00:11:20.000
и места использования open source
решения в вашей инфраструктуре.

00:11:20.000 --> 00:11:27.100
Кроме того, необходимо
оценить само open source решение:

00:11:27.124 --> 00:11:35.000
популярность, надежность,
отсутствие ошибок и безопасность.

00:11:35.000 --> 00:11:43.440
Например, для компаний в
финансовой сфере этот вопрос особенно

00:11:43.464 --> 00:11:51.627
актуален, поскольку могут
существовать уязвимости, которые

00:11:51.651 --> 00:11:59.884
могут негативно сказаться на
бизнесе в будущем, если хакеры

00:11:59.908 --> 00:12:08.000
воспользуются ими для атаки
и нарушения работы компании.

00:12:08.000 --> 00:12:13.045
Если сфера вашего бизнеса
менее строгая, то стоит рассмотреть

00:12:13.069 --> 00:12:17.693
использование open source
решений, поскольку на данный

00:12:17.717 --> 00:12:22.544
момент существует множество
продвинутых программ, которые

00:12:22.568 --> 00:12:28.000
успешно применяются в крупных
компаниях и корпоративной среде.

00:12:28.000 --> 00:12:33.000
Вопрос. Какие основные 
преимущества использования Kubernetes?

00:12:33.000 --> 00:12:43.000
Отвечаю. Kubernetes является надстройкой
для оркестрации docker-контейнеров.

00:12:43.000 --> 00:12:50.218
Использование docker-контейнеров
оправдано, особенно при большом

00:12:50.242 --> 00:12:57.000
количестве, начиная от 100 и
до 1000 и более контейнеров.

00:12:57.000 --> 00:13:06.988
В таких случаях Kubernetes предоставляет
продвинутые методы для управления

00:13:07.012 --> 00:13:17.000
этим "зоопарком" контейнеров, которые
могут сильно различаться между собой.

00:13:17.000 --> 00:13:20.000
При небольшом количестве
docker-контейнеров вы можете рассмотреть

00:13:20.000 --> 00:13:27.000
использование сервиса Amazon
ECS (Elastic Container Service),

00:13:27.000 --> 00:13:32.000
который оркестрирует docker-контейнеры,
но не использует Kubernetes.

00:13:32.000 --> 00:13:42.000
Также существуют и другие решения, которые
работают напрямую с docker-контейнерами.

00:13:42.000 --> 00:13:49.000
Выбор зависит от ваших конкретных задач и бизнеса.
Компании различаются по своему характеру.

00:13:49.000 --> 00:13:53.000
Некоторые компании, такие как
компании-производители продуктов, могут не всегда

00:13:53.000 --> 00:13:59.000
находить оправдание в использовании
Kubernetes и docker-контейнеров.

00:13:59.000 --> 00:14:07.074
Иногда компании, особенно те, которые разрабатывают
множество приложений или имеют архитектуру,

00:14:07.098 --> 00:14:15.000
состоящую из независимых мини-приложений,
могут рассмотреть применение docker-контейнеров.

00:14:15.000 --> 00:14:25.000
Однако перед переходом необходимо провести
предварительный расчет и убедиться, что переход

00:14:25.000 --> 00:14:33.000
действительно принесет выгоду, так как сам
процесс перехода является затратным.

00:14:33.000 --> 00:14:39.589
Требуются специалисты, обучение, перестройка,
отладка и весь процесс перехода от текущего состояния

00:14:39.613 --> 00:14:46.000
к новому с использованием docker-контейнеров.
Поэтому все это следует тщательно просчитывать.

00:14:46.000 --> 00:14:52.732
Если преимущества действительно существенны, 
то компания может принять решение о

00:14:52.756 --> 00:15:00.000
переходе к использованию docker-контейнеров,
а возможно и Kubernetes вместе с ними.

00:15:00.000 --> 00:15:08.000
Вопрос. Приведите примеры компании,
которые используют определенные AWS сервисы.

00:15:08.000 --> 00:15:15.488
Отвечаю. Давайте рассмотрим самые интересные 
примеры. Мы познакомились с сервисами

00:15:15.512 --> 00:15:23.000
вычисления, среди которых есть те, которые
работают с контейнерами. Начнем с ECR.

00:15:23.000 --> 00:15:27.000
Это сервис, и если вы откроете страницу
этого сервиса, во вкладке "Customers"

00:15:27.000 --> 00:15:35.000
вы увидите примеры компаний, активно
использующих данный сервис.

00:15:35.000 --> 00:15:43.000
Там же есть ссылки на презентации
и видео с конференции Reinvent.

00:15:43.000 --> 00:15:48.711
Reinvent - это большая ежегодная
конференция, организуемая AWS,

00:15:48.735 --> 00:15:55.000
на которой выступают партнеры и
крупные пользователи сервисов AWS.

00:15:55.000 --> 00:16:01.540
Если рассматривать сервис Amazon Elastic Container
Registry (Amazon ECR), то одним из популярных

00:16:01.564 --> 00:16:09.000
пользователей является компания Pinterest, широко
известное и часто используемое в нашей жизни

00:16:09.000 --> 00:16:15.000
приложение. Еще одним примером является
сервис Amazon Elastic Container Service (Amazon ECS),

00:16:15.000 --> 00:16:21.000
который использует компания Volkswagen,
известный автомобильный производитель.

00:16:21.000 --> 00:16:27.000
Стоит отметить компанию Autodesk, разрабатывающую
программное обеспечение для 3D-моделирования.

00:16:27.000 --> 00:16:33.988
Если говорить о сервисе Amazon Elastic
Kubernetes Service (Amazon EKS), то популярным

00:16:34.012 --> 00:16:41.000
примером использования является Snapchat,
приложение, которое мы используем ежедневно.

00:16:41.000 --> 00:16:48.988
Кроме того, доступны ссылки на
презентации Snapchat из 2018-2019 годов,

00:16:49.012 --> 00:16:57.000
где они делятся опытом использования
и преимуществами данного сервиса.

00:16:57.000 --> 00:17:10.000
Другим примером является HSBC, крупный инвестиционный
банк, который активно использует сервис Amazon EKS.

00:17:10.000 --> 00:17:14.285
Вы можете найти и другие примеры,
просто открыв основную страницу сервиса и

00:17:14.309 --> 00:17:19.000
перейдя во вкладку "Customers", чтобы
узнать, кто еще использует данный сервис.

00:17:19.000 --> 00:17:23.373
Также доступны ссылки на
презентации и видео, где компании

00:17:23.397 --> 00:17:29.000
рассказывают о своем опыте
использования сервисов и полученных выгодах.

00:17:29.000 --> 00:17:35.488
Некоторые из них делятся уникальным
опытом, позволяющим сэкономить

00:17:35.512 --> 00:17:42.000
значительные суммы денег или
оптимизировать внутренние процессы.

00:17:42.000 --> 00:17:47.000
В презентациях представлены цифры и графики,
что делает их особенно интересными для изучения.

00:17:47.000 --> 00:17:59.000
Вопрос. Чем отличаются pull и push архитектуры
на примере сервисов Amazon SNS и Amazon SQS?

00:17:59.000 --> 00:18:05.157
Отвечаю, достаточно хороший вопрос.
Если рассматривать принципы

00:18:05.181 --> 00:18:10.841
pull и push в архитектуре, то
простыми словами, в случае

00:18:10.865 --> 00:18:17.166
архитектуры pull источник запроса
инициирует отправку запроса и

00:18:17.190 --> 00:18:24.000
триггерит получателя. Получатель 
затем обрабатывает это сообщение.

00:18:24.000 --> 00:18:30.988
С другой стороны, в архитектуре
push мы накапливаем набор

00:18:31.012 --> 00:18:38.000
сообщений на стороне источника
для последующей обработки.

00:18:38.000 --> 00:18:48.156
При готовности сторона, которая должна
обработать эти сообщения, обращается к очереди (pull)

00:18:48.180 --> 00:18:58.000
и последовательно обрабатывает эти сообщения.
Каждый подход имеет свои плюсы и минусы.

00:18:58.000 --> 00:19:03.081
Использование подхода pull
с сервисами Amazon SNS и

00:19:03.105 --> 00:19:09.000
Amazon SQS позволяет создавать
слабосвязные архитектуры. Слабосвязность

00:19:09.000 --> 00:19:14.000
в архитектуре является более гибкой и лучшей
альтернативой чем сильно связанные архитектуры.

00:19:14.000 --> 00:19:19.000
Мы обсудим это более подробно на
последних лекциях в последние недели.

00:19:19.000 --> 00:19:26.988
В слабосвязных архитектурах намного
проще заменить, модернизировать

00:19:27.012 --> 00:19:35.000
или удалить некоторые компоненты,
если они становятся ненужными.

00:19:35.000 --> 00:19:40.816
В случае, если все компоненты
сильно связаны, процесс

00:19:40.840 --> 00:19:48.000
улучшения, обновления или
удаления становится сложной задачей.

00:19:48.000 --> 00:19:54.000
В этом контексте сервисы Amazon SNS и
Amazon SQS оказывают значительную помощь.

00:19:56.000 --> 00:19:59.000
Вопрос. Что такое lambda-функция?
Отвечаю.

00:19:59.000 --> 00:20:05.000
Lambda-функция является IT-ресурсом
в рамках сервиса AWS Lambda.

00:20:05.000 --> 00:20:10.000
AWS Lambda предоставляет
бессерверные вычислительные мощности.

00:20:10.000 --> 00:20:18.000
Для создания lambda-функции необходимо загрузить
код, который должен быть выполнен внутри функции.

00:20:18.000 --> 00:20:23.988
При необходимости можно указать
источники данных, откуда lambda-функция будет

00:20:24.012 --> 00:20:30.000
получать информацию для работы.
Например, источником может быть API Gateway.

00:20:30.000 --> 00:20:34.000
При использовании API Gateway
вы получаете отдельный URL.

00:20:34.000 --> 00:20:39.000
При обращении по этому URL, вы можете передавать 
дополнительные параметры, которые затем

00:20:39.000 --> 00:20:43.000
проходят через сервис API Gateway
и передаются в lambda-функцию.

00:20:43.000 --> 00:20:52.000
API Gateway вызывает lambda-функцию, и функция
обрабатывает свой код, используя переданные входные

00:20:52.000 --> 00:20:56.988
данные. Lambda-функция может
быть настроена таким образом, что она

00:20:57.012 --> 00:21:02.000
не принимает никаких входных
данных и выполняет одну и ту же логику.

00:21:02.000 --> 00:21:08.157
Однако, когда входные данные поступают,
можно программировать динамическое

00:21:08.181 --> 00:21:14.000
поведение lambda-функции внутри
кода, в зависимости от этих данных.

00:21:14.000 --> 00:21:23.488
Еще одним примером использования
lambda-функции является настройка AWS

00:21:23.512 --> 00:21:33.000
EventBridge для вызова функции по
определенному событию или расписанию.

00:21:33.000 --> 00:21:36.000
Это часто используется для
автоматизации внутри IT-инфраструктуры.

00:21:36.000 --> 00:21:43.488
Например, мы можем запланировать
включение и отключение инстансов Amazon

00:21:43.512 --> 00:21:51.000
EC2 на ежедневной основе: включение
в 7 утра и отключение в 2 часа ночи.

00:21:51.000 --> 00:21:57.000
Таким образом, мы можем сэкономить
ресурсы, отключая инстансы Amazon EC2

00:21:57.000 --> 00:22:03.000
в периоды, когда наши сервисы
не используются и никто не заходит.

00:22:03.000 --> 00:22:13.000
В целом, функции и сервисы "serverless" представляют
обширную тему. Это новое направление в разработке.

00:22:13.000 --> 00:22:19.988
Некоторые IT-инфраструктуры полностью
основаны на бессерверных технологиях, что позволяет

00:22:20.012 --> 00:22:27.000
существенно экономить ресурсы, особенно
для сервисов и бизнеса с переменной нагрузкой.

00:22:27.000 --> 00:22:35.988
Хочу отметить, что наше решение от Cloud
Academy также построено с использованием

00:22:36.012 --> 00:22:45.000
бессерверных технологий, таких как API
Gateway, AWS Lambda, DynamoDB и Amazon S3.

00:22:49.000 --> 00:22:53.488
Вопрос. Почему lambda-функция 
максимально может работать лишь

00:22:53.512 --> 00:22:58.000
15 минут? Это много или мало 
по сравнению с другими сервисами?

00:22:58.000 --> 00:23:02.988
Отвечаю. Да, это верно. Максимальное время
работы lambda-функции составляет 15 минут,

00:23:03.012 --> 00:23:10.000
и это не soft limit, это hard limit, поэтому мы
изменить его не можем. 15 минут равны 900 секундам.

00:23:12.000 --> 00:23:18.000
Из опыта как собственного, так
и коллег из других компаний, могу

00:23:18.000 --> 00:23:23.000
сказать, что в 99% случаев
15 минут более чем достаточно.

00:23:23.000 --> 00:23:28.000
Очень часто используется
комбинация AWS Lambda и API Gateway.

00:23:28.000 --> 00:23:33.000
Однако, стоит учесть, что API Gateway
имеет свой собственный hard limit - 29 секунд.

00:23:33.000 --> 00:23:41.000
Если AWS Lambda не отвечает в течение
29 секунд, то запрос считается превышающим

00:23:41.000 --> 00:23:48.000
время ожидания (timeout), и соответствующая
ошибка возвращается на frontend,

00:23:48.000 --> 00:23:57.000
на UI или на веб-сайт, который
видят ваши пользователи.

00:23:57.000 --> 00:24:03.000
В данном случае видно, что 15
минут гораздо больше, чем 29 секунд.

00:24:03.000 --> 00:24:10.000
Исходя из того, что есть
определенные сайты, то есть frontend,

00:24:10.000 --> 00:24:16.000
который используется через API
Gateway, и на backend построена

00:24:16.000 --> 00:24:21.000
lambda, которая отрабатывает,
29 секунд более чем достаточно.

00:24:21.000 --> 00:24:26.000
Если еще глубже опускаться, то
мы все знаем, что для того, чтобы

00:24:26.000 --> 00:24:32.000
пользователь не разочаровался
и не ушел, веб-сайты ускоряют

00:24:32.000 --> 00:24:38.000
работу и выполнение
некоторых действий внутри сайта.

00:24:38.000 --> 00:24:42.000
Если в течение одной-двух
секунд не получается ответ, то это

00:24:42.000 --> 00:24:47.000
неприятно и некомфортно
находиться на этом веб-ресурсе.

00:24:47.000 --> 00:25:03.000
Компании, работая над разработкой веб-сайтов,
стремятся уложить все запросы в одну-две секунды.

00:25:03.000 --> 00:25:07.988
Таким образом, даже не 29
секунд, а 1-2 минуты более чем

00:25:08.012 --> 00:25:14.000
достаточно для большинства кейсов,
при использовании AWS Lambda.

00:25:14.000 --> 00:25:18.000
Да, есть кейсы, когда мы можем
запускать AWS Lambda асинхронно, то есть

00:25:18.000 --> 00:25:23.000
приходит вызов через API Gateway
тот же, и вызывает нашу lambda-у.

00:25:23.000 --> 00:25:27.000
И AWS Lambda выполняет
какую-то долгосрочную задачу.

00:25:27.000 --> 00:25:36.000
И UI, то есть API Gateway
получает, что да, ваш запрос принят

00:25:36.000 --> 00:25:40.000
на обработку и уже не сможет
вернуть какой-то результат,

00:25:40.000 --> 00:25:45.000
потому что самообработка занимает больше 29 секунд.
Поэтому вызывайте эту lambda-у асинхронно.

00:25:45.000 --> 00:25:51.000
Дальше уже эта Lambda может до 15
минут работать, чтобы завершить эту задачу.

00:25:51.000 --> 00:25:59.488
Рассмотрим следующий момент. Если lambda-функция
не успевает завершить работу в течение 15 минут

00:25:59.512 --> 00:26:08.000
(что является редким случаем, но возможным), то часто
используется связка AWS Lambda и AWS Step Functions.

00:26:08.000 --> 00:26:16.000
AWS Step Functions представляет собой
функцию для оркестрации работы lambda-функций.

00:26:16.000 --> 00:26:20.000
Она не только подключает lambda-функции,
но также может взаимодействовать с другими

00:26:20.000 --> 00:26:22.000
сервисами, хотя связка с AWS Lambda
является распространенным вариантом.

00:26:22.000 --> 00:26:28.000
Если ваша задача может быть
прервана и продолжена, то lambda-функция

00:26:28.000 --> 00:26:31.788
работает в пределах 15 минут 
или немного меньше. Затем она

00:26:31.812 --> 00:26:36.000
сохраняет свое состояние и
передает его в AWS Step Functions.

00:26:36.000 --> 00:26:44.000
AWS Step Functions получает
выходные данные первой lambda-функции

00:26:44.000 --> 00:26:48.000
и передает их входными данными
следующей lambda-функции.

00:26:48.000 --> 00:26:51.000
Этот процесс продолжается, пока каждая
последующая lambda-функция не завершит работу.

00:26:51.000 --> 00:26:55.000
Внутри AWS Step Functions можно
создать цикл, в котором последовательно

00:26:55.000 --> 00:27:00.000
вызываются следующие lambda-функции
до завершения всей работы.

00:27:00.000 --> 00:27:05.000
AWS Step Functions также является бессерверным
решением, полностью управляемым сервисом от AWS.

00:27:05.000 --> 00:27:20.000
Он быстро настраивается, и большая часть задач по
поддержке инфраструктуры решается с его помощью.

00:27:20.000 --> 00:27:29.000
Сравнивать AWS Lambda с другими
сервисами довольно сложно, так как они

00:27:29.000 --> 00:27:33.000
имеют свои уникальные особенности.
Однако, в ответе на ваш первый вопрос

00:27:33.000 --> 00:27:40.000
я постарался объяснить, что 15
минут обычно более чем достаточно.

00:27:40.000 --> 00:27:43.000
В случае, когда это не хватает,
есть решение, которое вы можете

00:27:43.000 --> 00:27:47.000
использовать для решения
ваших внутренних бизнес-задач.

00:27:47.000 --> 00:27:52.000
Вопрос. Что означает Serverless?
Отвечаю.

00:27:52.000 --> 00:28:01.000
Serverless – это новая технология,
которая позволяет для пользователей

00:28:01.000 --> 00:28:08.000
того или иного serverless-сервиса не
отвлекаться на обслуживание IT-ресурсов,

00:28:08.000 --> 00:28:10.000
в том числе виртуальных серверов,
ваших вычислительных мощностей,

00:28:10.000 --> 00:28:14.000
а больше сконцентрироваться на 
бизнес-задачи. Приведу пример.

00:28:14.000 --> 00:28:18.000
Один из самых ярких
примеров – это AWS Lambda.

00:28:18.000 --> 00:28:23.023
Это тот сервис, который позволяет
вам загрузить код, и все то, что

00:28:23.047 --> 00:28:29.000
относится к запуску, обслуживанию
этого запуска выполняется на стороне AWS.

00:28:29.000 --> 00:28:37.000
То есть оно полностью исключает
от вас задачи обслуживания.

00:28:37.000 --> 00:28:43.000
Другим примером serverless-решения
является сервис API Gateway, который

00:28:43.000 --> 00:28:47.000
также является популярным.
Он работает в сотрудничестве с AWS Lambda.

00:28:47.000 --> 00:28:53.000
С использованием этого сервиса вам
не нужно разрабатывать и поддерживать

00:28:53.000 --> 00:29:00.000
серверы, которые обрабатывают
запросы, проходящие через API.

00:29:00.000 --> 00:29:05.000
Вместо этого вы можете создать
необходимые настройки в AWS Management

00:29:05.000 --> 00:29:10.000
Console, используя SDK, CLI или
даже путем написания конфигурации в

00:29:10.000 --> 00:29:21.000
CloudFormation. Затем вы передаете 
эти настройки сервису API Gateway,

00:29:21.000 --> 00:29:27.000
который автоматически
настраивает и обслуживает ваш API.

00:29:27.000 --> 00:29:32.000
Фактически, вы платите только за
количество обслуженных запросов,

00:29:32.000 --> 00:29:37.000
и все остальное обслуживание
запросов обрабатывается AWS.

00:29:37.000 --> 00:29:43.000
На стороне AWS также есть большое
количество serverless-сервисов,

00:29:43.000 --> 00:29:46.671
которые могут быть использованы 
в связке. Это DynamoDB, это

00:29:46.695 --> 00:29:51.000
Amazon S3, это Step Functions и так далее.
Таким образом вы видите,

00:29:51.000 --> 00:29:58.000
что есть достаточно большой набор
serverless-сервисов, и есть такая тенденция в

00:29:58.000 --> 00:30:08.000
мире, что IT-инфраструктуры полностью
поднимаются на serverless-решениях.

00:30:08.000 --> 00:30:13.000
Таким образом, в этом случае нет необходимости
содержать большой штат, и при этом это решение

00:30:13.000 --> 00:30:22.000
позволяет максимально экономить деньги
в случае, если у вас не постоянные нагрузки.

00:30:22.000 --> 00:30:27.000
Когда речь идет о постоянных нагрузках,
не все serverless-решения являются

00:30:27.000 --> 00:30:32.000
оптимальными. В таких случаях компании
начинают рассматривать возможность

00:30:32.000 --> 00:30:36.000
перехода к контейнерам или использованию
традиционных виртуальных машин.

00:30:36.000 --> 00:30:42.000
Однако, экономия в начальном этапе
является значительным преимуществом.

00:30:42.000 --> 00:30:49.000
Особенно в случае, когда компания
только начинает свою работу

00:30:49.000 --> 00:30:55.281
или является стартапом.
Возможность сэкономить и не платить

00:30:55.305 --> 00:31:01.477
за неиспользуемые ресурсы
является ценным преимуществом,

00:31:01.501 --> 00:31:13.000
позволяющим избежать излишних расходов в самом начале
и использовать доступные средства для других нужд.

00:31:13.000 --> 00:31:19.000
Также это увеличивает вероятность того,
что стартап достигнет нормального состояния

00:31:19.000 --> 00:31:26.000
и справится с постоянными нагрузками. После 
этого можно рассмотреть возможность перехода

00:31:26.000 --> 00:31:31.000
на другие архитектуры, в зависимости от
внутренних процессов и задач компании.

00:31:31.000 --> 00:31:39.000
На этом мы разобрали все вопросы, которые от
вас получили, касающиеся лекции этой недели.

00:31:39.000 --> 00:31:46.000
Я думаю, вы получили свои ответы, лучше
поняли некоторые аспекты работы с облаками AWS.

00:31:46.000 --> 00:31:49.721
Если есть еще вопросы,
пожалуйста, пишите, мы эти вопросы

00:31:49.745 --> 00:31:54.000
будем собирать и публиковать в
виде сессии вопросов и ответов.

00:31:54.000 --> 00:32:17.000
На этом мы заканчиваем и увидимся с
вами на следующих наших активностях.