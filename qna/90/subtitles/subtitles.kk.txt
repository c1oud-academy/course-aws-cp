Қайырлы күн, құрметті студенттер! Сіздерді бүгінгі сұрақ-жауап сессиясында көргеніме қуаныштымын. Сіздерден келген көптеген сұрақтарға жауаптар дайындап қойдық. Ендеше, бастайық. Сұрақ. Басқа стандартты провайдерлер контейнерге қатысты қызметтерді ұсына ма, әлде бұл тек AWS ерекшелігі ме? Жауабым. Контейнерге қатысты сервистер бұлтты провайдерлердің көпшілігінде қолжетімді. Алайда олардың даму дәрежесі әртүрлі болуы мүмкін. Мысалы, бір жерде бұл бұрыннан бері жүзеге асырылып келе жатқан және контейнерлермен жұмыс істеу үшін белсенді қолданылатын жақсы сервис болса, басқа провайдерлер бұл сервиске жақында ие болғандықтан әлі толық дамымай, тиісінше, пайдаланушылар оны әзір пайдаланғысы келмеуі мүмкін. Сондықтан мұның бәрі нақты жағдайларға байланысты және әр жағдайды мұқият талдау керек. Айта кететін екі жағдай бар. Біріншіден, сервистердің көпшілігі алдымен AWS-те қолданысқа еніп, содан кейін оларды басқа бұлт провайдерлері тез көшіріп алады. Екіншіден, AWS көшбасшылығына қарамастан, әрбір бұлт провайдері белгілі бір бағытта ерекшеленеді. Олар өз негізгі салаларында жаңа сервистерді ертерек енгізіп, сонымен қатар жетілдірілген шешімдерді ұсына алады. Кез келген провайдердің қай бағытта озық екенін Интернет арқылы өз бетіңізше зерттей аласыз. Бұл біздің курстың тақырыбы емес, десек те бұл жағдайдың шынайлығын атап өткен жөн. Сұрақ. Docker-контейнерлермен жұмыс істеудің қандай артықшылықтары бар? Жауабым. Біріншіден, егер сізде осындай сұрақ туындаса, мен сізге дәрісті қайта қарап шығуды ұсынамын, себебі біз бұл тақырыпты егжей-тегжейлі талқылаған едік. Бұл кезеңде мен Docker-контейнерлерінің неге назар аударуға тұрарлық екенін және олар компанияға қандай пайда әкелетінін қарапайым тілмен түсіндіргім келеді. Docker-контейнерлерінің негізгі бәсекелесі дәстүрлі виртуалды машиналар болып табылады. Біз білетіндей, виртуалды машиналар қарапайым, әлсіз, сонымен қатар өте қуатты болуы мүмкін. Алайда кейде бізге белгілі бір жүктемелер немесе тапсырмалар үшін өте аз сыйымдылық қажет, немесе біз өте нақты ресурстарды қажет ететін қосымшаларға тап боламыз. Мысалды қарастырайық: бізде ақпараттық бюллетеньге жазылу үшін сайтта батырма бар. Бұл батырма сирек қолданылатындықтан оған бүкіл серверді арнау орынсыз. Сонымен қатар, тіпті кішкентай сервер де осы функцияға төленетін инвестициядан көп ақша жұмсайды. Көбіне ол босқа тұратын болады. Бұл жерде Docker-контейнерлер бір машинада мыңдаған шағын контейнерлерді орналастыра алып, олардың әрқайсысы тәуелсіз және нақты сұраныстарды өңдей алатынымен ыңғайлы. Бұл қосымшаның кішкене бөліктері болуы мүмкін. Осылайша, біз қажетті қуаттарды нақты жүктемелерге бейімдеу арқылы шығындарымызды едәуір азайтып, оңтайландыра аламыз. Бұл Docker-контейнерлердің артықшылығы. Келесі сұрақ алдыңғысымен байланысты, бірақ кері жағдайы. Docker контейнерлерінің кемшіліктері қандай? Менде Docker-контейнерлерімен тығыз жұмыс істеу мүмкіндігі болмады, бірақ менің бақылауларым мен пікірлерге сүйене отырып, Docker-контейнерінің жақсы маманын табу өте қиын болуы мүмкін екенін атап өткім келеді. Сонымен қатар, мұндай мамандардың қызметі, әдетте, қымбат тұрады. Сондықтан тиімді жол – өз мамандарыңызды даярлау. Алайда олардың барлығы жаңа нәрселерді үйренуге дайын емес болуы мүмкін. Егер мұндай адамдар бар болса, олардың еңбек нарығындағы құны артады және бір сәтте олар көбірек ақы төленетін жұмыс таба алады немесе біліктілігін арттыру үшін жоғары жалақы сұрауы мүмкін. Бұл компанияның бизнес-процестеріне қатысты мәселелер, сондықтан басшылық осы тармақтарды ескеруі керек. Кейде жоғары білікті маманды ұстау құны виртуалды машиналардан Docker-контейнерлеріне көшу кезінде қол жеткізілген үнемдеуден асып кетуі мүмкін. Виртуалды машиналардың мөлшері сіздің жұмыс жүктемелеріңіз үшін өте қолайлы болмаса да, бұл бір маманның жалақысынан арзан болуы мүмкін. Мұның бәрі сіздің бизнесіңіздің көлеміне байланысты. Егер сізде үлкен жүктемелері бар үлкен инфрақұрылым болса, қуаттылықты оңтайландырудан үнемдеу маманның жалақысын жаба алады. Сондықтан бәрі нақты жағдайға байланысты шешім шығару керек. Сұрақ. Docker-контейнерлерінің виртуалды машиналардан айырмашылығы неде? Жауабым. Біз мұны да дәрісте егжей-тегжейлі талқыладық, егер сұрақтар туындаса, қайталауды ұсынамын. Мұнда мен келесі сәттерді қарапайым тілмен түсіндіргім келеді: Docker-контейнерлері әдеттегі виртуалды машиналарға қарағанда әлдеқайда аз, бұл бір серверде мыңдаған контейнерлерді орналастыруға мүмкіндік береді. Осылайша, Docker-контейнерлерін қолдана отырып, серверлік қуаттарды қолданыстағы жүктемелерге мүмкіндігінше дәл реттеуге болады. Сонымен қатар, олардың ерекшеліктеріне байланысты контейнерлер әлдеқайда жылдам жұмыс істейді, бұл сіздің инфрақұрылымыңызды жылдамдатады және ресурстарды үнемдейді. Виртуалды машиналар әмбебаптығы мен ұзақ тарихына байланысты бұлтты технологиялар дәуірінің басынан бері нарықта болды. Виртуалды машиналармен жұмысты оңтайландыру үшін көптеген шешімдер әзірленді және олармен жұмыс істей алатын көптеген мамандар бар. Docker-контейнерлері жағдайында білікті маман табу қиын болуы мүмкін. Сонымен қатар, егер сіз ондай маман тапсаңыз да, оның қызметі өзінің тар мамандануына байланысты өте қымбат болуы мүмкін. Сұрақ. Docker-контейнерлер виртуалды машиналарды алмастыра ала ма? Жауабым. Иә, контейнерлер виртуалды машиналарды алмастыра алады, өйткені олар танымал болып келе жатқан балама технология. Алайда біз мұнда кішкене ескертпе жасауымыз керек: контейнерлер әлі де виртуалды машинада жұмыс істейді. Бірақ айырмашылық жұмыс деңгейінде жатыр. Егер біз бұрын виртуалды машина деңгейінде жұмыс істейтін болсақ, қазір виртуалды машина көп қабатты ғимарат сияқты, ондағы әрбір “пәтер” біздің контейнер болып табылады. Осылайша, біз контейнер деңгейінде жұмыс істеп жатырмыз. Болашақта контейнерлерді пайдалану одан да кең таралып, мамандар саны артады, яғни компания Docker және Kubernetes-пен таныс мамандарға қол жеткізе алады. Сонымен қатар, контейнерлермен жұмыс істеуді одан әрі жеңілдететін жаңа сервистер пайда болады деп күтілуде, бұл IT-инфрақұрылымның одан әрі таралуына әкеледі, олар бастапқыда немесе соңында контейнерлерге ауысады және таза виртуалды машиналарды пайдаланудан бас тартады. Тағы бір маңызды мәселе – біздің дәрістерімізде айтылған тағы бір Serverless технологияның болуы. Бұл балама және тиімді шешім, бірақ оның қолданылуы нақты бизнес мақсаттары мен контекстіне байланысты. Сұрақ. Open source бағдарламалық жасақтама нені білдіреді? Жауабым. Бұл ақпараттық технологиялардың жалпы саласында қолданылатын және бұлтты технологиялармен шектелмейтін термин. Оның идеясы – әртүрлі шешімдерді әзірлеп, халықаралық қауымдастықпен тегін бөлісуге дайын көптеген энтузиасттардың болуы. Бұл тәсіл жалпы мәселені шешуге тырысатын әлемнің түкпір-түкпірінен келген энтузиасттарды біріктіреді және олар нақты мәселелерді шешетін бағдарламалық жасақтаманы әзірлеу үшін командаларда ынтымақтасады. Open source-ке қатысты бөлек тақырып – лицензиялар, соның ішінде оpen source PLO және онымен байланысты нюанстар. Олар әр лицензияның пайдалану шарттарын, шектеулері мен ерекшеліктерін анықтайды. Алайда бұл тақырып біздің курстың шеңберінен тыс, сондықтан оны өзіңіз зерттеп алуыңыз керек. Бизнесте оpen source-ті пайдалану туралы айтатын болсақ, бұл жалпы сұрақ. Оған біржақты жауап беру мүмкін емес, өйткені бәрі нақты бизнеске және сіздің инфрақұрылымыңызда оpen source шешімді қайда қолданатындығыңызға байланысты. Сонымен қатар, оpen source шешімнің өзін бағалау қажет: танымалдылық, сенімділік, қателердің болмауы және қауіпсіздік. Мысалы, бұл мәселе қаржы секторындағы компаниялар үшін өте маңызды, өйткені хакерлер оларды компанияның жұмысына шабуыл жасау және бұзу үшін пайдаланса, болашақта бизнеске теріс әсер етуі ықтимал осалдықтар болуы мүмкін. Егер сіздің бизнесіңіз шектеулі болса, оpen source шешімдерді қолдануды қарастырған жөн, өйткені қазіргі уақытта ірі компаниялар мен корпоративтік ортада сәтті қолданылатын көптеген озық бағдарламалар бар. Сұрақ. Kubernetes пайдаланудың негізгі артықшылықтары қандай? Жауабым. Kubernetes – Docker-контейнерлерін оркестрлеуге арналған қондырма. Docker-контейнерлерін пайдалану, әсіресе 100-ден 1000-ға дейін немесе одан да көп контейнерлер болған кезде орынды. Мұндай жағдайларда Kubernetes контейнерлерін басқарудың жетілдірілген әдістерін ұсынады, олар әр түрлі болуы мүмкін. Docker-контейнерлерінің аз санымен сіз Docker-контейнерлерін ұйымдастыратын, бірақ Kubernetes қолданбайтын Amazon ECS (Elastic Container Service) пайдалануды қарастыра аласыз. Сондай-ақ, Docker-контейнерлерімен тікелей жұмыс істейтін басқа шешімдер бар. Таңдау сіздің нақты міндеттеріңізге және бизнесіңізге байланысты. Компаниялар өз саласына қарай ерекшеленеді. Кейбір компаниялар, мысалы, өнім компаниялары, Kubernetes және Docker-контейнерлерін пайдалану үшін әрдайым орынды болмауы мүмкін. Кейде компаниялар, әсіресе бірнеше қосымшаларды әзірлейтін немесе тәуелсіз шағын қосымшалардан тұратын архитектурасы бар компаниялар Docker-контейнерлерін пайдалануды қарастыруы мүмкін. Алайда, өтпелі кезеңге дейін алдын-ала есептеуді жүргізіп, өтпелі процестің өзі қымбат болғандықтан, ауысудың іс жүзінде пайдалы болатынына көз жеткізу керек. Ол мамандарды, оқытуды, қайта құруды, жөндеуді және Docker-контейнерлерін қолдана отырып, ағымдағы күйден жаңасына көшудің барлық процесін қажет етеді. Сондықтан мұның бәрі мұқият есептелуі керек. Егер артықшылықтар шынымен маңызды болса, компания Docker-контейнерлерін, мүмкін олармен бірге Kubernetes пайдалануға ауысуды шешуі мүмкін. Сұрақ. Нақты AWS сервистерін пайдаланатын компаниялардың мысалдарын келтіріңіз. Жауабым. Ең қызықты мысалдардың кейбірін қарастырайық. Біз есептеу сервистерімен, соның ішінде контейнерлермен жұмыс істейтіндермен таныстық. ECR-ден бастайық. Бұл сервис, және егер сіз осы сервистің парақшасында, «Customers» қойындысын ашсаңыз, осы сервисті белсенді қолданатын компаниялардың мысалдарын көресіз. Сондай-ақ, онда Reinvent конференциясының презентациялары мен бейнелеріне сілтемелер бар. Reinvent – серіктестер мен AWS сервистерінің негізгі пайдаланушыларын біріктіретін AWS ұйымдастыратын жыл сайынғы үлкен конференция. Amazon Elastic Container Registry (Amazon ECR) сервисі туралы айтатын болсақ, ең танымал пайдаланушылардың бірі – Pinterest, біздің өмірімізде танымал және жиі қолданылатын қосымша. Тағы бір мысал – Amazon Elastic Container Service (Amazon ECS) сервисі, оны танымал автомобиль өндірушісі Volkswagen пайдаланады. Autodesk, 3D модельдеуге арналған бағдарламалық жасақтаманы әзірлейтін компанияны атап өткен жөн. Amazon Elastic Kubernetes Service (Amazon EKS) сервисі туралы айтатын болсақ, танымал пайдалану жағдайы – біз күн сайын қолданатын қосымша Snapchat. Сонымен қатар, 2018-2019 жылдардағы Snapchat презентацияларына сілтемелер бар, онда олар өз тәжірибелерімен және сервистің артықшылықтарымен бөліседі. Тағы бір мысал – HSBC, Amazon EKS сервисін кеңінен қолданатын ірі инвестициялық банк. Сервистің басты парақшасын ашып, сервисті тағы кім пайдаланып жатқанын көру үшін «Customers» қойындысына өту арқылы қосымша мысалдарды таба аласыз. Презентациялар мен бейнелерге сілтемелер де бар, онда компаниялар сервисті пайдалану тәжірибесі мен алған жеңілдіктері туралы айтады. Олардың кейбіреулері айтарлықтай ақша үнемдеуге немесе ішкі процестерді оңтайландыруға мүмкіндік беретін бірегей тәжірибемен бөліседі. Презентациялар графиктермен көрнекіленген, бұл оларды зерттеуді одан әрі қызықты етеді. Сұрақ. Amazon SNS және Amazon SQS сервистерінің мысалында pull және push архитектураларының айырмашылығы неде? Жауабым. Егер архитектурадағы pull және push принциптерін қарастыратын болсақ, қарапайым тілмен айтқанда, pull архитектурасы жағдайында сұрау көзі жіберілетін сұранысты бастайды және алушыны іске қосады. Содан кейін алушы бұл хабарды өңдейді. Екінші жағынан, push архитектурасында біз кейінірек өңдеу үшін бастапқы жағында хабарламалар жиынтығын жинаймыз. Дайын болған кезде, осы хабарламаларды өңдеуді қажет ететін тарап кезекке (pull-ге) кіреді және осы хабарламаларды дәйекті түрде өңдейді. Әрбір тәсілдің оң және теріс жақтары бар. Amazon SNS және Amazon SQS сервситерінде pull тәсілін қолдана отырып, сіз еркін байланысқан архитектураларды жасай аласыз. Архитектураның әлсіздігі жоғары байланысқан архитектураларға қарағанда икемді және жақсы балама болып табылады. Біз мұны соңғы апталардағы дәрістерде толығырақ талқылайтын боламыз. Еркін байланысқан архитектураларда кейбір компоненттерді қажетсіз болған кезде ауыстыру, жаңарту немесе алып тастау әлдеқайда оңай. Барлық компоненттер бір-бірімен тығыз байланысты болған кезде, жақсарту, жаңарту немесе жою процесі қиынға соғады. Бұл тұрғыда Amazon SNS және Amazon SQS айтарлықтай көмек көрсетеді. Сұрақ. Lambda-функциясы дегеніміз не? Жауабым. Lambda-функциясы AWS Lambda сервисі аясындағы ІТ-ресурс болып табылады. AWS Lambda серверсіз есептеу қуатын қамтамасыз етеді. Lambda-функциясын жасау үшін функция ішінде орындалуы керек кодты жүктеу керек. Қажет болса, сіз Lambda-функциясы жұмыс үшін ақпарат алатын деректер көздерін көрсете аласыз. Мысалы, дерек көзі API Gateway болуы мүмкін. API Gateway пайдаланған кезде сіз бөлек URL мекенжайын аласыз. Осы URL мекенжайына кірген кезде сіз қосымша параметрлерді жібере аласыз, олар API Gateway сервисінен өтіп, lambda-функциясына өтеді. API Gateway lambda-функциясын шақырады, ал функция енгізілген кіріс деректерін пайдаланып өз кодын өңдейді. Lambda-функциясын ешқандай кіріс деректерін қабылдамайтын, бірдей логиканы ғана орындайтындай конфигурациялауға болады. Алайда кіріс деректері кіргенде, осы деректерге байланысты lambda-функциясының динамикалық әрекетін код ішінде бағдарламалауға болады. Lambda-функциясын пайдаланудың тағы бір мысалы – белгілі бір оқиға немесе кесте бойынша функцияны шақыру үшін AWS EventBridge конфигурациясы. Бұл көбінесе ІТ-инфрақұрылымында автоматтандыру үшін қолданылады. Мысалы, біз Amazon EC2 инстанстарын күнделікті қосу және өшіру үшін жоспарлай аламыз: оларды таңғы 7-де қосып, түнгі 2-де өшіресіз, осылайша біз пайдаланылмайтын және ешкім жүйеге кірмейтін аралықта Amazon EC2 инстанстарын өшіру арқылы ресурстарды үнемдей аламыз. Тұтастай алғанда, “serverless” функциялары мен сервистері кең тақырыпты қамтиды. Бұл дамудың жаңа бағыты. Кейбір IT-инфрақұрылымдар толығымен серверсіз технологияларға негізделген, бұл ресурстарды айтарлықтай үнемдей алады, әсіресе ауыспалы жүктемелері бар сервистер мен бизнес үшін. Біздің Cloud Academy шешімі API Gateway, AWS Lambda, DynamoDB және Amazon S3 сияқты серверсіз технологияларды қолдана отырып жасалғанын атап өткім келеді. Сұрақ. Неліктен lambda-функциясы максимум 15 минут жұмыс істей алады? Бұл басқа сервистермен салыстырғанда тым аз ба, әлде көп пе? Жауабым. Иә, бұл дұрыс. Lambda-функциясының максималды жұмыс уақыты – 15 минут, және бұл soft limit емес, бұл hard limit, сондықтан біз оны өзгерте алмаймыз. 15 минут – 900 секунд. Өзімнің де, басқа компаниялардағы әріптестерімнің де тәжірибесінен айта аламын, 99% жағдайда 15 минут жеткілікті. AWS Lambda және API Gateway тіркесімі өте жиі қолданылады. Дегенмен, API Gateway өзінің 29 секундтық hard limit-i бар екенін ескерген жөн. Егер AWS Lambda 29 секунд ішінде жауап бермесе, сұрау күту уақытынан (timeout) асып кетті деп есептеледі және тиісті қате сіздің пайдаланушыларыңыз көретін frontend, UI немесе веб-сайтқа қайтарылады. Бұл жағдайда сіз 15 минуттың 29 секундтан әлдеқайда ұзақ екенін көре аласыз. Белгілі бір сайттар бар екеніне сүйене отырып, яғни API Gateway арқылы қолданылатын frontend және жұмыс істейтін backend-те lambdа құрылған болса, 29 секунд жеткілікті болады. Одан әрі жүрсек, веб-сайттар жұмысты тездететінін және пайдаланушылардың көңілін қалдырып, сайттан кетіп қалмас үшін сайт ішінде кейбір әрекеттерді орындайтынын бәріміз білеміз. Егер сіз бір-екі секунд ішінде жауап алмасаңыз, бұл веб-ресурста отыру жағымсыз әрі ыңғайсыз сезім тудырады. Компаниялар веб-сайттарды әзірлеу кезінде барлық сұраныстарын бір немесе екі секундқа сәйкестендіруге тырысады. Осылайша көптеген жағдайларда AWS Lambda қолданған кезде тіпті 29 секунд емес, 1-2 минут та жеткілікті. Иә, бізде AWS Lambda-ны асинхронды түрде іске қосуға болатын жағдайлар бар, яғни сол сұраныс API Gateway арқылы келіп, біздің lambda-ны шақырады. Содан соң AWS Lambda ұзақ мерзімді тапсырманы орындайды. Ал UI, яғни API Gateway сіздің сұранысыңызды өңдеуге қабылдап, бұдан былай ешқандай нәтижені қайтара алмайды, өйткені өзін-өзі өңдеу 29 секундтан астам уақытты алады. Сондықтан бұл lambda-ны асинхронды түрде шақырыңыз. Сол кезде Lambda осы тапсырманы орындау үшін 15 минутқа дейін жұмыс істей алады. Енді келесі жағдайға назар аударайық. Егер lambdа-функциясы өз жұмысын 15 минут ішінде аяқтамаса (бұл сирек, бірақ мүмкін), AWS Lambda және AWS Step Functions тіркесі жиі қолданылады. AWS Step Functions – бұл lambdа-функцияларын оркестрлеуге арналған функция. Бұл lambdа-функцияларын қосып қана қоймайды, сонымен қатар басқа сервистермен өзара әрекеттесе алады, дегенмен AWS Lambda-мен біріктіру кең таралған нұсқа болып табылады. Егер сіздің тапсырмаңызды тоқтатып, жалғастыруға болатын болса, lambda-функциясы 15 минут ішінде немесе сәл аз жұмыс істейді. Содан кейін ол өз күйін сақтайды және оны AWS Step Functions-ке береді. AWS Step Functions бірінші lambda-функциясынан шығыс деректерін алады және оны келесі lambda-функциясына кіріс ретінде береді. Бұл процесс әрбір дәйекті lambda-функциясы өз жұмысын аяқтағанша жалғасады. AWS Step Functions ішінде сіз барлық жұмыс аяқталғанша келесі lambda-функциялары дәйекті түрде шақырылатын цикл жасай аласыз. AWS Step Functions сонымен қатар AWS толық басқаратын серверсіз шешім болып табылады. Ол тез бапталынады және инфрақұрылымды қолдаудың көптеген міндеттері оның көмегімен шешіледі. AWS Lambda-ны басқа сервистермен салыстыру өте қиын, өйткені олардың өзіндік ерекшеліктері бар. Алайда, сіздің бірінші сұрағыңызға жауап бере отырып, мен 15 минут әдетте жеткілікті екенін түсіндіруге тырыстым. Егер бұл жеткіліксіз болса, ішкі бизнес мәселелерін шешу үшін қолдануға болатын шешім бар. Сұрақ. Serverless дегеніміз не? Жауабым. Serverless – бұл Serverless-сервисті пайдаланушыларға IT-ресурстарға, соның ішінде виртуалды серверлерге және сіздің есептеу қуатыңызға қызмет көрсетуге алаңдамауға, сонымен қатар бизнес міндеттеріне көбірек көңіл бөлуге мүмкіндік беретін жаңа технология. Мысал келтірейін. AWS Lambda – ең көрнекті мысалдардың бірі. Бұл кодты жүктеуге мүмкіндік беретін сервис, ал іске қосуға байланысты барлық нәрсені AWS басқарады. Яғни, ол сізден техникалық қызмет көрсету тапсырмаларын толығымен өзіне алады. Serverless шешімнің тағы бір мысалы – API Gateway сервисі, ол да танымал. Ол AWS Lambda компаниясымен серіктестікте жұмыс істейді. Бұл сервистің көмегімен API сұрауларын өңдейтін серверлерді әзірлеу және қолдау қажет емес. Оның орнына сіз SDK, CLI көмегімен AWS Management Console-де қажетті параметрлерді жасай аласыз немесе CloudFormation бағдарламасында конфигурацияны жаза аласыз. Содан кейін сіз бұл параметрлерді API автоматты түрде баптайтын және қолдайтын API Gateway сервисіне жібересіз. Сіз тек өңдейтін сұрауларыңыздың саны үшін төлейсіз, ал қалған сұрау қызметі AWS арқылы өңделеді. AWS жағында сонымен қатар бірге пайдалануға болатын көптеген Serverless-сервистер бар. Бұл DynamoDB, Amazon S3, Step Functions және т.б. Осылайша, сіз serverless-сервистердің өте үлкен жиынтығы бар екенін көре аласыз және әлемде IT-инфрақұрылымдар serverless-шешімдерде толығымен өсіп келе жатқан үрдіс бар. Осылайша, бұл жағдайда қызметкерлердің үлкен штатын ұстап тұрудың қажеті жоқ, сонымен бірге бұл шешім тұрақты жұмыс жүктемелері болмаса, мүмкіндігінше ақша үнемдеуге мүмкіндік береді. Тұрақты жүктемелер туралы айтатын болсақ, барлық serverless-шешімдер оңтайлы бола бермейді. Мұндай жағдайларда компаниялар контейнерлерге көшуді немесе дәстүрлі виртуалды машиналарды пайдалануды қарастыра бастайды. Алайда, бастапқы кезеңдегі үнемдеу маңызды артықшылық болып табылады. Әсіресе, компания жаңадан құрылған кезде немесе стартап болған кезде. Пайдаланылмаған ресурстарға төлем жасамай ақша үнемдеу мүмкіндігі құнды артықшылық болып табылады, бұл сізге бастапқыда қажетсіз шығындардан аулақ болуға және қолда бар қаражатты басқа қажеттіліктерге пайдалануға мүмкіндік береді. Сондай-ақ, бұл іске қосу қалыпты жағдайға жетіп, тұрақты жұмыс жүктемелерімен күресу ықтималдығын арттырады. Осыдан кейін сіз компанияның ішкі процестері мен мақсаттарына байланысты басқа архитектураларға ауысуды қарастыра аласыз. Осымен, біз осы аптадағы дәріске қатысты барлық сұрақтарды қарастырдық. Менің ойымша, сіз қажетті жауаптарыңызды алдыңыз және AWS бұлтымен жұмыс істеудің кейбір аспектілерін жақсы түсіндіңіз деп үміттенемін. Егер сізде сұрақтар туындаса, бізге жазыңыз, біз оларды сұрақ-жауап сессиясы түрінде жинап, жариялаймыз. Осымен бүгінгі сессиямыз аяқталды. Сізді келесі белсенділіктерде күтеміз.