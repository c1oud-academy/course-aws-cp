WEBVTT

00:00:00.000 --> 00:00:02.000
Добрый день, уважаемые студенты!

00:00:02.000 --> 00:00:07.000
Я рад вас всех видеть на очередной сессии вопросов и ответов.

00:00:07.000 --> 00:00:12.000
Мы получили от вас достаточное количество вопросов и подготовили для вас ответы.

00:00:12.000 --> 00:00:14.000
Итак, давайте начнем.

00:00:16.000 --> 00:00:17.000
Вопрос.

00:00:19.000 --> 00:00:27.000
Предоставляете ли другие обычные провайдеры, сервисы, работающие с контейнерами или это только у AWS?

00:00:27.000 --> 00:00:35.000
Отвечаю. Сервисы, которые работают с контейнерами, доступны у большинства облачных провайдеров.

00:00:35.000 --> 00:00:38.000
� азвитие оно в той или иной мере может отличаться.

00:00:38.000 --> 00:00:48.000
Где-то, например, достаточно отработанный сервис достаточно давно вышел и в целом есть определенные нагрузки именно с контейнерами.

00:00:48.000 --> 00:01:00.000
У некоторых же провайдеров этот сервис появился относительно недавно, сырой, и соответственно неохотно его используют пользователи конкретного обычного провайдера.

00:01:00.000 --> 00:01:02.000
Поэтому это все зависит, надо смотреть.

00:01:02.000 --> 00:01:07.000
Два момента буквально, которые хотелось бы дополнительно отметить.

00:01:07.000 --> 00:01:19.000
Это то, что большинство сервисов, они появляются первыми у AWS и далее они достаточно оперативно копируются оставшимися облачными провайдерами.

00:01:19.000 --> 00:01:20.000
Это первое.

00:01:20.000 --> 00:01:30.000
Второе, это то, что несмотря на то, что AWS является лидером, тем не менее каждый облачный провайдер силен в чем-то одном, либо в нескольких других направлениях.

00:01:30.000 --> 00:01:42.000
И соответственно развитие своем направлении, где он является лидером, то соответствующие сервисы могут появляться раньше, они могут быть более продвинутыми и так далее.

00:01:42.000 --> 00:01:51.000
То, в каких направлениях силен тот или иной обычный провайдер вы можете самостоятельно изучить в интернете.

00:01:51.000 --> 00:01:59.000
Это не является темой в рамках нашего курса, но сам факт того, что вот такая ситуация сложилась, она есть, это правда.

00:01:59.000 --> 00:02:09.000
Вопрос. Какие есть преимущества при работе с Docker-контейнерами?

00:02:09.000 --> 00:02:10.000
Отвечаю.

00:02:10.000 --> 00:02:20.000
В первую очередь, если у вас возникает подобный вопрос, я вам рекомендую пересмотреть лекцию, там достаточно подробно мы это проговорили.

00:02:20.000 --> 00:02:30.000
Здесь я бы хотел простыми словами ответить, почему иногда стоит посмотреть в сторону Docker-контейнеров и компания может получить определенные выгоды.

00:02:30.000 --> 00:02:41.000
Самым основным конкурентом, альтернативой Docker-контейнерам являются традиционные виртуальные машины.

00:02:41.000 --> 00:02:50.000
Мы с вами знаем, что виртуальные машины могут быть достаточно простыми, слабыми, либо достаточно мощными.

00:02:50.000 --> 00:02:59.000
Но бывают у нас некоторые нагрузки, некоторые задачи, либо приложения, которые требуют очень маленьких мощностей,

00:02:59.000 --> 00:03:09.000
либо могут быть ввиду стабильные нагрузки точно подогнанные под определенные мощности.

00:03:09.000 --> 00:03:19.000
Например, мы можем сказать, что у нас есть внутри сайта одна кнопка, которая позволяет подписаться на рассылки.

00:03:19.000 --> 00:03:25.000
Так как эта кнопка часто не нажимается, то не хотелось бы для нее выделять целый сервер.

00:03:25.000 --> 00:03:40.000
И более того, целый сервер, даже если он маленький, он будет больше денег потреблять, нежели она будет использоваться. В большинстве случаев она будет просто простаивать.

00:03:40.000 --> 00:03:58.000
И в этой связи мы можем благодаря Docker-контейнерам в одну машину поместить десятки тысяч контейнеров, которые очень маленькие, но каждый из них независим друг от друга и обрабатывает какие-то запросы.

00:03:58.000 --> 00:04:01.000
Это какая-то там маленькая часть приложения.

00:04:01.000 --> 00:04:21.000
И в этой связи мы можем сильно сэкономить, сжать и оптимизировать наши расходы и более, скажем так, охватить либо подогнать наши необходимые мощности под те нагрузки, которые у нас есть.

00:04:21.000 --> 00:04:24.000
Это и есть преимущество Docker-контейнеров.

00:04:24.000 --> 00:04:33.000
Следующий вопрос связан с предыдущим, но обратная ситуация. Какие есть недостатки у Docker-контейнеров?

00:04:33.000 --> 00:04:55.000
У меня не было возможности достаточно тесно поработать с Docker-контейнерами, но из того, что явно напрашивается, из того, что видно, что мы слышим обычно, очень непросто найти специалиста, хорошего специалиста по Docker-контейнерам.

00:04:55.000 --> 00:05:04.000
Более того, если такой специалист находится, он достаточно дорогой, поэтому другая альтернатива – это взращивать своих специалистов.

00:05:04.000 --> 00:05:09.000
И не всегда находятся специалисты, которые готовы что-то новое изучить для себя.

00:05:09.000 --> 00:05:27.000
Если такие находятся, то ценности этого сотрудника тоже растут на рынке, и в какой-то момент он тоже может найти более высокооплачиваемую работу либо попросить ввиду повышения своей квалификации большую зарплату.

00:05:27.000 --> 00:05:36.000
Это вопросы касательно бизнесовой части и компании, бизнесу нужно эти моменты учитывать.

00:05:36.000 --> 00:05:51.000
Бывает такое, что чем оплачивать содержание этого дорогостоящего специалиста, дешевле будет оставаться на виртуальных машинах.

00:05:51.000 --> 00:06:04.000
И, соответственно, хоть и где-то не совсем оптимально подгонять размеры ваших виртуальных машин под ваши нагрузки, тем не менее это будет выходить дешевле, чем целая зарплата одного специалиста.

00:06:04.000 --> 00:06:07.000
Это все зависит от ваших объемов.

00:06:07.000 --> 00:06:19.000
Если у вас достаточно большая инфраструктура, у вас большие нагрузки, то в этом случае экономия от того, что вы лучше подгоните ваши мощности под ваши нагрузки,

00:06:19.000 --> 00:06:23.000
она может быть больше, чем потенциальная зарплата одного специалиста.

00:06:23.000 --> 00:06:31.000
Поэтому все сильно зависит от конкретной ситуации, и надо из этого исходить.

00:06:31.000 --> 00:06:36.000
Вопрос, чем отличаются Docker-контейнеры от виртуальных машин?

00:06:36.000 --> 00:06:38.000
Отвечаю.

00:06:38.000 --> 00:06:46.000
Мы рассмотрели это подробно на нашей лекции, и если совсем непонятно, то рекомендую обратиться к лекции.

00:06:46.000 --> 00:06:49.000
Здесь же я хотел бы простыми словами ответить.

00:06:49.000 --> 00:06:57.000
Это то, что Docker-контейнеры, они могут быть намного меньше, и мы в одну машину тысячи контейнеров можем расположить.

00:06:57.000 --> 00:07:08.000
Таким образом, можно с Docker-контейнерами максимально подогнать размеры нашей мощности к нагрузкам, которые есть.

00:07:08.000 --> 00:07:16.000
Более того, контейнеры, в виду своей специфики, как это все организовано, оно запускается намного быстрее.

00:07:16.000 --> 00:07:31.000
Таким образом, Docker, он ускоряет в каком-то смысле вашу инфраструктуру и позволяет экономить из-за точного подгона ваших серверных мощностей.

00:07:31.000 --> 00:07:39.000
Виртуальные же машины, они достаточно универсальные, они давно появились, с самого начала как бы живут, есть.

00:07:39.000 --> 00:07:46.000
И очень много решений сделано для виртуальных машин с точки зрения оптимизации.

00:07:46.000 --> 00:07:53.000
И больше всего специалистов вы найдете, которые, скорее всего, смогут работать с обычной виртуальной машиной традиционной.

00:07:53.000 --> 00:07:58.000
Тогда как с Docker-контейнерами могут быть некоторые сложности с поиском специалиста.

00:07:58.000 --> 00:08:06.000
Либо, когда вы его найдете, то этот специалист может быть достаточно дорогостоящим в виду своей узкой направленности.

00:08:06.000 --> 00:08:13.000
Вопрос, могут ли Docker-контейнеры заменить виртуальные машины?

00:08:13.000 --> 00:08:20.000
Отвечаю, там могут заменить, так как контейнеры являются альтернативной технологией, которая набирает популярность.

00:08:20.000 --> 00:08:29.000
Здесь надо сделать небольшую ремарку, потому как контейнеры все также и будут запускаться на этой виртуальной машине.

00:08:29.000 --> 00:08:36.000
Но тут уже отличается то, как мы работаем, на каком уровне. До этого мы работали на уровне виртуальной машины,

00:08:36.000 --> 00:08:46.000
а теперь у нас виртуальная машина превращается в некие многоэтажные здания, и каждая квартира внутри – это наш контейнер.

00:08:46.000 --> 00:08:49.000
И мы работаем уже на уровне контейнеров.

00:08:49.000 --> 00:08:59.000
В будущем, скорее всего, будет так, что использование контейнеров станет еще более массовым,

00:08:59.000 --> 00:09:07.000
специалистов станет больше, соответственно, специалисты со знаниями Docker, Кубернеты будут доступны для компании.

00:09:07.000 --> 00:09:13.000
Более того, скорее всего, появятся новые сервисы, которые еще больше упрощают работу с контейнерами,

00:09:13.000 --> 00:09:21.000
и, соответственно, больше будет у нас IT-инфраструктуру в мире,

00:09:21.000 --> 00:09:29.000
которые изначально, а может со временем, перешли на контейнеры и не используют в чистом виде виртуальные машины.

00:09:29.000 --> 00:09:37.000
Другой момент – это то, что есть другая технология, технология Serverless, про которую мы на наших лекциях поговорили,

00:09:37.000 --> 00:09:46.000
и является также альтернативным решением, которое является достаточно выгодным решением, подходом,

00:09:46.000 --> 00:09:51.000
но все зависит от бизнес-задачи, от бизнес-контекста.

00:09:54.000 --> 00:09:58.000
Вопрос – что означает open source программное обеспечение?

00:09:58.000 --> 00:10:04.000
Отвечаю – это термин, который не привязан к облачным технологиям, общий IT-термин.

00:10:04.000 --> 00:10:11.000
Идея ее в том, что в мире есть очень много энтузиастов, которые разрабатывают некоторые решения,

00:10:11.000 --> 00:10:16.000
они готовы делиться с этим решением со всем миром на безвозмездной основе,

00:10:16.000 --> 00:10:22.000
и таким образом оно позволяет находить со всего мира таких же энтузиастов,

00:10:22.000 --> 00:10:28.000
которые хотят решить одну проблему, и объединяются таким образом,

00:10:28.000 --> 00:10:35.000
объединяются в группы и разрабатывают уже достаточно серьезное программное обеспечение,

00:10:35.000 --> 00:10:39.000
а это программное обеспечение решает какую-то определенную задачу.

00:10:42.000 --> 00:10:49.000
Отдельная тема лицензии open source, open source PLO, и есть некоторые нюансы,

00:10:49.000 --> 00:10:53.000
в каком случае, какую лицензию нужно использовать, какие есть ограничения,

00:10:53.000 --> 00:10:55.000
какие есть отличительные особенности.

00:10:55.000 --> 00:11:01.000
Это не является темой нашего курса, поэтому вы ее можете самостоятельно изучить.

00:11:02.000 --> 00:11:10.000
Когда мы говорим про open source использование в бизнесе, это тоже достаточно общий вопрос,

00:11:10.000 --> 00:11:15.000
однозначно на него ответить не получится, ввиду того, что все зависит от конкретного вашего бизнеса,

00:11:15.000 --> 00:11:20.000
от того, где, в каком месте вашей инфраструктуры будет использована это open source решение.

00:11:20.000 --> 00:11:30.000
Более того, нужно смотреть на само open source решение, является ли оно достаточно популярным,

00:11:30.000 --> 00:11:35.000
отлаженным, без большого количества ошибок, без дыр безопасности.

00:11:35.000 --> 00:11:38.000
Например, если вы компания, которая работает в сфере финансов,

00:11:38.000 --> 00:11:43.000
то этот вопрос достаточно остро будет стоять, то есть,

00:11:43.000 --> 00:11:48.000
использовать или не использовать open source решение, потому как там могут быть дыры безопасности,

00:11:48.000 --> 00:11:53.000
что очень негативно может сказаться в будущем на вашем в целом бизнесе,

00:11:53.000 --> 00:12:05.000
если хакеры будут использовать вот эту дыру безопасности для своих целях,

00:12:05.000 --> 00:12:08.000
для того, чтобы поломать работу вашей компании.

00:12:08.000 --> 00:12:14.000
Если это другая какая-то более лояльная сфера к open source решениям,

00:12:14.000 --> 00:12:19.000
то почему бы не рассмотреть это решение, так как open source программ много,

00:12:19.000 --> 00:12:22.000
очень много сильных и продвинутых программ,

00:12:22.000 --> 00:12:28.000
которые и на текущий момент используются в больших компаниях, в корпоративной среде.

00:12:28.000 --> 00:12:33.000
Вопрос, какие основные преимущества использования Kubernetes?

00:12:33.000 --> 00:12:43.000
Отвечаю, Kubernetes является некоторой надстройкой для того, чтобы аркестрировать докер контейнеры.

00:12:43.000 --> 00:12:51.000
Зачастую использование докер контейнеров оправдано,

00:12:51.000 --> 00:12:57.000
если у вас достаточно большое количество докер контейнеров, от 100, от 1000 и выше.

00:12:57.000 --> 00:13:07.000
В этом случае Kubernetes предоставляет достаточно продвинутые методы для механики,

00:13:07.000 --> 00:13:14.000
для того, чтобы легче справляться с этим, в кавычках, зоопарком контейнеров,

00:13:14.000 --> 00:13:17.000
которые сильно друг от друга могут отличаться.

00:13:17.000 --> 00:13:20.000
Если мы говорим про небольшое количество докер контейнеров,

00:13:20.000 --> 00:13:27.000
то возможно вам достаточно будет использовать сервисы ECS,

00:13:27.000 --> 00:13:32.000
например elastic container service, который как раз таки аркестрирует докер контейнеры,

00:13:32.000 --> 00:13:38.000
но не является Kubernetes, либо же другое какое-то решение,

00:13:38.000 --> 00:13:42.000
которое работает не с Kubernetes, а напрямую с докер контейнерами.

00:13:42.000 --> 00:13:47.000
Все зависит от вашей конкретной задачи, от вашего бизнеса.

00:13:47.000 --> 00:13:49.000
Компании бывают разные.

00:13:49.000 --> 00:13:53.000
Некоторые компании, например, продуктовые, они разрабатывают один или несколько продуктов,

00:13:53.000 --> 00:13:59.000
и в этом случае не всегда оправдано использование Kubernetes и докер контейнеров.

00:13:59.000 --> 00:14:04.000
Иногда бывает, что есть компания, которая разрабатывает очень много приложений,

00:14:04.000 --> 00:14:10.000
либо это по своей специфике приложения, которые архитектурно разработаны так,

00:14:10.000 --> 00:14:15.000
что это маленькие мини-приложения, независимо друг от друга работающие.

00:14:15.000 --> 00:14:21.000
В этом случае вполне возможно попробовать применить докер контейнеры.

00:14:21.000 --> 00:14:25.000
Предварительно, естественно, нужно будет сделать некий расчет и убедиться,

00:14:25.000 --> 00:14:29.000
что действительно будут какие-то преимущества от этого перехода,

00:14:29.000 --> 00:14:33.000
потому как сам переход – это тоже достаточно затратная часть.

00:14:33.000 --> 00:14:39.000
Нужны специалисты, нужно обучение, нужно перестроить, отладить и провести целый процесс

00:14:39.000 --> 00:14:44.000
по переходу от предыдущего состояния в новое состояние с докер контейнерами.

00:14:44.000 --> 00:14:46.000
Поэтому это все необходимо просчитывать.

00:14:46.000 --> 00:14:52.000
И в случае, если это действительно достаточно существенная выгода,

00:14:52.000 --> 00:14:57.000
то компания решается на это и переходит к использованию докер контейнеров,

00:14:57.000 --> 00:15:00.000
а возможно и кубернетес вместе.

00:15:00.000 --> 00:15:08.000
Вопрос – приведите примеры компании, которые используют определенные AWS сервисы.

00:15:08.000 --> 00:15:10.000
Отвечаю.

00:15:10.000 --> 00:15:13.000
Давайте рассмотрим самые интересные примеры.

00:15:13.000 --> 00:15:17.000
Мы с вами познакомились с сервисами вычисления,

00:15:17.000 --> 00:15:20.000
и среди них есть те, которые работают с контейнерами.

00:15:20.000 --> 00:15:23.000
Начнем мы с ECR.

00:15:23.000 --> 00:15:25.000
Это тот сервис.

00:15:25.000 --> 00:15:27.000
Если вы откроете страницу этого сервиса,

00:15:27.000 --> 00:15:31.000
во вкладке Customers вы можете увидеть примеры компании,

00:15:31.000 --> 00:15:35.000
которые достаточно активно используют тот или иной сервис.

00:15:35.000 --> 00:15:43.000
Также там же вы можете увидеть ссылки на презентации, видео презентации в Reinvent.

00:15:43.000 --> 00:15:47.000
То есть Reinvent – это большая конференция, организуемая AWS ежегодно,

00:15:47.000 --> 00:15:50.000
в которой в том числе и выступают партнеры,

00:15:50.000 --> 00:15:55.000
и достаточно крупные пользователи сервисов AWS.

00:15:55.000 --> 00:15:58.000
Если мы говорим про сервис Elastic Container Registry,

00:15:58.000 --> 00:16:04.000
то одним из самых популярных пользователей является компания Pinterest.

00:16:04.000 --> 00:16:09.000
То есть это то приложение, которое мы достаточно часто используем в нашей жизни.

00:16:09.000 --> 00:16:15.000
Другой пример – это сервис Elastic Container Service, то есть ECS.

00:16:15.000 --> 00:16:21.000
Здесь как пример можно привести к компании Volkswagen, автомобильная компания.

00:16:21.000 --> 00:16:23.000
Также есть Autodesk.

00:16:23.000 --> 00:16:27.000
Это компания, которая разрабатывает программу для 3D-моделирования.

00:16:27.000 --> 00:16:32.000
Если же мы говорим про сервис EKS, то есть Elastic Kubernetes Service,

00:16:32.000 --> 00:16:36.000
то один из самых популярных примеров – это Snapchat.

00:16:36.000 --> 00:16:41.000
Тоже приложение, которое мы на ежедневной основе используем.

00:16:41.000 --> 00:16:52.000
Здесь же также можно, в случае Snapchat есть даже две ссылки на презентации от 2018-19 года,

00:16:52.000 --> 00:16:54.000
в котором они рассказывают, как они используют,

00:16:54.000 --> 00:16:57.000
какие выгоды они получают от использования этого приложения.

00:16:57.000 --> 00:17:03.000
Другой пример – это HSBC.

00:17:03.000 --> 00:17:06.000
Это достаточно крупный инвестиционный банк,

00:17:06.000 --> 00:17:10.000
и он тоже достаточно активно использует сервис EKS.

00:17:10.000 --> 00:17:13.000
Другие примеры вы также можете посмотреть,

00:17:13.000 --> 00:17:17.000
достаточно лишь открыть основную страницу сервиса и во вкладке Customers посмотреть,

00:17:17.000 --> 00:17:19.000
кто же все-таки использует.

00:17:19.000 --> 00:17:23.000
Еще раз повторюсь, есть ссылки на презентации, видео презентации,

00:17:23.000 --> 00:17:27.000
которые рассказывают, каким образом компания использует тот или иной сервис,

00:17:27.000 --> 00:17:29.000
какие выгоды от этого получает.

00:17:29.000 --> 00:17:33.000
Где-то бывает они рассказывают уникальный опыт свой,

00:17:33.000 --> 00:17:37.000
который позволил либо сэкономить достаточно большое количество денег

00:17:37.000 --> 00:17:42.000
ввиду использования этого сервиса, либо сильно оптимизировать некоторые свои внутренние процессы.

00:17:42.000 --> 00:17:47.000
Приводят определенные цифры, графики, и это достаточно интересно просматривается.

00:17:47.000 --> 00:17:59.000
Вопрос – чем отличаются Pool и Push архитектуры на примере сервисов Amazon SNS и Amazon SQS?

00:17:59.000 --> 00:18:01.000
Отвечаю, достаточно хороший вопрос.

00:18:01.000 --> 00:18:07.000
Если мы говорим про Pool и Push, то простыми словами,

00:18:07.000 --> 00:18:10.000
когда мы строим архитектуру по принципу Pool,

00:18:10.000 --> 00:18:21.000
это значит источник запроса инвестирует отправку вот самого запроса и триггерит получателя.

00:18:21.000 --> 00:18:24.000
И дальше получатель уже обрабатывает это сообщение.

00:18:24.000 --> 00:18:29.000
А когда мы говорим про архитектуру, построенную по принципу Push,

00:18:29.000 --> 00:18:38.000
это когда мы накапливаем на стороне источника набор сообщений для отработки, обработки.

00:18:38.000 --> 00:18:43.000
И, соответственно, та сторона, которая должна обработать эти сообщения,

00:18:43.000 --> 00:18:49.000
по готовности обращается в некоторый Pool, в некоторую очередь,

00:18:49.000 --> 00:18:53.000
и по очереди обрабатывает эти сообщения.

00:18:53.000 --> 00:18:58.000
Есть плюсы и минусы каждого из подходов.

00:18:58.000 --> 00:19:04.000
Идея в том, что благодаря Pool, благодаря сервисам Amazon SNS и Amazon SQS

00:19:04.000 --> 00:19:09.000
у нас есть возможность сделать архитектуру слабосвязной.

00:19:09.000 --> 00:19:11.000
Слабосвязная архитектура это намного лучше.

00:19:11.000 --> 00:19:14.000
Архитектуры сильно связные.

00:19:14.000 --> 00:19:19.000
Мы про это поговорим с вами на последних наших лекциях, в последних неделях.

00:19:19.000 --> 00:19:24.000
И идея в том, что когда у нас архитектура слабосвязная,

00:19:24.000 --> 00:19:31.000
то очень просто и намного легче заменить некоторые части архитектуры,

00:19:31.000 --> 00:19:35.000
возможно, модернизировать, улучшить, либо совсем исключить, если она не нужна.

00:19:35.000 --> 00:19:39.000
Если же у нас все сильно связано между собой,

00:19:39.000 --> 00:19:43.000
то вот этот процесс улучшения, обновления,

00:19:43.000 --> 00:19:48.000
либо удаления некоторых компонентов внутри архитектуры – это целая проблема.

00:19:48.000 --> 00:19:54.000
Поэтому сервисы Amazon SNS, Amazon SQS нам в этом сильно помогают.

00:19:56.000 --> 00:19:58.000
Вопрос, что такое Lambda функция?

00:19:58.000 --> 00:19:59.000
Отвечаю.

00:19:59.000 --> 00:20:05.000
Lambda функция – это IT ресурс в рамках сервиса AWS Lambda.

00:20:05.000 --> 00:20:10.000
AWS Lambda – это сервис, который предоставляет бессерверные мощности.

00:20:10.000 --> 00:20:15.000
И вам достаточно создать этот ресурс, Lambda функцию.

00:20:15.000 --> 00:20:18.000
В Lambda функцию загрузить код, который должен отрабатывать.

00:20:18.000 --> 00:20:21.000
При необходимости вы можете указать ваши источники,

00:20:21.000 --> 00:20:28.000
откуда вы будете получать информацию о том, что Lambda функция должна начать работать.

00:20:28.000 --> 00:20:30.000
Это может быть API Gateway.

00:20:30.000 --> 00:20:34.000
Таким образом, у вас появляется, простыми словами, отдельный URL.

00:20:34.000 --> 00:20:36.000
Как только вы на этот URL обращаетесь,

00:20:36.000 --> 00:20:39.000
возможно, вы дополнительные какие-то параметры передаете,

00:20:39.000 --> 00:20:42.000
то эти параметры дальше проходят через сервис API Gateway

00:20:42.000 --> 00:20:43.000
и попадают на Lambda.

00:20:43.000 --> 00:20:49.000
API Gateway вызывает Lambda функцию, и Lambda функция, соответственно, отрабатывает свой код,

00:20:49.000 --> 00:20:52.000
исходя из входных данных.

00:20:52.000 --> 00:20:56.000
Может быть такое, что она не принимает никаких входных данных.

00:20:56.000 --> 00:20:58.000
Это тоже нормальный пример.

00:20:58.000 --> 00:21:02.000
И в этом случае Lambda функция отрабатывает по одной и той же логике.

00:21:02.000 --> 00:21:07.000
Когда приходят уже входные данные, то Lambda функция внутри кода

00:21:07.000 --> 00:21:11.000
можно запрограммировать некоторое динамическое поведение

00:21:11.000 --> 00:21:14.000
в зависимости от входных данных.

00:21:14.000 --> 00:21:19.000
Другой пример. Мы можем также настроить уже внутри AWS сервиса,

00:21:19.000 --> 00:21:23.000
AWS EventBridge,

00:21:23.000 --> 00:21:29.000
который будет либо по некоторому событию,

00:21:29.000 --> 00:21:33.000
либо по некоторому расписанию вызывать Lambda функцию.

00:21:33.000 --> 00:21:36.000
Это тоже достаточно частое применение Lambda функции,

00:21:36.000 --> 00:21:41.000
когда мы хотим что-то автоматизировать внутри нашей IT инфраструктуры

00:21:41.000 --> 00:21:47.000
и, представим, хотим на ежедневной основе включать EC2 инстанции

00:21:47.000 --> 00:21:51.000
в начале 7 часов утра, а в 2 часа ночи, например, отключать.

00:21:51.000 --> 00:21:57.000
И вот разница в 5 часов, когда никто не заходит, не использует наши сервисы,

00:21:57.000 --> 00:22:03.000
мы можем сэкономить, отключив EC2 инстанции.

00:22:03.000 --> 00:22:09.000
В целом, серверлесс функции, серверлесс сервисы –

00:22:09.000 --> 00:22:13.000
это достаточно обширная тема, это новое направление.

00:22:13.000 --> 00:22:18.000
Есть некоторые IT инфраструктуры, которые полностью построены

00:22:18.000 --> 00:22:22.000
на бессерверных технологиях, что позволяет сильно экономить,

00:22:22.000 --> 00:22:27.000
в случае, если у этого сервиса, у этого бизнеса непостоянные нагрузки.

00:22:27.000 --> 00:22:33.000
Я хотел бы также здесь добавить, что наше решение от Cloud Academy

00:22:33.000 --> 00:22:36.000
также было построено с использованием сервисов

00:22:36.000 --> 00:22:40.000
на основе бессерверных технологий, то есть серверлесс – это API,

00:22:40.000 --> 00:22:43.000
Gateway, Lambda, DynamoDB и так далее.

00:22:43.000 --> 00:22:45.000
S3 сюда тоже можно отнести.

00:22:49.000 --> 00:22:55.000
Вопрос. Почему Lambda функция максимально может работать лишь 15 минут?

00:22:55.000 --> 00:22:58.000
Это много ли бы мало по сравнению с другими сервисами?

00:22:58.000 --> 00:23:04.000
Отвечаю. Да, действительно, Lambda функция максимально может работать 15 минут.

00:23:04.000 --> 00:23:08.000
Это не soft limit, это hard limit, поэтому мы изменить его не можем.

00:23:08.000 --> 00:23:10.000
15 минут – это 900 секунд.

00:23:12.000 --> 00:23:18.000
По опыту и по опыту коллег других компаний могу сказать,

00:23:18.000 --> 00:23:23.000
что в 99% случаев 15 минут более чем достаточно.

00:23:23.000 --> 00:23:28.000
Более того, очень частая связка – это Lambda плюс API Gateway.

00:23:28.000 --> 00:23:33.000
А на стороне API Gateway есть другой hard limit – это 29 секунд.

00:23:33.000 --> 00:23:41.000
API Gateway передает запрос Lambda, и если в течение 29 секунд Lambda не отвечает,

00:23:41.000 --> 00:23:48.000
то, соответственно, запрос считается timeout, то есть время истекло,

00:23:48.000 --> 00:23:57.000
и соответствующая ошибка возвращается на frontend, на UI, на веб-сайт, который видят ваши пользователи.

00:23:57.000 --> 00:24:03.000
И здесь также мы видим, что 15 минут – это намного больше чем 29 секунд.

00:24:03.000 --> 00:24:10.000
Исходя из того, что есть определенные сайты, то есть frontend,

00:24:10.000 --> 00:24:16.000
который используют через API Gateway, и на бэкэнде построена Lambda,

00:24:16.000 --> 00:24:21.000
которая отрабатывает и 29 секунд более чем достаточно.

00:24:21.000 --> 00:24:26.000
Если еще глубже опускаться, то мы с вами все знаем,

00:24:26.000 --> 00:24:32.000
что для того, чтобы пользователь не развернулся и не ушел,

00:24:32.000 --> 00:24:38.000
веб-сайты ускоряют работу, ускоряют выполнение некоторых действий внутри сайта.

00:24:38.000 --> 00:24:42.000
И если в течение одной-двух секунд не получает ответа,

00:24:42.000 --> 00:24:47.000
то очень неприятно, некомфортно находиться на этом веб-ресурсе.

00:24:47.000 --> 00:24:57.000
Поэтому компании, когда работают с разработкой веб-сайтов,

00:24:57.000 --> 00:25:03.000
они стремятся все свои запросы уложить в одну-две секунды.

00:25:03.000 --> 00:25:09.000
Таким образом, даже не 29 секунд, а 1-2 минуты более чем достаточно для того,

00:25:09.000 --> 00:25:14.000
чтобы успешно справляться с большинством кейсов, когда используется Lambda.

00:25:14.000 --> 00:25:18.000
Да, есть кейсы, когда мы можем запускать Lambda асинхронно,

00:25:18.000 --> 00:25:23.000
то есть приходит вызов через API Gateway тот же, и вызывает нашу Lambda.

00:25:23.000 --> 00:25:27.000
И Lambda выполняет какую-то долгосрочную задачу.

00:25:27.000 --> 00:25:36.000
И UI, то есть API Gateway получает, что да, ваш запрос принят на обработку

00:25:36.000 --> 00:25:40.000
и уже не сможет вернуть какой-то результат, потому что самообработка

00:25:40.000 --> 00:25:42.000
занимает больше 29 секунд.

00:25:42.000 --> 00:25:45.000
Поэтому вызывайте эту Lambda асинхронно.

00:25:45.000 --> 00:25:51.000
Дальше уже эта Lambda может до 15 минут работать, чтобы завершить эту задачу.

00:25:51.000 --> 00:25:54.000
Теперь здесь возникает следующий момент.

00:25:54.000 --> 00:25:59.000
Если Lambda не успевает отрабатывать в течение 15 минут,

00:25:59.000 --> 00:26:03.000
это достаточно редкий кейс, но такие кейсы бывают.

00:26:03.000 --> 00:26:08.000
И зачастую используют уже следующую связку Lambda и Step Functions.

00:26:08.000 --> 00:26:16.000
Step Functions – это еще одна функция для оркестрации работы Lambda функций.

00:26:16.000 --> 00:26:20.000
Там не только Lambda функции подключаются, можно подключить и другие сервисы,

00:26:20.000 --> 00:26:22.000
но это достаточно частая связка.

00:26:22.000 --> 00:26:28.000
И вы можете, в случае, если ваша задача может быть прервана и продолжена,

00:26:28.000 --> 00:26:33.000
то Lambda функция в течение 15 минут либо чуть меньше отрабатывает, что она успевает,

00:26:33.000 --> 00:26:36.000
сохраняет свое состояние и передает Step Functions.

00:26:36.000 --> 00:26:44.000
Step Functions получает выход первой Лямды и на вход подает результат состояния,

00:26:44.000 --> 00:26:48.000
на котором остановилась первая Лямда, передает для второй Лямды.

00:26:48.000 --> 00:26:51.000
Она с этого момента продолжает и пытается завершить эту работу.

00:26:51.000 --> 00:26:55.000
Можно даже внутри Step Functions сделать некоторый цикл,

00:26:55.000 --> 00:27:00.000
где она будет вызывать каждую следующую Лямду до того момента, как она не обработается.

00:27:00.000 --> 00:27:05.000
Step Functions также является сервер-лесс-решением, полностью менеджит AWS сервис.

00:27:05.000 --> 00:27:08.000
Таким образом ее достаточно быстро можно настроить,

00:27:08.000 --> 00:27:18.000
и вы большинство задач по поддержке инфраструктуры именно Step Functions с ней не сталкиваетесь.

00:27:18.000 --> 00:27:20.000
Это все на стороне AWS.

00:27:20.000 --> 00:27:29.000
Если сравнивать с другими сервисами, то это достаточно не совсем подходящий вопрос,

00:27:29.000 --> 00:27:33.000
потому что очень сложно сравнивать Lambda с другими сервисами,

00:27:33.000 --> 00:27:40.000
но я попытался вам, когда отвечал на первый вопрос, объяснить, что 15 минут более чем достаточно.

00:27:40.000 --> 00:27:43.000
В случае, когда не хватает, есть также решение,

00:27:43.000 --> 00:27:47.000
что вы можете сделать для решения своих внутренних бизнес задач.

00:27:47.000 --> 00:27:51.000
Вопрос, что означает сервер-лесс?

00:27:51.000 --> 00:27:52.000
Отвечаю.

00:27:52.000 --> 00:28:01.000
Сервер-лесс – это новая технология, которая позволяет для пользователей того или иного сервер-лесс-сервиса

00:28:01.000 --> 00:28:08.000
не отвлекаться на обслуживание IT-ресурсов, в том числе виртуальных серверов,

00:28:08.000 --> 00:28:10.000
ваших вычислительных мощностей,

00:28:10.000 --> 00:28:12.000
а больше сконцентрироваться на бизнес-задачи.

00:28:12.000 --> 00:28:14.000
Приведу пример.

00:28:14.000 --> 00:28:18.000
Один из самых ярких примеров – это AWS Lambda.

00:28:18.000 --> 00:28:23.000
Это тот сервис, который позволяет вам загрузить код,

00:28:23.000 --> 00:28:27.000
и все то, что относится к запуску, обслуживанию этого запуска,

00:28:27.000 --> 00:28:29.000
оно выполняется на стороне AWS.

00:28:29.000 --> 00:28:37.000
То есть оно полностью исключает от вас задачи обслуживания.

00:28:37.000 --> 00:28:43.000
Другой пример сервер-лесс-решения – это API Gateway.

00:28:43.000 --> 00:28:47.000
Тоже достаточно популярный сервис, работает в связке с Lambda.

00:28:47.000 --> 00:28:53.000
И в этом случае вам нет необходимости разрабатывать, писать код,

00:28:53.000 --> 00:29:00.000
заниматься поддержкой серверов, которые обрабатывают эти запросы, проходящие через API.

00:29:00.000 --> 00:29:05.000
А достаточно либо внутри AWS Management Console накликать необходимые настройки,

00:29:05.000 --> 00:29:10.000
либо же через SDK, либо CLI, либо возможно через CloudFormation

00:29:10.000 --> 00:29:21.000
написать то состояние, какой набор API нужен в виде конфигурации,

00:29:21.000 --> 00:29:27.000
и дальше передать это сервису API Gateway для того, чтобы он поднял, настроил и все работало за вас.

00:29:27.000 --> 00:29:32.000
Фактически вы оплачиваете только за объем обслуженных запросов,

00:29:32.000 --> 00:29:37.000
и все остальное обслуживание вот этих запросов, оно на стороне AWS.

00:29:37.000 --> 00:29:43.000
На стороне AWS также есть большое количество сервер-лесс-сервисов,

00:29:43.000 --> 00:29:51.000
которые могут быть использованы в связке. Это DynamoDB, это S3, это Step Functions и так далее.

00:29:51.000 --> 00:29:58.000
Таким образом вы видите, что есть достаточно большой набор сервер-лесс-сервисов,

00:29:58.000 --> 00:30:08.000
и есть такая тенденция в мире, что IT-инфраструктуры полностью поднимаются на сервер-лесс-решениях.

00:30:08.000 --> 00:30:13.000
Таким образом в этом случае нет необходимости содержать большой штат,

00:30:13.000 --> 00:30:22.000
и при этом это решение позволяет максимально экономить деньги в случае, если у вас не постоянные нагрузки.

00:30:22.000 --> 00:30:27.000
Когда мы говорим про постоянные нагрузки, то не все сервер-лесс-решения становятся оптимальными,

00:30:27.000 --> 00:30:32.000
и в этом случае вы начинаете рассматривать и переходить либо в контейнеры,

00:30:32.000 --> 00:30:36.000
либо в использование традиционных виртуальных машин.

00:30:36.000 --> 00:30:42.000
Но сама экономия в начале – это очень большое преимущество.

00:30:42.000 --> 00:30:49.000
То есть, где у нас не постоянные нагрузки, это обычно, когда компания только-только начинает работать,

00:30:49.000 --> 00:30:54.000
либо это какой-то начинающий стартап, и в этом случае возможность сэкономить

00:30:54.000 --> 00:30:59.000
и не платить за то, что мы не используем – это очень ценная возможность,

00:30:59.000 --> 00:31:06.000
что позволяет не убить в самом начале со своими лишними расходами этот стартап,

00:31:06.000 --> 00:31:13.000
а как раз таки все имеющиеся, возможно, небольшие средства направить на другие нужды.

00:31:13.000 --> 00:31:19.000
Ну и соответственно увеличить вероятность того, что этот стартап дойдет до какого-то нормального состояния,

00:31:19.000 --> 00:31:26.000
доберется до постоянных нагрузок, а там уже дальше, в зависимости от своих внутренних процессов,

00:31:26.000 --> 00:31:31.000
задач – уже рассматривать вопрос перехода на другие архитектуры.

00:31:31.000 --> 00:31:39.000
На этом мы разобрали все вопросы, которые от вас получили, касающиеся лекции этой недели.

00:31:39.000 --> 00:31:46.000
Я думаю, вы получили свои ответы, чуть больше, чуть лучше поняли некоторые аспекты работы с облаками WS.

00:31:46.000 --> 00:31:54.000
Если есть еще вопросы, пожалуйста, пишите, мы эти вопросы будем собирать и публиковать в виде сессии вопросов и ответов.

00:31:54.000 --> 00:32:17.000
На этом мы заканчиваем и увидимся с вами на следующих наших активностях.