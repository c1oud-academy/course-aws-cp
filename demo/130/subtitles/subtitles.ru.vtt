WEBVTT

00:00:00.000 --> 00:00:06.760
Добрый день, уважаемые студенты!
Я рад вас всех видеть на очередной Демо сессии.

00:00:06.760 --> 00:00:13.760
Тема сегодняшней сессии – это часто 
встречающиеся сценарии на реальном экзамене AWS.

00:00:13.760 --> 00:00:22.840
Мы рассмотрим все популярные и возможные ответы 
в случае такого сценария. Итак, давайте начнем. 

00:00:22.840 --> 00:00:30.160
Перед тем, как мы начнем, я бы хотел указать 
источник, откуда эта информация была взята.

00:00:30.160 --> 00:00:35.080
Все вы, возможно, слышали, возможно, 
нет, но есть такой человек

00:00:35.080 --> 00:00:41.960
Джон Бонсо, достаточно яркая личность 
в сфере подготовки к экзаменам AWS.

00:00:41.960 --> 00:00:45.840
Все начиналось с того, что
этот человек владел сайтом, 

00:00:45.840 --> 00:00:50.480
на который закидывал гайды по определенным 
сервисам, т.е. берется определенный

00:00:50.480 --> 00:00:57.960
сервис, AWS Lambda, и подготавливается 
тезисная информация об этом сервисе. 

00:00:57.960 --> 00:01:00.320
И эта информация часто 
встречается на экзамене и 

00:01:00.320 --> 00:01:08.680
довольно хорошо помогает повторить большую 
часть материала, читая эти тезисы.

00:01:08.680 --> 00:01:13.840
Они достаточно короткие и сжатые, и так было
приготовлено для большей части сервисов.

00:01:13.840 --> 00:01:21.800
Далее, проект развивался буквально на 
глазах, и в какой-то момент появились 

00:01:21.800 --> 00:01:29.360
тесты для подготовки к экзаменам AWS,
опубликованные в Udemy.

00:01:29.360 --> 00:01:39.600
После чего этот проект вырос 
уже из Udemy и tutorialsdojo.com

00:01:39.600 --> 00:01:44.080
превратился в некий учебный портал, 
в котором начали появляться тесты.

00:01:44.080 --> 00:01:50.760
Есть движок тестирования, который 
подбирает вопросы, интерфейс улучшился.

00:01:50.760 --> 00:01:56.840
Через какое-то время наступил следующий шаг, 
подготовили дополнительный материал, не только

00:01:56.840 --> 00:02:06.760
разборы тестовых вопросов, но и целые курсы 
для подготовки к определенному экзамену AWS.

00:02:06.760 --> 00:02:13.020
Наряду со всем этим материалом 
также есть страницы, специально

00:02:13.020 --> 00:02:17.320
предназначенные для каждого экзамена AWS, 
которые рассматривают ее с разных сторон.

00:02:17.320 --> 00:02:22.000
И один кейс, это Common Exam Scenarios, 
как раз таки по этой ссылке

00:02:22.000 --> 00:02:27.480
вы можете напрямую перейти, 
либо в Google написать bonso aws cp, 

00:02:27.480 --> 00:02:32.880
т.е. Cloud Practitioner и common scenarios, 
вы попадете на нужную вам страницу. 

00:02:32.880 --> 00:02:41.000
Я достаточно позитивно 
высказался касательно ресурса,

00:02:41.000 --> 00:02:47.800
это действительно так, но есть один 
небольшой нюанс, который достаточно важен.

00:02:47.800 --> 00:02:54.200
Материала много, материал полезный. Из минусов 
 - он полностью на английском, это – первое.

00:02:54.200 --> 00:03:00.480
И второе – это то, что не все материалы, 
не вся информация, она актуальная.

00:03:00.480 --> 00:03:13.840
Поэтому точные цифры, факты рекомендуется 
перепроверять по документации AWS. 

00:03:13.840 --> 00:03:21.000
Основные же концепции в целом редко меняются, и 
можно сказать, что вот такого рода информацию

00:03:21.000 --> 00:03:30.040
можно читать и воспринимать как 
актуальную на вот подобных сайтах. 

00:03:30.040 --> 00:03:35.240
Возвращаемся обратно к нашим слайдам. 
Слайды организованы следующим образом:

00:03:35.240 --> 00:03:42.580
все слайды поделены на четыре направления, это 
старые домены экзамена AWS Certified Cloud 

00:03:42.580 --> 00:03:49.680
Practitioner, сейчас пять доменов, но это 
никак не понижает ценность этой информации,

00:03:49.680 --> 00:04:00.080
а лишь помогает нам сгруппировать все 
кейсы по четырем различным направлениям. 

00:04:00.080 --> 00:04:04.760
Сами слайды организованы следующим образом. 
Есть сценарии, там какое-то предложение  

00:04:04.760 --> 00:04:09.200
либо часть предложения, описывающее наш 
сценарий и соответственно решение.

00:04:09.200 --> 00:04:14.400
Решением в большинстве случаев является один 
или несколько сервисов AWS, в каких-то случаях

00:04:14.400 --> 00:04:20.360
определенный функционал внутри определенного
сервиса, либо какое-то понятие и термин.

00:04:20.360 --> 00:04:28.480
Я бы здесь хотел особо отметить, 
что это не является шпаргалкой.

00:04:28.480 --> 00:04:35.260
Это больше материал для повторения студентам, 
которые прошли весь теоретический материал,

00:04:35.260 --> 00:04:40.280
и здесь как раз таки рассматриваются самые
популярные кейсы, основные моменты, 

00:04:40.280 --> 00:04:45.840
на которые стоит акцентировать, обратить 
внимание и дополнительно повторить.

00:04:45.840 --> 00:04:50.960
Поэтому для тех, кто только зашел на 
курс и сразу перешел на последнее Демо,

00:04:50.960 --> 00:04:54.080
это бесполезный материал, 
набор непонятных терминов. 

00:04:54.080 --> 00:04:57.760
Для тех, кто планомерно двигался, 
это достаточно ценный материал,

00:04:57.760 --> 00:05:01.720
который вам поможет 
структурировать ваши знания. 

00:05:01.720 --> 00:05:08.200
Более того, эти частые кейсы не только те 
кейсы, которые встречаются на экзамене AWS.

00:05:08.200 --> 00:05:13.360
Сам экзамен построен на том, чтобы помогать 
вам в будущем, когда вы будете работать с AWS.

00:05:13.360 --> 00:05:21.280
Поэтому внутри экзамена вопросы взяты 
из реальной жизни облачного инженера.

00:05:21.280 --> 00:05:26.000
И те кейсы, которые мы здесь разберем, вы также 
будете использовать, когда вы будете работать

00:05:26.000 --> 00:05:32.040
облачным инженером в одной из компаний. 
Хорошо, давайте начинаем, двигаемся дальше. 

00:05:32.040 --> 00:05:41.760
Первый домен, первая группа – это Cloud Concepts, 
т.е. основные понятия облачных технологий. 

00:05:41.760 --> 00:05:51.640
Итак, сценарий: Какие финансовые 
преимущества получает компания 

00:05:51.640 --> 00:05:57.480
при миграции всех своих систем 
из локального дата-центра в AWS? 

00:05:57.480 --> 00:06:05.760
Ответ: Первым ответом является то, что компания 
заменяет капитальные расходы на операционные расходы.

00:06:05.760 --> 00:06:12.480
Что это означает? Мы говорили, что капитальные 
расходы это когда мы несем расходы наперед.

00:06:12.480 --> 00:06:16.280
Одним из ярких примеров – 
это покупка целого сервера, 

00:06:16.280 --> 00:06:21.320
т.е. вы покупаете за большую 
сумму и вне зависимости от того вы

00:06:21.320 --> 00:06:26.680
будете использовать пять лет либо 
три месяца, вы должны оплатить всю сумму.

00:06:26.680 --> 00:06:30.040
Когда мы говорим операционные расходы, 
и в частности облако AWS,

00:06:30.040 --> 00:06:36.120
мы можем поднять достаточно мощный 
EC2 инстанс, использовать его три часа,

00:06:36.120 --> 00:06:43.680
оплатить только за три часа и после этого 
высвободить наши ресурсы, чтобы не платить. 

00:06:43.680 --> 00:06:52.960
Таким образом, мы можем всю или 
большую часть капитальных расходов, 

00:06:52.960 --> 00:07:01.680
когда мы владеем собственным дата-центром, 
перенести на операционные расходы и оплачивать 

00:07:01.680 --> 00:07:05.800
только за то, что мы используем 
при переходе на AWS. 

00:07:05.800 --> 00:07:08.720
Второй кейс – это reduce the 
total cost of ownership, 

00:07:08.720 --> 00:07:14.400
т.е. идея такая же, когда мы владеем 
собственным локальным дата-центром,

00:07:14.400 --> 00:07:18.840
то в этом случае нам 
необходимо все закупать сразу.

00:07:18.840 --> 00:07:26.120
Возможно, большие затраты пойдут на покупку 
помещения, либо ежемесячная трата на аренду.

00:07:26.120 --> 00:07:30.880
Далее у вас есть штат сотрудников, 
которые поддерживают работу дата-центра. 

00:07:30.880 --> 00:07:35.560
Это те расходы, которые постоянные, 
не меняются. Даже если у вас на вашем

00:07:35.560 --> 00:07:43.740
сайте не будет ни одного пользователя, 
то вы все равно будете нести эти расходы.

00:07:43.740 --> 00:07:48.320
Когда же мы говорим про AWS, мы можем 
построить инфраструктуру таким образом,

00:07:48.320 --> 00:07:53.140
что она автомасштабируется и 
в большую и в меньшую сторону.

00:07:53.140 --> 00:08:02.100
В случае, когда мы видим спад трафика, нет ни
одного пользователя на нашем сайте, нет нагрузки, 

00:08:03.100 --> 00:08:07.280
в этом случае инфраструктура может автоматически 
уменьшиться до минимальных размеров.

00:08:07.280 --> 00:08:12.560
Таким образом, мы будем нести также 
минимальные расходы на нашу инфраструктуру.

00:08:12.560 --> 00:08:23.920
Сценарий: Укажите принципы построения 
архитектуры в облаке AWS. 

00:08:23.920 --> 00:08:27.200
Ответы, решения: 
Первое – это Design for Failure.

00:08:27.200 --> 00:08:31.200
Идея в том, что при увеличении 
размеров вашей инфраструктуры 

00:08:31.200 --> 00:08:35.160
пропорционально также увеличивается 
вероятность того, что где-то 

00:08:35.160 --> 00:08:38.560
что-то пойдет не так, 
какой-то из компонентов сломается.

00:08:38.560 --> 00:08:46.520
Поэтому необходимо думать наперед, 
зная какие компоненты могут сломаться,

00:08:46.520 --> 00:08:51.520
добавлять либо избыточность, либо 
возможность быстрого авто-восстановления. 

00:08:51.520 --> 00:08:57.840
Второе – Decouple your components. Идея в том, 
что нужно строить архитектуру таким образом,

00:08:57.840 --> 00:09:02.800
чтобы все компоненты были слабо 
связаны между собой. Зачем это нужно?

00:09:02.800 --> 00:09:07.320
При слабой связанности можно 
легко заменить каждый компонент.

00:09:07.320 --> 00:09:15.680
Более того, при поломке какого-то компонента
оно меньше влияет на соседние компоненты.

00:09:15.680 --> 00:09:26.040
Таким образом, разрушительное влияние какой-то 
поломки будет уменьшено за счет такой архитектуры.

00:09:26.040 --> 00:09:31.880
Третье, четвертое – это связано Implement 
Elasticity, т.е. говорим про гибкость 

00:09:31.880 --> 00:09:38.440
и Think Parallel – это про масштабирование. 
Идея в том, что у нас есть связка сервисов, 

00:09:38.440 --> 00:09:42.400
при правильной настройке архитектура 
превращается в живой организм. 

00:09:42.400 --> 00:09:47.320
И может в зависимости от некоторых метрик, 
например, нагрузки на ваши сервера, 

00:09:47.320 --> 00:09:51.360
увеличиваться автоматически в размерах, 
как в большую, так и в меньшую сторону.

00:09:51.360 --> 00:10:00.600
Более подробно можете посмотреть наши принципы 
построения архитектур на лекционном занятии. 

00:10:00.600 --> 00:10:07.200
Сценарий: У нас есть критические нагрузки в 
облаке AWS, которые должны быть высоко доступны.

00:10:07.200 --> 00:10:14.600
Что необходимо использовать, как частое решение
 – это строить инфраструктуру на нескольких 

00:10:14.600 --> 00:10:19.480
availability зонах. Таким образом, крайне 
вероятное событие выхода из строя

00:10:19.480 --> 00:10:25.160
целой одной availability зоны будет учтена и 
в случае, даже если произойдет это событие, ваша

00:10:25.320 --> 00:10:37.480
инфраструктура продолжит работать, но уже на 
оставшихся двух либо второй availability зоне. 

00:10:37.480 --> 00:10:43.740
Сценарий: Нам необходимо, чтобы изменение 
либо поломка одного из компонентов

00:10:43.740 --> 00:10:49.320
не эскалировало на другие компоненты, т.е. не 
переходило и не влияло на следующие компоненты,

00:10:49.320 --> 00:10:57.480
которые по соседству. Как решение строить 
архитектуру слабосвязную, т.е. loose coupling.

00:10:57.480 --> 00:11:00.880
Если мы говорим сильносвязные, то есть
соответствующий термин tight coupling.

00:11:00.880 --> 00:11:06.360
И нам необходимо стремиться строить архитектуру 
от tight coupling в сторону loose coupling. 

00:11:06.360 --> 00:11:16.600
Сценарий: У вас есть VPC, в VPC есть 
public subnet и внутри EC2 инстанс. 

00:11:16.600 --> 00:11:22.080
Необходимо, чтобы этот EC2 инстанс 
мог выходить в общий интернет.

00:11:22.080 --> 00:11:25.920
Как решение, нам необходим 
Internet Gateway. 

00:11:25.920 --> 00:11:34.040
Сценарий: У вас есть настроенный VPC, 
внутри VPC есть private subnet и 

00:11:34.040 --> 00:11:39.920
внутри private subnet EC2 инстанс. Необходимо, 
чтобы этот EC2 инстанс мог выходить в интернет.

00:11:39.920 --> 00:11:46.080
Так как в вопросе явно указано, 
что EC2 инстанс находится внутри

00:11:46.080 --> 00:11:54.000
private subnet, то ресурс, который дает доступ 
в интернет инстансам – это NAT Gateway. 

00:11:54.000 --> 00:11:58.720
NAT Gateway настраивается в public subnet 
и мы настраиваем дополнительный route,

00:11:58.720 --> 00:12:06.600
чтобы направлять трафик из private 
subnet в NAT gateway, в public subnet.

00:12:06.600 --> 00:12:09.320
Там далее уже на уровне VPC 
настраивается Internet Gateway,

00:12:09.320 --> 00:12:17.260
через который и выходит в интернет 
все ресурсы внутри вашего VPC. 

00:12:17.260 --> 00:12:27.640
Мы с вами переходим к следующему блоку 
сценариев – это security и compliance. 

00:12:27.640 --> 00:12:34.520
Сценарий: Укажите инструмент для настройки 
безопасности, а именно настройки WAF рулов  

00:12:34.520 --> 00:12:44.080
поверх нескольких аккаунтов. Как ответ – 
это сервис AWS Firewall Manager. 

00:12:44.080 --> 00:12:49.080
Сценарий: Компании необходимо загрузить 
документы, подтверждающие соответствия

00:12:49.080 --> 00:12:56.040
AWS определенным регуляторным требованиям, 
либо требованиям стандартов.

00:12:56.040 --> 00:13:00.080
Ответ: Вам необходимо обратиться 
в сервис AWS Artifact, где загружены

00:13:00.080 --> 00:13:05.440
все эти документы, и вы можете 
по требованию эти документы скачать.

00:13:05.440 --> 00:13:13.400
Сценарий: Что необходимо сделать для того, 
чтобы улучшить безопасность IAM пользователей?

00:13:13.400 --> 00:13:17.960
Первый ответ – это настроить 
Multi-Factor Authentication (MFA).

00:13:17.960 --> 00:13:25.840
Второй – это настроить достаточно сложное 
правило для паролей ваших пользователей. 

00:13:25.840 --> 00:13:36.960
Сценарий: Какая сущность IAM 
использует ассess ключи для доступа

00:13:36.960 --> 00:13:45.720
к ресурсам в облаке AWS через 
AWS CLI? Ответ: IAM User. 

00:13:45.720 --> 00:14:00.280
Сценарий: К какой сущности IAM предоставляем 
временный доступ к AWS ресурсам? Ответ: IAM Role.

00:14:00.280 --> 00:14:05.480
Сценарий: Что необходимо использовать 
для того, чтобы управлять доступами

00:14:05.480 --> 00:14:10.400
для большого количества IAM 
пользователей. Ответ: IAM Group. 

00:14:10.400 --> 00:14:17.160
Сценарий: Что мы можем использовать 
для того, чтобы предоставить

00:14:17.160 --> 00:14:25.480
доступ к нашим ресурсам в Amazon S3 бакете? 
Ответ: Мы можем настроить Bucket policy, 

00:14:25.800 --> 00:14:32.440
который привязан к бакету. Там вы указываете 
операции и пользователей, которые могут

00:14:32.440 --> 00:14:38.720
обращаться к вашему бакету. Можно настроить 
с другой стороны, а именно User Policy.

00:14:38.720 --> 00:14:47.360
Для каждого пользователя, группы, либо роли 
прописываете дополнительные policy о том, что эта

00:14:47.360 --> 00:14:56.320
policy дает доступ к определенным операциям, 
ресурсам. Как ресурс указываем наши S3 бакеты. 

00:14:56.320 --> 00:15:02.040
Сценарий: Нам необходимо 
предоставить доступ к AWS через 

00:15:02.040 --> 00:15:05.040
предоставление временных 
credentials для пользователей.

00:15:05.040 --> 00:15:08.080
И эти пользователи, они 
авторизованы через социальные медиа,

00:15:08.080 --> 00:15:13.520
либо совсем могут быть 
не авторизованы, т.е. анонимные гости.

00:15:13.520 --> 00:15:16.320
Что мы можем использовать 
для того, чтобы это обеспечить? 

00:15:16.320 --> 00:15:19.240
Как ответ использовать 
Amazon Cognito Identity Pool. 

00:15:19.240 --> 00:15:30.040
Сценарий: Вы являетесь стартапом и вам 
необходимо оценить, как работают ваши IAM 

00:15:30.040 --> 00:15:35.200
policy. Для этого необходимо 
использовать IAM policy simulator. 

00:15:35.200 --> 00:15:43.240
Следующий сценарий: Необходимо указать 
сервис, который находит, классифицирует

00:15:43.240 --> 00:15:47.760
и защищает важную информацию, которая 
относится к PII, т.е. это информация,

00:15:47.760 --> 00:15:53.240
которая может идентифицировать личность, либо 
относится к интеллектуальной собственности. 

00:15:53.240 --> 00:16:00.080
В этом случае необходимо 
воспользоваться сервисом Amazon Macie. 

00:16:00.080 --> 00:16:05.640
Сценарий: Укажите сервис, который мониторит 
весь ваш AWS аккаунт, для поиска

00:16:05.640 --> 00:16:12.040
различных угроз и подозрительной активности. 
Это сервис Amazon GuardDuty. 

00:16:12.040 --> 00:16:19.160
Сценарий: Вам необходимо запретить не 
авторизованное удаление объектов внутри S3 бакетов.

00:16:19.160 --> 00:16:27.040
Для этого необходимо настроить MFA и при 
удалении объектов доступ будет разрешен только

00:16:27.040 --> 00:16:35.580
тем сущностям, т.е. ролям, пользователям,
у которых была пройдена MFA проверка.

00:16:35.580 --> 00:16:42.720
Сценарий: Компании необходимо контролировать 
трафик между VPC subnets. Это относится как к

00:16:42.720 --> 00:16:55.840
входящему и исходящему трафику. Необходимо для этого 
использовать Network Access Control List (NACL). 

00:16:55.840 --> 00:16:59.840
Сценарий: Укажите, что является 
неким virtual firewall и работает

00:16:59.840 --> 00:17:10.280
для контроля трафика на уровне 
EC2 инстанса. Ответ: это Security Group. 

00:17:10.280 --> 00:17:15.800
Сценарий: Укажите сервис, который 
проводит virtual автоматические 

00:17:15.800 --> 00:17:20.680
проверки безопасности для ваших
приложений. Это Amazon Inspector.

00:17:20.680 --> 00:17:26.400
Мы с вами добрались до следующего блока 
сценариев, связанных с технологиями. 

00:17:26.400 --> 00:17:36.800
Сценарий: Компании необходимо начать 
использовать глобальную инфраструктуру AWS

00:17:36.800 --> 00:17:41.360
чтобы улучшить доступность своих приложений, 
при этом чтобы они были доступны по любому 

00:17:41.360 --> 00:17:53.520
статическому IP-адресу. В этом случае нам 
необходимо использовать AWS Global Accelerator. 

00:17:53.520 --> 00:18:02.480
Следующий сценарий: Нам необходимо безопасно 
передать в AWS сотни петабайтов данных.

00:18:02.480 --> 00:18:11.320
Что для этого можно использовать? Вы видите, 
что петабайт передавать по сети – это

00:18:11.320 --> 00:18:19.480
достаточно большой объем информации, это много 
времени, т.е. компания не всегда может ждать.

00:18:19.480 --> 00:18:26.440
Поэтому есть решение, когда AWS 
выгружает кейс, в котором у нас есть

00:18:26.440 --> 00:18:33.800
жесткие диски, вычислительная мощность и 
отправляет этот чемоданчик к нам в офис.

00:18:33.800 --> 00:18:37.920
Как только он приезжает, мы подключаем 
его к сети и можем в него 

00:18:37.920 --> 00:18:41.920
загрузить большой объем информации 
по локальной сети, что намного быстрее.

00:18:41.920 --> 00:18:46.000
И после того, как мы закончили, 
мы этот чемоданчик возвращаем 

00:18:46.000 --> 00:18:50.320
обратно и как только он 
доходит до любого дата-центра AWS, 

00:18:50.320 --> 00:18:54.400
они подключают уже к своей 
локальной сети и быстренько

00:18:54.400 --> 00:19:01.680
загружают его с локальной, 
с быстрой скоростью в инфраструктуру AWS.

00:19:01.680 --> 00:19:12.400
Есть несколько видов решений Snowball. Есть 
Snowball Edge, Snowball обычный, поменьше

00:19:12.400 --> 00:19:24.880
и есть Snow mobile, когда вам отправляет целый 
прицеп с машиной, и он добирается до вас и

00:19:24.880 --> 00:19:33.880
можно не только сотни петабайтов, а еще больше 
данных загрузить в этот мобильный дата-центр. 

00:19:33.880 --> 00:19:39.360
Сценарий: Укажите тип инстанса EC2, 
который позволяет вам перенести

00:19:39.360 --> 00:19:49.880
лицензии, привязанные к определенному хосту. 
Этот тип Dedicated Host. 

00:19:49.880 --> 00:19:56.120
Следующий сценарий: Укажите сервис, который 
мониторит всю активность внутри AWS и фиксирует 

00:19:56.280 --> 00:20:05.760
все вызовы AWS API, будь оно через AWS 
Management Console, либо через AWS SDK.

00:20:05.760 --> 00:20:16.160
Этим сервисом является AWS CloudTrail. 
CloudTrail – это аналог черного ящика в самолете.

00:20:16.160 --> 00:20:21.080
Сценарий: Укажите DNS веб-сервис 
внутри AWS, который является достаточно

00:20:21.080 --> 00:20:28.040
высокодоступным и масштабируемым. 
Этот сервис Amazon Route 53. 

00:20:28.040 --> 00:20:35.320
Следующий сценарий: Нам необходимо 
сохранять результаты сложных SQL-запросов 

00:20:35.320 --> 00:20:38.640
для того, чтобы ускорить 
производительность наших приложений.

00:20:38.640 --> 00:20:46.520
Для этого нам необходимо использовать 
кэш-сервис – это Amazon ElastiCache. 

00:20:46.520 --> 00:20:52.680
Сценарий: Нам необходимо указать связку AWS 
сервисов, которые позволяют обслуживать 

00:20:52.680 --> 00:21:01.200
статические файлы с наименьшей задержкой. 
Это – Amazon S3 и Amazon CloudFront.

00:21:01.200 --> 00:21:05.760
Следующие сценарии: Необходимо 
указать сервис, который предоставляет

00:21:05.760 --> 00:21:10.000
автоматическое масштабирование вычислительных 
мощностей в зависимости от входящего

00:21:10.080 --> 00:21:16.160
трафика, для того чтобы улучшить доступность 
ваших приложений и сократить падение ввиду

00:21:16.160 --> 00:21:26.160
перегрузки ваших вычислительных мощностей. 
Ответом является AWS Auto Scaling. 

00:21:26.160 --> 00:21:35.440
Сценарий: Необходимо перенести базу данных MySQL 
с локального дата-центра на сервис Amazon RDS.

00:21:35.440 --> 00:21:41.080
Каким сервисом мы можем для этого воспользоваться? 
Есть отдельный сервис для миграции баз данных,

00:21:41.080 --> 00:21:48.920
называется AWS DMS, либо в развернутом 
виде AWS Database Migration Service. 

00:21:48.920 --> 00:21:56.480
Следующий сценарий: Нам необходимо настроить 
автоматический перенос на следующий класс 

00:21:56.480 --> 00:22:04.320
хранения нечасто запрашиваемых данных внутри S3 
бакета, для того чтобы сэкономить на хранении.

00:22:04.320 --> 00:22:11.120
Для этого нам необходимо 
воспользоваться S3 Lifecycle Policy. 

00:22:11.120 --> 00:22:16.240
Сценарий: Вам необходимо 
загрузить один большой объект в S3 

00:22:16.240 --> 00:22:24.400
несколькими частями для того, чтобы ускорить 
ее перенос. Что необходимо для этого сделать?

00:22:24.400 --> 00:22:30.760
Мы для этого можем воспользоваться 
функционалом сервиса S3 Multipart Upload.

00:22:30.760 --> 00:22:34.640
Идея ее в том, что наш файл 
делится на несколько маленьких

00:22:34.640 --> 00:22:37.600
частей и эти части 
отправляются по отдельности. 

00:22:37.600 --> 00:22:44.200
В случае, если какая-то часть 
падает, ее можно отдельно отправить.

00:22:44.200 --> 00:22:49.080
Более того, вы можете отправлять 
все ваши файлы параллельно. 

00:22:49.080 --> 00:23:00.080
Таким образом, в несколько раз ускоряется 
передача ваших файлов в облако AWS. 

00:23:00.080 --> 00:23:06.200
Следующий кейс: Необходимо для компании 
предоставить выделенный connection между 

00:23:06.200 --> 00:23:12.440
локальным дата-центром и 
AWS VPC. Для этого нам 

00:23:12.540 --> 00:23:18.640
необходимо воспользоваться 
сервисом AWS Direct Connect. 

00:23:18.640 --> 00:23:23.160
Сценарий: Укажите сервис 
машинного обучения, который позволяет 

00:23:23.160 --> 00:23:27.560
нам анализировать медиа-файлы 
и извлекать полезную информацию. 

00:23:27.560 --> 00:23:35.600
Здесь имеется в виду как медиа-файлы, это 
картинки и видеоматериалы и то, что мы можем

00:23:35.600 --> 00:23:40.320
извлечь, это тексты, различные кастомные 
предметы. Ответ – Amazon Rekognition.

00:23:40.320 --> 00:23:52.920
Следующий сценарий: Необходимо указать сервис, 
который позволяет делать трассировку запросов

00:23:52.920 --> 00:24:00.840
пользователей внутри вашего приложения. 
Этот сервис AWS X-Ray, он часто используется 

00:24:00.840 --> 00:24:05.640
в связке с AWS Lambda. Идея в том, что когда 
приходит запрос от ваших пользователей, неважно

00:24:05.640 --> 00:24:12.880
на ваш API, либо на ваш сайт, вы можете 
добавить к запросу некоторые уникальные значения. 

00:24:12.880 --> 00:24:16.280
С этим уникальным значением 
этот запрос будет передаваться 

00:24:16.280 --> 00:24:19.640
внутрь всей вашей 
инфраструктуры и обрабатываться.

00:24:19.640 --> 00:24:25.660
Таким образом, отслеживая этот уникальный ID, 
вы можете видеть, как и куда проходят ваши

00:24:25.700 --> 00:24:32.080
запросы, визуально оценить, где какие задержки 
и попробовать улучшить ваше приложение. 

00:24:32.080 --> 00:24:39.120
Следующий кейс: Компании необходимо 
получить информацию об Instance ID, 

00:24:39.120 --> 00:24:48.280
публичных ключах, публичном IP адресе вашего 
EC2 инстанса, где эту информацию можно получить?

00:24:48.280 --> 00:24:56.920
Эту информацию можно получить в AWS Management 
Console, если открыть ваш EC2 инстанс, внизу

00:24:57.760 --> 00:25:05.280
откроется набор вкладок и выбрать вкладку 
Instance metadata. Там эта информация доступна. 

00:25:05.280 --> 00:25:10.240
Сценарий: Нам необходимо ускорить доставку 
нашего контента наших статических файлов

00:25:10.240 --> 00:25:18.120
по всему миру. Ответ – это воспользоваться 
сервисом Amazon CloudFront.

00:25:20.280 --> 00:25:28.160
Следующий сценарий: Сервис, который
позволяет нам создавать и деплоить

00:25:28.160 --> 00:25:33.440
инфраструктуру как код. Ответ 
очевиден – это AWS CloudFormation. 

00:25:33.440 --> 00:25:46.960
Сценарий: Нам необходимо настроить 
шифрование наших логов в AWS CloudTrail.

00:25:46.960 --> 00:25:56.280
Для этого необходимо воспользоваться специальным 
сервисом AWS Key Management Service (AWS KMS). 

00:25:56.280 --> 00:26:04.080
Следующий сценарий: Необходимо 
выбрать сервис, который предоставляет

00:26:04.080 --> 00:26:10.360
базы данных для работы с JSON документами, 
т.е. это NoSQL базы данных,

00:26:10.360 --> 00:26:16.460
неструктурированные данные. 
Ответ – Amazon DynamoDB. 

00:26:16.460 --> 00:26:22.720
На этом мы добрались к следующему блоку и поговорим 
про сценарии, связанные с Billing и Pricing. 

00:26:22.720 --> 00:26:34.880
Сценарий: Нам необходимо выбрать опцию, где 
подразумевается выделенный человек от AWS,

00:26:34.880 --> 00:26:40.280
который дополнительно помогает нам 
сопровождать нашу инфраструктуру в облаке.

00:26:40.280 --> 00:26:48.240
Ответ – это ТАМ, либо развернутый 
вариант Technical Account Manager.

00:26:48.240 --> 00:27:02.480
Следующий сценарий: Нам необходимо выбрать 
инструмент, который периодически проверяет 

00:27:02.480 --> 00:27:08.960
наш AWS Account, и дает рекомендации, 
чтобы следовать Best Practice AWS. 

00:27:08.960 --> 00:27:13.600
Это сервис AWS Trusted Advisor.

00:27:13.600 --> 00:27:18.920
Следующий сценарий: Мы являемся 
стартапом, и нам необходимо рассчитать

00:27:18.920 --> 00:27:25.640
стоимость переноса наших приложений 
с локального дата-центра на AWS.

00:27:25.640 --> 00:27:31.040
Для этого мы можем воспользоваться 
отдельным приложением,

00:27:31.040 --> 00:27:39.280
инструментом, который называется 
AWS Total Cost of Ownership. 

00:27:39.280 --> 00:27:42.920
Следующий сценарий: Нам необходимо 
выбрать тип Reserved Instances,

00:27:42.920 --> 00:27:49.080
который позволяют менять семейство 
инстанса, тип инстанса и другие

00:27:49.080 --> 00:27:55.680
свойства наших EC2 инстансов. 
Правильный ответ – Convertible RI. 

00:27:55.680 --> 00:28:04.920
Сценарий: Необходимо выбрать тип EC2 инстансов, 
который позволяет получить скидку до 90%. 

00:28:04.920 --> 00:28:11.880
Это – Spot instance. Здесь многие допускают 
ошибку и выбирают вариант либо Savings Plans 

00:28:11.880 --> 00:28:19.440
либо Reserved Instances, и тот и другой 
вариант предлагает скидку от 60 до 70%.

00:28:19.440 --> 00:28:29.280
В случае с Spot instance мы можем получить до 90% 
скидки, и это самый дешевый вариант EC2 инстансoв.

00:28:29.280 --> 00:28:34.280
Есть определенные нюансы, про которые 
мы говорили на наших лекциях. 

00:28:34.280 --> 00:28:41.080
Сценарий: Нам необходимо выбрать 
приложение, которое позволяет 

00:28:41.080 --> 00:28:46.520
нам управлять всеми нашими 
policy из одного места, а также 

00:28:46.520 --> 00:28:58.320
получать совокупный счет за услуги 
AWS по всем нашим AWS аккаунтам.

00:28:58.320 --> 00:29:02.680
Правильный ответ – это 
сервис AWS Organizations. 

00:29:02.680 --> 00:29:07.800
Следующий сценарий: Нам необходимо 
выбрать самый дешевый вариант хранения 

00:29:07.800 --> 00:29:16.280
внутри S3, а именно мы говорим 
про копии баз данных, которые могут

00:29:16.280 --> 00:29:22.160
быть запрошены изредка и при этом 
мы можем подождать несколько минут. 

00:29:22.160 --> 00:29:26.960
Идеальным вариантом для этого 
кейса является Amazon Glacier. 

00:29:26.960 --> 00:29:33.120
Сценарий: Необходимо выбрать сервис, 
который предоставляет нам прогнозные 

00:29:33.120 --> 00:29:44.000
будущие расходы на базе наших текущих данных, 
на базе текущего использования сервисов AWS. 

00:29:44.000 --> 00:29:48.960
Ответом является 
сервис AWS Cost Explorer.

00:29:48.960 --> 00:29:53.440
Следующий сценарий: Нам необходимо 
категоризировать и отслеживать наши расходы 

00:29:53.440 --> 00:29:59.800
на AWS на более подробном уровне. Для этого 
нам необходимо воспользоваться функционалом,

00:29:59.800 --> 00:30:09.720
который называется Cost Allocation Tags. Идея 
ее в том, что мы можем тегировать все наши 

00:30:09.720 --> 00:30:17.140
ресурсы AWS в специально отведенном месте. Мы 
указываем, какие теги являются Cost Allocation Tag,

00:30:17.140 --> 00:30:26.160
после чего мы можем группировать и видеть наши 
расходы по выбранным нами тегам в сервисе AWS

00:30:26.160 --> 00:30:32.480
Cost Explorer, а также в любых других сервисах,
которые работают с расходами на облако. 

00:30:32.480 --> 00:30:38.640
Сценарий: Что необходимо сделать 
компании, если нам нужно 

00:30:38.640 --> 00:30:47.920
запустить VPC, который не входит 
в сервисные лимиты по умолчанию?

00:30:47.920 --> 00:30:53.680
Ответ: Необходимо создать 
ticket в техподдержку и запросить 

00:30:53.680 --> 00:30:58.960
увеличение этого лимита, 
если оно является Soft limits. 

00:30:58.960 --> 00:31:11.280
Сценарий: Нам необходимо выбрать самый выгодный 
вариант покупки Reserved Instances на один год.

00:31:11.280 --> 00:31:15.000
Ответом является All Upfront Reserved 
Instances. Как мы с вами помним, мы можем 

00:31:15.000 --> 00:31:21.280
выбрать три варианта оплаты, когда No Upfront 
мы не вносим никакую оплату, лишь подписываем

00:31:21.280 --> 00:31:30.800
договор и ежемесячно продолжаем платить за
 использование наших ресурсов со скидкой.

00:31:30.800 --> 00:31:37.000
Следующий вариант – это Partial Upfront, 
какая-то часть со скидкой оплачивается сразу за 

00:31:37.000 --> 00:31:40.920
один год либо за три года, в зависимости 
от того, какой договор подписываем.

00:31:40.920 --> 00:31:45.680
И оставшаяся часть оплачивается 
дальше ежемесячно также со скидкой.

00:31:45.680 --> 00:31:51.320
И третий вариант, который дает наибольшее 
количество скидок – это All Upfront,

00:31:51.320 --> 00:31:56.160
когда делается расчет на выбранный 
период, рассчитывается скидка

00:31:56.160 --> 00:32:05.600
и та оставшаяся сумма к оплате должна быть 
переведена сразу, после чего ежемесячной 

00:32:05.600 --> 00:32:13.080
оплаты за выбранные нами 
Reserved Instances уже не будет. 

00:32:13.080 --> 00:32:17.360
Сценарий: Вам необходимо объединить 
использование определенного 

00:32:17.360 --> 00:32:23.240
ресурса, для того чтобы 
добраться до скидок по объемам.

00:32:23.240 --> 00:32:31.920
Для того чтобы получить эти скидки и объединить
ваше использование, необходимо использовать

00:32:31.920 --> 00:32:38.200
Consolidated Billing. Его мы можем 
включить в сервисы AWS Organizations. 

00:32:38.200 --> 00:32:42.160
Следующий сценарий: Представим, что вы 
подготовили собственный кастомный AMI,

00:32:42.160 --> 00:32:49.720
и хотите ее продавать внутри 
AWS для других клиентов AWS. 

00:32:49.720 --> 00:32:55.400
Для этого вы можете воспользоваться 
сервисом AWS Marketplace.

00:32:55.400 --> 00:33:00.080
Это место, где вы можете продавать 
различные кастомные ресурсы

00:33:00.080 --> 00:33:06.280
для других клиентов, в том 
числе ваши кастомные AMI. 

00:33:06.280 --> 00:33:13.480
На этом мы подошли к концу Демо сессии. Я очень
 надеюсь, что вы узнали что-то новое сегодня.

00:33:13.480 --> 00:33:17.880
Еще раз напоминаю, что все то, что мы 
разобрали, все сценарии не являются  

00:33:17.880 --> 00:33:22.680
стопроцентным ответом на вопросы 
из реального экзамена AWS, а лишь удобным

00:33:22.680 --> 00:33:30.680
форматом для повторения всего того материала, 
который вы прошли, для перепроверки себя.

00:33:30.680 --> 00:33:37.800
Помните, что каждый вопрос, должен быть
индивидуально вами рассмотрен.

00:33:37.800 --> 00:33:43.280
Не всегда бывает, что тот ответ, 
который указан здесь, является 

00:33:43.280 --> 00:33:48.560
правильным ответом, потому как 
формулировка вопросов может меняться.

00:33:48.560 --> 00:33:51.640
Мы с вами помним, что достаточно 
большое количество новых  

00:33:51.640 --> 00:33:57.600
вопросов добавляется в каждый 
экзамен AWS, и они не идут в зачёт.

00:33:57.600 --> 00:34:03.640
Таким образом, у AWS есть возможность 
очень часто в больших объемах добавлять 

00:34:03.640 --> 00:34:10.520
новые вопросы, и могут появиться 
вопросы с небольшим подвохом. 

00:34:10.520 --> 00:34:19.000
В целом, идея этих сценариев была в 
том, чтобы закрепить основные моменты,

00:34:19.000 --> 00:34:26.280
сделать акценты на популярных сценариях 
для того, чтобы не только помочь вам при

00:34:26.280 --> 00:34:38.240
сдаче экзамена AWS, но и дать вам те знания,
 освежить те моменты, которые пригодятся вам 

00:34:38.240 --> 00:34:42.040
во время работы облачным 
инженером. Спасибо за внимание. 

00:34:42.040 --> 00:35:09.120
Увидимся с вами на следующих наших активностях!