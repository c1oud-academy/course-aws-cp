WEBVTT

00:00:00.000 --> 00:00:02.440
Добрый день, уважаемые студенты!

00:00:02.440 --> 00:00:06.800
Я рад вас всех видеть на самом последнем лекционном

00:00:06.800 --> 00:00:09.360
занятии нашего курса.

00:00:09.360 --> 00:00:12.600
Сегодня мы с вами поговорим про автоматическое масштабирование

00:00:12.600 --> 00:00:13.600
и мониторинг.

00:00:13.600 --> 00:00:15.120
Окей, давайте начнем.

00:00:15.120 --> 00:00:19.640
Сегодняшняя лекция поделена на три частей.

00:00:19.640 --> 00:00:23.400
В первой части мы поговорим про балансирование нагрузки

00:00:23.400 --> 00:00:27.280
и соответствующий сервис AWS Elastic Load Balancing.

00:00:27.280 --> 00:00:32.560
Следующий сервис, который полностью про мониторинг

00:00:32.560 --> 00:00:36.240
вашей инфраструктуры в облаке, это Amazon CloudWatch.

00:00:36.240 --> 00:00:39.920
Самое последнее это как раз таки тот сервис, который

00:00:39.920 --> 00:00:45.080
позволяет настроить вашу инфраструктуру таким образом,

00:00:45.080 --> 00:00:48.340
чтобы в зависимости от нагрузки она либо автоматически

00:00:48.340 --> 00:00:50.520
увеличивалась, либо уменьшалась.

00:00:50.520 --> 00:00:55.600
То есть это Amazon EC2 Autoscaling.

00:00:55.600 --> 00:00:58.880
Следующий сервис, который полностью про мониторинг

00:00:58.880 --> 00:01:03.080
вашей инфраструктуры в облаке, это Amazon CloudWatch.

00:01:03.080 --> 00:01:06.600
Самое последнее это Elastic Load Balancing.

00:01:06.600 --> 00:01:11.000
Это тот сервис, который распределяет входящий

00:01:11.000 --> 00:01:15.880
трафик приложения, либо сетевой трафик по нескольким

00:01:15.880 --> 00:01:21.440
таргетам, либо в одной availability зоне, либо в нескольких availability

00:01:21.440 --> 00:01:22.440
зонах.

00:01:22.440 --> 00:01:26.840
Это обучение вашей нагрузки таким образом мы оплачиваем

00:01:26.840 --> 00:01:29.760
только за то, что мы используем.

00:01:29.760 --> 00:01:33.040
Если сравнивать с локальной инфраструктурой, с локальным

00:01:33.040 --> 00:01:37.720
дата-центром, то в этом случае, когда мы говорим про балансирование

00:01:37.720 --> 00:01:40.600
нагрузки, либо покупается отдельное железо, которое

00:01:40.600 --> 00:01:44.840
балансирует нагрузку, либо это делается на уровне

00:01:44.840 --> 00:01:45.840
приложения.

00:01:45.840 --> 00:01:47.640
То есть какое-то приложение, туда на вход идет весь наш

00:01:47.640 --> 00:01:51.080
трафик и он дальше распределяет этот трафик по нашим IT-ресурсам.

00:01:51.080 --> 00:01:57.440
Важный момент это то, что при локальном исполнении

00:01:57.440 --> 00:02:03.640
либо приложения, либо железа, оно само не масштабируется.

00:02:03.640 --> 00:02:06.600
Это отдельный вид работ, на который нужно выделять

00:02:06.600 --> 00:02:08.440
людей, выделять ресурсы.

00:02:08.440 --> 00:02:14.760
И в случае, если ваш трафик, он превысит лимиты вашего

00:02:14.760 --> 00:02:20.160
балансировщика локального, то он не сможет обработать

00:02:20.160 --> 00:02:22.560
весь этот трафик и скорее всего упадет.

00:02:22.560 --> 00:02:27.120
Когда мы говорим про Elastic Load Balancer, он не ограниченный

00:02:27.120 --> 00:02:30.520
с точки зрения масштабирования и другой важный момент,

00:02:30.520 --> 00:02:33.280
вам не нужно закупаться заранее, не покупать лицензии

00:02:33.280 --> 00:02:36.200
заранее, вы оплачиваете только ровно за то, что

00:02:36.200 --> 00:02:37.200
вы используете.

00:02:37.200 --> 00:02:43.680
Существует три вида load балансеров.

00:02:43.680 --> 00:02:47.400
Первый это Application Load Balancer, далее идет Network Load Balancer

00:02:47.400 --> 00:02:51.040
и последний это Classic Load Balancer предыдущие поколения.

00:02:51.040 --> 00:02:54.240
Давайте остановимся подробнее на каждом из этих видов.

00:02:54.240 --> 00:02:58.520
Первый Application Load Balancer, это тот ресурс, который

00:02:58.520 --> 00:03:03.400
работает на уровне HTTP и HTTPS трафика, то есть это седьмой

00:03:03.400 --> 00:03:06.720
уровень по оси модели Application Layer.

00:03:06.720 --> 00:03:09.380
Отличие Load Balancer в том, что это более продвинутый

00:03:09.380 --> 00:03:17.320
вариант, новая версия Load Balancer, она работает с различными

00:03:17.320 --> 00:03:23.180
ресурсами, а именно EC2 инстанции, контейнеры, он может балансировать

00:03:23.180 --> 00:03:26.480
трафик на определенный список IP адресов, а также

00:03:26.480 --> 00:03:31.960
можно балансировать трафик на лямбда функции.

00:03:31.960 --> 00:03:35.320
Если мы говорим про второй вид Network Load Balancer, это тот

00:03:35.320 --> 00:03:38.880
балансер, который работает на уровне Transport Layer, то есть

00:03:38.880 --> 00:03:42.280
четвертый уровень по оси модели, а этот трафик TCP

00:03:42.280 --> 00:03:43.280
и DUP.

00:03:43.280 --> 00:03:47.200
Отличие его в том, что оно оптимизировано для больших

00:03:47.200 --> 00:03:50.000
нагрузок и в секунду может обрабатывать миллионы

00:03:50.000 --> 00:03:51.060
запросов.

00:03:51.060 --> 00:03:54.180
Также оно дополнительно оптимизировано на тот

00:03:54.180 --> 00:03:57.680
вид трафика, в котором есть внезапный всплеск.

00:03:57.680 --> 00:04:02.960
И третий, это предыдущее поколение Classic Load Balancer,

00:04:02.960 --> 00:04:06.800
сейчас она недоступна для выбора, а лишь существует

00:04:06.800 --> 00:04:12.080
для обратной совместимости и доступна в инфраструктурах,

00:04:12.080 --> 00:04:17.560
где Classic Load Balancer активен.

00:04:17.560 --> 00:04:21.720
Оно работает и на четвертом, и на седьмом уровне по

00:04:21.720 --> 00:04:28.360
оси модели, поэтому поддерживает HTTP, HTTPS, TCP, UDP, трафик.

00:04:28.360 --> 00:04:31.560
Балансирует он нагрузку только на EC2 инстанции,

00:04:31.560 --> 00:04:34.400
то есть это самая первая версия балансировщика,

00:04:34.400 --> 00:04:39.240
поэтому она по сравнению с Application и Network Load Balancer

00:04:39.240 --> 00:04:41.720
является не такой функциональной.

00:04:41.720 --> 00:04:45.200
В целом рекомендация от самого Amazon это использовать

00:04:45.200 --> 00:04:48.720
либо Application Load Balancer, либо Network Load Balancer в зависимости

00:04:48.720 --> 00:04:49.880
от вашей нагрузки.

00:04:49.880 --> 00:04:59.000
На этом слайде пример архитектуры, где настроен Load Balancer.

00:04:59.000 --> 00:05:02.800
Вы видите, что есть у нас клиенты, Load Balancer настроен

00:05:02.800 --> 00:05:08.040
не на одну, а на несколько availability zone, чтобы предоставить

00:05:08.040 --> 00:05:12.920
availability, приходит трафик от наших клиентов, далее

00:05:12.920 --> 00:05:15.120
Load Balancer направляет на Listener.

00:05:15.120 --> 00:05:18.440
Listener это такие ресурсы, которые проверяют все ли

00:05:18.440 --> 00:05:20.080
в порядке с нашими таргетами.

00:05:20.080 --> 00:05:22.840
Таргеты это как раз таки наши EC2 инстанции в большинстве

00:05:22.840 --> 00:05:25.880
случаев, которые обрабатывают конкретный запрос.

00:05:25.880 --> 00:05:30.600
Listener также это тот ресурс, на котором можно настроить

00:05:30.600 --> 00:05:35.120
Health Check, то есть проверка доступности, он через определенные

00:05:35.120 --> 00:05:39.160
промежутки времени отправляет запрос на таргеты, сам запрос

00:05:39.160 --> 00:05:42.760
также можно настроить и если не получает ожидаемый

00:05:42.760 --> 00:05:47.320
ответ помечает таргет как unhealthy, то есть недоступный

00:05:47.320 --> 00:05:52.040
и балансирует трафик только на healthy targets, то есть доступные

00:05:52.040 --> 00:05:53.320
таргеты.

00:05:53.320 --> 00:06:01.600
Как только таргет становится доступным, то он возобновляет

00:06:01.600 --> 00:06:07.280
направление трафика на этот таргет.

00:06:07.280 --> 00:06:11.240
Если говорить про отличия настройки, то при работе

00:06:11.240 --> 00:06:18.640
с ALB и NLB мы настраиваем наши таргет группы и все

00:06:18.640 --> 00:06:22.520
наши таргеты привязываем к таргет группам.

00:06:22.520 --> 00:06:27.560
Когда мы говорим Classic Load Balancer, то все наши EC2 инстанции,

00:06:27.560 --> 00:06:36.000
они привязываются напрямую к Load Balancer.

00:06:36.000 --> 00:06:40.320
Давайте рассмотрим основные примеры использования ALB.

00:06:40.320 --> 00:06:43.520
Самый первый это предоставление высокой доступности и отказа

00:06:43.520 --> 00:06:45.480
устойчивости ваших приложений.

00:06:45.480 --> 00:06:49.520
Представим, что вы находитесь в одной availability зоне и

00:06:49.520 --> 00:06:53.480
у вас 10 таргетов, в случае если половина становится

00:06:53.480 --> 00:06:58.400
по той или иной причине недоступной, то трафик начинает перенаправляться

00:06:58.400 --> 00:07:02.280
на оставшиеся 5, при этом на предыдущие 5, которые

00:07:02.280 --> 00:07:06.120
недоступны, трафик не будет направляться.

00:07:06.120 --> 00:07:10.680
Если мы говорим про более продвинутую инфраструктуру,

00:07:10.680 --> 00:07:14.720
когда она развернута на нескольких availability зонах и представим,

00:07:14.720 --> 00:07:18.680
что что-то произошло с целой availability зоной, то опять

00:07:18.680 --> 00:07:23.320
же ALB понимает, что таргеты на конкретной availability

00:07:23.320 --> 00:07:26.200
зоне недоступны, перестает направлять туда трафик,

00:07:26.200 --> 00:07:30.560
таким образом трафик, который шел на первую availability

00:07:30.560 --> 00:07:37.440
зону, она перенаправляется на все остальные.

00:07:37.440 --> 00:07:40.320
Следующее это то, что сейчас достаточно популярным

00:07:40.320 --> 00:07:42.000
становится использование контейнеров.

00:07:42.000 --> 00:07:47.880
ALB также не отстает от этих трендов и есть возможность

00:07:47.880 --> 00:07:53.520
нативно интегрироваться с сервисом ECS, Elastic Container

00:07:53.520 --> 00:07:54.520
Service.

00:07:54.520 --> 00:08:06.000
Если использовать связку ALB, CloudWatch и Amazon EC2 Autoscaling,

00:08:06.000 --> 00:08:08.560
это два сервиса, о котором мы пройдем чуть дальше

00:08:08.560 --> 00:08:12.600
на следующих слайдах, то она позволяет нам превратить

00:08:12.600 --> 00:08:16.000
нашу инфраструктуру в некий живой абстрактный организм,

00:08:16.000 --> 00:08:19.520
когда в зависимости от нагрузки у вас увеличивается

00:08:19.520 --> 00:08:24.400
количество EC2 инстанцев и уменьшается, если трафик

00:08:24.400 --> 00:08:25.760
соответственно тоже уменьшается.

00:08:25.760 --> 00:08:36.920
Elastic Load Balancer нативно работает с VPC, если ваша инфраструктура

00:08:36.920 --> 00:08:41.640
развернута с использованием Virtual Private Cloud и настроены

00:08:41.640 --> 00:08:48.000
также все ресурсы безопасности, то есть Security группы, Network

00:08:48.000 --> 00:08:55.240
ACL и так далее, то Elastic Load Balancer нативно встраивается

00:08:55.240 --> 00:09:00.120
в эту инфраструктуру и будет работать со всеми

00:09:00.120 --> 00:09:04.880
ресурсами внутри вашего VPC.

00:09:04.880 --> 00:09:10.520
Еще один пункт это работа с гибридными архитектурами,

00:09:10.520 --> 00:09:16.240
когда вам нужно балансировать трафик часть на список

00:09:16.240 --> 00:09:22.160
EC2 инстанцев и часть на сервера, находящиеся локально

00:09:22.160 --> 00:09:23.600
в вашем дата центре.

00:09:23.600 --> 00:09:30.360
Это тоже можно настроить и ELB это поддерживает.

00:09:30.360 --> 00:09:35.000
Самое последнее это также один из существующих трендов

00:09:35.000 --> 00:09:39.480
это бессерверные архитектуры, в этом плане ELB также не

00:09:39.480 --> 00:09:43.120
отстает от этих трендов и есть возможность как

00:09:43.120 --> 00:09:45.400
таргеты указать лямбда функции.

00:09:45.400 --> 00:09:51.080
Таким образом у лямбда функции есть соответствующая

00:09:51.080 --> 00:09:58.380
связка с ELB и можно напрямую из веб браузера сайта

00:09:58.380 --> 00:10:01.240
делать соответствующий запрос, который обработает

00:10:01.240 --> 00:10:02.240
лямбда.

00:10:02.240 --> 00:10:06.320
Из-за того, что внутри application load balancer есть возможность

00:10:06.320 --> 00:10:11.040
настроить сложную логику перенаправления, то соответственно

00:10:11.040 --> 00:10:13.760
определенный вызов будет направляться на определенную

00:10:13.760 --> 00:10:18.560
лямбда функцию и соответствующие обрабатываться.

00:10:18.560 --> 00:10:22.160
Если мы говорим про мониторинг наших load balancer выделяет

00:10:22.160 --> 00:10:23.280
три направления.

00:10:23.280 --> 00:10:28.720
Первое это Amazon CloudWatch Metrics, когда наши load balancer и соответственно

00:10:28.720 --> 00:10:32.400
таргеты направляют метрики в CloudWatch Metrics.

00:10:32.400 --> 00:10:36.040
Оттуда мы уже видим статистику и можем принимать соответствующие

00:10:36.040 --> 00:10:37.040
решения.

00:10:37.040 --> 00:10:43.080
Другое Access Logs, мы можем все наши запросы логировать

00:10:43.080 --> 00:10:46.720
и сохранять внутри S3 для дальнейшего анализа.

00:10:46.720 --> 00:10:51.180
Самое последнее AWS Cloud Trail Logs, это когда происходит

00:10:51.180 --> 00:10:57.080
вызов на AWS API, не важно как через консоль CLI Command Line

00:10:57.080 --> 00:10:59.480
Interface либо через SDK.

00:10:59.480 --> 00:11:03.720
Все эти запросы будут сохранены и в случае изменения инфраструктурных

00:11:03.720 --> 00:11:07.840
на уровне ваших load balancer вы сможете посмотреть,

00:11:07.840 --> 00:11:12.400
кто сделал вызов, какой именно вызов произошел с какого

00:11:12.400 --> 00:11:14.000
IP адреса и так далее.

00:11:14.000 --> 00:11:19.960
Это нужно для целей аудита в случае если у вас какие-то

00:11:19.960 --> 00:11:22.680
изменения на уровне инфраструктуры произошли и это привело

00:11:22.680 --> 00:11:23.680
к ошибке.

00:11:23.680 --> 00:11:29.480
На этом мы подошли к концу первой секции нашей сегодняшней

00:11:29.480 --> 00:11:30.480
лекции.

00:11:30.480 --> 00:11:32.920
Давайте остановимся на самых основных моментах.

00:11:32.920 --> 00:11:38.960
Elastic Load Balancing либо вкратце ELB это тот сервис, который

00:11:38.960 --> 00:11:43.040
распределяет входящий трафик на несколько таргетов.

00:11:43.040 --> 00:11:46.320
Эти таргеты могут находиться в нескольких availability зонах

00:11:46.320 --> 00:11:50.080
и как таргет могут выступать EC2 инстанции, контейнеры,

00:11:50.080 --> 00:11:52.960
IP адреса либо лямбда функции.

00:11:52.960 --> 00:11:57.760
Существует три вида ELB это Application Load Balancer, Network Load

00:11:57.760 --> 00:12:02.760
Balancer и предыдущее поколение Classic Load Balancer.

00:12:02.760 --> 00:12:10.360
Если мы говорим по связку ELB, CloudWatch и EC2 Autoscaling связка

00:12:10.360 --> 00:12:13.560
из этих трех сервисов это мощнейший инструмент, который

00:12:13.560 --> 00:12:19.600
позволяет превратить вашу инфраструктуру в некий

00:12:19.600 --> 00:12:24.680
абстрактный живой организм и таким образом она будет

00:12:24.680 --> 00:12:28.580
изменяться в зависимости от трафика в случае если

00:12:28.580 --> 00:12:32.200
у вас внезапный всплеск трафика, то она соответствующая

00:12:32.200 --> 00:12:35.480
увеличивается для того чтобы все ваши запросы обработать

00:12:35.480 --> 00:12:40.080
все входящие и в случае когда у нас небольшое количество

00:12:40.080 --> 00:12:43.540
запросов, то инфраструктура автоматически уменьшается

00:12:43.540 --> 00:12:45.640
для того чтобы не нести расходы впустую.

00:12:45.640 --> 00:12:51.000
Мы с вами добрались до второй части нашей сегодняшней

00:12:51.000 --> 00:12:55.640
лекции, подробнее поговорим про сервис Amazon CloudWatch.

00:12:55.640 --> 00:12:57.800
Amazon CloudWatch это тот сервис, который предоставляет

00:12:57.800 --> 00:13:01.600
все необходимые инструменты для мониторинга нашей

00:13:01.600 --> 00:13:05.080
инфраструктуры в AWS.

00:13:05.080 --> 00:13:11.980
С CloudWatch мы можем настроить сбор metric и на эти метрики

00:13:11.980 --> 00:13:13.800
настроить алармы.

00:13:13.800 --> 00:13:16.120
То есть представим что мы настроили метрику, мы

00:13:16.120 --> 00:13:20.360
отправляем информацию по текущему уровню нагрузки

00:13:20.360 --> 00:13:24.800
на CPU с каждого нашего EC2 инстанца, далее мы настроили

00:13:24.800 --> 00:13:28.400
аларм, когда мы говорим что при увеличении средней

00:13:28.400 --> 00:13:36.600
нагрузки на наши EC2 инстанции при превышении больше 60%

00:13:36.600 --> 00:13:40.680
происходит некоторое действие, срабатывает аларм и мы

00:13:40.680 --> 00:13:44.280
можем направить этот аларм на SNS topic, то есть придет

00:13:44.280 --> 00:13:47.280
уведомление на почту, можем отправить на SQS для того

00:13:47.280 --> 00:13:51.120
чтобы по очереди она обрабатывалась, можем отправить на Lambda,

00:13:51.120 --> 00:13:54.540
чтобы Lambda могла какую-то костумную логику наложить

00:13:54.540 --> 00:13:57.480
и что-то сделать, либо можем отправить напрямую на

00:13:57.480 --> 00:14:02.920
EC2 Auto Scaling для того чтобы добавился автоматически

00:14:02.920 --> 00:14:05.920
новый инстанс.

00:14:05.920 --> 00:14:09.720
Мы также можем накапливать логи внутри CloudWatch, это логи

00:14:09.720 --> 00:14:13.440
наших приложений, системные логи для дальнейшего аудита

00:14:13.440 --> 00:14:14.440
и анализа.

00:14:14.440 --> 00:14:19.920
Еще один функционал который предоставляет Amazon CloudWatch

00:14:19.920 --> 00:14:24.480
это настройка ивентов, то есть ивенты это прописанный

00:14:24.480 --> 00:14:29.160
документ и в котором описывается определенное событие внутри

00:14:29.160 --> 00:14:33.480
AWS, в случае когда это событие происходит, то мы можем

00:14:33.480 --> 00:14:36.960
триггернуть какой-то наш таргет.

00:14:36.960 --> 00:14:40.920
Приведу пример, мы настроили ивент, что при отключении

00:14:40.920 --> 00:14:51.040
EC2 инстанция на availability зоне 1 мы будем триггерить

00:14:51.040 --> 00:14:52.040
нашу Lambda.

00:14:52.040 --> 00:14:57.640
Lambda соответственно отработает по какой-то своей логике

00:14:57.640 --> 00:14:59.520
и вернет ответ.

00:14:59.520 --> 00:15:02.440
Еще одним таргетом может быть SQL для того чтобы в

00:15:02.440 --> 00:15:06.840
email пришло уведомление и мы поняли что у нас произошло

00:15:06.840 --> 00:15:13.640
подключение EC2 инстанция, а оно не должно было происходить.

00:15:13.640 --> 00:15:17.240
Мы можем настроить ивенты абсолютно для любых событий

00:15:17.240 --> 00:15:20.540
происходящих внутри AWS, практически все сервисы

00:15:20.540 --> 00:15:25.640
поддерживают настройку ивентов, доступные операции

00:15:25.640 --> 00:15:28.880
и сервисы вы можете подробнее посмотреть в документации

00:15:28.880 --> 00:15:31.400
AWS.

00:15:31.400 --> 00:15:34.280
Давайте подробнее рассмотрим CloudWatch Alarm.

00:15:34.280 --> 00:15:37.760
Существует три вида, сам популярный это static threshold,

00:15:37.760 --> 00:15:40.160
когда мы мониторим одну определенную метрику, в

00:15:40.160 --> 00:15:44.160
случае когда его значение превышает либо становится

00:15:44.160 --> 00:15:46.800
меньше определенного значения, то срабатывает

00:15:46.800 --> 00:15:53.280
аларм и отправляется соответствующая информация на наши таргеты,

00:15:53.280 --> 00:15:54.440
срабатывает действие.

00:15:54.440 --> 00:15:57.320
Когда мы говорим anomaly detection, то здесь подключается

00:15:57.320 --> 00:16:00.960
некоторый искусственный интеллект со стороны AWS

00:16:00.960 --> 00:16:06.200
и смотрит есть ли некоторые подозрительные скачки

00:16:06.200 --> 00:16:07.680
внутри наших метрик.

00:16:07.680 --> 00:16:11.760
И третье это продвинутый вариант static threshold, когда

00:16:11.760 --> 00:16:16.880
мы можем один либо несколько метрик собрать в одном

00:16:16.880 --> 00:16:19.440
математическом выражении, результат которого будет

00:16:19.440 --> 00:16:20.440
отслеживаться.

00:16:20.440 --> 00:16:25.100
Давайте рассмотрим на примере static threshold, какую информацию

00:16:25.100 --> 00:16:28.720
необходимо ввести для того, чтобы настроить аларм.

00:16:28.720 --> 00:16:31.680
Самое первое мы указываем namespace.

00:16:31.680 --> 00:16:35.600
Namespace это сервис, какой сервис?

00:16:35.600 --> 00:16:39.580
Если мы говорим EC2, то namespace мы указываем из выпадающего

00:16:39.580 --> 00:16:42.880
списка AWS slash EC2.

00:16:42.880 --> 00:16:45.680
Далее метрика, какая метрика?

00:16:45.680 --> 00:16:49.520
Если мы говорим, как пример возьмем EC2, то у него есть

00:16:49.520 --> 00:16:54.760
метрика CPU utilization, то есть нагрузка на CPU.

00:16:54.760 --> 00:16:58.600
Следующее это статистик, то есть какая операция

00:16:58.600 --> 00:17:00.800
срабатывает на нашей метрике.

00:17:00.800 --> 00:17:04.640
Мы можем взять средние значения, сумму, минимальное, максимальное

00:17:04.640 --> 00:17:08.320
значение и так далее.

00:17:08.320 --> 00:17:12.120
Другое это период, то есть за какой период учитываются

00:17:12.120 --> 00:17:13.120
датапойнты.

00:17:13.120 --> 00:17:20.240
Как мы с вами помним, датапойнты это информация о нашей

00:17:20.240 --> 00:17:22.680
метрике в определенный момент времени.

00:17:22.680 --> 00:17:26.320
Представим, что у нас отправляются каждые пять минут метрики

00:17:26.320 --> 00:17:27.320
по нашему CPU.

00:17:27.320 --> 00:17:33.080
И вот каждые пять минут она в CloudWatch отображается

00:17:33.080 --> 00:17:36.360
одним датапойнтом с соответствующим значением.

00:17:36.360 --> 00:17:42.080
Так вот период, он влияет на то, какое количество

00:17:42.080 --> 00:17:47.160
датапойнтов будет учитываться для принятия решения.

00:17:47.160 --> 00:17:56.880
Следующее это conditions, здесь мы указываем определенные

00:17:56.880 --> 00:18:00.120
условия, которым может быть выражение больше, больше

00:18:00.120 --> 00:18:02.920
либо равно, меньше, меньше либо равно и так далее.

00:18:02.920 --> 00:18:08.160
Additional configuration information это дополнительная информация,

00:18:08.160 --> 00:18:09.640
дополнительные условия, которые могут быть в том

00:18:09.640 --> 00:18:12.600
числе указаны и как actions здесь указываются наши

00:18:12.600 --> 00:18:13.600
таргеты.

00:18:13.600 --> 00:18:16.960
То есть, что будет триггерить наш аларм.

00:18:16.960 --> 00:18:20.840
Это может быть SNS topic, это может быть Amazon EC2 Autoscaling

00:18:20.840 --> 00:18:30.000
действие либо мы можем триггернуть наш EC2 Instance.

00:18:30.000 --> 00:18:32.200
На этом мы добрались до конца второй части.

00:18:32.200 --> 00:18:34.480
Подробнее изучили сервис CloudWatch.

00:18:34.480 --> 00:18:37.800
Это тот сервис, который предоставляет все инструменты

00:18:37.800 --> 00:18:40.120
для мониторинга нашей инфраструктуры.

00:18:40.120 --> 00:18:44.160
С CloudWatch мы можем хранить и работать с метриками,

00:18:44.160 --> 00:18:47.520
мы можем собирать логи наших приложений, можем

00:18:47.520 --> 00:18:50.240
настроить алармы на наши метрики, а также мы можем

00:18:50.240 --> 00:18:53.040
настроить дополнительные ивенты, при срабатывании

00:18:53.040 --> 00:18:56.040
которого будут триггериться соответствующие ресурсы

00:18:56.040 --> 00:18:59.760
AWS.

00:18:59.760 --> 00:19:02.640
Мы с вами добрались до последней части сегодняшней нашей

00:19:02.640 --> 00:19:09.520
лекции и это сервис Amazon EC2 Autoscaling.

00:19:09.520 --> 00:19:14.680
Когда мы работаем в AWS, создаем там различные приложения,

00:19:14.680 --> 00:19:18.160
очень важно, чтобы приложение могло автоматически масштабироваться

00:19:18.160 --> 00:19:21.400
в сторону увеличения и в сторону уменьшения, в зависимости

00:19:21.400 --> 00:19:24.000
от спроса, от трафика.

00:19:24.000 --> 00:19:25.000
Почему это важно?

00:19:25.000 --> 00:19:27.160
Давайте рассмотрим на следующем примере.

00:19:27.160 --> 00:19:30.440
Представим, что у нас есть некоторые приложения и

00:19:30.440 --> 00:19:36.000
вы видите нагрузку на нашу инфраструктуру в зависимости

00:19:36.000 --> 00:19:37.640
от дня недели.

00:19:37.640 --> 00:19:41.200
Вы видите, что основная нагрузка, она приходится

00:19:41.200 --> 00:19:44.520
на среду и минимальная нагрузка это в воскресенье.

00:19:44.520 --> 00:19:50.960
Если мы увеличим наши серверные мощности, вычислительные

00:19:50.960 --> 00:19:55.560
мощности до необходимого, чтобы обрабатывать весь

00:19:55.560 --> 00:20:00.480
трафик в среду, вы видите, сколько лишних ресурсов

00:20:00.480 --> 00:20:05.240
мы запросим и фактически будем оплачивать воздух.

00:20:05.240 --> 00:20:10.920
Если мы попытаемся как-то найти такое количество

00:20:10.920 --> 00:20:14.720
вычислительных ресурсов, чтобы большую часть нагрузки

00:20:14.720 --> 00:20:18.160
обрабатывать, а остальные урезать, это тоже не очень

00:20:18.160 --> 00:20:23.240
хорошая стратегия, потому что в этом случае ваши

00:20:23.240 --> 00:20:27.960
клиенты попросту не смогут получить вашу услугу, сервис

00:20:27.960 --> 00:20:31.000
и таким образом вы потеряете своих клиентов.

00:20:31.000 --> 00:20:36.480
Что предлагает нам Amazon EC2 Autoscaling?

00:20:36.480 --> 00:20:40.560
Это тот сервис, который помогает автоматически

00:20:40.560 --> 00:20:43.600
масштабировать как в сторону увеличения, так в сторону

00:20:43.600 --> 00:20:47.280
уменьшения количества наших EC2 инстанцев.

00:20:47.280 --> 00:20:57.880
И вы видите, что мы с этим сервисом можем идеально

00:20:57.880 --> 00:21:01.240
управлять количеством необходимых инстанцев,

00:21:01.240 --> 00:21:07.600
чтобы все дни наши EC2 инстанцы максимально работали.

00:21:07.600 --> 00:21:12.120
В этом случае мы не оплачиваем за простой наших серверов

00:21:12.120 --> 00:21:18.600
всю работу по добавлению новых инстанцев и удалению

00:21:18.600 --> 00:21:22.720
ненужных инстанцев проделывает за нас этот сервис.

00:21:22.720 --> 00:21:27.720
Более того, он автоматически мониторит, если у нас наше

00:21:27.720 --> 00:21:31.280
приложение либо EC2 инстанц недоступен, то он автоматически

00:21:31.280 --> 00:21:33.280
его заменяет, что тоже очень важно.

00:21:33.280 --> 00:21:39.280
И более того, можно настроить несколько опций масштабирования.

00:21:39.280 --> 00:21:42.720
Это может быть ручное, это может быть масштабирование

00:21:42.720 --> 00:21:45.680
по расписанию, динамическое, по спросу.

00:21:45.680 --> 00:21:50.920
Можем даже настроить предыктив, то есть прогнозируемое

00:21:50.920 --> 00:21:54.080
масштабирование, когда ожидается по определенным

00:21:54.080 --> 00:21:57.840
метрикам увеличение нагрузки, то соответственно этот

00:21:57.840 --> 00:22:03.760
сервис для нас увеличит количество наших EC2 инстанцев.

00:22:03.760 --> 00:22:06.040
Автоматическое масштабирование, оно хорошо подходит как

00:22:06.040 --> 00:22:10.760
для прогнозируемых, так и непрогнозируемых нагрузок.

00:22:10.760 --> 00:22:14.440
На этом сайте вы видите пример нагрузки на инфраструктуру

00:22:14.440 --> 00:22:17.480
Amazon.com за одну неделю.

00:22:17.480 --> 00:22:21.100
Мы видим, что пиковые нагрузки, они одинаковые плюс-минус

00:22:21.100 --> 00:22:25.160
для каждого дня недели, а также минимальные нагрузки

00:22:25.160 --> 00:22:26.800
также плюс-минус похожи.

00:22:26.800 --> 00:22:32.400
В этом случае мы помимо мониторинга метрик можем

00:22:32.400 --> 00:22:36.480
дополнительно настроить масштабирование по расписанию.

00:22:36.480 --> 00:22:40.480
Мы знаем, что с 7 часов вечера нагрузка начинает увеличиваться

00:22:40.480 --> 00:22:44.760
в 2 раза, дальше к 9 часов вечера нагрузка увеличивается

00:22:44.760 --> 00:22:47.760
в 3 раза по сравнению от первоначальной.

00:22:47.760 --> 00:22:51.640
И соответственно можем заранее приготовить наши

00:22:51.640 --> 00:22:56.880
инстанции к ожидаемой нагрузке.

00:22:56.880 --> 00:23:00.360
Если же мы говорим про непредсказуемые нагрузки, давайте рассмотрим

00:23:00.360 --> 00:23:06.880
пример нагрузки на сайт Amazon.com за ноябрь месяца.

00:23:06.880 --> 00:23:09.720
В конце месяца мы знаем, у нас проходят Black Friday и

00:23:09.720 --> 00:23:13.840
Cyber Monday, когда предоставляются большие скидки и нагрузка

00:23:13.840 --> 00:23:18.440
на сайт растет очень сильно.

00:23:18.440 --> 00:23:21.840
Если говорить по трафику, по слайду, вы видите, что

00:23:21.840 --> 00:23:23.960
нагрузка увеличивается в 3-4 раза.

00:23:23.960 --> 00:23:29.520
И как вы видите, если бы мы подготовили заранее

00:23:29.520 --> 00:23:33.800
необходимое количество почистительных мощностей

00:23:33.800 --> 00:23:39.120
и целый ноябрь ждали бы эти дни, первый момент,

00:23:39.120 --> 00:23:41.640
не факт, что мы угадаем какая будет нагрузка, даже

00:23:41.640 --> 00:23:45.240
если мы угадаем, вы видите, нагрузка в этом графике,

00:23:45.240 --> 00:23:47.680
она всего лишь 24%.

00:23:47.680 --> 00:23:51.840
Все оставшееся время, то 70% времени наши сервера

00:23:51.840 --> 00:23:52.840
бы простаивали.

00:23:52.840 --> 00:23:58.340
В этом случае автоскейлинг дает очень хорошие возможности

00:23:58.340 --> 00:24:03.080
для того, чтобы исключить ненужные траты в облаке

00:24:03.080 --> 00:24:04.080
AWS.

00:24:04.080 --> 00:24:07.680
И все ваши сервера работают в полную силу.

00:24:07.680 --> 00:24:14.680
Если нагрузка на ваши сервера уменьшается, то соответственно

00:24:14.680 --> 00:24:24.080
эти сервера отключаются и уже на конкретную нагрузку

00:24:24.080 --> 00:24:27.400
выделяется лишь необходимое количество ICO2-инстанций.

00:24:27.400 --> 00:24:31.640
Давайте теперь подробнее остановимся на технических

00:24:31.640 --> 00:24:32.640
тонкостях.

00:24:32.640 --> 00:24:35.680
Для этого введем понятие автоскейлинг групп.

00:24:35.680 --> 00:24:39.340
Это набор ICO2-инстанций, которые воспринимаются

00:24:39.340 --> 00:24:42.440
как одна логическая группа для целей масштабирования.

00:24:42.440 --> 00:24:47.060
Когда мы указываем автоскейлинг группу, мы даем информацию

00:24:47.060 --> 00:24:51.160
по нашим ICO2-инстанцам, а также передаем дополнительные

00:24:51.160 --> 00:24:52.160
три параметра.

00:24:52.160 --> 00:24:56.560
Первый это минимум сайз, то есть минимальное количество

00:24:56.560 --> 00:24:59.200
инстанций в нашей группе, которое возможно меньше

00:24:59.200 --> 00:25:02.640
которого автоскейлинг не будет уменьшать.

00:25:02.640 --> 00:25:06.680
Дальше есть максимум сайз, это то количество ICO2-инстанцев,

00:25:06.680 --> 00:25:09.400
больше которого добавляться не будет вне зависимости

00:25:09.400 --> 00:25:12.840
от трафика, нагрузки и так далее.

00:25:12.840 --> 00:25:15.680
То есть есть определенный бюджет, который вы не можете

00:25:15.680 --> 00:25:20.220
превышать и благодаря минимум сайз и максимум сайз вы можете

00:25:20.220 --> 00:25:22.800
быть уверены, что вы этот бюджет не превышите.

00:25:22.800 --> 00:25:29.400
И есть Desired Capacity, это то количество ICO2-инстанцев,

00:25:29.400 --> 00:25:33.440
которое будет запущено в самом начале запуска автоскейлинг

00:25:33.440 --> 00:25:34.440
группы.

00:25:34.440 --> 00:25:41.000
На этом сайде вы можете видеть примеры scaling out, то есть

00:25:41.000 --> 00:25:45.280
увеличение масштабированию в сторону увеличения и scaling

00:25:45.280 --> 00:25:47.400
in, масштабированию в сторону уменьшения.

00:25:47.400 --> 00:25:53.320
В самом начале исходное состояние это когда у нас

00:25:53.320 --> 00:25:59.360
есть 2 ICO2-инстанца, далее происходит у нас scaling out,

00:25:59.360 --> 00:26:01.440
то есть масштабирование в сторону увеличения и

00:26:01.440 --> 00:26:04.600
добавляется дополнительный третий инстанс.

00:26:04.600 --> 00:26:08.400
Как только по тем или иным причинам, например по метрикам

00:26:08.400 --> 00:26:13.120
мы видим, что нагрузка на наши инстанцы она достаточно

00:26:13.120 --> 00:26:17.080
маленькая и есть возможность убрать один ICO2-инстанц,

00:26:17.080 --> 00:26:21.120
и с текущей нагрузкой справится оставшаяся часть серверных

00:26:21.120 --> 00:26:22.120
мощностей.

00:26:22.120 --> 00:26:25.160
В этом случае срабатывает scaling in, то есть масштабирование

00:26:25.160 --> 00:26:29.560
в сторону уменьшения и вы видите, что третий инстанс

00:26:29.560 --> 00:26:36.360
удаляется, остается 2 инстанца.

00:26:36.360 --> 00:26:39.120
Двигаемся дальше, давайте рассмотрим какие входные

00:26:39.120 --> 00:26:42.800
данные нам нужно для полноценной настройки автоскейлинг.

00:26:42.800 --> 00:26:48.040
Первое, мы указываем что, то есть что мы масштабируем,

00:26:48.040 --> 00:26:53.480
а именно мы настраиваем так называемый launch config,

00:26:53.480 --> 00:26:59.080
это информация о наших ICO2-инстанцах, AMI, это вся та информация,

00:26:59.080 --> 00:27:03.760
которую мы вводим во время запуска нашего ICO2-инстанца.

00:27:03.760 --> 00:27:07.960
Далее вторая колонка это way, то есть где наша автоскейлинг-группа

00:27:07.960 --> 00:27:08.960
будет жить.

00:27:08.960 --> 00:27:13.280
Если это VPC, мы указываем какая это VPC, в каком конкретно

00:27:13.280 --> 00:27:16.760
сабнете эта группа живет.

00:27:16.760 --> 00:27:23.360
Далее если к автоскейлинг-группе еще привязан load balancer, который

00:27:23.360 --> 00:27:27.040
распределяет трафик по всем инстанцам внутри

00:27:27.040 --> 00:27:30.880
группы, то мы также указываем какой это load balancer.

00:27:30.880 --> 00:27:36.320
И третье справа это информация по самому масштабированию,

00:27:36.320 --> 00:27:39.080
которая связана к автоскейлинг-группе.

00:27:39.080 --> 00:27:43.040
Мы можем, например, задать maintain current number, это когда

00:27:43.040 --> 00:27:46.040
мы указываем необходимое количество инстанцев,

00:27:46.040 --> 00:27:48.360
которое всегда должно быть доступным.

00:27:48.360 --> 00:27:51.240
Если, например, указываем 5, в случае возникновения

00:27:51.240 --> 00:27:55.640
проблем с любым количеством текущих инстанцев, они

00:27:55.640 --> 00:28:00.240
автоматически заменяются и создается то количество

00:28:00.240 --> 00:28:03.880
инстанцев, которые мы указали в самом начале.

00:28:03.880 --> 00:28:07.360
Есть manual scaling, мы можем регулировать параметрами

00:28:07.360 --> 00:28:11.920
minimum, max и desired capacity для того, чтобы увеличивать

00:28:11.920 --> 00:28:14.240
либо уменьшать количество инстанцев в нашей группе.

00:28:14.240 --> 00:28:19.040
Также мы можем настроить scheduled scaling, когда по расписанию

00:28:19.040 --> 00:28:22.000
у нас происходит масштабирование.

00:28:22.000 --> 00:28:26.280
Можно настроить dynamic scaling, которое прописывается в

00:28:26.280 --> 00:28:29.560
scaling policies, а scaling policies, соответственно, смотрят

00:28:29.560 --> 00:28:31.480
на метрики.

00:28:31.480 --> 00:28:36.400
Здесь мы можем как раз привязаться на нагрузку на CPU, на нагрузку

00:28:36.400 --> 00:28:39.720
на оперативную память, на сеть и так далее.

00:28:39.720 --> 00:28:44.720
И predictive scaling это дополнительная опция от AWS Autoscaling, которая

00:28:44.720 --> 00:28:49.720
по внутренней своей логике, возможно подключен некоторый

00:28:49.720 --> 00:28:53.040
искусственный интеллект, который может прогнозировать

00:28:53.040 --> 00:28:56.920
нагрузку и по своим прогнозам либо увеличивает, либо

00:28:56.920 --> 00:29:01.960
уменьшает количество инстанцев в нашей автоскейлинг группе.

00:29:01.960 --> 00:29:06.400
Давайте рассмотрим самый популярный пример при настройке

00:29:06.400 --> 00:29:08.800
динамического масштабирования.

00:29:08.800 --> 00:29:13.060
Это связка ELB, CloudWatch и Isitu Autoscaling.

00:29:13.060 --> 00:29:15.520
Все начинается с того, что у вас есть автоскейлинг

00:29:15.520 --> 00:29:20.200
группа, она привязана к ELB и ваши таргеты, то есть

00:29:20.200 --> 00:29:26.720
Isitu Instance, они отправляют метрики в Amazon CloudWatch.

00:29:26.720 --> 00:29:30.360
На стороне CloudWatch у вас есть настроенный аларм, когда

00:29:30.360 --> 00:29:36.840
при превышении, например, CPU нагрузки больше чем на

00:29:36.840 --> 00:29:43.440
60% в течение 5 минут, то, соответственно, CloudWatch отправляет

00:29:43.440 --> 00:29:47.560
соответствующую команду Isitu Autoscaling, которая добавляет

00:29:47.560 --> 00:29:50.480
дополнительный инстанс в автоскейлинг группу.

00:29:50.480 --> 00:29:53.660
Как только эта группа, как только этот инстанс добавляется

00:29:53.660 --> 00:29:58.000
в автоскейлинг группу, отправляется команда для Elastic

00:29:58.000 --> 00:30:03.320
Load Balancer, чтобы зарегистрировать новый таргет внутри автоскейлинг

00:30:03.320 --> 00:30:09.720
группы и начать направлять трафик в этот инстанс.

00:30:09.720 --> 00:30:14.440
Этот процесс происходит на постоянной основе и

00:30:14.440 --> 00:30:17.000
все начинается с аларма.

00:30:17.000 --> 00:30:19.880
Я напоминаю, что для того, чтобы настроить аларм,

00:30:19.880 --> 00:30:23.480
необходимо, чтобы у вас были настроены соответствующие

00:30:23.480 --> 00:30:26.080
метрики и собиралась необходимая информация.

00:30:26.080 --> 00:30:31.560
Вместо CPU нагрузки мы можем взять абсолютно любой другой

00:30:31.560 --> 00:30:32.560
показатель.

00:30:32.560 --> 00:30:36.480
Мы можем взять для настройки аларма несколько метрик,

00:30:36.480 --> 00:30:37.480
это тоже возможно.

00:30:37.480 --> 00:30:43.960
Мы все это время с вами говорили про сервис AWS Isitu

00:30:43.960 --> 00:30:44.960
Autoscaling.

00:30:44.960 --> 00:30:48.680
Здесь же есть очень похожий по названию и по смыслу

00:30:48.680 --> 00:30:51.480
сервис AWS Autoscaling.

00:30:51.480 --> 00:30:56.760
Этот сервис поддерживает большее количество сервисов.

00:30:56.760 --> 00:31:00.520
Помимо поддержки Isitu Instance он имеет работать с Elastic

00:31:00.520 --> 00:31:06.240
Container Service с нашими Docker-контейнерами, может работать с DynamoDB, а

00:31:06.240 --> 00:31:11.280
именно с таблицами и индексами, а также работает с Avroa, а

00:31:11.280 --> 00:31:15.440
именно с репликами.

00:31:15.440 --> 00:31:20.440
Таким образом, все указанные сервисы и ресурсы могут

00:31:20.440 --> 00:31:26.960
масштабироваться с использованием сервиса AWS Autoscaling.

00:31:26.960 --> 00:31:30.000
На этом мы заканчиваем третью часть сегодняшней нашей

00:31:30.000 --> 00:31:31.000
лекции.

00:31:31.000 --> 00:31:34.320
Подробнее поговорили про сервис Amazon Isitu Autoscaling,

00:31:34.320 --> 00:31:36.880
а также AWS Autoscaling.

00:31:36.880 --> 00:31:39.160
Они отличаются тем, что второй поддерживает большее

00:31:39.160 --> 00:31:43.440
количество сервисов, а первый Amazon Isitu Autoscaling он больше

00:31:43.440 --> 00:31:46.120
заточен под сервис Isitu.

00:31:46.120 --> 00:31:53.240
Связка Isitu Autoscaling, CloudWatch, а также ELB, она дает возможность

00:31:53.240 --> 00:31:56.400
превратить вашу инфраструктуру в живой организм, который

00:31:56.400 --> 00:31:59.880
автоматически масштабируется в зависимости от нагрузки

00:31:59.880 --> 00:32:06.000
на ваше приложение.

00:32:06.000 --> 00:32:10.320
На этом мы прошли все секции в сегодняшней нашей лекции.

00:32:10.320 --> 00:32:12.880
Давайте остановимся на самых основных моментах.

00:32:12.880 --> 00:32:17.920
В самом начале мы прошли и познакомились с сервисом

00:32:17.920 --> 00:32:19.560
Amazon Elastic Load Balancing.

00:32:19.560 --> 00:32:23.600
Это тот сервис, который дает возможность распределять

00:32:23.600 --> 00:32:28.200
нашу нагрузку на вычислительные ресурсы.

00:32:28.200 --> 00:32:29.200
Есть три вида.

00:32:29.200 --> 00:32:37.840
ELB Application Load Balancing, NLB Network Load Balancer и Classic Load Balancer,

00:32:37.840 --> 00:32:41.720
предыдущее поколение, которое на текущий момент

00:32:41.720 --> 00:32:46.120
недоступно для создания, но для обратной совместимости

00:32:46.120 --> 00:32:49.160
доступно для старых инфраструктур.

00:32:49.160 --> 00:32:51.400
Дальше мы поговорили про сервис CloudWatch.

00:32:51.400 --> 00:32:54.320
Это тот сервис, который предоставляет инструменты

00:32:54.320 --> 00:33:00.320
для мониторинга всей нашей инфраструктуры в AWS.

00:33:00.320 --> 00:33:06.680
После чего познакомились с парой сервисов для автомасштабирования.

00:33:06.680 --> 00:33:10.680
Это Amazon Isitu Autoscaling, которая работает сервисом Isitu, а также

00:33:10.680 --> 00:33:14.840
Amazon Autoscaling, который работает с большим количеством сервисов,

00:33:14.840 --> 00:33:16.880
но смысл остается тот же.

00:33:16.880 --> 00:33:24.960
Связка из трех сервисов ELB, CloudWatch и Autoscaling позволяет

00:33:24.960 --> 00:33:27.080
настроить динамическое масштабирование нашей

00:33:27.080 --> 00:33:31.680
инфраструктуры в AWS.

00:33:31.680 --> 00:33:34.400
На этом мы подошли к концу сегодняшней нашей лекции.

00:33:34.400 --> 00:33:40.320
Я очень надеюсь, что вы получили более полное представление

00:33:40.320 --> 00:33:41.960
о проведенных сервисах.

00:33:41.960 --> 00:33:45.560
Если будут вопросы, пишите в наши групповые чаты.

00:33:45.560 --> 00:33:50.280
И самые интересные вопросы будут опубликованы в наших

00:33:50.280 --> 00:33:52.640
Q&amp;A сессиях.

00:33:52.640 --> 00:33:53.760
На этом с вами прощаюсь.

00:33:53.760 --> 00:33:55.200
Спасибо большое за внимание.

00:33:55.200 --> 00:34:12.520
Увидимся с вами на следующих наших активностях.