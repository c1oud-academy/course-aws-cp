WEBVTT

00:00:00.000 --> 00:00:09.360
Добрый день, уважаемые студенты! Я рад вас видеть
на самом последнем лекционном занятии нашего курса.

00:00:09.360 --> 00:00:15.120
Сегодня мы с вами поговорим про автоматическое
масштабирование и мониторинг. Окей, давайте начнем.

00:00:15.120 --> 00:00:20.984
Сегодняшняя лекция поделена на три части.
В первой части мы поговорим про

00:00:21.008 --> 00:00:27.280
балансирование нагрузки и соответствующий
сервис AWS Elastic Load Balancing.

00:00:27.280 --> 00:00:36.240
Следующий сервис, который полностью про мониторинг
инфраструктуры в облаке, это Amazon CloudWatch.

00:00:36.240 --> 00:00:45.908
Самое последнее - это сервис, который позволяет
настроить вашу инфраструктуру таким образом, чтобы в

00:00:45.932 --> 00:00:55.600
зависимости от нагрузки автоматически увеличивалась,
либо уменьшалась, это Amazon EC2 Auto Scaling.

00:00:55.600 --> 00:01:05.031
Начинаем с Elastic Load Balancing. Это сервис,
который распределяет входящий трафик приложения,

00:01:05.055 --> 00:01:15.440
сетевой трафик по нескольким таргетам, в
одной, либо в нескольких availability зонах.

00:01:15.440 --> 00:01:22.588
Elastic Load Balancing это тот сервис,
который  масштабируется при увеличении

00:01:22.612 --> 00:01:29.760
вашей нагрузки, таким образом мы
оплачиваем только за то, что мы используем.

00:01:29.760 --> 00:01:35.135
Если сравнивать с локальной инфраструктурой,
с локальным дата-центром, когда мы говорим

00:01:35.159 --> 00:01:40.220
про балансирование нагрузки, то покупается
отдельное железо, которое балансирует

00:01:40.244 --> 00:01:45.650
нагрузку, либо это делается на уровне приложения.
То есть какое-то приложение, туда на

00:01:45.674 --> 00:01:51.080
вход идет весь наш трафик и он дальше
распределяет этот трафик по нашим IT-ресурсам.

00:01:51.080 --> 00:02:03.640
Важный момент - при локальном исполнении
приложения, либо железа, оно само не масштабируется.

00:02:03.640 --> 00:02:08.440
Это отдельный вид работ, на который
нужно выделять людей, выделять ресурсы.

00:02:08.440 --> 00:02:15.932
И в случае, если ваш трафик превысит
лимиты вашего локального балансировщика,

00:02:15.956 --> 00:02:22.560
то он не сможет обработать весь
этот трафик и скорее всего упадет.

00:02:22.560 --> 00:02:27.822
Когда мы говорим про Elastic
Load Balancer, он не ограниченный

00:02:27.846 --> 00:02:33.108
с точки зрения масштабирования.
Другой важный момент, вам не

00:02:33.132 --> 00:02:38.394
нужно покупать лицензии заранее,
вы оплачиваете только ровно

00:02:38.418 --> 00:02:43.680
за то, что вы используете.
Существует три вида Load Balancer.

00:02:43.680 --> 00:02:47.348
Первый - это Application Load Balancer,
далее идет Network Load Balancer

00:02:47.372 --> 00:02:51.040
и последний Classic Load
Balancer предыдущего поколения.

00:02:51.040 --> 00:02:54.240
Давайте остановимся подробнее
на каждом из этих видов.

00:02:54.240 --> 00:03:00.547
Первый Application Load Balancer, это тот
ресурс, который работает на уровне HTTP

00:03:00.571 --> 00:03:06.720
и HTTPS трафика, то есть это седьмой
уровень по OSI модели Application Layer.

00:03:06.720 --> 00:03:13.012
Отличие Load Balancer в том, что
это более продвинутый вариант, новая

00:03:13.036 --> 00:03:19.328
версия Load Balancer, она работает с
различными ресурсами, а именно EC2

00:03:19.352 --> 00:03:25.327
инстансы, контейнеры, он может
балансировать трафик на определенный

00:03:25.351 --> 00:03:31.960
список IP адресов, а также можно
балансировать трафик на лямбда функции.

00:03:31.960 --> 00:03:37.450
Если мы говорим про второй вид Network
Load Balancer, это тот Balancer, который работает

00:03:37.474 --> 00:03:43.280
на уровне Transport Layer, то есть четвертый
уровень по OSI модели, а это трафик TCP и UDP.

00:03:43.280 --> 00:03:50.252
Отличие в том, что оно оптимизировано для больших
нагрузок и в секунду может обрабатывать миллионы

00:03:50.276 --> 00:03:57.680
запросов. Также оно дополнительно оптимизировано
на тот вид трафика, в котором есть внезапный всплеск.

00:03:57.680 --> 00:04:07.310
И третий, это предыдущее поколение Classic Load
Balancer, сейчас она недоступна для выбора, а лишь

00:04:07.334 --> 00:04:17.560
существует для обратной совместимости и доступна
в инфраструктурах, где Classic Load Balancer активен.

00:04:17.560 --> 00:04:23.582
Оно работает и на четвертом, и на
седьмом уровне по OSI модели, поэтому

00:04:23.606 --> 00:04:29.628
поддерживает HTTP, HTTPS, TCP, UDP трафик.
Балансирует нагрузку только на

00:04:29.652 --> 00:04:35.716
EC2 инстансы, это самая первая версия
балансировщика, поэтому по сравнению

00:04:35.740 --> 00:04:41.720
с Application и Network Load Balancer
является не такой функциональной.

00:04:41.720 --> 00:04:45.788
В целом рекомендация от самого
Amazon - это  использовать либо Application

00:04:45.812 --> 00:04:49.880
Load Balancer, либо Network Load
Balancer в зависимости от вашей нагрузки.

00:04:49.880 --> 00:04:59.000
На этом слайде пример архитектуры,
где настроен Load Balancer.

00:04:59.000 --> 00:05:07.048
Вы видите, у нас есть клиенты, Load Balancer настроен
не на одну, а на несколько availability zone, чтобы

00:05:07.072 --> 00:05:15.120
предоставить availability, приходит трафик от наших
клиентов, далее Load Balancer направляет на Listener.

00:05:15.120 --> 00:05:20.080
Listener - это такие ресурсы, которые
проверяют все ли в порядке с нашими таргетами.

00:05:20.080 --> 00:05:25.880
Таргеты - это наши EC2 инстансы, в большинстве
случаев, которые обрабатывают конкретный запрос.

00:05:25.880 --> 00:05:32.499
Listener - также это тот ресурс, на котором
можно настроить Health Check, то есть проверка

00:05:32.523 --> 00:05:39.588
доступности, он через определенные промежутки
времени отправляет запрос на таргеты, сам запрос

00:05:39.612 --> 00:05:46.454
также можно настроить и если не получает
ожидаемый ответ помечает таргет как unhealthy,

00:05:46.478 --> 00:05:53.320
то есть недоступный и балансирует трафик
только на healthy targets, то есть доступные таргеты.

00:05:53.320 --> 00:06:07.280
Как только таргет становится доступным, он
возобновляет направление трафика на этот таргет.

00:06:07.280 --> 00:06:15.311
Если говорить про отличия настройки, то
при работе с ALB и NLB мы настраиваем

00:06:15.335 --> 00:06:22.520
наши таргет группы и все наши
таргеты привязываем к таргет группам.

00:06:22.520 --> 00:06:36.000
Когда мы говорим Classic Load Balancer, то все наши
EC2 инстансы привязываются напрямую к Load Balancer.

00:06:36.000 --> 00:06:40.320
Давайте рассмотрим основные
примеры использования ELB.

00:06:40.320 --> 00:06:45.480
Самый первый - это предоставление высокой
доступности и отказоустойчивости ваших приложений.

00:06:45.480 --> 00:06:50.435
Представим, что вы находитесь
в одной availability зоне и у вас 10

00:06:50.459 --> 00:06:55.414
таргетов, в случае если половина
становится по той или иной причине

00:06:55.438 --> 00:07:00.767
недоступной, то трафик начинает
перенаправляться на оставшиеся 5,

00:07:00.791 --> 00:07:06.120
при этом на предыдущие 5, которые
недоступны, трафик не будет направляться.

00:07:06.120 --> 00:07:11.300
Если мы говорим про более продвинутую
инфраструктуру, когда она развернута

00:07:11.324 --> 00:07:16.148
на нескольких availability зонах и
представим, что что-то произошло

00:07:16.172 --> 00:07:20.892
с целой availability зоной, то опять
же ELB понимает, что таргеты на

00:07:20.916 --> 00:07:26.200
конкретной availability зоне недоступны,
перестает направлять туда трафик.

00:07:26.200 --> 00:07:37.440
Таким образом трафик, который шел на первую
availability зону, перенаправляется на все остальные.

00:07:37.440 --> 00:07:42.000
Следующее это то, что сейчас достаточно
популярным становится использование контейнеров.

00:07:42.000 --> 00:07:48.403
ELB также не отстает от этих
трендов и есть возможность нативно

00:07:48.427 --> 00:07:54.520
интегрироваться с сервисом
ECS, Elastic Container Service.

00:07:54.520 --> 00:08:01.718
Если использовать связку ELB, CloudWatch
и Amazon EC2 Autoscaling, это два сервиса,

00:08:01.742 --> 00:08:09.644
которые мы пройдем чуть дальше на следующих
слайдах, то она позволяет нам превратить нашу

00:08:09.668 --> 00:08:17.391
инфраструктуру в некий живой абстрактный
организм, когда в зависимости от нагрузки у вас

00:08:17.415 --> 00:08:25.760
увеличивается количество EC2 инстансов и
уменьшается, если трафик соответственно уменьшается.

00:08:25.760 --> 00:08:35.522
Elastic Load Balancer нативно работает с
VPC, если ваша инфраструктура развернута

00:08:35.546 --> 00:08:45.308
с использованием Virtual Private Cloud и
настроены также все ресурсы безопасности,

00:08:45.332 --> 00:08:54.450
то есть Security группы, Network ACL и так
далее, то Elastic Load Balancer нативно

00:08:54.474 --> 00:09:04.880
встраивается в эту инфраструктуру и будет
работать со всеми ресурсами внутри вашего VPC.

00:09:04.880 --> 00:09:14.228
Еще один пункт - это работа с гибридными
архитектурами, когда вам нужно балансировать трафик

00:09:14.252 --> 00:09:23.600
часть на список EC2 инстансов и часть на
сервера, находящиеся локально в вашем дата-центре.

00:09:23.600 --> 00:09:30.360
Это тоже можно настроить
и ELB это поддерживает.

00:09:30.360 --> 00:09:37.671
Самое последнее - это также один из существующих
трендов, это бессерверные архитектуры, в этом

00:09:37.695 --> 00:09:45.400
плане ELB также не отстает от этих трендов и есть
возможность как таргеты указать лямбда функции.

00:09:45.400 --> 00:09:53.808
Таким образом у лямбда функции есть
соответствующая связка с ELB и можно напрямую

00:09:53.832 --> 00:10:02.240
из веб-браузера, с сайта делать соответствующий
запрос, который обработает лямбда.

00:10:02.240 --> 00:10:05.961
Из-за того, что внутри
Application load balancer есть

00:10:05.985 --> 00:10:10.064
возможность настроить сложную
логику перенаправления,

00:10:10.088 --> 00:10:14.054
то соответственно определенный
вызов будет направляться на

00:10:14.078 --> 00:10:18.560
определенную лямбда функцию и
соответствующе обрабатываться.

00:10:18.560 --> 00:10:23.280
Если мы говорим про мониторинг наших
load balancer, выделяют три направления.

00:10:23.280 --> 00:10:27.828
Первое - это Amazon CloudWatch
Metrics, когда наш load balancer

00:10:27.852 --> 00:10:32.400
и соответственно таргеты направляют
метрики в CloudWatch Metrics.

00:10:32.400 --> 00:10:37.040
Оттуда мы уже видим статистику и
можем принимать соответствующие решения.

00:10:37.040 --> 00:10:46.720
Другое - Access Logs, мы можем запросы логировать
и сохранять внутри S3 для дальнейшего анализа.

00:10:46.720 --> 00:10:52.829
Самое последнее - AWS CloudTrail
Logs, это когда происходит вызов на

00:10:52.853 --> 00:10:59.480
AWS API, не важно как через Console, CLI
Command Line Interface, либо через SDK.

00:10:59.480 --> 00:11:06.728
Все эти запросы будут сохранены и в случае
инфраструктурных изменения на уровне load balancer,

00:11:06.752 --> 00:11:14.000
вы сможете посмотреть, кто сделал вызов, какой 
вызов произошел, с какого IP адреса и так далее.

00:11:14.000 --> 00:11:19.062
Это нужно для целей аудита, в
случае если у вас произошли какие-то

00:11:19.086 --> 00:11:23.680
изменения на уровне
инфраструктуры и это привело к ошибке.

00:11:23.680 --> 00:11:30.480
На этом мы подошли к концу первой
секции нашей сегодняшней лекции.

00:11:30.480 --> 00:11:32.920
Давайте остановимся на
самых основных моментах.

00:11:32.920 --> 00:11:37.968
Elastic Load Balancing, либо
вкратце ELB, это тот сервис,

00:11:37.992 --> 00:11:43.040
который распределяет входящий
трафик на несколько таргетов.

00:11:43.040 --> 00:11:47.988
Эти таргеты могут находиться в
нескольких availability зонах и как таргет

00:11:48.012 --> 00:11:52.960
могут выступать EC2 инстансы,
контейнеры, IP-адреса либо лямбда функции.

00:11:52.960 --> 00:11:57.968
Существует три вида ELB - это
Application Load Balancer,

00:11:57.992 --> 00:12:02.760
Network Load Balancer и предыдущее
поколение Classic Load Balancer.

00:12:02.760 --> 00:12:08.180
Если мы говорим про связку ELB,
CloudWatch и EC2 Autoscaling, связка

00:12:08.204 --> 00:12:13.543
из этих трех сервисов это мощнейший
инструмент, который позволяет

00:12:13.567 --> 00:12:18.866
превратить вашу инфраструктуру в
некий абстрактный живой организм

00:12:18.890 --> 00:12:24.188
и таким образом она будет
изменяться в зависимости от трафика,

00:12:24.212 --> 00:12:29.490
в случае если у вас внезапный всплеск
трафика, то она соответствующе

00:12:29.514 --> 00:12:34.547
увеличивается, чтобы обработать
все ваши входящие запросы и

00:12:34.571 --> 00:12:40.094
в случае когда у нас небольшое
количество запросов, то инфраструктура

00:12:40.118 --> 00:12:45.640
автоматически уменьшается, для
того чтобы не нести расходы впустую.

00:12:45.640 --> 00:12:50.355
Мы с вами добрались до
второй части нашей сегодняшней

00:12:50.379 --> 00:12:55.640
лекции, подробнее поговорим
про сервис Amazon CloudWatch.

00:12:55.640 --> 00:13:00.053
Amazon CloudWatch - это тот
сервис, который предоставляет все

00:13:00.077 --> 00:13:05.080
необходимые инструменты для
мониторинга нашей инфраструктуры в AWS.

00:13:05.080 --> 00:13:13.800
С CloudWatch мы можем настроить сбор
метрик и на эти метрики настроить alarms.

00:13:13.800 --> 00:13:20.059
То есть представим что мы настроили
метрику, мы отправляем информацию по текущему

00:13:20.083 --> 00:13:26.812
уровню нагрузки на CPU с каждого нашего EC2 
инстанcа. Далее мы настроили alarm, когда

00:13:26.836 --> 00:13:33.409
мы говорим, что при увеличении средней
нагрузки на наши EC2 инстансы, при превышении

00:13:33.433 --> 00:13:39.848
больше 60% происходит некоторое действие,
срабатывает alarm и мы можем направить

00:13:39.872 --> 00:13:46.015
этот alarm на SNS topic, то есть придет
уведомление на почту, можем отправить

00:13:46.039 --> 00:13:52.572
на SQS, для того чтобы она по очереди
обрабатывалась, можем отправить на Lambda,

00:13:52.596 --> 00:13:59.285
чтобы Lambda могла наложить какую-то кастомную
логику и что-то сделать, либо можем отправить

00:13:59.309 --> 00:14:05.920
напрямую на EC2 Auto Scaling, для того
чтобы автоматически добавился новый инстанс.

00:14:05.920 --> 00:14:10.270
Мы также можем накапливать логи
внутри CloudWatch, это логи наших

00:14:10.294 --> 00:14:14.440
приложений, системные логи
для дальнейшего аудита и анализа.

00:14:14.440 --> 00:14:19.817
Еще один функционал, который
предоставляет Amazon CloudWatch это

00:14:19.841 --> 00:14:25.902
настройка events, то есть events -
это прописанный документ, в котором

00:14:25.926 --> 00:14:31.431
описывается определенное событие
внутри AWS, в случае когда это

00:14:31.455 --> 00:14:36.960
событие происходит, то мы можем
триггернуть какой-то наш таргет.

00:14:36.960 --> 00:14:43.994
Приведу пример, мы настроили
event, что при отключении EC2

00:14:44.018 --> 00:14:52.040
инстанса на availability зоне 1
мы будем триггерить нашу Lambda.

00:14:52.040 --> 00:14:59.520
Lambda соответственно отработает
по какой-то своей логике и вернет ответ.

00:14:59.520 --> 00:15:06.316
Еще одним таргетом может быть SQS, для
того чтобы на email пришло уведомление и мы

00:15:06.340 --> 00:15:13.640
поняли что у нас произошло подключение
EC2 инстанса, а оно не должно было происходить.

00:15:13.640 --> 00:15:22.085
Мы можем настроить event абсолютно для любых
событий происходящих внутри AWS, практически все

00:15:22.109 --> 00:15:26.312
сервисы поддерживают настройку 
event. Доступные операции и

00:15:26.336 --> 00:15:31.400
сервисы вы можете подробнее
посмотреть в документации AWS.

00:15:31.400 --> 00:15:34.280
Давайте подробнее
рассмотрим CloudWatch Alarm.

00:15:34.280 --> 00:15:39.059
Существует три вида, самый
популярный - это Static threshold, когда мы

00:15:39.083 --> 00:15:44.348
мониторим одну определенную метрику,
в случае когда его значение превышает,

00:15:44.372 --> 00:15:49.017
либо становится меньше определенного
значения, то срабатывает alarm и

00:15:49.041 --> 00:15:54.440
отправляется соответствующая информация
на наши таргеты, срабатывает действие.

00:15:54.440 --> 00:16:01.198
Когда мы говорим Anomaly detection, то здесь
подключается некоторый искусственный интеллект

00:16:01.222 --> 00:16:07.680
со стороны AWS и смотрит есть ли некоторые
подозрительные скачки внутри наших метрик.

00:16:07.680 --> 00:16:14.048
И третье - это продвинутый вариант Static
threshold, когда мы можем один либо несколько

00:16:14.072 --> 00:16:20.440
метрик собрать в одном математическом
выражении, результат которого будет отслеживаться.

00:16:20.440 --> 00:16:28.008
Давайте рассмотрим на примере Static threshold,
какую информацию необходимо ввести для

00:16:28.032 --> 00:16:35.600
того чтобы настроить alarm. Самое первое мы
указываем Namespace. Namespace это сервис.

00:16:35.600 --> 00:16:42.880
Если мы говорим EC2, то namespace мы
указываем из выпадающего списка AWS / EC2.

00:16:42.880 --> 00:16:54.760
Далее - Metric. Если возьмем EC2, то у него есть
метрика CPU utilization, то есть нагрузка на CPU.

00:16:54.760 --> 00:17:00.800
Следующее - это Statistic, то есть какая
операция срабатывает на нашей метрике.

00:17:00.800 --> 00:17:08.320
Мы можем взять средние значения, сумму,
минимальное, максимальное значение и так далее.

00:17:08.320 --> 00:17:13.120
Другое - это Period, то есть за какой
период учитываются датапойнты.

00:17:13.120 --> 00:17:22.680
Как мы с вами помним, датапойнты это информация
о нашей метрике в определенный момент времени.

00:17:22.680 --> 00:17:27.320
Представим, что у нас отправляются
каждые пять минут метрики по нашему CPU.

00:17:27.320 --> 00:17:36.360
И каждые пять минут она в CloudWatch отображается
одним датапойнтом с соответствующим значением.

00:17:36.360 --> 00:17:47.160
Так вот период влияет на то, какое количество
датапойнтов будет учитываться для принятия решения.

00:17:47.160 --> 00:17:55.076
Следующее - это Conditions, здесь мы
указываем определенные условия, которыми может

00:17:55.100 --> 00:18:02.920
быть выражение больше, больше либо
равно, меньше, меньше либо равно и так далее.

00:18:02.920 --> 00:18:09.735
Additional configuration information - это
дополнительная информация, дополнительные условия,

00:18:09.759 --> 00:18:13.347
которые могут быть в том
числе указаны и как Actions здесь

00:18:13.371 --> 00:18:16.960
указываются наши таргеты.
То есть, что будет триггерить наш alarm.

00:18:16.960 --> 00:18:25.708
Это может быть SNS topic, это может быть Amazon
EC2 Autoscaling действие, либо мы можем триггернуть

00:18:25.732 --> 00:18:34.480
наш EC2 инстанс. На этом мы добрались до конца
второй части. Подробнее изучили сервис CloudWatch.

00:18:34.480 --> 00:18:40.120
Это тот сервис, который предоставляет все 
инструменты для мониторинга нашей инфраструктуры.

00:18:40.120 --> 00:18:44.840
С CloudWatch мы можем хранить
и работать с метриками, мы можем

00:18:44.864 --> 00:18:49.584
собирать логи наших приложений,
можем настроить alarms на наши

00:18:49.608 --> 00:18:54.323
метрики, а также мы можем
настроить дополнительные events,

00:18:54.347 --> 00:18:59.760
при срабатывании которого будут
триггериться соответствующие ресурсы AWS.

00:18:59.760 --> 00:19:09.520
Мы с вами добрались до последней части сегодняшней
нашей лекции и это сервис Amazon EC2 Auto Scaling.

00:19:09.520 --> 00:19:16.993
Когда мы работаем в AWS, создаем приложения,
важно, чтобы приложение могло автоматически

00:19:17.017 --> 00:19:24.000
масштабироваться в сторону увеличения и в сторону
уменьшения, в зависимости от спроса, от трафика.

00:19:24.000 --> 00:19:27.160
Почему это важно?
Давайте рассмотрим на следующем примере.

00:19:27.160 --> 00:19:37.640
Представим, есть приложения и вы видите нагрузку
на инфраструктуру в зависимости от дня недели.

00:19:37.640 --> 00:19:44.520
Вы видите, что основная нагрузка приходится
на среду и минимальная нагрузка это в воскресенье.

00:19:44.520 --> 00:19:54.566
Если мы увеличим серверные мощности, вычислительные
мощности до необходимого, чтобы обрабатывать весь

00:19:54.590 --> 00:20:05.240
трафик в среду, вы видите, сколько лишних ресурсов
мы запросим и фактически будем оплачивать воздух.

00:20:05.240 --> 00:20:11.472
Если мы попытаемся как-то найти такое
количество вычислительных ресурсов,

00:20:11.496 --> 00:20:17.728
чтобы большую часть нагрузки обрабатывать, 
а остальные урезать, это тоже не очень

00:20:17.752 --> 00:20:24.020
хорошая стратегия, потому что в этом
случае ваши клиенты попросту не смогут

00:20:24.044 --> 00:20:31.000
получить вашу услугу, сервис и таким
образом вы потеряете своих клиентов.

00:20:31.000 --> 00:20:38.736
Что предлагает нам Amazon EC2 Auto Scaling?
Это тот сервис, который помогает автоматически

00:20:38.760 --> 00:20:47.280
масштабировать как в сторону увеличения, так в
сторону уменьшения количества наших EC2 инстансов.

00:20:47.280 --> 00:20:57.016
И вы видите, что мы с этим сервисом
можем идеально управлять количеством

00:20:57.040 --> 00:21:07.600
необходимых инстансов, чтобы все дни
наши EC2 инстансы максимально работали.

00:21:07.600 --> 00:21:15.244
В этом случае мы не оплачиваем за простой
наших серверов всю работу по добавлению

00:21:15.268 --> 00:21:22.720
новых инстансов и удалению ненужных
инстансов проделывает за нас этот сервис.

00:21:22.720 --> 00:21:27.988
Более того, он автоматически мониторит,
если у нас наше приложение либо EC2

00:21:28.012 --> 00:21:33.280
инстанс недоступен, то он автоматически
его заменяет, что тоже очень важно.

00:21:33.280 --> 00:21:39.468
И более того, можно настроить несколько
опций масштабирования. Это может быть

00:21:39.492 --> 00:21:45.680
ручное, это может быть масштабирование
по расписанию, динамическое, по спросу.

00:21:45.680 --> 00:21:54.452
Можем настроить predective, то есть прогнозируемое
масштабирование, когда ожидается по определенным

00:21:54.476 --> 00:22:03.760
метрикам увеличение нагрузки, то соответственно этот
сервис увеличит количество наших EC2 инстансов.

00:22:03.760 --> 00:22:10.760
Автоматическое масштабирование хорошо подходит как
для прогнозируемых, так и непрогнозируемых нагрузок.

00:22:10.760 --> 00:22:17.480
На этом слайде вы видите пример нагрузки
на инфраструктуру Amazon.com за одну неделю.

00:22:17.480 --> 00:22:22.198
Мы видим, что пиковые нагрузки, они
одинаковые плюс-минус для каждого

00:22:22.222 --> 00:22:26.800
дня недели, а также минимальные
нагрузки также плюс-минус похожи.

00:22:26.800 --> 00:22:36.480
В этом случае, помимо мониторинга метрик можем
 настроить масштабирование по расписанию.

00:22:36.480 --> 00:22:42.108
Мы знаем, что с 19 часов вечера нагрузка
начинает увеличиваться в 2 раза, дальше

00:22:42.132 --> 00:22:47.760
к 21 часам вечера нагрузка увеличивается
в 3 раза по сравнению от первоначальной.

00:22:47.760 --> 00:22:56.880
И соответственно можем заранее приготовить
наши инстансы к ожидаемой нагрузке.

00:22:56.880 --> 00:23:01.490
Если же мы говорим про
непредсказуемые нагрузки, давайте

00:23:01.514 --> 00:23:06.880
рассмотрим пример нагрузки на
сайт Amazon.com за ноябрь месяца.

00:23:06.880 --> 00:23:12.728
В конце месяца мы знаем, у нас
проходят Black Friday и Cyber Monday, когда

00:23:12.752 --> 00:23:18.440
предоставляются большие скидки и
нагрузка на сайт растет очень сильно.

00:23:18.440 --> 00:23:23.960
Если говорить по трафику, по слайду, вы
видите, что нагрузка увеличивается в 3-4 раза.

00:23:23.960 --> 00:23:30.095
И как вы видите, если бы мы подготовили
заранее необходимое количество

00:23:30.119 --> 00:23:35.897
вычислительных мощностей и
целый ноябрь ждали бы эти дни, первый

00:23:35.921 --> 00:23:41.789
момент, не факт, что мы угадаем
какая будет нагрузка, даже если мы

00:23:41.813 --> 00:23:47.680
угадаем, вы видите, нагрузка в
этом графике, она всего лишь 24%.

00:23:47.680 --> 00:23:52.840
Все оставшееся время, то 70%
времени наши сервера бы простаивали.

00:23:52.840 --> 00:23:59.766
В этом случае автоскейлинг дает очень
хорошие возможности для того, чтобы

00:23:59.790 --> 00:24:07.680
исключить ненужные траты в облаке AWS.
И все ваши сервера работают в полную силу.

00:24:07.680 --> 00:24:17.528
Если нагрузка на ваши сервера уменьшается,
то соответственно эти сервера отключаются

00:24:17.552 --> 00:24:27.400
и уже на конкретную нагрузку выделяется
лишь необходимое количество EC2 инстансов.

00:24:27.400 --> 00:24:32.640
Давайте теперь подробнее
остановимся на технических тонкостях.

00:24:32.640 --> 00:24:37.224
Для этого введем понятие Auto Scaling group.
Это набор EC2 инстансов,

00:24:37.248 --> 00:24:42.440
которые воспринимаются как одна
логическая группа для целей масштабирования.

00:24:42.440 --> 00:24:47.403
Когда мы указываем Auto Scaling
group, мы даем информацию по нашим

00:24:47.427 --> 00:24:52.160
EC2 инстансам, а также передаем
дополнительные три параметра.

00:24:52.160 --> 00:24:57.388
Первый - это Minimum size, то есть
минимальное количество инстансов в нашей

00:24:57.412 --> 00:25:02.640
группе, которое возможно, меньше
которого Auto Scaling не будет уменьшать.

00:25:02.640 --> 00:25:07.579
Дальше есть Maximum size, это то
количество EC2 инстансов, больше которого

00:25:07.603 --> 00:25:12.542
добавляться не будет вне зависимости
от трафика, нагрузки и так далее,

00:25:12.566 --> 00:25:17.671
т.е. есть определенный бюджет, который вы
не можете превышать и благодаря Minimum

00:25:17.695 --> 00:25:22.800
size и Maximum size вы можете быть
уверены, что вы этот бюджет не превысите.

00:25:22.800 --> 00:25:28.131
И есть Desired Capacity, это
то количество EC2 инстансов,

00:25:28.155 --> 00:25:34.440
которое будет запущено в самом
начале запуска Auto Scaling group.

00:25:34.440 --> 00:25:40.998
На этом слайде вы можете видеть
примеры Scale out, то есть масштабирование

00:25:41.022 --> 00:25:47.400
в сторону увеличения и Scale in,
масштабирование в сторону уменьшения.

00:25:47.400 --> 00:25:55.679
В самом начале исходное состояние - у нас есть
2 EC2 инстанса, далее происходит у нас Scale out,

00:25:55.703 --> 00:26:04.600
то есть масштабирование в сторону увеличения
и добавляется дополнительный третий инстанс.

00:26:04.600 --> 00:26:08.830
Как только по тем или иным
причинам, например по метрикам

00:26:08.854 --> 00:26:13.462
мы видим, что нагрузка на наши
инстансы достаточно маленькая

00:26:13.486 --> 00:26:17.791
и есть возможность убрать
один EC2 инстанс, и с текущей

00:26:17.815 --> 00:26:22.120
нагрузкой справится оставшаяся
часть серверных мощностей.

00:26:22.120 --> 00:26:28.879
В этом случае срабатывает Scale in,
то есть масштабирование в сторону

00:26:28.903 --> 00:26:36.360
уменьшения и вы видите, что третий
инстанс удаляется, остается 2 инстанса.

00:26:36.360 --> 00:26:42.800
Двигаемся дальше, давайте рассмотрим входные
данные для полноценной настройки Auto Scaling.

00:26:42.800 --> 00:26:48.998
Первое, мы указываем то, что мы
масштабируем, а именно мы настраиваем так

00:26:49.022 --> 00:26:55.652
называемый Launch config, это информация
о наших EC2 инстанcах, AMI, это вся

00:26:55.676 --> 00:27:02.306
та информация, которую мы вводим во
время запуска нашего EC2 инстанcа.

00:27:02.330 --> 00:27:08.960
Далее, вторая колонка - это Where, то есть
где наша Auto Scaling group будет жить.

00:27:08.960 --> 00:27:16.760
Если это VPC, мы указываем какая это VPC,
в каком конкретно subnet-е эта группа живет.

00:27:16.760 --> 00:27:23.512
Далее, если к Auto Scaling group еще
привязан Load balancer, который распределяет

00:27:23.536 --> 00:27:30.880
трафик по всем инстансам внутри группы, то
мы также указываем какой это load balancer.

00:27:30.880 --> 00:27:39.080
И третье справа - информация по масштабированию,
которая связана с Auto Scaling group.

00:27:39.080 --> 00:27:43.772
Мы можем, например, задать Maintain
current number, это когда мы указываем

00:27:43.796 --> 00:27:48.360
необходимое количество инстансов,
которое всегда должно быть доступно.

00:27:48.360 --> 00:27:56.108
Если, например, указываем 5, в случае возникновения
проблем с любым количеством текущих инстансов,

00:27:56.132 --> 00:28:03.880
они автоматически заменяются и создается то
количество инстансов, которое указали в самом начале.

00:28:03.880 --> 00:28:09.143
Есть Manual scaling, мы можем регулировать
параметры minimum, max и desired capacity

00:28:09.167 --> 00:28:14.240
для того, чтобы увеличивать либо уменьшать
количество инстансов в нашей группе.

00:28:14.240 --> 00:28:22.000
Также мы можем настроить Scheduled scaling, когда
по расписанию у нас происходит масштабирование.

00:28:22.000 --> 00:28:26.728
Можно настроить Dynamic scaling,
которое прописывается в scaling

00:28:26.752 --> 00:28:31.480
policies, а scaling policies,
соответственно, смотрят на метрики.

00:28:31.480 --> 00:28:35.588
Здесь мы можем как раз
привязаться на нагрузку на CPU,

00:28:35.612 --> 00:28:39.720
на нагрузку на оперативную
память, на сеть и так далее.

00:28:39.720 --> 00:28:45.414
И Predictive scaling - это дополнительная
опция от AWS Auto Scaling, которая

00:28:45.438 --> 00:28:50.828
по внутренней своей логике, возможно
подключен некоторый искусственный

00:28:50.852 --> 00:28:55.978
интеллект, который может прогнозировать
нагрузку и по своим прогнозам

00:28:56.002 --> 00:29:01.960
увеличивает, либо уменьшает количество
инстансов в нашей Auto Scaling Group-е.

00:29:01.960 --> 00:29:08.800
Давайте рассмотрим самый популярный пример
при настройке динамического масштабирования.

00:29:08.800 --> 00:29:17.347
Это связка ELB, CloudWatch и EC2 Auto Scaling. Все
начинается с того, что у вас есть Auto Scaling Group,

00:29:17.371 --> 00:29:26.720
она привязана к ELB и ваши таргеты, то есть EC2
инстансы, отправляют метрики в Amazon CloudWatch.

00:29:26.720 --> 00:29:32.531
На стороне CloudWatch у вас есть
настроенный alarm, при превышении,

00:29:32.555 --> 00:29:37.837
например, CPU нагрузки больше
чем на 60% в течение 5 минут,

00:29:37.861 --> 00:29:44.159
соответственно, CloudWatch отправляет
соответствующую команду EC2 Auto

00:29:44.183 --> 00:29:50.480
Scaling, которая добавляет
дополнительный инстанс в Auto Scaling Group.

00:29:50.480 --> 00:30:00.088
Как только инстанс добавляется в Auto Scaling Group,
отправляется команда для Elastic Load Balancer,

00:30:00.112 --> 00:30:09.720
чтобы зарегистрировать новый таргет внутри Auto
Scaling Group и направлять трафик в этот инстанс.

00:30:09.720 --> 00:30:17.000
Этот процесс происходит на постоянной
основе и все начинается с alarm.

00:30:17.000 --> 00:30:21.528
Я напоминаю, что для того, чтобы
настроить alarm, необходимо, чтобы у вас

00:30:21.552 --> 00:30:26.080
были настроены соответствующие метрики
и собиралась необходимая информация.

00:30:26.080 --> 00:30:32.560
Вместо CPU нагрузки мы можем взять
абсолютно любой другой показатель.

00:30:32.560 --> 00:30:37.480
Мы можем взять для настройки alarm
несколько метрик, это тоже возможно.

00:30:37.480 --> 00:30:46.654
Мы все это время с вами говорили про сервис
EC2 Auto Scaling. Здесь же есть очень похожий по

00:30:46.678 --> 00:30:56.760
названию и по смыслу сервис AWS Auto Scaling.
Этот сервис поддерживает большее количество сервисов.

00:30:56.760 --> 00:31:06.327
Помимо поддержки EC2 инстансов, он умеет работать
с Elastic Container Service, с Docker-контейнерами,

00:31:06.351 --> 00:31:15.440
с DynamoDB, а именно с таблицами и индексами,
а также работает с Aurora, а именно с репликами.

00:31:15.440 --> 00:31:23.208
Таким образом, все указанные сервисы и
ресурсы могут масштабироваться с использованием

00:31:23.232 --> 00:31:31.000
сервиса AWS Auto Scaling. На этом мы
заканчиваем третью часть сегодняшней нашей лекции.

00:31:31.000 --> 00:31:36.880
Подробнее поговорили про сервис Amazon
EC2 Auto Scaling, а также AWS Auto Scaling.

00:31:36.880 --> 00:31:41.728
Они отличаются тем, что второй
поддерживает большее количество сервисов,

00:31:41.752 --> 00:31:46.120
а первый Amazon EC2 Auto Scaling
больше заточен под сервис EC2.

00:31:46.120 --> 00:31:52.344
Связка EC2 Auto Scaling, CloudWatch,
а также ELB, дает возможность

00:31:52.368 --> 00:31:57.824
превратить вашу инфраструктуру
в живой организм, который

00:31:57.848 --> 00:32:03.780
автоматически масштабируется
в зависимости от нагрузки на ваше

00:32:03.804 --> 00:32:10.320
приложение. На этом мы прошли
все секции сегодняшней нашей лекции.

00:32:10.320 --> 00:32:14.928
Давайте остановимся на самых 
основных моментах. В самом начале

00:32:14.952 --> 00:32:19.560
мы прошли и познакомились с сервисом
Amazon Elastic Load Balancing.

00:32:19.560 --> 00:32:28.200
Это сервис, который дает возможность распределять
нашу нагрузку на вычислительные ресурсы.

00:32:28.200 --> 00:32:33.467
Есть три вида. ALB Application Load 
Balancing, NLB Network Load Balancer

00:32:33.491 --> 00:32:38.758
и Classic Load Balancer, 
предыдущее поколение,

00:32:38.782 --> 00:32:43.959
которое на текущий момент
недоступно для создания, но для

00:32:43.983 --> 00:32:49.160
обратной совместимости
доступно для старых инфраструктур.

00:32:49.160 --> 00:32:54.372
Дальше мы поговорили про сервис CloudWatch.
Это тот сервис, который

00:32:54.396 --> 00:33:00.320
предоставляет инструменты для
мониторинга всей нашей инфраструктуры в AWS.

00:33:00.320 --> 00:33:06.680
После чего познакомились с парой
сервисов для автомасштабирования.

00:33:06.680 --> 00:33:11.579
Это Amazon EC2 Auto Scaling, которая
работает сервисом EC2, а также Amazon Auto

00:33:11.603 --> 00:33:16.880
Scaling, который работает с большим
количеством сервисов, но смысл остается тот же.

00:33:16.880 --> 00:33:24.268
Связка из трех сервисов ELB,
CloudWatch и Auto Scaling позволяет

00:33:24.292 --> 00:33:31.680
настроить динамическое масштабирование
нашей инфраструктуры в AWS.

00:33:31.680 --> 00:33:36.885
На этом мы подошли к концу сегодняшней 
нашей лекции. Я очень надеюсь,

00:33:36.909 --> 00:33:41.960
что вы получили более полное
представление о пройденных сервисах.

00:33:41.960 --> 00:33:48.294
Если будут вопросы, пишите в наши групповые чаты.
И самые интересные вопросы будут

00:33:48.318 --> 00:33:55.200
опубликованы в наших Q&amp;A сессиях. На этом с 
вами прощаюсь. Спасибо большое за внимание.

00:33:55.200 --> 00:33:59.520
Увидимся с вами на следующих наших активностях.
