WEBVTT

00:00:00.000 --> 00:00:02.900
Добрый день, уважаемые студенты!

00:00:02.900 --> 00:00:05.840
Я рад вас всех видеть на очередной лекции.

00:00:05.840 --> 00:00:09.600
Тема сегодняшней лекции это хранение, то есть storage.

00:00:09.600 --> 00:00:10.600
Итак, давайте начнем.

00:00:10.600 --> 00:00:16.880
Сегодняшняя лекция состоит из четырех секций.

00:00:16.880 --> 00:00:21.400
Мы разберем четыре самые основные сервисы, связанные

00:00:21.400 --> 00:00:22.400
с хранением.

00:00:22.400 --> 00:00:27.760
Это Elastic Block Store, то есть жесткий диск, который мы

00:00:27.760 --> 00:00:29.800
привязываем к EC2 Instance.

00:00:29.800 --> 00:00:33.520
Далее это сервис S3 для объектного хранения.

00:00:33.520 --> 00:00:38.240
После чего разберем EFS, Elastic File System, сервис, который

00:00:38.240 --> 00:00:43.360
предоставляет нам жесткие диски с общим доступом для

00:00:43.360 --> 00:00:45.640
нескольких EC2 Instance.

00:00:45.640 --> 00:00:51.120
И самым последним разберем S3 Glacier, это объектное хранение,

00:00:51.120 --> 00:00:54.080
объектное холодное хранение.

00:00:54.080 --> 00:00:58.780
Есть определенные use-кейсы, когда нам необходим этот

00:00:58.780 --> 00:01:00.560
вариант IT ресурса.

00:01:00.560 --> 00:01:08.880
Итак, мы с вами начинаем с Elastic Block Store.

00:01:08.880 --> 00:01:12.360
Чаще всего вы будете видеть этот сервис как Amazon EBS в

00:01:12.360 --> 00:01:13.920
сокращенном варианте.

00:01:13.920 --> 00:01:16.440
Итак, что же такое Amazon EBS?

00:01:16.440 --> 00:01:20.400
Это постоянное блочное хранение, то есть жесткие

00:01:20.400 --> 00:01:24.120
диски, которые вы подключаете к вашим EC2 Instance.

00:01:24.120 --> 00:01:26.620
Под постоянным имеется в виду при отключении вашего

00:01:26.620 --> 00:01:30.720
Instance, данные на жестких дисках, они сохраняются.

00:01:30.720 --> 00:01:38.240
Также жесткие диски EBS это то место, куда устанавливается

00:01:38.240 --> 00:01:43.920
операционная система на вашем EC2 Instance.

00:01:43.920 --> 00:01:50.520
Для высокой доступности Amazon EBS реплицирует ваши

00:01:50.520 --> 00:01:56.520
данные в несколько разных ресурсах, прозрачным для

00:01:56.520 --> 00:02:00.360
вас в рамках текущей availability зоны.

00:02:00.360 --> 00:02:06.340
Таким образом, поломка жесткого диска, она для вас

00:02:06.340 --> 00:02:11.160
прозрачна и Amazon берет на себя поддержку и гарантию

00:02:11.160 --> 00:02:15.040
того, что ваши EBS volume доступны и с ними ничего не происходит.

00:02:15.040 --> 00:02:23.120
Также здесь следует отметить, что с EBS вы можете выделить

00:02:23.120 --> 00:02:26.440
необходимое количество гигабайтов для ваших жестких

00:02:26.440 --> 00:02:29.480
дисков и по необходимости увеличивать либо уменьшать

00:02:29.480 --> 00:02:32.640
для того, чтобы оплачивать только за то, что вы используете.

00:02:32.640 --> 00:02:37.120
Есть два типа хранения.

00:02:37.120 --> 00:02:40.440
Мы с вами говорим, что EBS это блочное хранилище,

00:02:40.440 --> 00:02:43.040
а S3, например, это объектное хранилище.

00:02:43.040 --> 00:02:44.920
Чем же оно отличается?

00:02:44.920 --> 00:02:49.280
Давайте рассмотрим на примере изменения одного символа

00:02:49.280 --> 00:02:51.680
в файле с размером 1 гигабайт.

00:02:51.680 --> 00:02:54.640
То есть вы представляете, какой объем символов внутри

00:02:54.640 --> 00:02:59.400
этого одного файла и что же происходит, когда вы

00:02:59.400 --> 00:03:01.800
меняете только один символ.

00:03:01.800 --> 00:03:05.840
Когда мы говорим про блочное хранилище, вы изменяете

00:03:05.840 --> 00:03:11.520
конкретное место в этом жестком диске, только необходимую

00:03:11.520 --> 00:03:12.920
ячейку памяти.

00:03:12.920 --> 00:03:16.880
Когда мы говорим про объектное хранилище, то для того,

00:03:16.880 --> 00:03:21.760
чтобы обновить один символ внутри этого большого файла,

00:03:21.760 --> 00:03:24.520
нам необходимо перезаписать весь этот файл.

00:03:24.520 --> 00:03:28.080
Таким образом, вы видите, что мы не можем частично

00:03:28.080 --> 00:03:35.600
менять файлы при объектном хранении, что увеличивает,

00:03:35.600 --> 00:03:40.080
требует большую пропускную способность, нежели блочное

00:03:40.080 --> 00:03:43.960
хранение, когда изменение файлов, вне зависимости

00:03:43.960 --> 00:03:51.640
от его размера, требует внесения изменения только

00:03:51.640 --> 00:03:53.040
в определенном месте.

00:03:53.040 --> 00:03:57.680
А вся остальная часть большого файла, она может оставаться

00:03:57.680 --> 00:03:58.680
нетронутой.

00:03:58.680 --> 00:04:01.920
И здесь возникают различного рода нюансы.

00:04:01.920 --> 00:04:07.240
Когда мы говорим про блочное хранилище, то мы работаем

00:04:07.240 --> 00:04:14.320
с... можем работать с меньшим пропускным каналом в сети.

00:04:14.320 --> 00:04:18.200
Когда мы говорим про объектное хранилище, то может потребуется

00:04:18.200 --> 00:04:19.680
более широкий канал.

00:04:19.680 --> 00:04:26.400
Но с другой стороны, цена за хранение гигабайта

00:04:26.400 --> 00:04:34.400
данных в блочном хранении может быть на порядок дороже,

00:04:34.400 --> 00:04:35.920
чем объектное хранилище.

00:04:35.920 --> 00:04:39.000
Таким образом, в зависимости от вашей бизнес-задачи,

00:04:39.000 --> 00:04:43.680
вы будете выбирать... принципиально для себя вы работаете

00:04:43.680 --> 00:04:47.160
с блочным хранилищем, либо с объектом хранилищем.

00:04:47.160 --> 00:04:49.800
Еще один важный момент, который следует отметить,

00:04:49.800 --> 00:04:54.440
это то, что при частой перезаписи лишь небольшое

00:04:54.440 --> 00:05:01.800
части ваших файлов, возможно, говорит о том, что следует

00:05:01.800 --> 00:05:03.840
использовать блочное хранилище.

00:05:03.840 --> 00:05:08.320
Когда вы работаете с небольшими маленькими, например, JSON

00:05:08.320 --> 00:05:11.720
файлами, когда большая часть этого файла меняется,

00:05:11.720 --> 00:05:16.560
либо размер этих файлов не такой большой, то объектное

00:05:16.560 --> 00:05:22.800
хранилище может быть для вас лучшим вариантом.

00:05:22.800 --> 00:05:27.920
Давайте пройдемся по основным преимуществам использования

00:05:27.920 --> 00:05:29.480
сервиса Amazon EBS.

00:05:29.480 --> 00:05:33.680
Это то, что этот сервис предоставляет вам возможность

00:05:33.680 --> 00:05:36.640
индивидуально создавать жесткие диски для ваших

00:05:36.640 --> 00:05:37.640
EC2-инстанцев.

00:05:37.640 --> 00:05:44.320
Также мы говорим, что это хранение блочного уровня,

00:05:44.320 --> 00:05:50.520
и все жесткие диски прозрачно для вас реплицируются внутри

00:05:50.520 --> 00:05:52.280
той же availability-зоны.

00:05:52.280 --> 00:05:55.280
Таким образом, поломка физически одного жесткого

00:05:55.280 --> 00:05:59.160
диска, она для вас прозрачна, так как происходит автоматическое

00:05:59.160 --> 00:06:04.720
переключение на копию внутри той же availability-зоны, и

00:06:04.720 --> 00:06:08.600
ваш EC2-инстанц продолжает работать без перебоев.

00:06:08.600 --> 00:06:14.920
Также есть возможность делать некие снапшоты,

00:06:14.920 --> 00:06:19.480
то есть образы ваших жестких дисков, которые сохраняются

00:06:19.480 --> 00:06:21.200
в сервисе Amazon S3.

00:06:21.200 --> 00:06:25.320
С этих снапшотов вы далее можете восстанавливать

00:06:25.320 --> 00:06:32.000
ваши жесткие диски и поднимать новые EC2-инстанцы.

00:06:32.000 --> 00:06:37.480
Существует четыре типа жестких дисков внутри сервиса Amazon

00:06:37.480 --> 00:06:38.480
EBS.

00:06:38.480 --> 00:06:41.200
Подразделяются на две категории.

00:06:41.200 --> 00:06:45.120
Первые это SSD, другие это HDD.

00:06:45.120 --> 00:06:47.760
SSD мы все знаем быстрее.

00:06:47.760 --> 00:06:50.560
Внутри SSD делится тоже на два вида.

00:06:50.560 --> 00:06:54.200
Это general purpose, то есть общего назначения, то есть процентов

00:06:54.200 --> 00:06:59.080
90-95 случаев general purpose для вас подходящий вариант.

00:06:59.080 --> 00:07:03.440
Когда мы говорим provisioned IOPS, это та опция, тот тип

00:07:03.440 --> 00:07:08.040
жестких дисков, который предоставляет вам больший

00:07:08.040 --> 00:07:12.560
канал IOPS, то есть операции записи и чтения на ваши

00:07:12.560 --> 00:07:13.760
жесткие диски.

00:07:13.760 --> 00:07:17.600
Если ваше приложение активно записывает и читается с

00:07:17.600 --> 00:07:21.640
жестких дисков, то provisioned IOPS может быть опцией для

00:07:21.640 --> 00:07:22.640
вас.

00:07:22.640 --> 00:07:26.080
Здесь следует отметить, что provisioned IOPS намного дороже

00:07:26.080 --> 00:07:30.880
стоит, чем general purpose, поэтому рекомендуется всегда начинать

00:07:30.880 --> 00:07:32.160
с general purpose.

00:07:32.160 --> 00:07:37.000
Если вам нужно больше IOPS, больше производительность

00:07:37.000 --> 00:07:41.840
жестких дисков, то в этом случае есть смысл рассматривать

00:07:41.840 --> 00:07:43.600
provisioned IOPS.

00:07:43.600 --> 00:07:48.680
Когда мы говорим про жесткие диски для установки операционной

00:07:48.680 --> 00:07:52.280
системы, то это всегда SSD, либо general purpose, либо provisioned

00:07:52.280 --> 00:07:53.280
IOPS.

00:07:53.280 --> 00:07:59.800
Таким образом, вторая группа, то есть HDD, жесткие диски

00:07:59.800 --> 00:08:03.640
предыдущего поколения, они не могут быть использованы

00:08:03.640 --> 00:08:06.560
для установки операционной системы.

00:08:06.560 --> 00:08:11.160
Вы можете использовать эти жесткие диски как дополнительное

00:08:11.160 --> 00:08:15.080
хранилище, дополнительное жесткие диски для хранения,

00:08:15.080 --> 00:08:17.960
для дешевого хранения некоторых данных.

00:08:17.960 --> 00:08:22.160
Есть два варианта, это root put optimized и cold.

00:08:22.160 --> 00:08:25.880
Когда мы говорим root put optimized, это оптимальный вариант

00:08:25.880 --> 00:08:33.360
в рамках этой группы HDD, то есть hard disk drives, и подходит

00:08:33.360 --> 00:08:36.480
в большинстве случаев для стандартных нагрузок,

00:08:36.480 --> 00:08:39.080
опять же для целей хранения.

00:08:39.080 --> 00:08:42.600
Когда мы говорим про холодное хранение, то есть если у

00:08:42.600 --> 00:08:47.760
вас приложения нетребовательны к операциям чтения и записи

00:08:47.760 --> 00:08:52.160
на жесткие диски, то для того, чтобы сократить расходы

00:08:52.160 --> 00:08:56.640
на конкретный сервис VBS, то рекомендуется рассмотреть

00:08:56.640 --> 00:09:02.760
опцию cold, которая по производительности чуть хуже, но при этом по

00:09:02.760 --> 00:09:05.280
стоимости также стоит дешевле.

00:09:05.280 --> 00:09:08.280
Актуальные цены вы всегда можете посмотреть на официальной

00:09:08.280 --> 00:09:13.480
странице сервиса во вкладке pricing.

00:09:13.480 --> 00:09:16.000
Давайте теперь подробнее рассмотрим, какие же есть

00:09:16.000 --> 00:09:22.320
use cases для каждого типа жестких дисков EBS.

00:09:22.320 --> 00:09:27.000
Когда мы говорим general purpose, из того, что можно дополнительно

00:09:27.000 --> 00:09:31.720
отметить, это как использование виртуал десктопс, это когда

00:09:31.720 --> 00:09:34.320
у вас есть удаленный рабочий стол и ваши сотрудники

00:09:34.320 --> 00:09:35.320
работают там.

00:09:35.320 --> 00:09:40.640
Еще один пример, который стоит упомянуть, general purpose

00:09:40.640 --> 00:09:47.920
также следует применять для ваших development и тестовых

00:09:47.920 --> 00:09:48.920
сред.

00:09:48.920 --> 00:09:53.600
То есть обычно, когда это не продакшн среда, то нагрузки

00:09:53.600 --> 00:09:56.740
там минимальные, обычно эти нагрузки искусственные,

00:09:56.740 --> 00:10:04.800
поэтому для целей тестирования и разработки дешевый вариант,

00:10:04.800 --> 00:10:06.840
который мы можем использовать для установки операционной

00:10:06.840 --> 00:10:10.600
системы, рекомендуется применять этот general purpose.

00:10:10.600 --> 00:10:15.960
Далее, если мы говорим про Visioned IOPS, это те приложения,

00:10:15.960 --> 00:10:20.920
которые сильно зависят от операции чтения и записи

00:10:20.920 --> 00:10:23.080
на ваши жесткие диски.

00:10:23.080 --> 00:10:28.360
Как пример, может быть, у вас на вашем EC2 установлена

00:10:28.360 --> 00:10:31.840
база данных, то есть вы решили по тем или иным причинам

00:10:31.840 --> 00:10:38.760
не использовать Service Managed Database RDS, а решили самостоятельно

00:10:38.760 --> 00:10:42.640
установить на виртуальный сервер вашу базу данных

00:10:42.640 --> 00:10:43.640
и там работать.

00:10:43.640 --> 00:10:48.720
В этом случае база данных – это тот пример, когда

00:10:48.720 --> 00:10:52.520
операции чтения и записи выше среднего.

00:10:52.520 --> 00:10:55.320
Таким образом, Provisioned IOPS больше подходит в этом

00:10:55.320 --> 00:10:56.320
случае.

00:10:56.320 --> 00:11:01.760
Если мы говорим про следующий третий вид, это throughput optimized,

00:11:01.760 --> 00:11:07.120
как примеры могут быть работа с Big Data, работа с Data Warehouse,

00:11:07.120 --> 00:11:12.520
то есть склад данных, обработка логов и так далее.

00:11:12.520 --> 00:11:18.880
Если мы говорим про cold, это все те опции, когда нам

00:11:18.880 --> 00:11:26.120
необходимо сократить расходы на хранение, либо у нас

00:11:26.120 --> 00:11:30.960
достаточно большой объем данных, которые не часто

00:11:30.960 --> 00:11:31.960
запрашиваются.

00:11:31.960 --> 00:11:38.280
В этом случае cold – опция, тип жестких дисков наиболее

00:11:38.280 --> 00:11:40.560
подходит.

00:11:40.560 --> 00:11:45.000
Давайте отметим еще парочку преимуществ использования

00:11:45.000 --> 00:11:47.640
сервиса Amazon EBS.

00:11:47.640 --> 00:11:48.880
Касательно снапшотов.

00:11:48.880 --> 00:11:52.320
Мы говорили, что снапшот – это некая сохраненная

00:11:52.320 --> 00:11:57.920
копия вашего жесткого диска и оно привязывается к определенному

00:11:57.920 --> 00:11:58.920
времени.

00:11:58.920 --> 00:12:02.640
Можно настроить ежедневные, ежедневные, либо более

00:12:02.640 --> 00:12:08.760
сложный график создания снапшотов ваших жестких

00:12:08.760 --> 00:12:09.760
дисков.

00:12:09.760 --> 00:12:15.520
И когда создается самый первый снапшот, то оно

00:12:15.520 --> 00:12:18.720
называется baseline snapshot, то есть он сохраняет полностью

00:12:18.720 --> 00:12:20.080
весь жесткий диск.

00:12:20.080 --> 00:12:24.200
Так как мы работаем с блочным хранилищем, то у нас есть

00:12:24.200 --> 00:12:27.960
возможность все следующие снапшоты не хранить всю

00:12:27.960 --> 00:12:31.600
целую копию жесткого диска, а лишь сохранить изменения

00:12:31.600 --> 00:12:35.880
с последнего снапшота.

00:12:35.880 --> 00:12:39.880
Таким образом, размер ваших снапшотов, представим,

00:12:39.880 --> 00:12:42.840
что у вас есть 10 снапшотов на каждый день за последние

00:12:42.840 --> 00:12:43.840
10 дней.

00:12:43.840 --> 00:12:47.000
И это не говорит о том, что при размере, например,

00:12:47.000 --> 00:12:50.440
10 гигабайтов вашего жесткого диска, то все 10 снапшотов

00:12:50.440 --> 00:12:53.480
будут весить 100 гигабайтов, то есть 10 умноженные на

00:12:53.480 --> 00:12:54.480
10.

00:12:54.480 --> 00:12:58.080
А наоборот, первый будет весить только 10 гигабайтов,

00:12:58.080 --> 00:13:01.080
а все последующие будут хранить лишь изменения.

00:13:01.080 --> 00:13:05.040
Если мы говорим о том, что ваш жесткий диск не менялся

00:13:05.040 --> 00:13:09.920
сильно, то может получиться так, что все оставшиеся

00:13:09.920 --> 00:13:15.600
ваши снапшоты, все оставшиеся 9 снапшотов могут весить

00:13:15.600 --> 00:13:21.600
меньше 1 гигабайта.

00:13:21.600 --> 00:13:25.240
Если мы говорим про шифрование, то оно также доступно.

00:13:25.240 --> 00:13:30.840
Вы можете подключить сервис KMS для шифрования ваших

00:13:30.840 --> 00:13:36.120
жестких дисков, и доступно это в рамках сервиса EBS

00:13:36.120 --> 00:13:37.840
без дополнительной платы.

00:13:37.840 --> 00:13:41.240
Вы лишь оплачиваете отдельно за сервис KMS за использование

00:13:41.240 --> 00:13:43.760
и создание ключей шифрования.

00:13:43.760 --> 00:13:48.720
Если мы говорим про эластичность, то здесь следует отметить,

00:13:48.720 --> 00:13:53.920
что размер вашего жесткого диска может динамически

00:13:53.920 --> 00:13:54.920
меняться.

00:13:54.920 --> 00:13:59.340
И более того, вы можете даже не останавливать ваш

00:13:59.340 --> 00:14:02.480
инстанс, а динамически увеличить размер вашего жесткого

00:14:02.480 --> 00:14:03.480
диска.

00:14:03.480 --> 00:14:08.360
Также есть возможность менять тип жестких дисков

00:14:08.360 --> 00:14:09.360
динамически.

00:14:09.360 --> 00:14:14.360
То есть нет необходимости вам заниматься копированием

00:14:14.360 --> 00:14:17.620
от одного жесткого диска на другой жесткий диск другого

00:14:17.620 --> 00:14:20.840
типа, а лишь достаточно вызвать соответствующую

00:14:20.840 --> 00:14:24.280
команду по изменению типа, и все необходимые действия

00:14:24.280 --> 00:14:29.200
будут произведены на стороне AWS.

00:14:29.200 --> 00:14:32.640
Из чего складывается оплата за сервис EBS?

00:14:32.640 --> 00:14:34.960
Оно состоит из четырех составляющих.

00:14:34.960 --> 00:14:36.720
Первое это объемы.

00:14:36.720 --> 00:14:41.880
То есть вы оплачиваете за гигабайт ежемесячно

00:14:41.880 --> 00:14:46.760
суммарно за суммарное количество гигабайтов на всех ваших

00:14:46.760 --> 00:14:47.760
жестких дисков.

00:14:47.760 --> 00:14:50.440
Далее это IOPs.

00:14:50.440 --> 00:14:55.320
То есть если мы говорим про General Purpose SSD, то цена

00:14:55.320 --> 00:15:02.680
за IOPs она включена в оплату за Volume.

00:15:02.680 --> 00:15:06.480
Если мы говорим про Magnetic, вы дополнительно оплачиваете

00:15:06.480 --> 00:15:11.320
за каждый request input output операции.

00:15:11.320 --> 00:15:16.000
Если мы говорим про Visioned IOPs, то вы оплачиваете дополнительно

00:15:16.000 --> 00:15:19.920
за объем IOPs, который вы для себя указали.

00:15:19.920 --> 00:15:25.480
Следующая категория это снапшоты.

00:15:25.480 --> 00:15:29.840
То есть снапшоты это копия ваших жестких дисков, которая

00:15:29.840 --> 00:15:33.880
хранится в сервисе Amazon S3.

00:15:33.880 --> 00:15:37.600
Таким образом вы будете оплачивать по тарифам

00:15:37.600 --> 00:15:44.740
S3 сумму в зависимости от объемов гигабайтов ваших

00:15:44.740 --> 00:15:49.220
снапшотов суммарно.

00:15:49.220 --> 00:15:57.280
Поэтому когда мы говорим про снапшоты, для экономии

00:15:57.280 --> 00:16:01.260
оплаты за хранение внутри S3 рекомендуется правильно

00:16:01.260 --> 00:16:06.720
настроить расписание создания снапшотов.

00:16:06.720 --> 00:16:10.120
То есть как пример вам нет необходимости создавать

00:16:10.120 --> 00:16:15.880
ежедневные снапшоты и хранить все снапшоты за последний

00:16:15.880 --> 00:16:16.880
год.

00:16:16.880 --> 00:16:23.160
А достаточно хранить ежедневные снапшоты за последнюю неделю.

00:16:23.160 --> 00:16:27.260
Далее от недели до одного месяца можно хранить снапшоты

00:16:27.260 --> 00:16:28.840
еженедельные.

00:16:28.840 --> 00:16:31.260
То есть еще три снапшота добавляются.

00:16:31.260 --> 00:16:34.880
Далее все те снапшоты, которые старше одного месяца

00:16:34.880 --> 00:16:38.040
до одного года можно хранить ежемесячно.

00:16:38.040 --> 00:16:42.880
Добавляется еще 11 снапшотов.

00:16:42.880 --> 00:16:48.000
Таким образом можно сэкономить на хранение ваших снапшотов,

00:16:48.000 --> 00:16:51.360
но при этом иметь достаточную гибкость в случае если

00:16:51.360 --> 00:16:54.520
вам нужно восстановить предыдущее состояние ваших

00:16:54.520 --> 00:16:57.080
снапшотов, ваших жестких дисков.

00:16:57.080 --> 00:16:59.560
И последнее это data transfer.

00:16:59.560 --> 00:17:06.560
То есть мы с вами помним, что мы за трансфер данных

00:17:06.560 --> 00:17:09.680
в рамках одного региона ничего не оплачиваем.

00:17:09.680 --> 00:17:12.920
Мы не оплачиваем за inbound traffic, то есть когда мы данные

00:17:12.920 --> 00:17:17.640
загружаем внутри AWS, но при этом если мы копируем

00:17:17.640 --> 00:17:22.720
наши жесткие EBS volume, жесткие диски с одного региона на

00:17:22.720 --> 00:17:26.020
другой, то здесь необходимо оплатить стандартную оплату

00:17:26.020 --> 00:17:29.160
за data transfer между двумя регионами.

00:17:29.160 --> 00:17:33.000
Далее уже скопированные жесткие диски на втором

00:17:33.000 --> 00:17:36.520
регионе уже будут оплачиваться по стандартным тарифам

00:17:36.520 --> 00:17:37.520
того региона.

00:17:37.520 --> 00:17:42.000
На этом мы подошли к концу первой секции.

00:17:42.000 --> 00:17:45.120
Давайте пройдемся по самым основным моментам сервиса

00:17:45.120 --> 00:17:46.480
Amazon EBS.

00:17:46.480 --> 00:17:50.040
Это сервис, который предоставляет вам блочное хранилище.

00:17:50.040 --> 00:17:53.200
Простыми словами это жесткие диски, которые вы подключаете

00:17:53.200 --> 00:17:55.600
к вашим Amazon EC2 Instance.

00:17:55.600 --> 00:17:58.840
На этих жестких дисках устанавливается операционная

00:17:58.840 --> 00:18:03.560
система, а также вы можете подключать дополнительные

00:18:03.560 --> 00:18:07.320
жесткие диски для целей хранения.

00:18:07.320 --> 00:18:12.440
Выделяют две группы типов жестких дисков, это HDD, которые

00:18:12.440 --> 00:18:14.920
медленные, но дешевле.

00:18:14.920 --> 00:18:19.520
И второй вариант это SSD, более продвинутый вариант,

00:18:19.520 --> 00:18:22.360
работает быстрее, но при этом стоит дороже.

00:18:22.360 --> 00:18:26.400
Здесь важный момент, вы для установки операционной

00:18:26.400 --> 00:18:31.440
системы можете выбрать только тип SSD.

00:18:31.440 --> 00:18:35.160
Все ваши жесткие диски прозрачно для вас реплицируются

00:18:35.160 --> 00:18:37.520
внутри той же availability зоны.

00:18:37.520 --> 00:18:41.320
Таким образом физическая поломка конкретного жесткого

00:18:41.320 --> 00:18:46.280
диска не отражается на работе вашего EC2 Instance, вашего приложения,

00:18:46.280 --> 00:18:50.120
так как происходит автоматическое переключение на реплику,

00:18:50.120 --> 00:18:53.040
то есть копию жесткого диска.

00:18:53.040 --> 00:18:59.320
Можно настроить шифрование, это происходит также прозрачно,

00:18:59.320 --> 00:19:01.920
нет никаких сложностей, подключается сервис KMS и

00:19:01.920 --> 00:19:07.480
они работают достаточно нативно совместно.

00:19:07.480 --> 00:19:10.760
Все ваши волыму, они могут быть динамически увеличены

00:19:10.760 --> 00:19:14.660
либо уменьшены в размере, а также вы с легкостью можете

00:19:14.660 --> 00:19:18.880
менять тип ваших жестких дисков.

00:19:18.880 --> 00:19:23.960
Когда мы говорим про backup ваших жестких дисков, то

00:19:23.960 --> 00:19:25.360
мы создаем снапшоты.

00:19:25.360 --> 00:19:29.400
Snapshot это копия ваших жестких дисков, хранящихся внутри

00:19:29.400 --> 00:19:34.500
сервиса Amazon S3.

00:19:34.500 --> 00:19:37.960
Мы переходим с вами ко второй части нашей лекции

00:19:37.960 --> 00:19:41.880
и поговорим про сервис Amazon Simple Storage Service.

00:19:41.880 --> 00:19:45.600
Чаще вы будете видеть название этого сервиса в сокращенном

00:19:45.600 --> 00:19:50.680
варианте Amazon S3.

00:19:50.680 --> 00:19:54.460
Amazon S3 это сервис, который предоставляет объектное

00:19:54.460 --> 00:19:57.440
хранилище для ваших данных.

00:19:57.440 --> 00:20:03.580
Мы с вами ранее упоминали, что при изменении даже

00:20:03.580 --> 00:20:07.640
одного символа внутри файла, для того чтобы обновить

00:20:07.640 --> 00:20:10.280
этот файл внутри объектного хранилища, необходимо

00:20:10.280 --> 00:20:11.920
его полностью перезагрузить.

00:20:11.920 --> 00:20:17.200
В зависимости от вашей бизнес задачи, вам нужно будет

00:20:17.200 --> 00:20:19.640
использовать либо блочное, либо объектное хранилище.

00:20:19.640 --> 00:20:25.720
Все ваши данные, которые хранятся в рамках S3, они

00:20:25.720 --> 00:20:28.880
организованы по бакетам.

00:20:28.880 --> 00:20:32.120
То есть, вы создаете некий бакет, внутри бакета уже

00:20:32.120 --> 00:20:34.160
заливаете ваши объекты.

00:20:34.160 --> 00:20:39.800
Вы можете создавать структуру из папок, оно на стороне

00:20:39.800 --> 00:20:43.600
AWS Management Console будет отображаться как структура папок, но

00:20:43.600 --> 00:20:51.280
на самом деле это хранение файлов с ключом, с путем

00:20:51.280 --> 00:20:55.360
до этого файла, который содержит в себе слеши.

00:20:55.360 --> 00:21:01.120
Таким образом, внутри под капотом это все происходит

00:21:01.120 --> 00:21:04.920
не как папки и файлы, а по-другому, но при этом

00:21:04.920 --> 00:21:07.920
отображение для удобства, для легкости восприятия

00:21:07.920 --> 00:21:13.040
и удобной работы вы можете видеть и работать как файлы

00:21:13.040 --> 00:21:17.160
и папки.

00:21:17.160 --> 00:21:21.560
Давайте пройдемся по основным преимуществам сервиса

00:21:21.560 --> 00:21:22.560
Amazon S3.

00:21:22.560 --> 00:21:26.640
Мы с вами говорили, что Amazon S3 это объектное хранилище,

00:21:26.640 --> 00:21:33.680
это сервис, который предоставляет дюрабилити, то есть надежность

00:21:33.680 --> 00:21:41.200
хранения ваших данных 99.99, либо по-другому говорят

00:21:41.200 --> 00:21:42.200
11.9.

00:21:42.200 --> 00:21:49.480
То есть практически 100% надежность хранения ваших данных

00:21:49.480 --> 00:21:54.120
и гарантирует вам, что вы свои данные не потеряете.

00:21:54.120 --> 00:21:56.400
Как это реализовано?

00:21:56.400 --> 00:22:03.800
Это реализовано следующим образом, в рамках сервиса

00:22:03.800 --> 00:22:07.960
S3 происходит прозрачная операция по репликации

00:22:07.960 --> 00:22:13.720
нескольких копиях всех объектов, которые вы храните

00:22:13.720 --> 00:22:14.920
внутри этого сервиса.

00:22:14.920 --> 00:22:20.080
Таким образом, когда происходит техническая поломка железа,

00:22:20.080 --> 00:22:26.360
которая хранит именно определенный ваш объект, то для последующего

00:22:26.360 --> 00:22:33.280
работы и в доступном состоянии для вас остаются реплики

00:22:33.280 --> 00:22:34.800
этого объекта.

00:22:34.800 --> 00:22:43.200
Далее происходит автоматическое понимание, что на стороне

00:22:43.200 --> 00:22:48.000
AWS под капотом что-то произошло с этим железом и все объекты,

00:22:48.000 --> 00:22:52.000
которые хранились в этом жестком диске, они еще раз

00:22:52.000 --> 00:22:55.280
реплицируются уже в другие жесткие диски.

00:22:55.280 --> 00:22:57.800
Таким образом, этот процесс автоматизирован на стороне

00:22:57.800 --> 00:23:04.720
AWS и благодаря вот этому процессу репликации достигается

00:23:04.720 --> 00:23:11.160
99.99% надежности хранения ваших данных.

00:23:11.160 --> 00:23:14.120
Если мы говорим про размер объектов, которые вы можете

00:23:14.120 --> 00:23:19.120
хранить, то максимальный размер, который вы можете

00:23:19.120 --> 00:23:24.520
сохранить внутри S3 может достигать 5 ТБ для одного

00:23:24.520 --> 00:23:25.520
объекта.

00:23:25.520 --> 00:23:30.400
Таким образом, вы внутри S3 можете хранить снапшоты

00:23:30.400 --> 00:23:38.120
ваших баз данных как объект.

00:23:38.120 --> 00:23:40.520
Amazon S3 является managed сервисом.

00:23:40.520 --> 00:23:46.080
Таким образом, вы не управляете никакой инфраструктурой,

00:23:46.080 --> 00:23:49.880
не делаете никаких настроек, а лишь вам предоставляется

00:23:49.880 --> 00:23:54.320
сервис в готовом виде и вы загружаете любое, фактически

00:23:54.320 --> 00:23:59.720
неограниченное количество объектов внутри этого сервиса.

00:23:59.720 --> 00:24:04.800
И все те процессы, которые должны быть выполнены для

00:24:04.800 --> 00:24:10.520
поддержания хранения ваших данных, они обеспечиваются

00:24:10.520 --> 00:24:16.560
AWS.

00:24:16.560 --> 00:24:20.400
Если мы говорим про шифрование, то можно настроить для

00:24:20.400 --> 00:24:25.960
сервиса S3 хранение как в покое, то есть at rest, также

00:24:25.960 --> 00:24:34.480
и in transit, то есть во время передачи данных.

00:24:34.480 --> 00:24:38.400
Другой интересный фичей S3 является настройка так

00:24:38.400 --> 00:24:40.960
называемых event notifications.

00:24:40.960 --> 00:24:46.720
То есть вы можете для определенных ивентов, связанных с сервисом

00:24:46.720 --> 00:24:50.800
S3, например это может быть загрузка нового файла,

00:24:50.800 --> 00:24:55.840
либо удаление файла, по определенному пути навесить

00:24:55.840 --> 00:25:00.920
на нее триггер и по триггеру либо настроить уведомления

00:25:00.920 --> 00:25:06.280
через сервис SNS, либо загрузку этого ивента в SQS для последующей

00:25:06.280 --> 00:25:07.280
обработки.

00:25:07.280 --> 00:25:12.400
Также вы можете передать это лямде для того, чтобы

00:25:12.400 --> 00:25:15.000
лямда напрямую получил этот ивент и произвела

00:25:15.000 --> 00:25:22.880
некоторые действия.

00:25:22.880 --> 00:25:26.480
Когда мы работаем сервисом S3, мы храним различного

00:25:26.480 --> 00:25:27.640
рода данные.

00:25:27.640 --> 00:25:36.080
Это в свою очередь говорит о том, что частота обращения,

00:25:36.080 --> 00:25:39.040
частота работы с этими данными, они могут сильно

00:25:39.040 --> 00:25:40.040
различаться.

00:25:40.040 --> 00:25:42.960
Некоторые данные вы будете запрашивать и возможно

00:25:42.960 --> 00:25:45.680
изменять, либо только читать каждый день.

00:25:45.680 --> 00:25:49.920
Некоторые данные вы возможно будете запрашивать раз

00:25:49.920 --> 00:25:57.000
в несколько месяцев, а некоторые данные, которые за всю жизнь

00:25:57.000 --> 00:26:00.600
существования этих данных могут быть не запрошены

00:26:00.600 --> 00:26:01.600
ни один раз.

00:26:01.600 --> 00:26:05.080
Есть такие данные, есть такие use case, как самый явный

00:26:05.080 --> 00:26:09.520
пример это по некоторым регуляторным требованиям,

00:26:09.520 --> 00:26:12.720
определенным положениям в зарегулированных сферах

00:26:12.720 --> 00:26:19.880
таких как финансовая сфера, медицина, государственный

00:26:19.880 --> 00:26:20.880
сектор.

00:26:20.880 --> 00:26:26.200
Это те направления, те сферы, где по некоторым регуляторным

00:26:26.200 --> 00:26:29.760
требованиям вам необходимо несколько лет, до 5-10 лет

00:26:29.760 --> 00:26:32.360
необходимо хранить эти данные, так как они могут

00:26:32.360 --> 00:26:33.360
быть востребованы.

00:26:33.360 --> 00:26:37.200
Если будут востребованы, то компания обязана предоставить

00:26:37.200 --> 00:26:38.840
некоторую информацию.

00:26:38.840 --> 00:26:48.360
Таким образом, ввиду того, что такие кейсы в целях

00:26:48.360 --> 00:26:51.360
регуляторных могут не возникнуть, то эти данные

00:26:51.360 --> 00:26:55.480
могут по большей своей части хранятся несколько

00:26:55.480 --> 00:27:01.040
лет, а потом по истечению необходимого минимального

00:27:01.040 --> 00:27:05.400
времени хранения могут быть успешно удалены.

00:27:05.400 --> 00:27:10.000
Давайте пройдемся теперь по типам хранения внутри

00:27:10.000 --> 00:27:15.360
S3, которые были специально разработаны для того, чтобы

00:27:15.360 --> 00:27:19.160
лучше подходить под ваши бизнес-задачи и при этом

00:27:19.160 --> 00:27:25.520
иметь возможность экономить более cost-effective решение

00:27:25.520 --> 00:27:28.440
сделать с помощью сервиса S3.

00:27:28.440 --> 00:27:33.200
Самый первый и самый популярный тип хранения, класс хранения

00:27:33.200 --> 00:27:35.720
это Amazon S3 Standard.

00:27:35.720 --> 00:27:40.800
Это тот класс хранения, который подходит для 90%

00:27:40.800 --> 00:27:49.480
плюс случаев и это тот класс, когда вы можете надежно,

00:27:49.480 --> 00:27:56.440
то есть 11 девяток хранить ваши данные, вы можете

00:27:56.440 --> 00:28:00.760
в режиме онлайн запрашивать ваши данные и соответственно

00:28:00.760 --> 00:28:05.240
для того, чтобы это все обеспечить, необходимы

00:28:05.240 --> 00:28:09.680
те или иные ресурсы, а вот все это оно формирует итоговую

00:28:09.680 --> 00:28:12.640
цену этого класса.

00:28:12.640 --> 00:28:21.800
Если мы хотим сделать наши расходы меньше, то мы можем

00:28:21.800 --> 00:28:25.640
рассмотреть следующий класс хранения, называется Amazon

00:28:25.640 --> 00:28:27.600
S3 Intelligent Tiering.

00:28:27.600 --> 00:28:36.080
Идея этого класса в том, что Amazon за вас анализирует,

00:28:36.080 --> 00:28:41.200
как часто происходит работа, обращение, перезапись каждого

00:28:41.200 --> 00:28:45.600
объекта внутри всех ваших бакетов, там где вы подключите

00:28:45.600 --> 00:28:52.120
этот класс и по своей внутренней логике переносит ваши объекты

00:28:52.120 --> 00:28:55.520
на уровне каждого объекта от одного класса хранения

00:28:55.520 --> 00:28:59.960
на другой, для того, чтобы сэкономить ваши расходы

00:28:59.960 --> 00:29:08.200
на сервис S3, при этом никак не меняя эффективность

00:29:08.200 --> 00:29:09.800
работы сервиса S3.

00:29:09.800 --> 00:29:13.120
То есть если ваши данные часто запрашиваются, должны

00:29:13.120 --> 00:29:16.360
быть доступны онлайн по требованию, то соответственно

00:29:16.360 --> 00:29:20.800
Intelligent Tiering ни в коем случае не переведет эти объекты

00:29:20.800 --> 00:29:28.400
в класс, который не может сразу извлечь ваши объекты.

00:29:28.400 --> 00:29:31.320
И обратный случай, когда он видит, что ваши объекты

00:29:31.320 --> 00:29:35.200
совсем не запрашиваются, то почему бы эти данные

00:29:35.200 --> 00:29:39.760
не перенести в класс хранения дешевле, но который может

00:29:39.760 --> 00:29:43.000
быть недоступен сразу или может быть в класс хранения,

00:29:43.000 --> 00:29:46.960
который менее надежен, но дешевле.

00:29:46.960 --> 00:29:56.400
Если мы говорим про следующий класс, это Standard Infrequent Access.

00:29:56.400 --> 00:30:02.200
Этот класс хранения отличается от стандартного тем, что

00:30:02.200 --> 00:30:07.640
здесь вы можете хранить дешевле ваши объекты,

00:30:07.640 --> 00:30:09.800
которые вы не часто запрашиваете.

00:30:09.800 --> 00:30:13.540
И когда мы говорим про стандартный класс, вы оплачиваете только

00:30:13.540 --> 00:30:17.240
за суммарное количество гигабайтов в месяц.

00:30:17.240 --> 00:30:21.840
Когда мы говорим Standard Infrequent Access, вы оплачиваете за суммарное

00:30:21.840 --> 00:30:27.800
количество гигабайтов данных, которых вы храните,

00:30:27.800 --> 00:30:31.960
при этом тариф за каждый гигабайт он ниже, то есть

00:30:31.960 --> 00:30:35.320
дешевле, но при этом добавляется еще один компонент, который

00:30:35.320 --> 00:30:40.080
формирует итоговую цену, это оплата за Retrieval fee,

00:30:40.080 --> 00:30:44.960
то есть за извлеченное количество гигабайтов, за каждый

00:30:44.960 --> 00:30:48.000
гигабайт, вы отдельно оплачиваете некоторую сумму.

00:30:48.000 --> 00:30:53.040
Таким образом, если вы положите ваши часто запрашиваемые

00:30:53.040 --> 00:30:56.520
данные в Infrequent Access, это будет очень невыгодно,

00:30:56.520 --> 00:31:01.640
вы будете переплачивать фактически ввиду того,

00:31:01.640 --> 00:31:06.640
что стоимость извлечения может быть больше стоимости

00:31:06.640 --> 00:31:10.560
хранения.

00:31:10.560 --> 00:31:13.480
И обратный случай, если у вас данные, которые вы

00:31:13.480 --> 00:31:17.000
не часто запрашиваете, то может получиться так,

00:31:17.000 --> 00:31:22.980
что за счет скидки за хранение и за счет того, что вы не

00:31:22.980 --> 00:31:27.240
так часто запрашиваете, итоговая сумма Standard Infrequent

00:31:27.240 --> 00:31:33.680
Access может быть выгоднее, чем Standard.

00:31:33.680 --> 00:31:37.440
Предыдущий класс хранения это One Zone Infrequent Access.

00:31:37.440 --> 00:31:40.240
Чем он отличается от предыдущих?

00:31:40.240 --> 00:31:46.160
Это тем, что ваши данные, они хранятся в рамках одной

00:31:46.160 --> 00:31:50.720
Availability зоны, тогда как предыдущие классы хранения

00:31:50.720 --> 00:31:55.020
Standard, Standard Infrequent Access и все другие, они хранятся

00:31:55.020 --> 00:31:58.360
как минимум в трех Availability зонах.

00:31:58.360 --> 00:32:01.680
За счет этого достигается надежность 11 девяток.

00:32:01.680 --> 00:32:07.200
Когда мы говорим про One Zone Infrequent Access, то это одна

00:32:07.200 --> 00:32:11.280
Availability зона, соответственно там не 11 девяток, а меньше.

00:32:11.280 --> 00:32:19.960
Этот класс хранения может быть идеальным вариантом,

00:32:19.960 --> 00:32:25.120
если вы храните данные, которые могут быть легко

00:32:25.120 --> 00:32:30.060
восстановлены, либо потеря которых некритична для

00:32:30.060 --> 00:32:31.280
вашего бизнеса.

00:32:31.280 --> 00:32:33.480
В этом случае вы можете хранить данные в одной

00:32:33.480 --> 00:32:36.720
Availability зоне, какая-то часть она может потеряться

00:32:36.720 --> 00:32:44.120
небольшая и при этом вы не так много, то есть намного

00:32:44.120 --> 00:32:48.800
меньше будете облачивать по сравнению с Standard класс

00:32:48.800 --> 00:32:52.800
хранения.

00:32:52.800 --> 00:32:56.560
Осталось еще два класса хранения, это Glacier.

00:32:56.560 --> 00:33:03.280
Это тот класс хранения, который позволяет вам надежно

00:33:03.280 --> 00:33:07.000
хранить данные, архивные данные, то есть те данные,

00:33:07.000 --> 00:33:09.800
которые вы скорее всего не будете запрашивать.

00:33:09.800 --> 00:33:13.560
Есть вероятность того, что вы эти данные запросите,

00:33:13.560 --> 00:33:18.240
но в большинстве случаев они так и останутся незапрошенными

00:33:18.240 --> 00:33:23.040
и вы лишь некоторый период данные должны хранить.

00:33:23.040 --> 00:33:31.680
S3 Glacier предоставляет самый дешевый тариф за гигабайт

00:33:31.680 --> 00:33:36.520
хранения данных, при этом вы не можете извлечь ваши

00:33:36.520 --> 00:33:39.120
данные сразу в режиме онлайн.

00:33:39.120 --> 00:33:42.120
Есть три опции как вы эти данные можете извлечь,

00:33:42.120 --> 00:33:50.600
это самый быстрый, который извлекает ваши данные

00:33:50.600 --> 00:33:54.360
в течение нескольких минут и самый медленный, для

00:33:54.360 --> 00:33:57.760
извлечения которых требуется несколько часов, но при

00:33:57.760 --> 00:34:02.400
этом понятно, что тот, который за минуту извлекает по

00:34:02.400 --> 00:34:05.960
тарифу стоит дороже, а тот, который за несколько часов

00:34:05.960 --> 00:34:08.560
будет извлекать ваши данные, он стоит дешевле.

00:34:08.560 --> 00:34:13.040
Но при этом помните, что когда мы работаем с Glacier

00:34:13.040 --> 00:34:16.120
и вы часто запрашиваете ваши данные, что неприемлемо

00:34:16.120 --> 00:34:21.160
для этого класса, то оплата за этот класс хранения

00:34:21.160 --> 00:34:25.960
может выйти дороже, чем стандартный класс хранения.

00:34:25.960 --> 00:34:30.440
Поэтому нужно знать какие данные, с какими данными

00:34:30.440 --> 00:34:34.840
вы работаете и соответственно настраивать life cycle policy,

00:34:34.840 --> 00:34:36.960
про который мы поговорим чуть попозже.

00:34:36.960 --> 00:34:41.840
И самый последний класс хранения это Glacier Deep Archive.

00:34:41.840 --> 00:34:46.880
Это те данные, которые вы можете хранить максимально

00:34:46.880 --> 00:34:51.520
дешево, это те данные, которые по регуляторным требованиям

00:34:51.520 --> 00:34:56.600
должны храниться несколько лет и обычно сюда относят

00:34:56.600 --> 00:35:01.440
данные, к которым вы обращаетесь возможно один или два раза

00:35:01.440 --> 00:35:02.440
в течение года.

00:35:02.440 --> 00:35:08.760
Эти данные идеально подходят для хранения в Glacier Deep Archive.

00:35:08.760 --> 00:35:15.040
Если мы говорим про извлечение данных, то данные обычно

00:35:15.040 --> 00:35:19.120
извлекаются не раньше, чем 12 часов, то есть в течение

00:35:19.120 --> 00:35:20.120
12 часов.

00:35:20.120 --> 00:35:26.440
Это нужно учитывать при работе с классами хранения

00:35:26.440 --> 00:35:31.800
Glacier и Glacier Deep Archive.

00:35:31.800 --> 00:35:34.520
Мы с вами двигаемся дальше.

00:35:34.520 --> 00:35:38.920
Повторю некоторые нюансы по работе с сервисом Amazon

00:35:38.920 --> 00:35:39.920
S3.

00:35:39.920 --> 00:35:43.600
Мы с вами сказали, что все наши данные организованы

00:35:43.600 --> 00:35:47.600
внутри бакетов и внутри бакетов вы создаете некое

00:35:47.600 --> 00:35:50.640
подобие структуры папок и файлов и храните ваши

00:35:50.640 --> 00:35:51.640
объекты.

00:35:51.640 --> 00:35:59.680
Бакеты, они именуются некоторым образом и вот это имя должно

00:35:59.680 --> 00:36:04.000
быть уникально для всего сервиса S3, глобально.

00:36:04.000 --> 00:36:10.640
То есть если представим, что в регионе US East One был

00:36:10.640 --> 00:36:17.440
создан бакет Ельжан Мауленов, то я не могу в другом регионе,

00:36:17.440 --> 00:36:22.760
например, EU West One, это европейский регион, не могу создать

00:36:22.760 --> 00:36:28.080
бакет с таким же именем, так как пул названий бакетов

00:36:28.080 --> 00:36:34.080
должен быть уникальный в рамках всего AWS глобально.

00:36:34.080 --> 00:36:37.960
Но есть нюанс касательно хранения.

00:36:37.960 --> 00:36:42.720
Когда мы создаем бакет, мы указываем, в каком регионе,

00:36:42.720 --> 00:36:45.880
какому региону будет относиться наш бакет.

00:36:45.880 --> 00:36:49.000
Это тот регион, где будут храниться ваши данные

00:36:49.000 --> 00:36:50.160
внутри этого бакета.

00:36:50.160 --> 00:36:55.960
То есть давайте приведу пример.

00:36:55.960 --> 00:37:01.000
Представим, что я создал бакет Ельжан Мауленов

00:37:01.000 --> 00:37:03.680
один в регионе Норс-Верженья.

00:37:03.680 --> 00:37:07.680
В этом случае все объекты, которые я буду туда заливать,

00:37:07.680 --> 00:37:10.560
они будут храниться на серверах, которые физически

00:37:10.560 --> 00:37:12.840
находятся в регионе Норс-Верженья.

00:37:12.840 --> 00:37:17.920
И также создал в AWS Management Console другой бакет, который

00:37:17.920 --> 00:37:20.920
называется Ельжан Мауленов два, но при этом как регион

00:37:20.920 --> 00:37:23.240
указал Токио.

00:37:23.240 --> 00:37:26.160
В этом случае все данные, которые все объекты, которые

00:37:26.160 --> 00:37:30.320
буду заливать в этот бакет, они будут храниться физически

00:37:30.320 --> 00:37:42.920
в рамках границ Токио.

00:37:42.920 --> 00:37:50.040
Здесь на слайде вы можете видеть пример двух вариантов

00:37:50.040 --> 00:37:52.920
ссылки до ваших объектов.

00:37:52.920 --> 00:37:58.040
То есть есть вариант bucket path style URL endpoint.

00:37:58.040 --> 00:38:04.080
Это когда у вас в начале идет стандартная часть,

00:38:04.080 --> 00:38:08.040
то есть s3.название региона.amazonaws.com.

00:38:08.040 --> 00:38:11.920
Дальше slash bucket name, slash и путь к вашему файлу.

00:38:11.920 --> 00:38:15.880
Есть другой вариант, это bucket virtual hosted style URL endpoint

00:38:15.880 --> 00:38:21.640
второй, когда название bucket name уже сидит в названии

00:38:21.640 --> 00:38:22.640
сайта.

00:38:22.640 --> 00:38:27.000
И через slash идет уже путь к вашему объекту.

00:38:27.000 --> 00:38:31.360
И тот и другой вариант рабочий и в зависимости от того,

00:38:31.360 --> 00:38:35.120
какой удобнее для вас вы выбираете.

00:38:35.120 --> 00:38:39.400
Если мы говорим касательно доступа к вашим объектам,

00:38:39.400 --> 00:38:42.580
то вы можете настроить на уровне бакета, а также

00:38:42.580 --> 00:38:46.640
на уровне каждого объекта внутри бакета соответствующие

00:38:46.640 --> 00:38:52.920
bucket policy, которые определяют кто, как может обращаться

00:38:52.920 --> 00:38:56.700
или какие операции может произведить на бакете либо

00:38:56.700 --> 00:39:02.560
на определенном объекте.

00:39:02.560 --> 00:39:07.640
Когда мы говорим про сервис Amazon S3, бакет у нас хранится

00:39:07.640 --> 00:39:09.400
в рамках одного региона.

00:39:09.400 --> 00:39:17.360
Также по мере необходимости вы можете загрузить очень

00:39:17.360 --> 00:39:20.840
маленький файл в один бакет и по необходимости этот

00:39:20.840 --> 00:39:23.880
бакет может увеличен на несколько терабайтов.

00:39:23.880 --> 00:39:27.600
Нет никаких ограничений и вы фактически будете оплачивать

00:39:27.600 --> 00:39:30.120
только за то, что вы используете.

00:39:30.120 --> 00:39:35.300
Также важный момент это то, что к S3 вы можете обращаться

00:39:35.300 --> 00:39:39.240
со всех возможных вариантов, а именно через AWS Management

00:39:39.240 --> 00:39:45.240
Console, через Command Line Interface, то есть Amazon CLI, а также AWS

00:39:45.240 --> 00:39:50.600
SDK, то есть Software Development Kit.

00:39:50.600 --> 00:39:56.120
Если мы говорим про use case сервиса Amazon S3, то мы можем

00:39:56.120 --> 00:40:00.640
использовать S3 для того, чтобы хранить некоторые

00:40:00.640 --> 00:40:04.560
файлы, media файлы, которые используют ваше приложение.

00:40:04.560 --> 00:40:11.080
Также мы можем хостить статический веб-сайт внутри S3, есть специальная

00:40:11.080 --> 00:40:12.080
фича для этого.

00:40:12.080 --> 00:40:17.840
S3 может выступать как местом хранения ваших бэкапов,

00:40:17.840 --> 00:40:21.640
снапшотов, также S3 может использоваться для disaster

00:40:21.640 --> 00:40:28.160
recovery, для хранения определенной части вашей инфраструктуры.

00:40:28.160 --> 00:40:32.480
Если вы работаете с большими данными, то соответственно

00:40:32.480 --> 00:40:37.400
S3 тоже может быть тем местом, домом ваших данных, где

00:40:37.400 --> 00:40:41.240
в связке с другими сервисами вы будете не только хранить

00:40:41.240 --> 00:40:44.880
эти данные, но и также получите возможность работать,

00:40:44.880 --> 00:40:47.960
обрабатывать, изменять и проводить некоторый анализ

00:40:47.960 --> 00:40:51.560
аналитику на основе этих данных.

00:40:51.560 --> 00:40:57.640
Когда мы говорим про прайсинг в рамках сервиса S3, то мы

00:40:57.640 --> 00:41:01.840
платим за количество гигабайтов, которые мы храним.

00:41:01.840 --> 00:41:06.120
Мы платим за data transfer, то есть трансфер данных от

00:41:06.120 --> 00:41:11.120
одного региона до другого региона, а также мы оплачиваем

00:41:11.120 --> 00:41:19.880
за количество запросов к сервису S3 для разного

00:41:19.880 --> 00:41:24.320
вида действий, то есть это может быть пул, копии, пост,

00:41:24.320 --> 00:41:27.320
лист либо get.

00:41:27.320 --> 00:41:32.080
Если говорить про то, что мы не оплачиваем, если данные

00:41:32.080 --> 00:41:37.240
передвигаются в рамках S3, за это оплата не идет.

00:41:37.240 --> 00:41:44.040
Также если мы передаем из S3 данные в CloudForm либо в

00:41:44.040 --> 00:41:47.360
наше EC2 инстанции в рамках того же региона, то также

00:41:47.360 --> 00:41:53.160
мы не должны ничего оплачивать PWS.

00:41:53.160 --> 00:41:56.840
На этом мы подошли к концу секции 2.

00:41:56.840 --> 00:42:00.120
Посмотрели подробно сервис Amazon S3, давайте пройдемся

00:42:00.120 --> 00:42:02.200
по самым основным моментам.

00:42:02.200 --> 00:42:07.000
� ежимируя мы говорим, что Amazon S3 это managed service для

00:42:07.000 --> 00:42:10.960
объектного хранения данных внутри облака AWS.

00:42:10.960 --> 00:42:15.080
Мы можем хранить неограниченное количество объектов, объекты

00:42:15.080 --> 00:42:18.480
наши хранятся внутри бакетов, мы оплачиваем только за

00:42:18.480 --> 00:42:21.480
то, что мы используем, то есть за тот объем данных,

00:42:21.480 --> 00:42:25.840
которые мы храним внутри сервиса S3.

00:42:25.840 --> 00:42:30.640
Мы можем обращаться в любое время с любого места, используя

00:42:30.640 --> 00:42:34.600
все возможные варианты для обращения, для доступа

00:42:34.600 --> 00:42:42.000
к нашим объектам внутри бакетов.

00:42:42.000 --> 00:42:45.960
Также есть достаточно широкий набор настроек безопасности

00:42:45.960 --> 00:42:50.520
для того, чтобы ваши данные были зашифрованы не только

00:42:50.520 --> 00:42:56.800
в состоянии хранения, но и в состоянии передачи.

00:42:56.800 --> 00:43:00.280
Мы с вами переходим к третьей части нашей лекции и к

00:43:00.280 --> 00:43:02.280
третьему сервису хранения.

00:43:02.280 --> 00:43:06.400
Это Amazon Elastic File System, либо чаще вы будете его встречать

00:43:06.400 --> 00:43:07.880
как Amazon EFS.

00:43:07.880 --> 00:43:11.600
Это тот сервис, который предоставляет вам жесткие

00:43:11.600 --> 00:43:20.040
диски, которые вы можете расшарить между несколькими

00:43:20.040 --> 00:43:22.040
EC2-инстанциями.

00:43:22.040 --> 00:43:26.920
Таким образом будет общий доступ, общее хранилище

00:43:26.920 --> 00:43:29.440
для пула ваших EC2-инстанций.

00:43:29.440 --> 00:43:36.760
Для некоторых бизнес задач это очень подходящий сервис.

00:43:36.760 --> 00:43:40.200
Здесь также мы оплачиваем только за то, что мы используем,

00:43:40.200 --> 00:43:44.120
то есть в зависимости от объема данных, которые

00:43:44.120 --> 00:43:47.960
находятся, при увеличении, соответственно, мы оплачиваем

00:43:47.960 --> 00:43:55.400
больше, при уменьшении наши расходы на сервис EFS уменьшаются.

00:43:55.400 --> 00:43:59.800
Если же мы говорим про основные фичи сервиса Amazon EFS, то это

00:43:59.800 --> 00:44:03.400
тот сервис, который предоставляет нам файловое хранилище

00:44:03.400 --> 00:44:05.920
внутри облака AWS.

00:44:05.920 --> 00:44:10.920
Это файловое хранилище, файловая система, она может

00:44:10.920 --> 00:44:17.800
быть масштабирована до размера терабайты, петабайты,

00:44:17.800 --> 00:44:20.680
при этом предоставлять высокую доступность.

00:44:20.680 --> 00:44:27.720
Это тот сервис, который предоставляет вам общее

00:44:27.720 --> 00:44:32.360
место, одно место, которое может быть доступно из

00:44:32.360 --> 00:44:37.280
нескольких EC2-инстанцев.

00:44:37.280 --> 00:44:43.320
� азмер жестких дисков, оно увеличивается и уменьшается,

00:44:43.320 --> 00:44:45.120
вы, соответственно, оплачиваете за тот объем на текущий

00:44:45.120 --> 00:44:48.360
момент, который вы используете.

00:44:48.360 --> 00:44:57.400
Есть поддержка NFC, то есть Network File System версии 4.0 и 4.1.

00:44:57.400 --> 00:45:04.560
А также следует отметить, что EFS поддерживает все

00:45:04.560 --> 00:45:09.520
операционные системы, базирующиеся на Linux.

00:45:09.520 --> 00:45:13.080
Здесь вы можете видеть пример архитектуры с использованием

00:45:13.080 --> 00:45:15.520
сервиса Amazon EFS.

00:45:15.520 --> 00:45:21.560
У нас есть VPC, у нас есть ресурсы в трех availability

00:45:21.560 --> 00:45:26.800
зонах, есть EC2-инстанцы в наших private либо public сабнетах,

00:45:26.800 --> 00:45:31.800
и, соответственно, у наших EC2-инстанцев есть Network Interface.

00:45:31.800 --> 00:45:36.520
Мы этот Elastic File System подключаем, монтируем к Network Interface,

00:45:36.520 --> 00:45:40.040
и, соответственно, у EC2-инстанцев появляется доступ на всех

00:45:40.040 --> 00:45:46.520
в трех availability зонах к одной файловой системе,

00:45:46.520 --> 00:45:53.000
общей для всех этих инстанцев в рамках всего VPC.

00:45:53.000 --> 00:45:57.240
На этом мы подошли к концу третьей секции нашей лекции,

00:45:57.240 --> 00:46:00.600
подробнее рассмотрели сервис Amazon EFS.

00:46:00.600 --> 00:46:03.600
Давайте остановимся на самых основных моментах.

00:46:03.600 --> 00:46:06.960
Amazon EFS – это тот сервис, который предоставляет вам

00:46:06.960 --> 00:46:11.480
файловую систему, которая может быть расшарена на

00:46:11.480 --> 00:46:12.960
несколько EC2-инстанцев.

00:46:12.960 --> 00:46:16.960
То есть это общее место, и в зависимости от вашей

00:46:16.960 --> 00:46:20.120
бизнес-одачи вам может потребуется подобные IT-ресурсы.

00:46:20.120 --> 00:46:30.320
Amazon EFS, с Amazon EFS вы оплачиваете только за тот объем информации,

00:46:30.320 --> 00:46:33.920
который вы храните в вашем EFS-жестком диске.

00:46:33.920 --> 00:46:40.240
То есть по модели Pay as you go.

00:46:40.240 --> 00:46:46.600
EFS является полностью managed-сервисом, таким образом вам нет необходимости

00:46:46.600 --> 00:46:49.880
поддерживать все то, что происходит под капотом,

00:46:49.880 --> 00:46:53.840
а лишь вы получаете готовый сервис, который можете

00:46:53.840 --> 00:46:59.080
использовать и достаточно быстро, буквально за пару

00:46:59.080 --> 00:47:06.640
кликов настраивать и интегрировать вашу IT-инфраструктуру.

00:47:06.640 --> 00:47:10.120
Мы с вами добрались до самой последней секции в рамках

00:47:10.120 --> 00:47:14.440
нашей лекции и подробнее поговорим про сервис Amazon

00:47:14.440 --> 00:47:15.440
S3 Glacier.

00:47:15.440 --> 00:47:20.080
Про него мы поговорили во второй части, здесь рассмотрим

00:47:20.080 --> 00:47:21.080
некоторые нюансы.

00:47:21.080 --> 00:47:28.640
Давайте остановимся с вами на основных фичах сервиса

00:47:28.640 --> 00:47:31.640
Amazon S3 Glacier.

00:47:31.640 --> 00:47:38.280
Это тот сервис, который используется для архивирования

00:47:38.280 --> 00:47:39.800
ваших данных.

00:47:39.800 --> 00:47:46.460
Оно также как и другие классы хранения сервиса S3, предоставляет

00:47:46.460 --> 00:47:49.120
высокую надежность, то есть 11 девяток.

00:47:49.120 --> 00:48:01.320
Glacier это опция хранения данных самым дешевым тарифом.

00:48:01.320 --> 00:48:05.000
Когда мы говорим Glacier, то мы должны быть готовы, что

00:48:05.000 --> 00:48:07.240
данные извлекаются не сразу.

00:48:07.240 --> 00:48:13.120
То есть есть три опции, это стандартные, bulk и expedited.

00:48:13.120 --> 00:48:17.120
Когда мы говорим expedited, это ускоренный вариант,

00:48:17.120 --> 00:48:20.440
данные могут быть извлечены в течение одной-пяти минуты.

00:48:20.440 --> 00:48:24.360
Это та опция, которая самая дорогая.

00:48:24.360 --> 00:48:26.640
Дальше идет стандартная опция, когда мы данные

00:48:26.640 --> 00:48:32.200
извлекаем в течение трех-пяти часов и стоит соответственно

00:48:32.200 --> 00:48:33.200
среднее.

00:48:33.200 --> 00:48:37.160
И самая дешевая опция, это когда мы используем

00:48:37.160 --> 00:48:39.960
опцию bulk, когда данные извлекаются от пяти до

00:48:39.960 --> 00:48:40.960
двенадцати часов.

00:48:40.960 --> 00:48:50.040
Если говорить про безопасность, то Glacier поддерживает SSL, TLS.

00:48:50.040 --> 00:48:55.800
Также что следует отметить, это vault lock feature.

00:48:55.800 --> 00:48:59.440
Для того, чтобы ее объяснить, давайте введем некоторые

00:48:59.440 --> 00:49:00.440
термины.

00:49:00.440 --> 00:49:02.880
Есть понятие archive, то есть архив.

00:49:02.880 --> 00:49:06.080
Это любой объект, это может быть медиафайл, текстовый

00:49:06.080 --> 00:49:07.080
файл.

00:49:07.080 --> 00:49:09.280
Тот объект, который вы хотите архивировать.

00:49:09.280 --> 00:49:18.400
Vault это набор архивов, которые вы храните вместе.

00:49:18.400 --> 00:49:22.900
Представьте, что vault это некий аналог zip архива

00:49:22.900 --> 00:49:25.360
на локальном нашем компьютере.

00:49:25.360 --> 00:49:28.760
И также есть такое понятие, как vault access policy.

00:49:28.760 --> 00:49:31.560
Это как раз таки vault lock feature.

00:49:31.560 --> 00:49:38.840
Идея в том, что вы можете привязать к вашему vault

00:49:38.840 --> 00:49:44.560
и access policy, который определяет, кто по каким условиям может

00:49:44.560 --> 00:49:47.960
или не может обратиться к объектам, которые хранятся

00:49:47.960 --> 00:49:49.480
внутри вашего vault.

00:49:49.480 --> 00:49:56.200
Vault дословно переводится как погреб либо подвал.

00:49:56.200 --> 00:50:01.560
Давайте подробнее остановимся о самых основных use case

00:50:01.560 --> 00:50:04.560
сервиса Amazon S3 Glacier.

00:50:04.560 --> 00:50:07.560
Первый это media asset archiving.

00:50:07.560 --> 00:50:12.400
Это когда мы храним некоторые данные, как видео, некоторые

00:50:12.400 --> 00:50:16.000
тексты информации, то есть какие-то новости, надежно

00:50:16.000 --> 00:50:19.640
и в большом объеме.

00:50:19.640 --> 00:50:22.440
Далее это healthcare information archiving.

00:50:22.440 --> 00:50:26.640
То есть это хранение больших объемов информации, которые

00:50:26.640 --> 00:50:27.800
из сферы медицины.

00:50:27.800 --> 00:50:32.600
То есть это информация о проведенных исследованиях,

00:50:32.600 --> 00:50:38.320
это информация о медицинской истории пациентов и так

00:50:38.320 --> 00:50:39.320
далее.

00:50:39.320 --> 00:50:45.880
Также здесь сюда могут относиться медицинские анализы, различные

00:50:45.880 --> 00:50:49.920
снимки и так далее, которые тоже оцифрованные и должны

00:50:49.920 --> 00:50:50.920
где-то храниться.

00:50:50.920 --> 00:50:56.640
Другой вариант это regulatory and compliance archiving.

00:50:56.640 --> 00:50:58.800
Это то, что мы ранее говорили.

00:50:58.800 --> 00:51:01.640
То есть в зависимости от сферы есть определенные

00:51:01.640 --> 00:51:09.520
требования по закону, такие как финансы, здравоохранение,

00:51:09.520 --> 00:51:13.520
государственный сектор, который обязан охранить

00:51:13.520 --> 00:51:16.080
данные в течение определенного периода.

00:51:16.080 --> 00:51:18.600
Эти данные должны храниться, так как они могут быть

00:51:18.600 --> 00:51:22.920
востребованы клиентами, пациентами и компания

00:51:22.920 --> 00:51:27.320
ведут некоторых законов положений, должна обязана

00:51:27.320 --> 00:51:29.040
предоставить эти данные.

00:51:29.040 --> 00:51:32.440
Соответственно она их удалить не может, но ему достаточно

00:51:32.440 --> 00:51:36.880
хранить определенный период, обычно несколько лет, от

00:51:36.880 --> 00:51:39.460
трех лет до десяти лет, после чего данные могут

00:51:39.460 --> 00:51:42.720
быть удалены.

00:51:42.720 --> 00:51:46.560
Еще один пример это хранение научных данных.

00:51:46.560 --> 00:51:50.840
То есть во время проведения некоторых наукоемких расчетов

00:51:50.840 --> 00:51:54.920
генерируется большой объем искусственно либо собирается

00:51:54.920 --> 00:51:58.000
большой объем данных для дальнейшего анализа.

00:51:58.000 --> 00:52:05.440
И для того, чтобы выгодно хранить эти данные, так

00:52:05.440 --> 00:52:11.640
чтобы они были и доступны, и при этом недорого хранились,

00:52:11.640 --> 00:52:19.160
то можно воспользоваться сервисом Estrig Glacier.

00:52:19.160 --> 00:52:28.080
Другой момент это то, что по старинке данные архивы,

00:52:28.080 --> 00:52:32.240
они хранятся на магнитных носителях, то есть в HDD дисках,

00:52:32.240 --> 00:52:35.600
и как только вы загружаете сюда данные, жесткие диски

00:52:35.600 --> 00:52:38.720
отключаются от системы и хранятся где-то там на

00:52:38.720 --> 00:52:39.720
полочке.

00:52:39.720 --> 00:52:44.560
Это не очень надежно, потому что жесткие диски они в

00:52:44.560 --> 00:52:49.120
виду конструкции своей могут размагнитиваться и соответственно

00:52:49.120 --> 00:52:50.120
данные теряются.

00:52:50.120 --> 00:52:55.560
Да, можно хранить данные в рейт-массивах, либо как-то

00:52:55.560 --> 00:52:58.960
попроще, реплицировать, хранить несколько копий,

00:52:58.960 --> 00:53:05.920
но сам процесс хранения, понимания, где какие данные

00:53:05.920 --> 00:53:10.200
лежат, он достаточно может быть трудоемким, если это

00:53:10.200 --> 00:53:15.720
большие объемы данных, и Estrig Glacier выступает как

00:53:15.720 --> 00:53:20.800
выгодный аналог хранения данных в облаке, при этом

00:53:20.800 --> 00:53:23.880
вот эта опция архивирования ваших данных предоставляется

00:53:23.880 --> 00:53:26.720
как готовый сервис.

00:53:26.720 --> 00:53:29.080
Давайте теперь подробнее поговорим, что же такое

00:53:29.080 --> 00:53:32.540
Lifecycle Policies, на нее мы ранее ссылались на предыдущих

00:53:32.540 --> 00:53:33.540
слайдах.

00:53:33.540 --> 00:53:38.880
Это та опция, которая позволяет вам настроить жизненный

00:53:38.880 --> 00:53:42.720
цикл ваших данных внутри Estrig.

00:53:42.720 --> 00:53:48.440
Также мы используем наш Lifecycle Policies, если по тем

00:53:48.440 --> 00:53:52.760
или иным причинам Intelligent Tiering для нас не подходит.

00:53:52.760 --> 00:53:57.400
Итак, представим, что у нас есть некоторый сайт,

00:53:57.400 --> 00:54:02.160
на этом сайте мы публикуем видео-контент, и мы знаем,

00:54:02.160 --> 00:54:05.960
что в течение месяца после публикации видеоматериала,

00:54:05.960 --> 00:54:09.260
в течение месяца она активно просматривается.

00:54:09.260 --> 00:54:13.480
Таким образом, наиболее оптимальный вариант класс

00:54:13.480 --> 00:54:19.960
хранения файлов первые 30 дней жизни это стандартный

00:54:19.960 --> 00:54:20.960
класс хранения.

00:54:20.960 --> 00:54:26.840
Далее, мы собираем некоторую статистику, анализируем,

00:54:26.840 --> 00:54:31.500
и мы знаем, что через 30 дней наш видеоматериал, так

00:54:31.500 --> 00:54:35.120
как уже был просмотрен большей части нашей аудитории,

00:54:35.120 --> 00:54:37.480
оно редко просматривается.

00:54:37.480 --> 00:54:42.880
Таким образом, мы можем сэкономить расходы на хранение

00:54:42.880 --> 00:54:48.440
нашей видео-файлы и перенести через 30 дней на класс хранения

00:54:48.440 --> 00:54:51.440
Infrequent Access.

00:54:51.440 --> 00:55:00.080
Далее, мы с вами знаем, что через 60 дней мы не храним

00:55:00.080 --> 00:55:04.680
наш контент на нашем сайте, а через 60 дней его удаляем

00:55:04.680 --> 00:55:08.840
по некоторым причинам, и нам нужно удалить эти

00:55:08.840 --> 00:55:09.840
файлы.

00:55:09.840 --> 00:55:13.080
Но мы можем эти данные под запросу выдать.

00:55:13.080 --> 00:55:18.440
В этом случае, нам через 60 дней, мы можем настроить

00:55:18.440 --> 00:55:26.900
перенос наших mp4-файлов с Infrequent Access класса хранения

00:55:26.900 --> 00:55:30.880
на S3 Glacier, когда мы данные сразу отдать не можем, но

00:55:30.880 --> 00:55:32.680
достаточно дешево можем хранить.

00:55:32.680 --> 00:55:38.480
Эти данные видео-контент хранится в течение года,

00:55:38.480 --> 00:55:41.840
и если кто-то запрашивает, то мы можем этот контент

00:55:41.840 --> 00:55:49.280
выдать.

00:55:49.280 --> 00:55:56.000
Далее мы говорим, что через год мы можем смело удалять

00:55:56.000 --> 00:55:59.760
наш видео-контент, ввиду того, что он становится

00:55:59.760 --> 00:56:00.760
неактуальным.

00:56:00.760 --> 00:56:03.440
Никто его смотреть не будет, и, соответственно, нет смысла

00:56:03.440 --> 00:56:05.720
платить за его хранение и обслуживание.

00:56:05.720 --> 00:56:10.560
И мы можем настроить Lifecycle Policy таким образом, что через

00:56:10.560 --> 00:56:12.800
год она автоматически удаляется.

00:56:12.800 --> 00:56:18.720
Таким образом, мы видим, что мы можем настроить Lifecycle

00:56:18.720 --> 00:56:23.120
Policy, то есть некоторый шаблон, что происходит с объектом

00:56:23.120 --> 00:56:26.600
после определенного количества дней с момента загрузки,

00:56:26.600 --> 00:56:31.600
и она автоматически применяется ко всем объектам на уровне

00:56:31.600 --> 00:56:32.600
этого объекта.

00:56:32.600 --> 00:56:36.960
То есть объект мы загрузили сегодня, и через 30 дней

00:56:36.960 --> 00:56:39.760
она переходит там In Frequent Access.

00:56:39.760 --> 00:56:42.960
Дальше, если мы говорим, что мы через 3 дня загружаем

00:56:42.960 --> 00:56:46.640
новый объект, то для него отчет начинается с момента

00:56:46.640 --> 00:56:47.640
его загрузки.

00:56:47.640 --> 00:56:50.600
И опять же через 30 дней происходит переход на другой класс

00:56:50.600 --> 00:56:53.240
хранения.

00:56:53.240 --> 00:56:57.520
Давайте с вами разберем сравнительную таблицу между стандартными

00:56:57.520 --> 00:57:01.880
классами S3, а также классами хранения S3 Glacier.

00:57:01.880 --> 00:57:03.880
Чем же они отличаются?

00:57:03.880 --> 00:57:07.920
Основные отличия это average latency, то есть как быстро

00:57:07.920 --> 00:57:09.240
вы получаете файл.

00:57:09.240 --> 00:57:14.720
Если мы говорим про стандартные классы S3, то это миллисекунды,

00:57:14.720 --> 00:57:16.640
то есть мы получаем файл сразу.

00:57:16.640 --> 00:57:19.560
Если мы говорим про классы хранения Glacier, это Glacier

00:57:19.560 --> 00:57:24.080
Archive, то здесь это минуты и часы.

00:57:24.080 --> 00:57:28.040
То есть мы файлы не сможем получить сразу, это не в

00:57:28.040 --> 00:57:35.200
онлайне, поэтому нужно планировать у себя дополнительно,

00:57:35.200 --> 00:57:38.440
что файлы вы получите через какое-то время.

00:57:38.440 --> 00:57:43.600
Если мы говорим про максимальный размер файла, который можем

00:57:43.600 --> 00:57:49.880
хранить, то есть объекта для стандартных классов

00:57:49.880 --> 00:57:55.600
хранения S3 это 5 ТБ максимум, а для Glacier мы уже можем

00:57:55.600 --> 00:58:04.080
сохранить объект до 40 ТБ.

00:58:04.080 --> 00:58:10.180
Если мы говорим про оплату на хранение за каждый гигабайт

00:58:10.180 --> 00:58:14.520
ежемесячно, то стандартные классы хранения относительно

00:58:14.520 --> 00:58:19.320
дорого стоят, а Glacier намного дешевле.

00:58:19.320 --> 00:58:24.280
И обратный случай, когда мы говорим про retrieval pricing,

00:58:24.280 --> 00:58:27.520
то есть цена извлечения данных, то для стандартных

00:58:27.520 --> 00:58:36.000
классов S3 где-то мы не оплачиваем даже за retrieval, где-то мы

00:58:36.000 --> 00:58:40.240
оплачиваем небольшие суммы, небольшой тариф, в случае

00:58:40.240 --> 00:58:46.200
когда мы говорим про извлечение из Glacier, то это стоит дороже.

00:58:46.200 --> 00:58:55.880
Поэтому нужно знать подробно информацию о своих данных

00:58:55.880 --> 00:59:00.760
для того, чтобы расположить в правильном классе хранения.

00:59:00.760 --> 00:59:06.800
На этом мы добрались до самого конца четвертой секции,

00:59:06.800 --> 00:59:10.560
и давайте пройдемся по самым основным моментам,

00:59:10.560 --> 00:59:13.200
связанных с сервисом Amazon S3 Glacier.

00:59:13.200 --> 00:59:15.920
Это тот сервис, который позволяет нам архивировать

00:59:15.920 --> 00:59:19.000
и хранить дешево наши данные в облаке.

00:59:19.000 --> 00:59:23.520
Этот сервис, так же как и Amazon S3, предоставляет достаточно

00:59:23.520 --> 00:59:28.520
высокую надежность хранения, то есть это 9, 11 девяток,

00:59:28.520 --> 00:59:35.920
то есть это 99,99% того, что данные не потеряются.

00:59:35.920 --> 00:59:36.920
Это гарантия.

00:59:36.920 --> 00:59:45.800
Так же важно отметить, что цена за хранение Glacier намного

00:59:45.800 --> 00:59:50.040
меньше и выгоднее по сравнению со стандартными классами

00:59:50.040 --> 00:59:53.280
хранения S3.

00:59:53.280 --> 00:59:59.000
Но при этом чем же кардинально отличается, это то, что при

00:59:59.000 --> 01:00:02.480
стандартных классах S3 мы извлекаем данные сразу

01:00:02.480 --> 01:00:06.840
онлайн, а когда мы говорим про классы хранения Glacier,

01:00:06.840 --> 01:00:09.960
это Glacier и Glacier Archive, то данные извлекаются в течение

01:00:09.960 --> 01:00:13.360
минут или нескольких часов, то есть до 12 часов может

01:00:13.360 --> 01:00:17.960
занимать время извлечения ваших данных с валтов.

01:00:17.960 --> 01:00:26.680
Поэтому этот момент нужно учитывать.

01:00:26.680 --> 01:00:30.400
На этом мы добрались до самого конца нашей лекции,

01:00:30.400 --> 01:00:36.600
рассмотрели все четыре сервиса, связанных с хранением.

01:00:36.600 --> 01:00:39.080
Буквально пару основных моментов.

01:00:39.080 --> 01:00:43.920
Это то, что S3 это объектное хранилище, у нас есть EBS

01:00:43.920 --> 01:00:47.440
для блочного хранения данных, обычно мы используем связки

01:00:47.440 --> 01:00:52.680
с EC2-инстанциями, далее есть EFS, если нам необходимо

01:00:52.680 --> 01:00:56.400
для нескольких EC2-инстанций предоставить общую файловую

01:00:56.400 --> 01:01:00.240
систему и есть у нас S3 Glacier, который мы дополнительно

01:01:00.240 --> 01:01:03.360
отдельно рассмотрели, это два отдельных класса хранения

01:01:03.360 --> 01:01:07.080
Glacier и Glacier Archive, которые позволяют нам выгодно хранить

01:01:07.080 --> 01:01:11.200
наши архивные данные.

01:01:11.200 --> 01:01:15.080
На этом сайде вы видите возможные полезные ссылки

01:01:15.080 --> 01:01:19.020
для вас, для дополнительного изучения.

01:01:19.020 --> 01:01:23.680
На этом мы заканчиваем нашу лекцию, я надеюсь вы

01:01:23.680 --> 01:01:29.160
получили более полное представление о основных сервисах хранения,

01:01:29.160 --> 01:01:33.880
если есть вопросы обязательно задавайте и увидимся с вами

01:01:33.880 --> 01:01:46.160
на следующих наших активностях.