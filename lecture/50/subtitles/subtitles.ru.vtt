WEBVTT

00:00:00.000 --> 00:00:04.431
Добрый день, уважаемые студенты!
Я рад вас всех видеть.

00:00:04.443 --> 00:00:10.132
Мы с вами вместе добрались до 4-го модуля и
сегодня поговорим про безопасность в облаке,

00:00:11.144 --> 00:00:17.876
т.е. AWS Cloud Security. Сегодня мы с вами разберем
ряд AWS сервисов, связанных с безопасностью.

00:00:17.888 --> 00:00:26.404
Некоторые сервисы мы разберем более подробно,
о чем-то поговорим менее подробно, точнее

00:00:26.416 --> 00:00:31.275
остановимся на самых основных моментах и
определениях менее популярных сервисов.

00:00:31.287 --> 00:00:38.056
Тем не менее, эти сервисы могут прийти
на реальном AWS экзамене, поэтому знания и

00:00:38.068 --> 00:00:43.272
информация, которую вы получите на наших
занятиях, будет достаточно для того,

00:00:43.284 --> 00:00:48.706
чтобы вы успешно ответили на вопросы
на реальном AWS экзамене.

00:00:48.718 --> 00:00:58.415
Давайте вкратце остановимся на каждой из секций.
Первая – это AWS Shared Responsibility Model.

00:00:58.427 --> 00:01:03.620
Мы поговорим, что же это такое и как оно
нам помогает. Далее мы познакомимся

00:01:03.632 --> 00:01:11.056
с сервисом AWS IAM. После этого мы определим
те шаги, которые нам помогают обезопасить наш

00:01:11.068 --> 00:01:18.783
новый AWS аккаунт. Далее познакомимся с сервисами
AWS, которые также связаны с безопасностью.

00:01:18.795 --> 00:01:25.320
Также поговорим о том, как мы можем
защитить наши данные в облаке.

00:01:25.420 --> 00:01:34.207
Мы с вами начинаем первую секцию,
а именно AWS Shared Responsibility Model.

00:01:34.219 --> 00:01:40.314
Когда мы говорим про безопасность в облаке, то
всегда есть две стороны, первая сторона – это мы,

00:01:40.326 --> 00:01:46.219
как пользователи облака, и с другой
стороны – это облачный провайдер.

00:01:46.231 --> 00:01:51.911
А так же логически подразделяем эти
ответственности на две части.

00:01:51.923 --> 00:02:00.170
Это - облачный провайдер отвечает за security
of the cloud, т.е. за безопасность самого облака.

00:02:00.182 --> 00:02:04.310
Когда мы говорим про пользователей,
т.е. нас, значит, мы отвечаем за

00:02:04.322 --> 00:02:12.644
безопасность security in the cloud, т.е.
безопасность в самом облаке.

00:02:12.656 --> 00:02:18.079
Мы сказали, что AWS облачный провайдер
отвечает за безопасность облака.

00:02:18.091 --> 00:02:27.949
Что это значит? Это значит, что он обеспечивает
физическую безопасность дата-центров 24/7,

00:02:27.961 --> 00:02:34.930
обеспечивает охраной и всем необходимым,
что не дает возможность посторонним

00:02:34.942 --> 00:02:43.711
проникнуть в эти дата-центры. Следующее – это
безопасность hardware and software infrastructure,

00:02:43.723 --> 00:02:52.155
это все те железа, т.е. наши сервера, жесткие диски
и другое оборудование, которое принадлежит AWS.

00:02:52.167 --> 00:03:00.912
Дальше software infrastructure, имеется в виду
операционные системы, все приложения, приложения

00:03:00.924 --> 00:03:11.334
виртуализации, все это также обеспечивается
безопасностью, и на постоянной основе обновляется,

00:03:11.346 --> 00:03:18.100
устанавливаются различные обновления
безопасности для того, чтобы никто как физически,

00:03:18.112 --> 00:03:24.998
так и виртуально не мог проникнуть
в границы облачного провайдера.

00:03:25.010 --> 00:03:29.957
Далее мы говорим о безопасности сетевой
инфраструктуры и виртуализации,

00:03:29.969 --> 00:03:38.813
т.е. наших роутеров, свитча, load balancer,
firewall, кабельной части и всех кабелей и т.д.

00:03:38.825 --> 00:03:48.977
К сожалению, мы с вами не можем приехать
в любой дата-центр посмотреть и убедиться,

00:03:48.989 --> 00:03:59.392
так как это запрещено, но на постоянной основе AWS
приглашает специальных аудиторов для того, чтобы

00:03:59.404 --> 00:04:08.902
они проверили, убедились, выпустили соответствующие
отчеты о том, что вся инфраструктура обеспечена

00:04:08.914 --> 00:04:15.674
безопасностью и соответствует стандартам,
и по необходимости на бесплатной основе есть

00:04:15.686 --> 00:04:21.380
возможность скачивать все отчеты,
которые периодически выходят.

00:04:21.480 --> 00:04:28.072
Давайте теперь подробнее поговорим,
за что отвечает пользователь, т.е. мы,

00:04:28.084 --> 00:04:34.776
и как обеспечить безопасность в облаке.
В случае, если мы используем сервис Amazon EC2,

00:04:34.788 --> 00:04:41.562
то наша ответственность выбрать ту операционную
систему, которая обновлена и не имеет проблем

00:04:41.574 --> 00:04:48.449
с безопасностью, если же есть проблемы,
то нужно установить все патчи безопасности.

00:04:48.461 --> 00:04:54.132
Далее это наша ответственность
выбирать те приложения, у которых нет опять же

00:04:54.156 --> 00:05:01.610
уязвимостей, либо если есть, то должны быть
применены соответствующие патчи безопасности.

00:05:01.622 --> 00:05:11.794
Когда мы говорим про инфраструктуру, то при
настройке сетей мы должны правильно настроить

00:05:11.806 --> 00:05:17.829
security группы, правильно должна быть настроена
вся сеть, чтобы не было дыр безопасности.

00:05:17.841 --> 00:05:28.611
Также нужно провести некоторую беседу с командой
для того, чтобы проводить Account management,

00:05:28.623 --> 00:05:36.212
как правильно сохранять, правильно хранить
ключи безопасности, логины, пароли и т.д.

00:05:36.224 --> 00:05:46.001
И самое основное – это безопасность
наших данных, т.е. данных in transit,

00:05:46.013 --> 00:05:52.391
когда мы передаем данные должны быть
зашифрованы, и безопасность данных at rest,

00:05:52.403 --> 00:05:57.089
т.е. во время хранения они тоже
должны быть в зашифрованном виде.

00:05:57.101 --> 00:06:03.604
Это для того, чтобы исключить
возможные атаки, потерю данных, взлом

00:06:03.616 --> 00:06:10.220
самой инфраструктуры и поломку всего
того рабочего процесса, который есть.

00:06:10.320 --> 00:06:22.101
Теперь хотелось бы рассмотреть вопросы безопасности
с точки зрения моделей предоставления сервиса.

00:06:22.113 --> 00:06:26.398
Как мы помним, у нас есть три вида,
это IaaS, PaaS и SaaS.

00:06:26.410 --> 00:06:36.602
Здесь основная идея в том, что начиная от IaaS до
SaaS, уровень контроля над IT-ресурсами становится

00:06:36.614 --> 00:06:43.398
меньше, и ту часть, которую мы перестаем
контролировать и передаем облачному провайдеру,

00:06:43.410 --> 00:06:54.906
то обеспечение безопасности этой части
также переходит облачному провайдеру.

00:06:54.918 --> 00:07:02.619
Например, в случае с IaaS говорим про Amazon EC2,
то обеспечение безопасности это на нашей стороне.

00:07:02.631 --> 00:07:12.890
В случае Amazon RDS, это PaaS решение, то мы за
операционную систему и безопасность уже не отвечаем.

00:07:12.902 --> 00:07:17.677
Мы это передали облачному провайдеру.
В случае, когда мы говорим Software as a Service,

00:07:17.689 --> 00:07:27.477
например, та же почта, либо есть такой сервис
Amazon Chime, это аналог Zoom,

00:07:27.489 --> 00:07:36.348
они предоставлены в виде готового приложения,
и уже фактически у нас мало контроля или

00:07:36.360 --> 00:07:46.342
практически нет контроля ее как-то изменять.
Таким образом, все то, что не относится

00:07:46.354 --> 00:07:56.840
к нам, должно быть обезопасено
на стороне облачного провайдера.

00:07:56.940 --> 00:08:03.374
Для того, чтобы закрепить пройденный материал,
я бы хотел с вами провести некоторую активность.

00:08:03.386 --> 00:08:10.217
Я буду задавать вопросы, а вам нужно ответить
правильно: за это ответственен AWS,

00:08:10.229 --> 00:08:16.823
т.е. это относится к security of the cloud,
или за это ответственны пользователи облака,

00:08:16.835 --> 00:08:23.210
т.е. мы, и относятся к security in the cloud.
Сейчас я вкратце пройдусь по инфраструктуре.

00:08:23.222 --> 00:08:29.948
Представим, что у нас есть AWS аккаунт.
Мы используем сервис Amazon S3,

00:08:29.960 --> 00:08:36.697
дальше мы используем сервис VPC, в котором
у нас есть инстансы Amazon EC2, а также есть

00:08:36.709 --> 00:08:41.671
инстансы базы данных Oracle. Давайте теперь
пройдемся по вопросам. Вам нужно будет ставить

00:08:41.683 --> 00:08:50.580
на паузу видео, будет время подумать, и будем
смотреть, сможете ли вы ответить правильно.

00:08:50.680 --> 00:09:01.003
Первый вопрос. Обновление и установка патчей
безопасности операционной системы на Amazon EC2

00:09:01.015 --> 00:09:05.888
инстансы. Можете поставить на паузу.
Правильный ответ: the customer,

00:09:05.900 --> 00:09:10.255
т.е. за это ответственны пользователи.
Следующий вопрос.

00:09:10.267 --> 00:09:16.890
Физическая безопасность дата-центра?
Правильный ответ: AWS.

00:09:16.902 --> 00:09:26.442
Третий вопрос. Кто отвечает за безопасность
инфраструктуры в виртуализации?

00:09:26.454 --> 00:09:39.795
Правильный ответ: AWS. Следующий вопрос.
Кто отвечает за правильную настройку security group

00:09:39.807 --> 00:09:48.051
в Amazon EC2 инстансах?
Правильный ответ: the customer, т.е. мы.

00:09:48.063 --> 00:09:55.831
Пятый вопрос. Кто отвечает за безопасность
конфигурации, т.е. за настройки приложений,

00:09:55.843 --> 00:10:06.388
которые запущены на Amazon EC2?
Мы либо AWS. Правильный ответ: the customer,

00:10:06.400 --> 00:10:15.108
т.е. за это ответственны мы. Следующий вопрос.
Кто отвечает за установку обновлений патчей

00:10:15.120 --> 00:10:21.562
безопасности инстансов Oracle, которые
запущены как инстансы Amazon RDS?

00:10:21.574 --> 00:10:31.652
И правильный ответ – AWS.
Мы не занимаемся настройкой

00:10:31.664 --> 00:10:34.226
операционной системы, обновлением
безопасности, потому как

00:10:34.238 --> 00:10:41.813
она предоставлена как PaaS решение,
и так как AWS отвечает за это,

00:10:41.825 --> 00:10:47.230
то и за безопасность этой части тоже лежит на нем.
А мы лишь получаем готовую базу данных как сервис.

00:10:47.242 --> 00:10:52.808
Следующий вопрос.
Кто отвечает за те же патчи безопасности

00:10:52.820 --> 00:10:57.736
и обновление в базе данных Oracle,
которые запущены на Amazon EC2 инстансе?

00:10:57.748 --> 00:11:05.442
Правильный ответ – the customer, т.е. за этот
вид развертывания базы Oracle уже отвечаем мы,

00:11:05.454 --> 00:11:11.945
потому что все то, что запускается на Amazon EC2
инстансах, ровно так же за безопасность самого

00:11:11.957 --> 00:11:16.716
Amazon EC2 инстанса, за виртуальную
безопасность отвечает пользователь.

00:11:16.728 --> 00:11:25.471
Ну и последний вопрос. Кто отвечает за правильную
настройку доступа в безопасность в Amazon S3 bucket?

00:11:25.483 --> 00:11:30.346
Правильный ответ – the customer,
т.е. за это ответственны мы.

00:11:30.358 --> 00:11:34.837
AWS предоставляет возможность нам
эти доступы настраивать

00:11:34.849 --> 00:11:40.340
к бакетам, а за правильную настройку
уже ответственны мы.

00:11:40.440 --> 00:11:47.120
Давайте теперь рассмотрим другую архитектуру.
Логика активности остается такой же.

00:11:47.132 --> 00:11:53.654
Я задаю вопрос, вы ставите на паузу и
пытаетесь ответить правильно, либо

00:11:53.666 --> 00:12:00.436
за это отвечает AWS, либо за это отвечает
пользователь, т.е. мы. Итак, поехали.

00:12:00.448 --> 00:12:06.807
В нашей инфраструктуре у нас есть настроенный
VPC, внутри есть настроенный subnet,

00:12:06.819 --> 00:12:12.804
в котором есть веб-сервер на
Amazon EC2 инстансе. Этот инстанс

00:12:12.816 --> 00:12:17.995
взаимодействует с Amazon S3 bucket-ом,
также у нас к VPC подключен internet-gateway,

00:12:18.007 --> 00:12:26.081
через который мы подключаемся к нашему
веб-серверу через AWS Management Console,

00:12:26.093 --> 00:12:32.180
либо используя SSH ключи через
командную строку, т.е. AWS CLI.

00:12:32.280 --> 00:12:39.268
Итак, первый вопрос. Обеспечение
безопасности AWS Management Console

00:12:39.280 --> 00:12:46.853
так, чтобы она не была взломана хакерами.
За это отвечает AWS.

00:12:46.865 --> 00:12:59.203
Далее, правильная конфигурация subnet-ов?
Правильный ответ customer, т.е. AWS предоставляет

00:12:59.215 --> 00:13:06.108
нам инструменты для конфигурации subnet-ов,
а наша задача их правильно настроить и наша

00:13:06.120 --> 00:13:10.270
ответственность, чтобы они были безопасно
настроены. Следующий вопрос, правильная

00:13:10.282 --> 00:13:21.393
безопасная конфигурация VPC? За это отвечаем
также мы. Идея такая же, как subnet.

00:13:21.405 --> 00:13:42.239
Идем дальше. Защита от сбоев сети в AWS регионах?
Правильный ответ: AWS, т.е. сеть между регионами,

00:13:42.251 --> 00:13:48.886
это относится к глобальной инфраструктуре AWS,
поэтому за это ответственен AWS.

00:13:48.898 --> 00:14:01.833
Защита SSH ключей? За защиту SSH ключей ответственны
мы, т.е. пользователи. Идем дальше. Шестой вопрос.

00:14:01.845 --> 00:14:11.007
Обеспечение сетевой изоляции между
данными пользователей AWS?

00:14:11.019 --> 00:14:21.847
За это ответственный AWS, т.е. у нас как
пользователей нет никакой возможности

00:14:21.859 --> 00:14:25.800
добраться до данных других пользователей,
тем более это как-то настраивать.

00:14:25.900 --> 00:14:36.418
Поэтому за это ответственен AWS. Седьмой вопрос.
Обеспечение широкополосного быстрого доступа

00:14:36.430 --> 00:14:48.412
между веб-сервером и Amazon S3 bucket-ом?
Правильный ответ – AWS, т.е. опять же, это относится

00:14:48.424 --> 00:14:55.858
к глобальной инфраструктуре AWS, так как Amazon
EC2 инстансы и Amazon S3 bucket находятся там.

00:14:55.870 --> 00:15:01.369
И для того чтобы предоставить
быстрый доступ между двумя этими

00:15:01.381 --> 00:15:05.072
сервисами, мы не используем интернет,
точнее AWS не использует

00:15:05.084 --> 00:15:08.859
интернет, а использует свою
глобальную инфраструктуру для того,

00:15:08.871 --> 00:15:14.840
чтобы это было быстрее и безопаснее.
За это ответственен сам AWS.

00:15:14.940 --> 00:15:30.558
И последний вопрос. Продвижение использования
MFA для всех авторизаций пользователей?

00:15:30.570 --> 00:15:38.297
За это ответственен customer, т.е. мы.
Идея в чем? Идея в том, что мы внутри IAM

00:15:38.309 --> 00:15:47.230
создаем пользователей, таким образом
обычные физические пользователи, наши

00:15:47.242 --> 00:15:53.075
сотрудники могут, используя выданный логин-пароль,
авторизоваться в нашем AWS аккаунте.

00:15:53.087 --> 00:15:58.905
Они работают все в одном AWS
аккаунте и помимо логина, пароля можно

00:15:58.917 --> 00:16:05.349
настроить так называемый MFA. Обычно
настраивается виртуальный MFA, устанавливается

00:16:05.361 --> 00:16:11.185
приложение и каждые 30 секунд
генерируется новый шестизначный код, и во время

00:16:11.197 --> 00:16:20.037
авторизации пользователь не только вводит
логин и пароль, он также подтверждает, что он

00:16:20.049 --> 00:16:30.054
имеет доступ к авторизованному устройству.
Таким образом вводит сгенерированный

00:16:30.066 --> 00:16:41.384
новый ключ, и после этого дальше заходит.
И вот продвижение и включение этой опции

00:16:41.396 --> 00:16:47.407
MFA, оно полностью лежит на customer, т.е.
на нас. Она изначально отключена, но

00:16:47.419 --> 00:16:54.642
есть рекомендация от AWS ее включить и в
некоторых случаях бывает ее не включают,

00:16:54.654 --> 00:17:03.462
это все зависит от зрелости компании.
Чем она больше, тем больше она обращает

00:17:03.474 --> 00:17:13.195
внимание на возможные уязвимости, на возможные
места атаки, таким образом через MFA мы

00:17:13.207 --> 00:17:20.920
еще больше гарантируем себе, что аккаунт
не будет взломан и злоумышленник

00:17:20.932 --> 00:17:26.560
не подключится к облаку AWS для того,
чтобы что-то украсть, либо сломать инфраструктуру.

00:17:27.660 --> 00:17:35.879
На этом мы заканчиваем первую секцию. Давайте
остановимся на основных моментах. Мы разобрали,

00:17:35.891 --> 00:17:43.506
что такое Shared Responsibility Model и
поговорили о том, что для полной безопасности

00:17:43.518 --> 00:17:50.435
облака, обе стороны, что облачный провайдер,
что пользователь, т.е. мы, должны обеспечить

00:17:50.447 --> 00:17:57.761
безопасность в определенных местах. Эти определенные
места можно разделить на два направления,

00:17:57.773 --> 00:18:04.899
т.е. AWS обеспечивает безопасность of the cloud,
т.е. самого облака, а customer, уже работая

00:18:04.911 --> 00:18:09.971
внутри облака, обеспечивает security in the cloud,
т.е. безопасность в облаке. В случае AWS

00:18:09.983 --> 00:18:16.500
подразумевается физическая безопасность
дата-центров, железа, всего того ПО, которое

00:18:16.512 --> 00:18:22.040
используется, чтобы у него не было ошибок, дыр
безопасности и это все преждевременно обновлялось.

00:18:22.140 --> 00:18:27.400
Когда мы говорим про customer,
то подразумевается правильная

00:18:27.412 --> 00:18:32.599
настройка тех сервисов для того,
чтобы не открыть некоторые

00:18:32.611 --> 00:18:39.877
места для возможной атаки,
правильный management, правильное

00:18:39.889 --> 00:18:43.514
управление ключами безопасности,
логинами, паролями, т.е. скажем

00:18:43.526 --> 00:18:48.789
так credentials и своими пользователями.
Также в зависимости от сервиса,

00:18:48.801 --> 00:18:57.358
который мы используем, они у нас подразделяются
на три вида по предоставлению этого сервиса.

00:18:57.370 --> 00:19:05.085
Это модель IaaS, модель PaaS и модель SaaS.
В зависимости от уровня у нас меняется

00:19:05.097 --> 00:19:09.348
контроль над IT-ресурсом, ну и,
соответственно, определяется

00:19:09.360 --> 00:19:17.623
тем самым, отвечаем ли мы за безопасность
той или иной части конкретного ресурса.

00:19:18.635 --> 00:19:28.520
В случае, когда мы говорим про IaaS, так как у нас
больше контроля над IT-ресурсами, значит у нас

00:19:28.532 --> 00:19:35.151
больше мест, где мы должны обеспечить безопасность.
Когда мы говорим про PaaS и SaaS, контроль у нас

00:19:35.163 --> 00:19:41.423
уменьшается. Соответственно, за ту часть,
за которую уже ответственен облачный провайдер,

00:19:41.435 --> 00:19:47.880
он и там же обеспечивает безопасность.
Это уже не наша задача.

00:19:47.980 --> 00:19:53.530
Мы переходим ко второй части, а это –
сервис AWS Identity and Access Management,

00:19:53.542 --> 00:20:09.726
т.е. AWS IAM. Это тот сервис, который обеспечивает
любые доступы, так или иначе связанные с текущим

00:20:09.738 --> 00:20:13.074
AWS аккаунтом и всеми теми ресурсами,
которые в нем могут быть.

00:20:13.086 --> 00:20:20.381
Таким образом, мы говорим через этот
сервис, кто может получить доступ,

00:20:20.393 --> 00:20:28.250
на какие ресурсы может получить доступ, как он и
при каких условиях получает этот доступ, а также

00:20:28.262 --> 00:20:36.480
следует отметить, что AWS IAM – это бесплатный
сервис, за который мы ничего не оплачиваем.

00:20:36.580 --> 00:20:41.287
Давайте теперь остановимся на
основных компонентах сервиса AWS IAM.

00:20:41.299 --> 00:20:49.019
Это IAM user, IAM group, IAM policy и IAM role.
У каждого есть своя цель. Когда мы говорим

00:20:49.031 --> 00:20:56.802
про IAM user, это некая сущность,
у которой есть свой идентификатор, у нее также

00:20:56.814 --> 00:21:05.685
есть свой ARN, есть ключи доступа,
логин, пароль, и мы можем

00:21:05.697 --> 00:21:08.259
эту информацию передать
нашему сотруднику в компании для

00:21:08.271 --> 00:21:14.907
того, чтобы он мог под этим user-ом
подключаться к нашему AWS аккаунту в облаке.

00:21:14.919 --> 00:21:19.918
Далее мы говорим, что у нас есть IAM groups и мы
наших пользователей можем объединять в этих группах.

00:21:19.930 --> 00:21:28.642
Это используется когда у нас
есть несколько пользователей,

00:21:28.654 --> 00:21:32.439
которые схожи по должностным
обязанностям, либо как минимум

00:21:32.451 --> 00:21:36.168
у них должен быть равный доступ
внутри облака, то мы можем

00:21:36.180 --> 00:21:40.962
этих пользователей добавить к
специально созданной группе с

00:21:40.974 --> 00:21:45.928
соответствующим именем и уже
группе выдать необходимые права.

00:21:45.940 --> 00:21:48.568
Таким образом, всем тем пользователям,
которые там сидят,

00:21:48.580 --> 00:21:53.300
у них будет доступ к соответствующим
сервисам и действиям.

00:21:53.400 --> 00:21:58.375
Здесь следует отметить,
что в одной группе может быть несколько

00:21:58.387 --> 00:22:05.374
пользователей, но и каждый пользователь
может быть в нескольких группах.

00:22:05.386 --> 00:22:13.133
Это тоже верно. И пользователь, например,
может для определенного набора

00:22:13.145 --> 00:22:20.751
сервисов получить доступ через одну группу и через
другую группу получить доступ к другим сервисам.

00:22:20.763 --> 00:22:25.285
Таким образом, в совокупности у
него больше будет доступа, чем у другого

00:22:25.297 --> 00:22:28.671
пользователя, который сидит
только в одной группе.

00:22:28.683 --> 00:22:35.835
Также можно более тонко настроить
доступы каждого пользователя внутри AWS.

00:22:35.847 --> 00:22:41.892
Когда мы говорим IAM policy, это тот документ,
который описывается в виде JSON,

00:22:41.904 --> 00:22:48.272
и он описывает информацию до каких
ресурсов, на какие операции

00:22:48.284 --> 00:22:55.412
есть доступ, но у какой сущности
не прописывается, мы привязываем

00:22:55.424 --> 00:22:59.175
policy к user напрямую, либо к group.
В целом, best practice

00:22:59.187 --> 00:23:03.936
это policy привязывать к группам.
Даже если у нас есть один пользователь,

00:23:03.948 --> 00:23:07.852
нам все равно рекомендуется
создать группу этого пользователя,

00:23:07.864 --> 00:23:11.528
подключить к этой группе и уже
после все policy, которые мы

00:23:11.540 --> 00:23:14.840
создаем, привязывать не к пользователю,
а к созданным нами группам.

00:23:14.940 --> 00:23:20.070
Ну и следующая последняя сущность
– это IAM role. Идея в том,

00:23:20.082 --> 00:23:25.306
что мы говорили, что мы строим
IT-инфраструктуру в облаке, она

00:23:25.318 --> 00:23:30.537
состоит из разных компонентов,
каждый компонент – это какой-то

00:23:30.549 --> 00:23:32.531
определенный сервис, ее ресурс.
И они взаимодействуют между

00:23:32.543 --> 00:23:37.924
собой для того, чтобы выполнять
какую-то бизнес-задачу. Так вот,

00:23:37.936 --> 00:23:42.081
изначально у любого сервиса нет
никаких доступов, нет никаких

00:23:42.093 --> 00:23:51.315
прав, он только может работать
внутри своего сервиса. Когда мы

00:23:51.327 --> 00:23:56.560
создаем, например, AWS Lambda, т.е.
функцию, то мы прописываем

00:23:56.572 --> 00:24:01.527
там код, внутри может быть
какая-то логика, но у этого кода

00:24:01.539 --> 00:24:08.755
нет доступа к другим AWS ресурсам,
т.е. мы не можем обратиться

00:24:08.767 --> 00:24:11.811
к какому-то определенному
Amazon S3 bucket-у для того, чтобы

00:24:11.823 --> 00:24:20.961
оттуда извлечь какой-то файл.
Этого нет. Поэтому в AWS Lambda

00:24:20.973 --> 00:24:25.848
есть возможность привязать role
к AWS Lambda, а к role уже

00:24:25.860 --> 00:24:29.162
привязать policy, который дает
доступ на соответствующий бакет.

00:24:29.174 --> 00:24:32.303
После чего уже можно внутри
кода обращаться к этому бакету, и

00:24:32.315 --> 00:24:37.540
мы не получим ошибку,
что там access denied и доступ запрещен.

00:24:37.640 --> 00:24:43.898
Еще один use case когда используются role,
это когда у нас есть несколько AWS

00:24:43.910 --> 00:24:50.341
аккаунтов, и представим, что мы всех
пользователей создали в одном аккаунте, но

00:24:50.353 --> 00:24:56.536
наша инфраструктура работает как в первом,
так и во втором AWS аккаунте.

00:24:56.548 --> 00:25:03.146
Нам нужно не создать пользователей во
втором AWS аккаунте, а нужна возможность как-то

00:25:03.158 --> 00:25:09.580
обратиться к этим пользователям
в первом AWS аккаунте к ресурсам во втором.

00:25:09.592 --> 00:25:14.267
Это делается следующим образом: на втором
AWS аккаунте создается соответствующая role,

00:25:14.279 --> 00:25:20.868
прописывается trust policy, т.е. прописываются
те AWS аккаунты и те пользователи,

00:25:20.880 --> 00:25:27.320
которые могут использовать эту role.
Таким образом, на стороне первого аккаунта

00:25:27.332 --> 00:25:34.743
мы выдаем для соответствующих пользователей
либо групп возможность assume, т.е.

00:25:34.755 --> 00:25:39.177
возможность использовать role, которая
находится в другом аккаунте, т.е. с двух

00:25:39.189 --> 00:25:44.846
сторон должны разрешить доступ. В этом
случае есть возможность этому пользователю,

00:25:44.858 --> 00:25:50.804
зная название аккаунта, куда он подключается,
зная название role, которую

00:25:50.816 --> 00:25:57.988
он будет применять, он меняет свою role,
переподключается. Таким образом, он

00:25:58.000 --> 00:26:07.425
скажем так, переселяется или телепортируется
с одного AWS аккаунта в другой AWS аккаунт.

00:26:07.437 --> 00:26:13.937
Все те доступы, которые есть у этой role
во втором AWS аккаунте, у него появляются.

00:26:13.949 --> 00:26:20.300
И в рамках этой role он может
работать уже во втором AWS аккаунте.

00:26:20.400 --> 00:26:26.623
Давайте теперь поговорим, как пользователь может
подключаться к AWS аккаунту. Есть два варианта.

00:26:26.635 --> 00:26:32.895
Первый – это программное, когда мы
используем AWS CLI, либо AWS SDK.

00:26:32.907 --> 00:26:40.139
В этом случае ему нужно использовать свой Access
key ID либо Secret access key, который генерируется

00:26:40.151 --> 00:26:45.152
при создании пользователя. У нас будет отдельное
Демо, и все те моменты, которые мы проговорим

00:26:45.164 --> 00:26:52.440
на этой лекции, мы проделаем в этом Демо.
Второй вариант – это когда пользователь

00:26:52.452 --> 00:26:58.736
подключается к AWS Management Console.
В этом случае ему нужно знать 12-значный

00:26:58.748 --> 00:27:04.845
Account ID или alias этого аккаунта,
если он настроен.

00:27:04.857 --> 00:27:10.199
Также он должен знать свой логин, т.е.
IAM user name, также пароль от этого пользователя.

00:27:10.211 --> 00:27:18.268
Ну и третье – если подключен MFA, и он требуется,
то он должен через приложение, которое установлено

00:27:18.280 --> 00:27:26.660
на устройстве virtual MFA ввести генерируемый
код для того, чтобы успешно подключиться.

00:27:26.760 --> 00:27:36.975
Теперь давайте поговорим про авторизацию.
Есть аутентификация – это когда пользователь

00:27:36.987 --> 00:27:44.748
подключается к облаку и говорит, что пользователь
– это он, и в этом случае он заходит в систему.

00:27:44.760 --> 00:27:50.300
Когда мы говорим про авторизацию, тут уже вопрос
в том, что этому пользователю, которому поняли,

00:27:50.312 --> 00:27:55.703
мы его идентифицировали, что он может делать.
Изначально, когда создается только пользователь,

00:27:55.715 --> 00:28:10.778
у него нет доступа никуда, т.е. есть такой термин
implicit deny, это неявный запрет на все ресурсы,

00:28:10.790 --> 00:28:14.622
если оно явно не предоставлено,
оно обычно включается по умолчанию,

00:28:14.634 --> 00:28:20.262
и чтобы предоставить доступ, мы к этому
пользователю либо к группе, которая подключена

00:28:20.274 --> 00:28:26.208
к пользователю, подключаем какой-то AWS policy,
в котором как раз таки прописывается куда,

00:28:26.220 --> 00:28:33.309
при каких условиях, на какие
конкретные операции есть доступ.

00:28:33.321 --> 00:28:41.423
После этого важно еще упомянуть,
есть такое понятие как principle of least privilege.

00:28:41.435 --> 00:28:48.820
Это говорит о том, что нужно максимально
стараться предоставлять только нужные доступы.

00:28:48.920 --> 00:28:54.760
Например, если пользователю нужен
доступ в Amazon S3 bucket к режиму

00:28:54.772 --> 00:28:58.201
чтения, и возможность скачивать файлы
для того, чтобы выполнять

00:28:58.213 --> 00:29:01.635
свою работу, то этому пользователю
не надо предоставлять полный

00:29:01.647 --> 00:29:07.506
доступ, т.е. не нужно давать ему
возможность создавать новые бакеты,

00:29:07.518 --> 00:29:15.682
обращаться к другим файлам и бакетам,
к которым он не должен

00:29:15.694 --> 00:29:19.550
заходить, а обращаться только к тем,
с которыми он работает. Также в

00:29:19.562 --> 00:29:25.902
рамках того же бакета не нужно
ему выдавать доступ на удаление

00:29:25.914 --> 00:29:31.691
либо на загрузку новых файлов,
если того не требует его должностные

00:29:31.703 --> 00:29:38.534
обязанности. Нужно просто следовать
принципу выдавать только доступ,

00:29:38.546 --> 00:29:43.135
который необходим. Ну и последнее,
что стоит отметить, сервис IAM

00:29:43.147 --> 00:29:50.730
– глобальный. Когда вы подключаетесь
и открываете этот сервис, то сверху

00:29:50.742 --> 00:29:59.676
справа вы не увидите, к какому региону
он относится, а увидите надпись global.

00:29:59.688 --> 00:30:04.042
Это говорит о том, что созданные пользователи
автоматически доступны на всех регионах.

00:30:04.054 --> 00:30:10.470
Если вам необходимо ограничить доступ к
определенным регионам, то это можно сделать

00:30:10.482 --> 00:30:19.080
внутри IAM policy, который вы привяжете
к этому пользователю, либо к группе.

00:30:19.180 --> 00:30:23.972
Давайте теперь подробнее поговорим,
что такое IAM policy,

00:30:23.984 --> 00:30:28.706
каких видов они могут быть.
IAM policy подразделяется на

00:30:28.718 --> 00:30:33.848
identity-based policy и
resource-based policy.

00:30:33.860 --> 00:30:38.919
Identity-based policy – это policy,
которая привязывается к некой сущности,

00:30:38.931 --> 00:30:45.390
т.е. identity, а в нашем случае это может
быть роль, пользователь или группа.

00:30:45.402 --> 00:30:52.355
Когда мы говорим resource-based policy,
то на некий ресурс определенного сервиса

00:30:52.367 --> 00:30:57.097
есть возможность привязать policy,
которые относятся только к нему, и она описывает

00:30:57.109 --> 00:31:02.141
какие сущности могут обращаться
либо что-то делать конкретно

00:31:02.153 --> 00:31:05.949
с этим ресурсом. Примером
может быть Amazon S3 bucket.

00:31:05.961 --> 00:31:11.668
Вы можете к нему привязать
некоторую resource-based policy,

00:31:11.680 --> 00:31:19.061
которая говорит, что у пользователей,
которые находятся в группе Administrators,

00:31:19.073 --> 00:31:28.670
есть возможность изменять свойства этого бакета.
А пользователям, которые сидят в, например,

00:31:28.682 --> 00:31:35.558
Simple Users группе есть возможность
скачивать файлы внутри этого бакета,

00:31:35.570 --> 00:31:38.540
но нет возможности удалять
либо изменять эти файлы.

00:31:38.640 --> 00:31:46.046
Когда мы говорим также про identity-based
policy, подразделяются три вида.

00:31:46.058 --> 00:31:52.559
Первое – это custom policy,
которую мы прописываем.

00:31:52.571 --> 00:31:58.234
Она существует отдельно от чего-либо
и вы это policy уже привязываете к role,

00:31:58.246 --> 00:32:03.171
пользователю либо группе.
Может быть managed policy, это значит,

00:32:03.183 --> 00:32:08.675
она управляется и обновляется,
поддерживается самим Amazon-ом.

00:32:08.687 --> 00:32:17.191
На каждый сервис может быть
несколько managed policy разного уровня.

00:32:17.203 --> 00:32:22.036
Например, мы говорим Amazon S3,
есть Amazon S3 full access policy, это

00:32:22.048 --> 00:32:30.892
когда в этом policy прописывается так,
что любой identity, у которого

00:32:30.904 --> 00:32:34.635
есть этот policy, имеет полный
контроль к сервису Amazon S3.

00:32:34.647 --> 00:32:40.306
Если же мы говорим про policy попроще,
это power user policy, в этом случае

00:32:40.318 --> 00:32:44.971
это продвинутый пользователь,
у которого нет административных прав,

00:32:44.983 --> 00:32:48.315
он не может создавать либо удалять
бакеты, но он может работать

00:32:48.327 --> 00:32:54.061
со всем тем, удалять, создавать файлы
внутри бакетов. Ну и последнее

00:32:54.073 --> 00:33:00.818
может быть readonly policy,
которая предоставляет только возможность

00:33:00.830 --> 00:33:04.986
считывать некоторые файлы,
при этом создавать, удалять, а тем

00:33:04.998 --> 00:33:08.500
более создавать новые бакеты или
удалять эти бакеты, он не может.

00:33:08.600 --> 00:33:16.292
Третий вариант это inline policies, это когда
мы не создаем отдельно стоящий policy

00:33:16.304 --> 00:33:23.460
с отдельным АRN, с отдельным ID, а создаем внутри
либо определенные группы или определенные role,

00:33:23.472 --> 00:33:31.735
так называемые inline policy. Эта policy
привязана к группе или role, и она не может

00:33:31.747 --> 00:33:37.796
существовать отдельно. Если вы создаете
какое-то уникальное policy, то нет необходимости

00:33:37.808 --> 00:33:42.587
ее создавать отдельно, а можно создать конкретно
к role либо к группе, и она там будет

00:33:42.599 --> 00:33:49.616
привязана и также работать. Если же у вас
какая-то policy, которую вы будете привязывать

00:33:49.628 --> 00:33:54.738
к нескольким разным role, либо к нескольким
разным группам, то стоит рассмотреть

00:33:54.750 --> 00:34:02.660
создание отдельно стоящей policy, для того
чтобы ее уже привязывать к разным сущностям.

00:34:02.760 --> 00:34:12.892
Другой важный момент, который стоит упомянуть
– это в каком виде прописываются наши policy.

00:34:12.904 --> 00:34:16.174
Это JSON документ, который идет в
определенной структуре, у него есть

00:34:16.186 --> 00:34:23.176
определенные ключи, которые мы разберем на
следующих слайдах, и соответствующие

00:34:23.188 --> 00:34:31.068
ожидаемые значения. Когда мы также говорим
про policy, то вне зависимости от того, какой это

00:34:31.080 --> 00:34:40.230
ресурс, либо какая это сущность, рассматриваются все
имеющиеся policy на конкретную сущность или ресурс.

00:34:40.242 --> 00:34:49.950
В тот момент, когда доступ есть,
он выдается, в тот момент, когда доступа нет,

00:34:49.962 --> 00:35:00.765
она не выдается и пишется сообщение
implicit deny, т.е. неявный запрет.

00:35:00.777 --> 00:35:10.182
Также когда мы явно прописываем
в policy explicit deny, т.е. доступ запрещен,

00:35:10.194 --> 00:35:15.319
то любой доступ, который вы в других местах в любом
количестве указываете как разрешен, но хотя бы в

00:35:15.331 --> 00:35:18.790
одном другом месте прописано,
что он запрещен, то оно

00:35:18.802 --> 00:35:24.660
преобладает над любым
разрешением и доступ вы не получаете.

00:35:25.660 --> 00:35:32.149
Давайте рассмотрим пример IAM policy.
Вы здесь видите пример IAM policy,

00:35:32.161 --> 00:35:40.253
это JSON документ, у него есть определенная
структура, ожидаются определенные ключи и значения.

00:35:40.265 --> 00:35:46.089
Давайте подробнее рассмотрим.
Мы видим, что есть version, есть statement.

00:35:46.101 --> 00:35:51.418
Version – это стандартное значение,
2012-10-17, ее вы не меняете,

00:35:51.430 --> 00:35:59.660
она остается, если что-то поменяется, то эту
информацию вы всегда можете найти в AWS документации.

00:36:00.660 --> 00:36:08.818
Идем дальше. Statement, т.е. это те наши policy,
которые передаются в массиве. В нашем случае

00:36:08.830 --> 00:36:17.001
мы видим, что у нас два policy, первый – это
разрешает, т.е. в пункте effect вы видите allow,

00:36:17.013 --> 00:36:23.829
второй – deny. Два возможных варианта,
либо allow, либо deny. Если мы говорим про action,

00:36:23.841 --> 00:36:30.843
то здесь перечисляется список операций, которым
мы либо предоставляем доступ, или запрещаем доступ.

00:36:30.855 --> 00:36:40.995
Что такое операция? Это название сервиса,
двоеточие и название операции. Например,

00:36:41.007 --> 00:36:50.985
S3 : get object. Это мы выдаем, либо запрещаем
доступ к сервису Amazon S3, а именно к операции

00:36:50.997 --> 00:36:55.317
получить объект, т.е. после того, как у нас есть
это разрешение, мы можем скачать файл.

00:36:55.329 --> 00:37:05.660
Если мы видим вместо операции звездочку, это значит
все операции в рамках этого сервиса предоставляются.

00:37:06.060 --> 00:37:11.675
Давайте рассмотрим следующий – это
resource, здесь мы указываем

00:37:11.687 --> 00:37:17.315
список ресурсов, для которых мы
хотим создать наш policy.

00:37:17.327 --> 00:37:22.684
Здесь важный момент, который стоит
упомянуть, это то, что, еще раз

00:37:22.696 --> 00:37:28.506
повторюсь, вне зависимости от того,
какое количество allow policy

00:37:28.518 --> 00:37:34.136
вы создаете, если у вас в каком-то
из любых существующих policy

00:37:34.148 --> 00:37:39.691
на этот ресурс, либо на эту сущность, т.е.
identity, есть deny policy,

00:37:39.703 --> 00:37:51.152
то оно имеет приоритет перед всеми allow.
Когда мы говорим, что нет ни allow, ни deny policy

00:37:51.164 --> 00:37:56.594
для конкретного ресурса, для конкретной
операции конкретного сервиса, то в этом случае нет

00:37:56.606 --> 00:38:02.664
явного предоставления доступа, т.е.
allow, и в этом случае мы ничего

00:38:02.676 --> 00:38:08.200
не предоставляем, по дефолту у нас
implicit deny, т.е. неявный запрет.

00:38:08.212 --> 00:38:13.836
Пару дополнительных моментов,
касательно resource-based policy.

00:38:13.848 --> 00:38:19.809
Мы с вами проговорили,
что это те policy, которые создаются

00:38:19.821 --> 00:38:25.354
для определенного ресурса,
и в этом документе указывается, так

00:38:25.366 --> 00:38:31.421
как она привязана уже к ресурсу,
то мы в policy документе указываем,

00:38:31.433 --> 00:38:37.060
кто и на какую операцию получает
или наоборот запрещает доступ.

00:38:37.660 --> 00:38:52.959
Давайте все то, что мы проговаривали ранее,
рассмотрим как блок-схему. Когда мы говорим, что

00:38:52.971 --> 00:38:58.382
у нас есть любой policy, не важно, resource-based
policy, либо это identity-based policy,

00:38:58.394 --> 00:39:05.699
то мы проверяем, есть ли на конкретную операцию
для этого пользователя, на конкретный ресурс

00:39:05.711 --> 00:39:14.827
explicit deny, если есть, мы говорим что
запрещаем доступ. Если explicit deny, т.е. явного

00:39:14.839 --> 00:39:24.416
запрета нет, то мы двигаемся дальше, теперь ищем,
есть ли explicit allow, значит, есть ли явное

00:39:24.428 --> 00:39:33.618
разрешение на конкретную операцию, если есть,
то доступ выдается. В том случае, если нет ни

00:39:33.630 --> 00:39:42.513
explicit deny, ни explicit allow, то в целях
безопасности мы запрещаем это действие, что

00:39:42.525 --> 00:39:52.520
называется implicit deny. Это важный момент, поэтому
я постарался в нескольких видах это объяснить.

00:39:53.520 --> 00:40:01.414
Двигаемся к следующему основному понятию, это
IAM groups. В целом мы про него говорили, давайте

00:40:01.426 --> 00:40:09.091
теперь закрепим более подробные детали. Первое
– в группе могут быть несколько пользователей и,

00:40:09.103 --> 00:40:17.165
соответственно, каждый пользователь может быть в
нескольких группах. Второй момент – группа не может

00:40:17.177 --> 00:40:25.089
быть вложной, таким образом вы не можете добавить
какую-то группу в другую группу, в группе могут

00:40:25.101 --> 00:40:32.737
быть только пользователи. Третье – не существует
какой-то группы по умолчанию, в которой у вас

00:40:32.749 --> 00:40:40.879
сидят все ваши пользователи. Если вам нужно всех
пользователей добавить в какую-то группу, вам нужно

00:40:40.891 --> 00:40:48.936
будет это сделать либо вручную, либо написать
простой скрипт, но это все делается на вашей стороне,

00:40:48.948 --> 00:40:52.440
создается специальная группа, как хотите ее
называете и добавляете всех ваших пользователей.

00:40:52.440 --> 00:41:04.085
Следующий важный компонент IAM – IAM roles.
IAM roles в большинстве случаев используется в двух

00:41:04.097 --> 00:41:10.101
случаях. Первый случай – это для того, чтобы
сервисам предоставить доступ к другим сервисам.

00:41:10.113 --> 00:41:14.773
Один из примеров мы в прошлый раз рассматривали.
Представим, у нас есть лямбда-функция и она

00:41:14.785 --> 00:41:21.372
в своей работе должна подключаться
к серверу Amazon S3, с него

00:41:21.384 --> 00:41:28.932
загружать по определенному пути некоторый файл,
изменять его и перезаливать обратно. В этом случае,

00:41:28.944 --> 00:41:34.191
для того чтобы лямбда смогла это сделать,
нужно к role, которая привязана к этой функции,

00:41:34.203 --> 00:41:39.192
выдать соответствующие права.
Вы прописываете policy, привязываете

00:41:39.204 --> 00:41:45.979
к role, но мы помним с вами, что мы можем создать
inline policy, которые есть только в этой role,

00:41:45.991 --> 00:41:52.640
а также можем воспользоваться managed policy,
которая управляется, поддерживается самим Amazon.

00:41:53.640 --> 00:41:58.833
Второй вариант использования role – это
кросс-аккаунтный доступ пользователей с

00:41:58.845 --> 00:42:05.972
одного AWS аккаунта к ресурсам другого
AWS аккаунта. Идея в том, что на втором

00:42:05.984 --> 00:42:11.717
аккаунте создается и прописывается role,
в котором указывается account ID

00:42:11.729 --> 00:42:18.095
основного account ID, а здесь в основном
account ID, где сидят ваши пользователи,

00:42:18.107 --> 00:42:26.361
выдается доступ к assume role операции,
указывается конкретный ресурс, ARN этого

00:42:26.373 --> 00:42:30.639
ресурса на втором AWS аккаунте,
и только после этого, когда с двух сторон выдали

00:42:30.651 --> 00:42:36.833
разрешение, то у этого пользователя
есть возможность переключиться на ту role и

00:42:36.845 --> 00:42:43.040
со всем тем доступом, который есть в этой role,
работать в другом AWS аккаунте.

00:42:44.040 --> 00:42:50.594
Мы с вами подошли к концу второй части нашей
сегодняшней лекции, познакомились с сервисом IAM.

00:42:50.606 --> 00:42:57.091
Это очень важный сервис, который используется
во всех проектах, IT-инфраструктурах

00:42:57.103 --> 00:43:04.882
в облаке по той простой причине,
что мы работаем удаленно, подключаемся

00:43:04.894 --> 00:43:09.174
к облаку удаленно, и для того, чтобы это делать,
нам нужно выдать определенные права.

00:43:09.186 --> 00:43:17.401
Более того, когда мы говорим IT-инфраструктура,
это такая система, где внутри системы сидят наши

00:43:17.413 --> 00:43:20.599
сервисы, и они работают между собой.
Чтобы эти сервисы могли работать

00:43:20.611 --> 00:43:25.809
между собой, нам также нужно
выдать соответствующие права.

00:43:25.821 --> 00:43:31.150
Основное правило, когда мы выдаем права,
это то, что мы выдаем по принципу least privilege,

00:43:31.174 --> 00:43:38.502
т.е. выдаем только те права, которые нужны в данный
момент для этого identity, либо для этого ресурса.

00:43:38.514 --> 00:43:45.709
Если остановимся на основных понятиях,
то это IAM policy, это то, что выдает права,

00:43:45.721 --> 00:43:51.000
и у нас есть три сущности,
это IAM user, IAM group, и IAM role.

00:43:52.000 --> 00:43:59.980
Мы с вами добрались до третьей секции, и здесь мы
поговорим, какие шаги нужно предпринять,

00:43:59.992 --> 00:44:03.051
какие действия нужно сделать для того,
чтобы максимально обезопасить

00:44:03.063 --> 00:44:11.908
ваш новый созданный AWS аккаунт.
Когда вы создаете новый AWS аккаунт,

00:44:11.920 --> 00:44:17.605
то в этом аккаунте ничего нет. Единственный
вариант подключиться к облаку, это под

00:44:17.617 --> 00:44:23.690
root user, это так называемый супер пользователь,
у которого есть полный доступ ко всему.

00:44:23.702 --> 00:44:29.822
В best practices не рекомендуется
использовать root user для ежедневных задач,

00:44:29.834 --> 00:44:37.578
создать специальный пароль, создать для него
MFA и спрятать подальше, использовать только в тех

00:44:37.590 --> 00:44:42.886
случаях, когда есть необходимость. Есть определенные
действия внутри AWS облака, когда вам нужно

00:44:42.898 --> 00:44:50.571
использовать root пользователя, вы с этими
действиями будете встречаться редко, потому

00:44:50.583 --> 00:44:54.800
как обычно это разовые операции,
а не какие-то повторяющиеся действия.

00:44:55.520 --> 00:45:02.073
Теперь, если говорим про best practices,
что рекомендует AWS, это для вас

00:45:02.085 --> 00:45:09.360
самого, как владельца этого AWS аккаунта,
создать специального пользователя admin

00:45:09.372 --> 00:45:16.108
и уже под admin заходить и производить
все ежедневные операции, которые вам нужны.

00:45:16.120 --> 00:45:19.046
Когда мы говорим про ваших сотрудников,
то для них создаются отдельные

00:45:19.058 --> 00:45:25.147
пользователи, желательно рекомендуется
создать специальную группу в зависимости

00:45:25.159 --> 00:45:32.549
от должностных обязанностей ваших
сотрудников и далее уже все role, все

00:45:32.561 --> 00:45:43.478
policy привязывать к группе. Одна из других
настроек, которые вам также нужно

00:45:43.490 --> 00:45:50.419
сделать в root аккаунте, это для root аккаунта,
если они есть, удалить access ключи.

00:45:50.431 --> 00:45:57.418
Как мы помним, они используется для
программного доступа через CLI либо SDK к облаку.

00:45:57.430 --> 00:46:02.074
Так как через root пользователя
ничего происходить не будет,

00:46:02.086 --> 00:46:07.724
он обычно используется только тогда,
когда вы сами лично заходите, во всех

00:46:07.736 --> 00:46:11.386
других случаях нужно использовать специально
созданных пользователей, либо role,

00:46:11.398 --> 00:46:18.211
если это сервис. Поэтому эти access ключи
вы удаляете. Другой момент – это то,

00:46:18.223 --> 00:46:25.136
что вам нужно создать так называемый
password policy и сделать его по возможности

00:46:25.148 --> 00:46:32.232
сложным, т.е. это тот документ, который
описывает насколько сложный

00:46:32.244 --> 00:46:44.720
или из каких символов должен состоять
пароль для всех IAM пользователей.

00:46:45.400 --> 00:46:51.127
Еще одним функционалом, который
помогает еще больше обезопасить ваше

00:46:51.139 --> 00:46:56.878
облако, является MFA. MFA – это опциональный
функционал, поэтому вам нужно ее специально

00:46:56.890 --> 00:47:05.789
включить и активировать. Что значит MFA?
MFA – это Multi-Factor Authentication.

00:47:05.801 --> 00:47:14.268
Идея в том, что пользователи при логине в AWS
Management Account предоставляли несколько факторов.

00:47:14.280 --> 00:47:20.167
Что такое фактор? Фактор – это, например,
что пользователь знает. А пользователь

00:47:20.179 --> 00:47:26.061
знает логин и пароль. Другой фактор – это
то, что у пользователя есть.

00:47:26.073 --> 00:47:31.800
Это что-то такое физическое, которое
не может быть у злоумышленника.

00:47:31.920 --> 00:47:41.733
Например, это телефон и как это реализовано, есть так
называемый виртуал MFA. Устанавливается приложение

00:47:41.745 --> 00:47:47.486
в ваш смартфон и делается специальная
привязка вашего аккаунта внутри этого

00:47:47.498 --> 00:47:56.232
приложения с AWS Management Account
пользователем. После того как привязка

00:47:56.244 --> 00:48:03.017
произошла в приложении вам каждые
30 секунд генерируется шестизначное число.

00:48:03.029 --> 00:48:12.234
Таким образом, в момент, когда вы проходите
аутентификацию, вы вводите ваш логин и пароль.

00:48:12.246 --> 00:48:19.872
После этого вы вводите ваш MFA ключ и уже
на стороне AWS Management Account происходит

00:48:19.884 --> 00:48:24.187
проверка: действительно ли в это время, этому
пользователю было отображено это шестизначное число.

00:48:24.199 --> 00:48:32.083
Если да, оно совпадает, это говорит о том, что вы как
пользователь с двух факторов себя идентифицировали.

00:48:32.095 --> 00:48:41.320
Таким образом вы исключаете еще больше вероятность
того, что это не вы, а какой-то злоумышленник.

00:48:42.040 --> 00:48:48.736
Следующим шагом, который помогает
увеличить безопасность вашего облака, это

00:48:48.748 --> 00:48:55.544
так называемый AWS CloudTrail. Это сервис,
который является аналогом черного

00:48:55.556 --> 00:49:02.611
ящика в самолете. Он является максимально
защищенным и записывает все те вызовы

00:49:02.623 --> 00:49:15.425
к AWS API, т.е. все те изменения вашей
инфраструктуры в облаке. По умолчанию

00:49:15.437 --> 00:49:23.312
включено и бесплатно хранится 90 дней
всех ваших действий в вашем аккаунте.

00:49:23.324 --> 00:49:30.123
У вас так же есть такая возможность,
если же вам необходимо настроить какие-то

00:49:30.135 --> 00:49:39.547
дополнительные алерты или же хранить не 90 дней,
а больше для каких-то определенных

00:49:39.559 --> 00:49:44.364
положений, если вы какая-то финансовая
организация либо государственная, вам

00:49:44.376 --> 00:49:48.063
необходимо эту информацию хранить
какое-то количество лет. В этом случае вы

00:49:48.075 --> 00:49:55.302
создаете так называемый Trail, это ресурс
сервиса AWS CloudTrail, который как раз

00:49:55.314 --> 00:50:02.448
таки накапливает все действия, происходящие
в вашем аккаунте на какой-то больший период.

00:50:02.460 --> 00:50:11.076
В этом случае может взыматься определенная плата.
Trail хранит все свои данные внутри Amazon S3,

00:50:11.088 --> 00:50:19.285
а так как логи это текстовая информация, то обычно
расходы на AWS CloudTrail достаточно низкие.

00:50:19.297 --> 00:50:24.345
Но в случае, когда у вас возникает какая-то
проблема внутри облака, для целей расследования

00:50:24.357 --> 00:50:32.800
это просто незаменимая информация, поэтому
рекомендуется ее включать и держать всегда активной.

00:50:33.280 --> 00:50:39.068
Мы с вами проходили на предыдущих
занятиях о сервисах связанных с billing и

00:50:39.080 --> 00:50:47.491
затратами на облако, т.е. Cost. Вам также как
best practice рекомендуется настроить

00:50:47.503 --> 00:50:55.679
алерты на бюджет, также рекомендуется
настроить так называемые отчеты, так чтобы

00:50:55.691 --> 00:51:01.650
вы могли быстро и оперативно видеть
все ваши расходы и предпринимать какие-то

00:51:01.662 --> 00:51:05.682
определенные действия. Это вы можете
сделать внутри AWS Cost Explorer, если же

00:51:05.694 --> 00:51:09.803
вам нужна более детальная информация,
то вы можете воспользоваться сервисом AWS

00:51:09.815 --> 00:51:15.612
Cost and Usage Reports, который все данные
и метаданные, связанные с вашими расходами,

00:51:15.624 --> 00:51:22.273
со всеми деталями выгружает в Amazon
S3 и вы эти данные можете использовать

00:51:22.285 --> 00:51:28.371
для построения уникальных кастомных отчетов.
Зачастую использование сервиса AWS

00:51:28.383 --> 00:51:32.404
Cost and Usage Reports является достаточно
продвинутым вариантом, практикуется

00:51:32.416 --> 00:51:37.737
в крупных компаниях, поэтому в вашем
случае нет смысла в самом начале терять время

00:51:37.749 --> 00:51:44.700
на изучение, на настройку этих отчетов, а можно
положиться на сервис AWS Cost Explorer,

00:51:44.712 --> 00:51:51.182
который все необходимое вам покажет
и в удобном виде сохранит ваши отчеты.

00:51:51.194 --> 00:51:59.218
На этом мы подошли к концу третьей
части нашей лекции, и мы поговорили про все

00:51:59.230 --> 00:52:05.325
те основные шаги, действия, те сервисы и
тот функционал, который доступен в

00:52:05.337 --> 00:52:11.520
AWS облаке для максимального обеспечения
безопасности вашей инфраструктуры в облаке.

00:52:12.280 --> 00:52:18.243
Мы переходим к четвертой части нашей
лекции и поговорим про дополнительный

00:52:18.255 --> 00:52:23.354
набор сервисов, которые помогают
нам обезопасить наши аккаунты.

00:52:23.366 --> 00:52:34.537
Самый первый сервис – это AWS Organizations.
AWS Organizations – это сервис, который позволяет

00:52:34.549 --> 00:52:44.632
центрально управлять несколькими AWS аккаунтами.
Также он позволяет настроить consolidated billing.

00:52:44.644 --> 00:52:49.064
Идея в том, что мы все расходы на
каждом из наших AWS аккаунтов собираем

00:52:49.076 --> 00:52:54.490
в одно место и отображаем в удобном
виде в одном основном аккаунте.

00:52:54.502 --> 00:53:01.088
Для того, чтобы обеспечить безопасность,
на стороне AWS Organizations

00:53:01.100 --> 00:53:05.815
тоже есть некоторый функционал.
Он называется Service control policies.

00:53:05.827 --> 00:53:12.997
Идея в том, что это такой же JSON документ,
это такая же policy, но оно привязывается уже к

00:53:13.009 --> 00:53:19.014
AWS аккаунту. Более того, мы с вами помним,
что есть функционал OU, т.е. organizational units

00:53:19.026 --> 00:53:24.330
внутри AWS Organizations, который позволяет
ваши аккаунты между собой группировать.

00:53:24.342 --> 00:53:31.913
Таким образом, вы можете гибко и
максимально удобно группировать ваши

00:53:31.925 --> 00:53:36.411
аккаунты, а Service Control Policies
есть возможность привязывать не

00:53:36.423 --> 00:53:40.000
к отдельному аккаунту, а к целой группе,
т.е. к organizational units.

00:53:40.360 --> 00:53:46.670
Таким образом максимально правильно
настроить доступы, например, в тех аккаунтах,

00:53:46.682 --> 00:53:52.464
где у вас происходит разработка,
дать больше доступа и больше контроля над

00:53:52.476 --> 00:53:58.483
ресурсами, а в ваших production аккаунтах
дать максимально меньше доступа, но

00:53:58.495 --> 00:54:03.360
так, чтобы все работало корректно и
исключить возможные поломки ввиду того,

00:54:03.372 --> 00:54:09.222
что у кого-то где-то больше есть
доступа и если в production среду попадает

00:54:09.234 --> 00:54:15.250
какой-то злоумышленник, мог нанести
минимальный вред вашей IT-инфраструктуре.

00:54:15.262 --> 00:54:21.581
Следующий сервис – AWS KMS, т.е.
Key Management Service. Этот сервис помогает нам

00:54:21.593 --> 00:54:28.692
управлять нашими ключами шифрования в облаке.
На текущий момент вам достаточно

00:54:28.704 --> 00:54:32.158
знать определение, более подробно
об этом сервисе мы будем говорить на

00:54:32.170 --> 00:54:38.252
следующих занятиях. Следующий сервис
– Amazon Cognito. Мы этот сервис не будем

00:54:38.264 --> 00:54:43.186
подробно рассматривать, так как для
цели реального экзамена достаточно знать

00:54:43.198 --> 00:54:49.440
определение и определение следующее.
Это сервис, который позволяет вам управлять

00:54:49.452 --> 00:54:55.986
пользователями ваших приложений, т.е.
дает возможность авторизовываться,

00:54:55.998 --> 00:55:00.700
регистрироваться и менеджить, хранить
информацию о всех ваших пользователях.

00:55:00.712 --> 00:55:11.100
Следующий managed сервис, связанный с
безопасностью – AWS Shield. Вам также достаточно

00:55:11.112 --> 00:55:17.280
знать определение, оно следующее – этот
сервис позволяет вам защищаться от DDoS-атак.

00:55:18.440 --> 00:55:26.667
Мы с вами переходим к пятой части нашей лекции
и поговорим про то, как мы можем защищать наши

00:55:26.679 --> 00:55:37.180
данные в облаке. Первое состояние, в котором
данные могут пребывать, это так называемый at rest,

00:55:37.192 --> 00:55:42.811
т.е. это тот случай, когда данные хранятся
на жестких дисках. В этом случае у нас есть

00:55:42.823 --> 00:55:51.506
возможность использовать так называемый AES-256
шифрование, либо воспользоваться сервисом AWS KMS,

00:55:51.518 --> 00:55:59.726
про который мы ранее говорили, для шифрования
данных в состоянии покоя, в состоянии хранения.

00:55:59.738 --> 00:56:08.221
Другое состояние данных, в котором их также
нужно защищать, это в состоянии передачи, т.е. когда

00:56:08.233 --> 00:56:14.272
мы передаем наши данные по сети. В этом
случае есть сервис AWS Certificate Manager, который

00:56:14.284 --> 00:56:24.860
позволяет нам генерировать SSL ключи, либо TLS
сертификаты, для того чтобы защитить поток данных.

00:56:25.640 --> 00:56:31.381
Это также относится к веб-трафику, т.е. используя
этот сервис AWS Certificate Manager мы можем

00:56:31.393 --> 00:56:51.582
настроить Secure HTTP, т.е. HTTPS соединение.
Увидев этот список, вы можете определить,

00:56:51.594 --> 00:56:56.715
действительно ли для этих бакетов нужен
доступ с интернета, если же нет, то вы сможете

00:56:56.727 --> 00:57:01.833
точечно пройтись по ним и
заблокировать общий доступ с интернета.

00:57:01.845 --> 00:57:09.533
В зависимости от того, в какой сфере работает ваша
компания, в какой стране вы находитесь, либо в каком

00:57:09.545 --> 00:57:17.101
регионе земного шара, вы должны соответствовать
стандартам качества, либо регуляторным требованиям.

00:57:17.113 --> 00:57:22.385
AWS со своей стороны на периодической
основе проходит разные проверки,

00:57:22.397 --> 00:57:27.681
получает сертификаты качества
и заключительные документы,

00:57:27.693 --> 00:57:32.777
что он соответствует некоторым
регуляторным требованиям.

00:57:32.789 --> 00:57:42.894
Из тех compliance программ, которые стоит
упомянуть и которые могут прийти на AWS экзамене,

00:57:42.906 --> 00:57:48.100
это что AWS получил сертификат
качества ISO/IEC 27001:2013.

00:57:48.480 --> 00:57:55.841
Также есть подтверждение, что
соответствует требованиям акта HIPAA.

00:57:55.853 --> 00:57:59.491
Это для тех компаний,
которые работают в сфере медицины.

00:57:59.503 --> 00:58:04.694
Третье – это GDPR, это для компаний, которые
в большинстве случаев находятся в Европе,

00:58:04.706 --> 00:58:15.550
и в этом документе описываются требования,
как хранить и как работать с персональными данными.

00:58:15.562 --> 00:58:20.497
Все эти документы,
сертификаты качества, заключительные

00:58:20.509 --> 00:58:25.527
документы вы можете скачать
в так называемом сервисе AWS Artifact.

00:58:25.539 --> 00:58:36.460
Но это не совсем сервис, а больше набор страничек, в
котором вы можете по требованиям, по необходимости

00:58:36.472 --> 00:58:41.660
для вашей компании скачать эти документы.
Если мы говорим compliance в рамках

00:58:41.672 --> 00:58:51.883
AWS аккаунта для себя, для того чтобы понимать,
что происходит, какие ресурсы есть, какие

00:58:51.895 --> 00:58:57.249
изменения в этих ресурсах произошли, то мы можем
воспользоваться сервисом AWS Config, который

00:58:57.261 --> 00:59:07.296
фиксирует все изменения и может выполнить
дополнительные действия по определенным условиям.

00:59:07.308 --> 00:59:12.680
Этого определения достаточно для
целей экзамена, и мы идем дальше.

00:59:13.880 --> 00:59:19.997
У нас есть самый последний бонусный
раздел нашей лекции, мы максимально

00:59:20.009 --> 00:59:25.968
быстро по нему пройдемся.
Есть такой сервис AWS Service Catalog.

00:59:25.980 --> 00:59:31.932
Идея этого сервиса в том, чтобы выбрать
те сервисы, которые одобрены вашей

00:59:31.944 --> 00:59:41.824
компанией, и уже предоставить
вашим сотрудникам доступ именно к этим

00:59:41.836 --> 00:59:50.615
сервисам через AWS Service Catalog.
Другие три сервиса – это Amazon Macie,

00:59:50.627 --> 00:59:55.589
это тот сервис, который использует
машинное обучение для того,

00:59:55.601 --> 00:59:59.812
чтобы сканировать все данные,
которые есть в вашей инфраструктуре, чтобы

00:59:59.824 --> 01:00:04.621
выявить так называемые персональные данные.
Дальше уже с выявленной информацией вы

01:00:04.633 --> 01:00:12.485
можете соответственно действовать, либо сохранять
эти данные в специальное хранилище, либо удалить,

01:00:12.497 --> 01:00:21.402
если они случайно туда попали. Другие два сервиса
похожи, это – Amazon Inspector и Amazon GuardDuty.

01:00:21.414 --> 01:00:25.285
Идея этих сервисов в том,
что это managed-сервисы Amazon,

01:00:25.297 --> 01:00:31.237
и как только вы ее запускаете,
происходит автоматическое сканирование

01:00:31.249 --> 01:00:37.287
вашего облака, вашей IT-инфраструктуры
для выявления некоторых проблем

01:00:37.299 --> 01:00:41.585
безопасности, и в последующем
составляется некоторый список рекомендаций,

01:00:41.597 --> 01:00:48.960
чтобы улучшить состояние
безопасности вашей IT-инфраструктуры.

01:00:49.240 --> 01:00:53.886
На этом мы добрались до
последних слайдов нашей лекции.

01:00:53.898 --> 01:00:59.109
Мы завершаем нашу лекцию.
Я бы хотел вкратце дать некоторый summary.

01:00:59.121 --> 01:01:04.931
Первое, мы разобрали,
что такое Shared Responsibility Model.

01:01:04.943 --> 01:01:10.528
Далее мы познакомились
подробно с сервисом AWS IAM.

01:01:10.540 --> 01:01:15.505
После этого мы рассмотрели те шаги и
действия, которые рекомендуется

01:01:15.517 --> 01:01:22.783
предпринять при создании нового AWS аккаунта.
А далее рассмотрели ряд сервисов AWS,

01:01:22.795 --> 01:01:27.524
которые так или иначе связаны с обеспечением
безопасности в облаке. Здесь хотел бы отметить,

01:01:27.536 --> 01:01:31.937
что вы большие молодцы.
Я понимаю, что объем информации

01:01:31.949 --> 01:01:36.834
большой, много новых терминов,
много новых названий сервисов.

01:01:36.846 --> 01:01:41.332
Самое главное, вы не переживайте. Рекомендация
от меня – делать некоторые конспекты,

01:01:41.344 --> 01:01:50.573
как минимум записывать названия сервисов.
Когда вы это записываете, либо пересматриваете

01:01:50.585 --> 01:01:55.316
лекции, названия сервисов уже будут
запоминаться и казаться знакомыми.

01:01:55.328 --> 01:02:03.040
Мы более подробно будем проговаривать про
некоторые сервисы, которые встречаются чаще

01:02:03.540 --> 01:02:10.659
на реальном экзамене AWS. Также у нас будут
активности, будет демо. Я вам покажу, как выглядит

01:02:10.671 --> 01:02:17.803
AWS Management Console на примере разных сервисов
для того, чтобы лучше закрепить, визуально лучше

01:02:17.815 --> 01:02:22.013
запомнилось. У нас также будут несколько
лабораторных активностей, в которых вы сами

01:02:22.025 --> 01:02:30.674
сможете попробовать и пощупать облако.
Для некоторых из вас такая активность поможет лучше

01:02:30.686 --> 01:02:35.645
запомнить, понять, как выглядит облако,
как с ней работать, какие преимущества вы

01:02:35.657 --> 01:02:41.356
получаете и так далее. На этом слайде
предоставлены ссылки, которые вам могут быть

01:02:41.368 --> 01:02:50.333
полезны, если вы хотите о какой-то из этих тем
узнать более подробно. На этом мы завершаем

01:02:50.345 --> 01:02:55.540
наше лекционное занятие. Спасибо вам большое.
Удачи! Увидимся на следующих занятиях.