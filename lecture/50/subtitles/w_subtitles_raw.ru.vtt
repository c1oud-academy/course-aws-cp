WEBVTT

00:00:00.000 --> 00:00:02.600
Добрый день, уважаемые студенты!

00:00:02.600 --> 00:00:04.340
Я рад вас всех видеть.

00:00:04.340 --> 00:00:07.620
Мы с вами вместе добрались до 4-го модуля и сегодня

00:00:07.620 --> 00:00:09.860
поговорим про безопасность в облаке.

00:00:09.860 --> 00:00:15.460
Сегодня мы с вами разберем ряд AWS сервисов, связанных

00:00:15.460 --> 00:00:16.460
с безопасностью.

00:00:16.460 --> 00:00:22.740
Что-то из этого списка мы поговорим более подробно,

00:00:22.740 --> 00:00:26.140
о чем-то поговорим менее подробно, то есть остановимся

00:00:26.140 --> 00:00:29.780
на самых основных моментах и определение этих менее

00:00:29.780 --> 00:00:31.700
популярных сервисов.

00:00:31.700 --> 00:00:34.300
Тем не менее, эти сервисы могут прийти на реальном

00:00:34.300 --> 00:00:39.340
AWS-экзамене и те знания, та информация, которую

00:00:39.340 --> 00:00:43.260
вы получите на наших занятиях, будет достаточно для того,

00:00:43.260 --> 00:00:50.300
чтобы вы успешно ответили на вопросы реального AWS-экзамена.

00:00:50.300 --> 00:00:54.640
Давайте вкратце остановимся на каждой из секций.

00:00:54.640 --> 00:00:57.980
Первая — это AWS Shared Responsibility Model.

00:00:57.980 --> 00:01:02.100
Мы поговорим, что же это такое и как оно нам помогает.

00:01:02.100 --> 00:01:06.300
Далее мы познакомимся с сервисом AWS IAM.

00:01:06.300 --> 00:01:09.940
После этого мы определим те шаги, которые нам помогают

00:01:09.940 --> 00:01:13.340
обезопасить наш новый AWS-аккаунт.

00:01:13.340 --> 00:01:16.620
Далее познакомимся с некоторыми AWS-сервисами, которые также

00:01:16.620 --> 00:01:17.860
связаны с безопасностью.

00:01:17.860 --> 00:01:24.960
И поговорим о том, как мы можем защитить наши данные

00:01:24.960 --> 00:01:28.320
в облаке.

00:01:28.320 --> 00:01:31.860
Мы с вами начинаем первую секцию, а именно AWS Shared

00:01:31.860 --> 00:01:35.060
Responsibility Model.

00:01:35.060 --> 00:01:37.780
Когда мы говорим про безопасность в облаке, то всегда есть

00:01:37.780 --> 00:01:38.780
две стороны.

00:01:38.780 --> 00:01:41.660
Первая сторона — это мы как пользователи облака,

00:01:41.660 --> 00:01:44.500
и с другой стороны — это облачный провайдер.

00:01:44.500 --> 00:01:51.700
И подразделяют вот эту ответственность на две части логически.

00:01:51.700 --> 00:01:56.620
Это то, что облачный провайдер отвечает за security of the cloud,

00:01:56.620 --> 00:01:59.980
то есть за безопасность самого облака.

00:01:59.980 --> 00:02:03.220
Когда мы говорим про пользователей, то есть нас, мы говорим,

00:02:03.220 --> 00:02:08.500
что мы отвечаем за безопасность security in the cloud, то есть безопасность

00:02:08.500 --> 00:02:13.620
в самом облаке.

00:02:13.620 --> 00:02:18.020
Мы сказали, что AWS облачный провайдер отвечает за безопасность

00:02:18.020 --> 00:02:19.020
облака.

00:02:19.020 --> 00:02:21.020
Что же это значит?

00:02:21.020 --> 00:02:24.820
Это значит то, что он обеспечивает физическую безопасность

00:02:24.820 --> 00:02:30.780
дата-центров 24 на 7, обеспечивается охраной и всем необходимым,

00:02:30.780 --> 00:02:34.280
что не дает возможность посторонним проникнуть

00:02:34.280 --> 00:02:35.280
в эти дата-центры.

00:02:35.280 --> 00:02:42.660
Следующее — это безопасность hardware and software инфраструктуры,

00:02:42.660 --> 00:02:46.500
то есть это все то железо, это наши сервера, жесткие

00:02:46.500 --> 00:02:50.900
диски и все любое другое оборудование, которое

00:02:50.900 --> 00:02:52.700
принадлежит AWS.

00:02:52.700 --> 00:02:56.400
Дальше software infrastructure имеется в виду операционные

00:02:56.400 --> 00:03:00.740
системы, все приложения, приложения виртуализации.

00:03:00.740 --> 00:03:06.180
Все это также обеспечивается безопасностью, имеется

00:03:06.180 --> 00:03:12.500
в виду на постоянной основе обновляется, устанавливаются

00:03:12.500 --> 00:03:17.680
различные обновления безопасности для того, чтобы никто как

00:03:17.680 --> 00:03:22.260
физически, так и виртуально не мог проникнуть за границы

00:03:22.260 --> 00:03:24.180
облачного провайдера.

00:03:24.180 --> 00:03:27.980
Далее мы говорим безопасность сетевой инфраструктуры

00:03:27.980 --> 00:03:32.940
и виртуализации, то есть это наши роутеры, свечи,

00:03:32.940 --> 00:03:37.660
load balancer, firewall, кабельная часть, все кабели и так

00:03:37.660 --> 00:03:38.660
далее.

00:03:38.660 --> 00:03:46.820
Да, мы с вами, к сожалению, не можем приехать к любому

00:03:46.820 --> 00:03:52.260
дата центру посмотреть, сами убедиться, это запрещено,

00:03:52.260 --> 00:03:57.300
но на постоянной основе AWS приглашает специальных

00:03:57.300 --> 00:04:01.260
аудиторов для того, чтобы они проверили, убедились,

00:04:01.260 --> 00:04:07.180
выпустили соответствующие отчеты о том, что вся инфраструктура,

00:04:07.180 --> 00:04:11.340
она обеспечена безопасностью, все это соответствует

00:04:11.340 --> 00:04:16.060
стандартам, все эти отчеты, которые периодически выходят,

00:04:16.060 --> 00:04:20.380
есть возможность скачать на бесплатной основе по

00:04:20.380 --> 00:04:21.380
необходимости.

00:04:21.380 --> 00:04:26.460
Давайте теперь подробнее поговорим, за что отвечает

00:04:26.460 --> 00:04:30.100
пользователь, то есть мы и как обеспечить безопасность

00:04:30.100 --> 00:04:31.100
в облаке.

00:04:31.100 --> 00:04:36.940
В случае, если мы используем сервис EC2, то наша ответственность

00:04:36.940 --> 00:04:40.180
выбрать ту операционную систему, которая обновлена,

00:04:40.180 --> 00:04:43.340
у которых нет проблем с безопасностью, если же есть

00:04:43.340 --> 00:04:46.580
проблемы с безопасностью, то должны быть установлены

00:04:46.580 --> 00:04:48.440
все патчи безопасности.

00:04:48.440 --> 00:04:52.220
Далее это наша ответственность выбирать те приложения,

00:04:52.220 --> 00:04:57.620
у которых нет опять же уязвимостей, либо если есть, то должны

00:04:57.620 --> 00:05:01.220
быть применены соответствующие патчи безопасности.

00:05:01.220 --> 00:05:09.420
Когда мы говорим про инфраструктуру, то при настройке сетей

00:05:09.420 --> 00:05:12.700
мы должны правильно настроить секьюрити группы, правильно

00:05:12.700 --> 00:05:16.340
должна быть настроена вся сеть, чтобы не было дыр

00:05:16.340 --> 00:05:17.340
безопасности.

00:05:17.340 --> 00:05:23.020
Также мы говорим, что нужно провести некоторую беседу

00:05:23.020 --> 00:05:28.300
с командой для того, чтобы проводить аккаунт менеджмент,

00:05:28.300 --> 00:05:34.020
правильно сохранять, правильно хранить ключи безопасности,

00:05:34.020 --> 00:05:36.900
логины, пароли и так далее.

00:05:36.900 --> 00:05:41.540
И самое основное, которое также всегда идет рядом,

00:05:41.540 --> 00:05:43.940
это безопасность наших данных.

00:05:43.940 --> 00:05:48.460
То есть данных in transit, когда мы передаем, должны быть

00:05:48.460 --> 00:05:52.660
зашифрованы, и безопасность данных at rest, то есть во

00:05:52.660 --> 00:05:55.780
время хранения они тоже должны быть зашифрованы

00:05:55.780 --> 00:05:59.580
в виде для того, чтобы исключить возможные атаки, потерю

00:05:59.580 --> 00:06:08.980
данных, взлом самой инфраструктуры и поломку всего того рабочего

00:06:08.980 --> 00:06:10.220
процесса, который есть.

00:06:10.220 --> 00:06:18.660
Теперь хотелось бы рассмотреть вопросы безопасности с

00:06:18.660 --> 00:06:22.460
точки зрения модели предоставления сервиса.

00:06:22.460 --> 00:06:27.420
Как мы помним, у нас есть три вида, это IaaS, PaaS и SaaS.

00:06:27.420 --> 00:06:33.180
Здесь основная идея в том, что начиная от IaaS до SaaS,

00:06:33.180 --> 00:06:37.780
уровень контроля над эти ресурсами становится меньше.

00:06:37.780 --> 00:06:41.640
Таким образом, и ту часть, которую мы перестаем контролировать

00:06:41.640 --> 00:06:49.700
и передаем облачному провайдеру, то обеспечение безопасности

00:06:49.700 --> 00:06:52.460
этой части также переходит облачному провайдеру.

00:06:52.460 --> 00:06:59.900
Например, в случае с IaaS говорим про EC2, то обеспечение

00:06:59.900 --> 00:07:01.780
безопасности это на нашей стороне.

00:07:01.780 --> 00:07:07.860
В случае, когда мы говорим IWS RDS, это PaaS решение, то

00:07:07.860 --> 00:07:10.900
мы за операционную систему, за ее безопасность уже

00:07:10.900 --> 00:07:11.900
не отвечаем.

00:07:11.900 --> 00:07:14.300
Мы это передали облачному провайдеру.

00:07:14.300 --> 00:07:18.700
В случае, когда мы говорим software as a service, например,

00:07:18.700 --> 00:07:25.900
та же почта, либо, например, есть такой сервис IWS Chime,

00:07:25.900 --> 00:07:29.380
это аналог Zoom, только сервис IWS.

00:07:29.380 --> 00:07:32.980
Они предоставлены в виде готового приложения, и

00:07:32.980 --> 00:07:37.020
уже фактически у нас мало контроля или практически

00:07:37.020 --> 00:07:39.220
нет контроля ее как-то изменять.

00:07:39.220 --> 00:07:47.700
Таким образом, все то, что не относится к нам, должно

00:07:47.700 --> 00:07:56.940
быть обезопасено на стороне облачного провайдера.

00:07:56.940 --> 00:07:59.880
Для того, чтобы закрепить пройденный материал, я

00:07:59.880 --> 00:08:04.140
бы хотел с вами провести некоторую активность.

00:08:04.140 --> 00:08:07.980
Я буду задавать вопросы, а вам нужно ответить правильно.

00:08:07.980 --> 00:08:11.780
За это ответственны IWS, то есть это относится к security

00:08:11.780 --> 00:08:15.580
of the cloud, или за это ответственны пользователи облака, то

00:08:15.580 --> 00:08:19.860
есть мы, и относятся к security in the cloud.

00:08:19.860 --> 00:08:23.980
Сейчас я вкратце пройдусь по инфраструктуре.

00:08:23.980 --> 00:08:26.900
Представим, что у нас есть IWS аккаунт.

00:08:26.900 --> 00:08:30.620
Мы используем сервис S3, дальше мы используем сервис

00:08:30.620 --> 00:08:36.100
VPC, в котором у нас есть EC2 instance, а также есть инстанс

00:08:36.100 --> 00:08:38.940
оракловой базы данных.

00:08:38.940 --> 00:08:40.740
Давайте теперь пройдемся по вопросам.

00:08:40.740 --> 00:08:44.100
Вам нужно будет ставить на паузу вопрос, брать какое-то

00:08:44.100 --> 00:08:49.260
время на подумать, и будем смотреть, сможете ли вы

00:08:49.260 --> 00:08:50.580
ответить правильно.

00:08:50.580 --> 00:08:51.580
Первый вопрос.

00:08:51.580 --> 00:08:56.860
Обновление и установка патчей безопасности операционной

00:08:56.860 --> 00:09:00.380
системы на EC2 instance.

00:09:00.380 --> 00:09:01.500
Можете поставить на паузу.

00:09:01.500 --> 00:09:07.100
Правильный ответ customer, то есть за это ответственны

00:09:07.100 --> 00:06:25.680
пользователи.

00:09:08.100 --> 00:09:10.580
Следующий вопрос.

00:09:10.580 --> 00:09:12.420
Физическая безопасность дата центра.

00:09:12.420 --> 00:09:18.580
Правильный ответ IWS.

00:09:18.580 --> 00:09:19.580
Третий вопрос.

00:09:19.580 --> 00:09:26.820
Кто отвечает за безопасность инфраструктуры в виртуализации?

00:09:26.820 --> 00:09:33.140
Правильный ответ IWS.

00:09:33.140 --> 00:09:34.860
Следующий вопрос.

00:09:34.860 --> 00:09:40.700
Кто отвечает за правильную настройку security group в EC2

00:09:40.700 --> 00:09:41.700
instance?

00:09:41.700 --> 00:09:48.940
Правильный ответ the customer, то есть мы.

00:09:48.940 --> 00:09:49.940
Пятый вопрос.

00:09:49.940 --> 00:09:56.300
Конфигурация, то есть настройка приложений, которые запущены

00:09:56.300 --> 00:09:57.300
на EC2.

00:09:57.300 --> 00:09:59.940
Кто отвечает за ее безопасность?

00:09:59.940 --> 00:10:03.940
Мы либо IWS.

00:10:03.940 --> 00:10:07.100
Правильный ответ customer, то есть за это ответственны

00:10:07.100 --> 00:10:08.100
мы.

00:10:08.100 --> 00:10:12.260
Следующий вопрос.

00:10:12.260 --> 00:10:16.860
Кто отвечает за установку обновлений патчей безопасности

00:10:16.860 --> 00:10:25.940
ораклового инстенса, который запущен как instance RDS?

00:10:25.940 --> 00:10:28.460
И правильный ответ IWS.

00:10:28.460 --> 00:10:33.660
Мы не занимаемся настройкой операционной системы, обновлением

00:10:33.660 --> 00:10:35.500
безопасности, потому как она предоставлена как

00:10:35.500 --> 00:10:36.500
PAS решение.

00:10:36.500 --> 00:10:42.060
И так как Amazon отвечает за это, то и за безопасность

00:10:42.060 --> 00:10:44.220
этой части тоже лежит на нем.

00:10:44.220 --> 00:10:48.260
А мы лишь получаем готовую базу данных как сервис.

00:10:48.260 --> 00:10:49.260
Следующий вопрос.

00:10:49.260 --> 00:10:52.860
Кто отвечает за те же патчи безопасности и обновление

00:10:52.860 --> 00:10:59.140
ораклового баз данных, которые запущены на EC2 инстенсе?

00:10:59.140 --> 00:11:03.500
Правильный ответ customer, то есть за этот вид развертывания

00:11:03.500 --> 00:11:07.420
оракловой базы уже отвечаем мы, потому что все то, что

00:11:07.420 --> 00:11:11.020
запускается на EC2 инстенса, ровно таки за безопасность

00:11:11.020 --> 00:11:15.020
самого EC2 инстенса, за виртуальную безопасность отвечает

00:11:15.020 --> 00:11:16.020
пользователь.

00:11:16.020 --> 00:11:17.740
Ну и последний вопрос.

00:11:17.740 --> 00:11:22.840
Кто отвечает за правильную настройку доступа в безопасности

00:11:22.840 --> 00:11:27.180
в S3 бакеты?

00:11:27.180 --> 00:11:29.820
Правильный ответ customer, то есть за это ответственны

00:11:29.820 --> 00:11:30.820
мы.

00:11:30.820 --> 00:11:34.500
AWS предоставляет возможность нам эти доступы настраивать

00:11:34.500 --> 00:11:37.260
к бакетам, а за правильную настройку уже ответственны

00:11:37.260 --> 00:11:40.340
мы.

00:11:40.340 --> 00:11:43.580
Давайте теперь рассмотрим другую архитектуру.

00:11:43.580 --> 00:11:46.820
Логика активности остается такой же.

00:11:46.820 --> 00:11:50.860
Я задаю вопрос, вы ставите на паузу и пытайтесь ответить

00:11:50.860 --> 00:11:56.100
правильно, либо за это отвечает AWS, либо за это отвечает пользователь,

00:11:56.100 --> 00:11:57.100
то есть мы.

00:11:57.100 --> 00:11:59.100
Итак, поехали.

00:11:59.100 --> 00:12:04.100
В нашей инфраструктуре у нас есть настроенные VPC,

00:12:04.100 --> 00:12:08.040
внутри есть настроенный сабнет, в котором есть веб-сервер

00:12:08.040 --> 00:12:10.540
на EC2 инстенсе.

00:12:10.540 --> 00:12:14.340
Этот EC2 инстанс взаимодействует с S3 бакетом.

00:12:14.340 --> 00:12:18.080
Также у нас к VPC подключен интернет-гейтвей, через

00:12:18.080 --> 00:12:23.380
который мы подключаемся к нашему веб-серверу через

00:12:23.380 --> 00:12:29.540
AWS Management Console, либо используя SSH ключи через командную

00:12:29.540 --> 00:12:32.180
строку, то есть AWS CLI.

00:12:32.180 --> 00:12:35.180
Итак, первый вопрос.

00:12:35.180 --> 00:12:39.260
Обеспечение безопасности AWS Management Console так, чтобы

00:12:39.260 --> 00:12:45.740
она не была взломана хакерами.

00:12:45.740 --> 00:12:48.860
За это отвечает AWS.

00:12:48.860 --> 00:12:52.660
Далее, конфигурация, правильная конфигурация сабнетов.

00:12:52.660 --> 00:12:59.420
Правильный ответ customer, то есть AWS предоставляет

00:12:59.420 --> 00:13:04.380
нам инструменты для конфигурации сабнетов, а наша задача

00:13:04.380 --> 00:13:06.580
их правильно настроить и наша ответственность,

00:13:06.580 --> 00:13:08.980
что они безопасно настроены.

00:13:08.980 --> 00:13:11.820
Следующий вопрос, правильная безопасная конфигурация

00:13:11.820 --> 00:13:12.820
VPC.

00:13:12.820 --> 00:13:19.100
За это отвечаем также мы.

00:13:19.100 --> 00:13:21.060
Идея такая же, как сабнетами.

00:13:21.060 --> 00:01:58.720
Идем дальше.

00:13:22.060 --> 00:13:30.180
Защита от сбоев сети в AWS регионах.

00:13:30.180 --> 00:13:37.540
Правильный ответ AWS.

00:13:37.540 --> 00:13:44.540
То есть, связь, то есть сеть между регионами, это относится

00:13:44.540 --> 00:13:47.940
к глобальной инфраструктуре AWS, поэтому за это ответственно

00:13:47.940 --> 00:13:48.940
AWS.

00:13:48.940 --> 00:13:56.340
Защита SSH ключей.

00:13:56.340 --> 00:14:00.020
За защиту SSH ключей ответственно мы, то есть пользователи.

00:14:00.020 --> 00:14:01.020
Идем дальше.

00:14:01.020 --> 00:14:02.020
Шестой вопрос.

00:14:02.020 --> 00:14:10.340
Обеспечение сетевой изоляции между данными пользователей

00:14:10.340 --> 00:14:16.740
AWS.

00:14:16.740 --> 00:14:18.460
За это ответственно AWS.

00:14:18.460 --> 00:14:21.420
То есть, у нас как пользователей нет никакой возможности

00:14:21.420 --> 00:14:24.300
добраться до данных других пользователей, тем более

00:14:24.300 --> 00:14:25.540
это как-то настраивать.

00:14:25.540 --> 00:14:27.900
Поэтому за это ответственно AWS.

00:14:27.900 --> 00:14:28.900
Идем дальше.

00:14:28.900 --> 00:14:32.940
Шестой вопрос.

00:14:32.940 --> 00:14:37.260
Обеспечение широкополосного доступа, быстрого доступа

00:14:37.260 --> 00:14:44.980
между веб-сервером и S3-бакетом.

00:14:44.980 --> 00:14:46.380
Правильный ответ AWS.

00:14:46.380 --> 00:14:50.260
То есть, опять же, это относится к глобальной инфраструктуре

00:14:50.260 --> 00:14:51.260
AWS.

00:14:51.260 --> 00:14:55.300
Что EC2-инстанц, что S3-бакет находится там.

00:14:55.300 --> 00:15:00.900
И для того, чтобы предоставить быстрый доступ между двумя

00:15:00.900 --> 00:15:04.060
этими сервисами, мы не используем интернет.

00:15:04.060 --> 00:15:07.460
Точнее AWS не использует интернет, он использует свою глобальную

00:15:07.460 --> 00:15:10.900
инфраструктуру для того, чтобы это было быстрее

00:15:10.900 --> 00:15:12.660
и это было безопаснее.

00:15:12.660 --> 00:15:14.940
За это ответственно сам AWS.

00:15:14.940 --> 00:15:15.940
И последний вопрос.

00:15:15.940 --> 00:15:34.440
Продвижение использования MFA для всех авторизаций пользователей.

00:15:34.440 --> 00:15:35.940
За это ответственный customer.

00:15:35.940 --> 00:15:36.940
То есть мы...

00:15:36.940 --> 00:15:37.940
Идея в чем?

00:15:37.940 --> 00:15:41.500
Идея в том, что мы внутри IAM создаем пользователей.

00:15:41.500 --> 00:15:46.540
Таким образом, обычные физические пользователи, сотрудники

00:15:46.540 --> 00:15:51.180
наши, они могут, используя логин-пароль выданный, авторизовываться

00:15:51.180 --> 00:15:53.500
в нашем AWS аккаунте.

00:15:53.500 --> 00:15:56.380
Они работают все в одном AWS аккаунте.

00:15:56.380 --> 00:16:01.900
И помимо логина-пароля можно настроить MFA, так называемый.

00:16:01.900 --> 00:16:03.500
Обычно это виртуальный MFA.

00:16:03.500 --> 00:16:08.820
Настраивается, устанавливается приложение и каждые 30 секунд

00:16:08.820 --> 00:16:11.660
генерируется новый шестизначный код.

00:16:11.660 --> 00:16:16.300
И во время авторизации пользователь не только вводит логин

00:16:16.300 --> 00:16:23.340
и пароль, он также подтверждает, что авторизованное устройство,

00:16:23.340 --> 00:16:27.300
оно у него, что это его устройство, у него есть к нему доступ.

00:16:27.300 --> 00:16:32.620
И таким образом вводит сгенерированный новый ключ.

00:16:32.620 --> 00:16:35.020
И после этого дальше заходит.

00:16:35.020 --> 00:16:42.660
И вот продвижение и включение этой опции MFA, она полностью

00:16:42.660 --> 00:16:45.900
лежит на customer, то есть на нас.

00:16:45.900 --> 00:16:49.100
Она изначально отключена, но есть рекомендация от

00:16:49.100 --> 00:16:50.780
AWS ее включить.

00:16:50.780 --> 00:16:54.620
И в некоторых случаях бывает ее не включают.

00:16:54.620 --> 00:16:58.460
Это все зависит от зрелости компании.

00:16:58.460 --> 00:17:05.260
Чем она больше, тем больше она обращает внимание на

00:17:05.260 --> 00:17:10.580
возможные уязвимости, на возможные места атаки.

00:17:10.580 --> 00:17:16.580
И таким образом через MFA мы еще больше гарантируем

00:17:16.580 --> 00:17:20.140
себе, что аккаунт не будет взломан и злоумышленник

00:17:20.140 --> 00:17:23.420
не подключится к облаку AWS для того, чтобы что-то

00:17:23.420 --> 00:17:25.660
украсть либо сломать инфраструктуру.

00:17:25.660 --> 00:17:31.380
На этом мы заканчиваем первую секцию.

00:17:31.380 --> 00:17:34.140
Давайте остановимся на основных моментах.

00:17:34.140 --> 00:17:40.380
Мы разобрали, что такое shared responsibility model и проговорили

00:17:40.380 --> 00:17:45.340
о том, что для полной безопасности облака, обе стороны, что

00:17:45.340 --> 00:17:47.820
облачный провайдер, что пользователь.

00:17:47.820 --> 00:17:52.940
То есть мы должны обеспечить безопасность в определенных

00:17:52.940 --> 00:17:53.940
местах.

00:17:53.940 --> 00:17:56.660
Для определенных местах можно разделить на два

00:17:56.660 --> 00:17:57.660
направления.

00:17:57.660 --> 00:18:02.060
То есть AWS обеспечивает безопасность of the cloud, то есть самого облака,

00:18:02.060 --> 00:18:05.820
а customer уже работая внутри облака обеспечивает security

00:18:05.820 --> 00:18:08.180
in the cloud, то есть безопасность в облаке.

00:18:08.180 --> 00:18:12.700
В случае AWS подразумевается физическая безопасность

00:18:12.700 --> 00:18:16.700
дата центров, железа, всего того, по которым используется,

00:18:16.700 --> 00:18:19.700
чтобы у него не было ошибок, дыр безопасности.

00:18:19.700 --> 00:18:22.140
И это все преждевременно обновлялось.

00:18:22.140 --> 00:18:27.380
Когда мы говорим про кастомера, то подразумевается правильная

00:18:27.380 --> 00:18:32.980
настройка тех сервисов для того, чтобы не открыть

00:18:32.980 --> 00:18:39.380
некоторые места для возможной атаки, правильное management,

00:18:39.380 --> 00:18:42.780
правильное управление ключами безопасности, логинами,

00:18:42.780 --> 00:18:47.780
паролями, то есть, скажем так, credentials и своими пользователями.

00:18:47.780 --> 00:18:51.900
Также в зависимости от сервиса, который мы используем,

00:18:51.900 --> 00:18:56.540
они у нас подразделяются на три вида по предоставлению

00:18:56.540 --> 00:18:57.780
этого сервиса.

00:18:57.780 --> 00:19:00.900
Это модель IaaS, модель PaaS и модель SaaS.

00:19:00.900 --> 00:19:04.940
И в зависимости от уровня у нас меняется контроль

00:19:04.940 --> 00:19:11.340
над IT ресурсом, ну и, соответственно, определяются тем самым,

00:19:11.340 --> 00:19:16.060
отвечаем ли мы за безопасность той или иной части конкретного

00:19:16.060 --> 00:19:19.060
ресурса.

00:19:19.060 --> 00:19:25.980
В случае, когда мы говорим про IaaS, так как у нас больше

00:19:25.980 --> 00:19:29.060
контроля над IT ресурсами, значит, у нас больше мест,

00:19:29.060 --> 00:19:30.900
где мы должны обеспечить безопасность.

00:19:30.900 --> 00:19:35.700
Когда мы говорим про PaaS и SaaS, контроль у нас уменьшается.

00:19:35.700 --> 00:19:39.660
Соответственно, за ту часть, которой уже ответственен

00:19:39.660 --> 00:19:43.100
облачный провайдер, он уже там же и обеспечивает

00:19:43.100 --> 00:19:44.100
безопасность.

00:19:44.100 --> 00:19:47.980
Это уже не наша задача.

00:19:47.980 --> 00:19:52.540
Мы переходим ко второй части, а это сервис Identity and Access

00:19:52.540 --> 00:19:56.260
Management, то есть AWS IAM.

00:19:56.260 --> 00:20:02.300
Когда мы говорим про AWS IAM, то это тот сервис, который

00:20:02.300 --> 00:20:06.540
обеспечивает любые доступы, так или иначе связанные

00:20:06.540 --> 00:20:12.580
с текущим AWS аккаунтом и всеми теми ресурсами, которые

00:20:12.580 --> 00:20:14.100
в нем могут быть.

00:20:14.100 --> 00:20:19.620
Таким образом, мы говорим через этот сервис, кто может

00:20:19.620 --> 00:20:22.540
получить доступ, на какие ресурсы может получить

00:20:22.540 --> 00:20:25.660
доступ, как он и при каких условиях получает этот

00:20:25.660 --> 00:20:26.660
доступ.

00:20:26.660 --> 00:20:30.740
А также следует отметить, что IAM – это бесплатный

00:20:30.740 --> 00:20:36.580
сервис, за который мы ничего не оплачиваем.

00:20:36.580 --> 00:20:38.860
Давайте теперь остановимся на основных компонентах

00:20:38.860 --> 00:20:40.340
сервиса IAM.

00:20:40.340 --> 00:20:45.980
Это IAM User, Group Policy и Role.

00:20:45.980 --> 00:20:49.220
У каждого есть своя цель.

00:20:49.220 --> 00:20:54.700
Когда мы говорим про IAM User, это некая сущность, у которой

00:20:54.700 --> 00:20:59.740
есть свой идентификатор, у нее также есть свой ARN,

00:20:59.740 --> 00:21:04.620
есть ключи доступа, логин, пароль.

00:21:04.620 --> 00:21:07.380
И мы можем эту информацию передать нашему сотруднику

00:21:07.380 --> 00:21:10.620
в компании для того, чтобы он мог под этим юзером

00:21:10.620 --> 00:21:14.900
подключаться в наше облако к нашему AWS аккаунту.

00:21:14.900 --> 00:21:17.660
Далее мы говорим, что у нас есть IAM группы и мы наших

00:21:17.660 --> 00:21:20.140
пользователей можем объединять в этих группах.

00:21:20.140 --> 00:21:27.340
И когда это используется, это когда у нас есть несколько

00:21:27.340 --> 00:21:32.060
пользователей, которые схожи по должностям, обязанностям,

00:21:32.060 --> 00:21:35.060
либо как минимум у них должен быть равный доступ внутри

00:21:35.060 --> 00:21:38.220
группы, то мы можем этих пользователей добавить

00:21:38.220 --> 00:21:41.140
к специально созданной группе с соответствующим

00:21:41.140 --> 00:21:45.260
именем и уже группе выдать необходимые права.

00:21:45.260 --> 00:21:47.220
Таким образом, всем тем пользователям, которые

00:21:47.220 --> 00:21:52.100
там сидят, у них будет возможность доступа к соответствующим

00:21:52.100 --> 00:21:53.300
сервисам и действиям.

00:21:53.300 --> 00:21:59.060
Здесь следует отметить, что да, в одной группе может

00:21:59.060 --> 00:22:02.620
быть несколько пользователей, но и каждый пользователь

00:22:02.620 --> 00:22:07.940
может быть в нескольких группах, поэтому это тоже

00:22:07.940 --> 00:22:08.940
верно.

00:22:08.940 --> 00:22:13.380
И пользователь, например, может для определенного

00:22:13.380 --> 00:22:17.300
набора сервисов получить доступ через одну группу

00:22:17.300 --> 00:22:20.260
и через другую группу получить доступ к другим сервисам.

00:22:20.260 --> 00:22:24.580
Таким образом, в совокупности у него больше будет доступа,

00:22:24.580 --> 00:22:27.220
чем у другого пользователя, который сидит только в

00:22:27.220 --> 00:22:28.620
одной группе.

00:22:28.620 --> 00:22:32.740
Таким образом, можно более тонко настроить доступы

00:22:32.740 --> 00:22:36.060
каждого пользователя внутри AWS.

00:22:36.060 --> 00:22:40.140
Когда мы говорим policy, это тот документ, который описывается

00:22:40.140 --> 00:22:46.700
в виде JSON, и он описывает информацию до каких ресурсов,

00:22:46.700 --> 00:22:49.580
на какие операции есть доступ.

00:22:49.580 --> 00:22:55.980
Но у какой сущности не прописывается, мы ее как раз-таки policy привязываем

00:22:55.980 --> 00:22:58.700
либо к юзеру напрямую, либо к группе.

00:22:58.700 --> 00:23:01.820
В целом, best practice это policy привязывать к группам.

00:23:01.820 --> 00:23:04.580
Даже если у нас есть один пользователь, нам все равно

00:23:04.580 --> 00:23:08.060
рекомендуется создать группу этого пользователя,

00:23:08.060 --> 00:23:10.860
подключить к этой группе и уже после все policy, которые

00:23:10.860 --> 00:23:13.940
мы создаем, привязывать не к пользователю, а к созданным

00:23:13.940 --> 00:23:14.940
нами группам.

00:23:14.940 --> 00:23:20.300
Ну и следующая последняя сущность – это IAM-роль.

00:23:20.300 --> 00:23:24.700
Идея в том, что мы говорили, что мы строим IT-инфраструктуру

00:23:24.700 --> 00:23:28.580
в облаке, она состоит из разных компонентов, каждый

00:23:28.580 --> 00:23:31.340
компонент – это какой-то определенный сервис, ее

00:23:31.340 --> 00:23:32.340
ресурс.

00:23:32.340 --> 00:23:34.420
И они взаимодействуют между собой для того, чтобы выполнять

00:23:34.420 --> 00:23:35.820
какую-то бизнес-задачу.

00:23:35.820 --> 00:23:41.980
Так вот, изначально у любого сервиса нет никаких доступов,

00:23:41.980 --> 00:23:46.780
нет никаких прав, он только может работать внутри своего,

00:23:46.780 --> 00:23:47.780
скажем так, сервиса.

00:23:47.780 --> 00:23:54.840
И когда мы создаем, например, лямду, то есть функцию, то

00:23:54.840 --> 00:23:58.980
мы прописываем там код, и у этого кода он может исполнить

00:23:58.980 --> 00:24:02.780
какой-то код, внутри может быть какая-то логика, но

00:24:02.780 --> 00:24:07.020
у этого кода нет доступа к другим AWS-ресурсам.

00:24:07.020 --> 00:24:10.300
То есть мы не можем обратиться к какой-то определенной

00:24:10.300 --> 00:24:14.100
S3-баке для того, чтобы оттуда извлечь какой-то файл.

00:24:14.100 --> 00:24:16.100
Этого нет.

00:24:16.100 --> 00:24:24.100
Поэтому в AWS-лямде есть возможность привязать роль к лямде,

00:24:24.100 --> 00:24:28.700
а к роли уже привязать policy, который дает доступ на соответствующий

00:24:28.700 --> 00:24:29.700
бакет.

00:24:29.700 --> 00:24:32.260
После чего уже можно внутри кода обращаться к этому

00:24:32.260 --> 00:24:36.540
бакету, и мы не получим ошибку, что там access denied и доступ

00:24:36.540 --> 00:24:37.540
запрещен.

00:24:37.540 --> 00:24:43.180
Еще один use case, когда используются роли, это когда у нас есть

00:24:43.180 --> 00:24:47.560
несколько AWS-аккаунтов, и представим, что мы всех

00:24:47.560 --> 00:24:50.200
пользователей создали в одном аккаунте, но наша

00:24:50.200 --> 00:24:54.220
инфраструктура работает как в первом, так и во втором

00:24:54.220 --> 00:24:55.220
AWS-аккаунте.

00:24:55.220 --> 00:25:00.820
И нам нужно не создать пользователей во втором AWS-аккаунте, а

00:25:00.820 --> 00:25:04.440
нужна возможность как-то обратиться этим пользователям

00:25:04.440 --> 00:25:07.780
в первом AWS-аккаунте к ресурсам во втором.

00:25:07.780 --> 00:25:11.060
Это делается следующим образом.

00:25:11.060 --> 00:25:15.180
На втором AWS-аккаунте создается соответствующая роль, прописывается

00:25:15.180 --> 00:25:21.180
trust policy, то есть прописываются те AWS-аккаунты и те пользователи,

00:25:21.180 --> 00:25:23.620
которые могут использовать эту роль.

00:25:23.620 --> 00:25:28.580
Таким образом, на стороне первого аккаунта мы выдаем

00:25:28.580 --> 00:25:32.460
для соответствующих пользователей либо групп возможность

00:25:32.460 --> 00:25:37.700
assume, то есть возможность использовать роль, которая

00:25:37.700 --> 00:25:39.140
находится в другом аккаунте.

00:25:39.140 --> 00:25:41.580
То есть с двух сторон должны разрешить доступ.

00:25:41.580 --> 00:25:45.300
В этом случае есть возможность этому пользователю, зная

00:25:45.300 --> 00:25:48.980
название аккаунта, куда он подключается, зная название

00:25:48.980 --> 00:25:55.540
роли, которую он будет применять, он меняет свою роль, переподключается.

00:25:55.540 --> 00:26:04.100
Таким образом, он, скажем так, переселяется или телепортируется

00:26:04.100 --> 00:26:07.500
с одного AWS-аккаунта в другой AWS-аккаунт.

00:26:07.500 --> 00:26:11.260
И все те доступы, которые есть у этой роли во втором

00:26:11.260 --> 00:26:13.500
AWS-аккаунте, у него появляются.

00:26:13.500 --> 00:26:17.300
И в рамках этой роли он может работать уже во втором

00:26:17.300 --> 00:26:20.300
AWS-аккаунте.

00:26:20.300 --> 00:26:22.620
Давайте теперь поговорим, как пользователь может

00:26:22.620 --> 00:26:24.700
подключаться к AWS-аккаунту.

00:26:24.700 --> 00:26:26.060
Есть два варианта.

00:26:26.060 --> 00:26:30.140
Первый – это программное, когда мы используем AWS CLI

00:26:30.140 --> 00:26:31.860
либо AWS SDK.

00:26:31.860 --> 00:26:38.060
В этом случае ему нужно использовать свой access key ID либо secret access

00:26:38.060 --> 00:26:41.340
key, который генерируется при создании пользователя.

00:26:41.340 --> 00:26:44.540
У нас будет отдельное демо, и все те моменты, которые

00:26:44.540 --> 00:26:49.420
мы проговорим на этой лекции, мы проделаем в этом демо.

00:26:49.420 --> 00:26:53.220
Второй вариант – это когда пользователь подключается

00:26:53.220 --> 00:26:55.060
к AWS-менеджмент-консоли.

00:26:55.060 --> 00:27:00.500
В этом случае ему нужно знать 12-значный account ID или

00:27:00.500 --> 00:27:04.700
alias этого аккаунта, если он настроен.

00:27:04.700 --> 00:27:07.780
Также он должен знать свой логин, то есть username, также

00:27:07.780 --> 00:27:10.420
пароль от этого пользователя.

00:27:10.420 --> 00:27:15.660
Ну и третье – если подключен MFA и он требуется, то он должен

00:27:15.660 --> 00:27:19.540
через приложение, которое установлено на устройстве

00:27:19.540 --> 00:27:25.660
виртуал MFA ввести генерируемый код для того, чтобы успешно

00:27:25.660 --> 00:27:26.660
подключиться.

00:27:26.660 --> 00:27:32.140
Теперь давайте поговорим про авторизацию.

00:27:32.140 --> 00:27:35.340
То есть есть автентификация – это когда пользователь

00:27:35.340 --> 00:27:41.420
подключается к облаку и говорит, что пользователь

00:27:41.420 --> 00:27:42.420
– это он.

00:27:42.420 --> 00:27:44.340
В этом случае он заходит в систему.

00:27:44.340 --> 00:27:48.100
Когда мы говорим про авторизацию, тут уже вопрос в том, что

00:27:48.100 --> 00:27:51.460
этому пользователю, которому поняли, мы его идентифицировали,

00:27:51.460 --> 00:27:53.540
что он может делать.

00:27:53.540 --> 00:27:56.140
Изначально, когда создается только пользователь, у него

00:27:56.140 --> 00:27:57.820
нет доступа никуда.

00:27:57.820 --> 00:28:03.900
То есть есть такое термин как implicit deny.

00:28:03.900 --> 00:28:10.700
Implicit deny – это неявный запрет на все ресурсы,

00:28:10.700 --> 00:28:12.500
если оно явно не предоставлено.

00:28:12.500 --> 00:28:14.380
Оно включено по умолчанию.

00:28:14.380 --> 00:28:18.580
Таким образом, чтобы предоставить доступ, мы к этому пользователю

00:28:18.580 --> 00:28:22.340
либо к группе, которая подключена к пользователю, подключаем

00:28:22.340 --> 00:28:25.860
какой-то AWS-полосе, в котором как раз таки прописывается

00:28:25.860 --> 00:28:29.860
куда, при каких условиях, на какие конкретные операции

00:28:29.860 --> 00:28:30.860
есть доступ.

00:28:30.860 --> 00:28:39.300
После этого важно еще упомянуть, что есть такое понятие

00:28:39.300 --> 00:28:41.620
как principle of least privilege.

00:28:41.620 --> 00:28:46.940
И идея в том, что нужно максимально стараться предоставлять

00:28:46.940 --> 00:28:48.820
доступы только нужные.

00:28:48.820 --> 00:28:54.140
Например, если пользователю нужно в истребакете доступ

00:28:54.140 --> 00:28:56.580
к режиму чтения, то есть возможность скачивать

00:28:56.580 --> 00:29:00.620
файлы для того, чтобы выполнять свою работу, то этому пользователю

00:29:00.620 --> 00:29:02.620
не надо предоставлять полный доступ.

00:29:02.620 --> 00:29:05.700
То есть не нужно давать ему возможность создавать

00:29:05.700 --> 00:29:10.260
новые бакеты, не нужно ему давать возможность обращаться

00:29:10.260 --> 00:29:15.220
к файлам, к бакетам, к другим бакетам, к которым он не

00:29:15.220 --> 00:29:19.020
должен обращаться, а только к тем, с которыми он работает.

00:29:19.020 --> 00:29:23.180
Также в рамках того же бакета не нужно ему выдавать доступ

00:29:23.180 --> 00:29:29.220
на удаление либо загрузку новых файлов, если того

00:29:29.220 --> 00:29:32.380
не требует его должностные обязанности.

00:29:32.380 --> 00:29:37.500
Таким образом, нужно следовать принципу выдавать доступ

00:29:37.500 --> 00:29:39.060
только тот, который необходим.

00:29:39.060 --> 00:29:43.340
Ну и последнее, что стоит отметить, это то, что сервис

00:29:43.340 --> 00:29:45.500
IAM он глобальный.

00:29:45.500 --> 00:29:50.860
То есть когда вы подключаетесь, открываете этот сервис,

00:29:50.860 --> 00:29:56.900
то сверху справа вы не увидите, к какому региону он относится,

00:29:56.900 --> 00:29:58.820
а увидите надпись global.

00:29:58.820 --> 00:30:02.060
Это говорит о том, что созданные пользователи автоматически

00:30:02.060 --> 00:30:04.420
доступны на всех регионах.

00:30:04.420 --> 00:30:09.020
Если вам необходимо ограничить доступ к определенным

00:30:09.020 --> 00:30:12.580
регионам, то это можно сделать внутри IAM policy, который

00:30:12.580 --> 00:30:19.180
вы привяжете к этому пользователю либо к группе.

00:30:19.180 --> 00:30:22.180
Давайте теперь подробнее поговорим, что такое IAM

00:30:22.180 --> 00:30:25.300
policy, каких видов они могут быть.

00:30:25.300 --> 00:30:32.580
IAM policy подразделяется на identity based policy и resource based

00:30:32.580 --> 00:30:33.580
policy.

00:30:33.580 --> 00:30:37.980
Identity based policy это полисе, которая привязывается

00:30:37.980 --> 00:30:40.100
к некой сущности, то есть identity.

00:30:40.100 --> 00:30:44.660
А в нашем случае это может быть роль пользователь

00:30:44.660 --> 00:30:45.660
или группа.

00:30:45.660 --> 00:30:50.580
Когда мы говорим resource based policy, то на некий ресурс

00:30:50.580 --> 00:30:53.700
определенного сервиса есть возможность привязать

00:30:53.700 --> 00:30:56.220
полисе, которые относятся только к нему.

00:30:56.220 --> 00:31:01.180
И она описывает какие сущности могут обращаться либо что-то

00:31:01.180 --> 00:31:03.860
делать с конкретно этим ресурсом.

00:31:03.860 --> 00:31:06.380
Примером может быть S3 bucket.

00:31:06.380 --> 00:31:11.340
Вы можете к S3 bucket привязать некоторую resource based policy,

00:31:11.340 --> 00:31:18.460
которая говорит, что у пользователей, которые находятся в группе

00:31:18.460 --> 00:31:23.460
Administrators есть возможность изменять свойства этого

00:31:23.460 --> 00:31:24.460
бакета.

00:31:24.460 --> 00:31:28.740
А пользователям, которые сидят в, например, Simple

00:31:28.740 --> 00:31:34.260
Users группе есть возможность скачивать файлы внутри

00:31:34.260 --> 00:31:37.540
этого бакета, но нет возможности удалять либо изменять

00:31:37.540 --> 00:31:38.540
эти файлы.

00:31:38.540 --> 00:31:45.380
Когда мы говорим также про identity based policy, подразделяются

00:31:45.380 --> 00:31:46.380
три вида.

00:31:46.380 --> 00:31:51.980
Первое это custom policy, которую мы прописываем.

00:31:51.980 --> 00:31:56.140
Она существует отдельно от чего-либо и вы это полисе

00:31:56.140 --> 00:32:00.900
уже привязываете к роли пользователю либо группе.

00:32:00.900 --> 00:32:05.420
Она может быть managed policy, это значит она управляется

00:32:05.420 --> 00:32:08.740
и обновляется, поддерживается самим Amazon.

00:32:08.740 --> 00:32:12.060
Примером может быть на каждый сервис может быть

00:32:12.060 --> 00:32:17.100
несколько managed policy разного уровня.

00:32:17.100 --> 00:32:25.660
Например, мы говорим S3, есть S3 full access policy, это когда

00:32:25.660 --> 00:32:29.980
в этом полисе прописывается так, что любой identity, у

00:32:29.980 --> 00:32:32.860
которого есть этот полисе имеет полный контроль к

00:32:32.860 --> 00:32:34.860
S3 сервису.

00:32:34.860 --> 00:32:38.380
Если же мы говорим про полисе попроще, это power user

00:32:38.380 --> 00:32:39.380
policy.

00:32:39.380 --> 00:32:43.100
В этом случае это продвинутый пользователь, у которого

00:32:43.100 --> 00:32:46.180
нет административных прав, он не может создавать

00:32:46.180 --> 00:32:49.060
либо удалять бакеты, но он может работать со всем

00:32:49.060 --> 00:32:53.220
тем, удалять, создавать файлы внутри бакетов.

00:32:53.220 --> 00:32:57.720
Ну и последнее может быть, например, read only policy, которая

00:32:57.720 --> 00:33:02.500
предоставляет только возможность считывать некоторые файлы,

00:33:02.500 --> 00:33:05.220
при этом создавать, удалять, а тем более создавать новые

00:33:05.220 --> 00:33:08.500
бакеты или удалять эти бакеты, он не может.

00:33:08.500 --> 00:33:13.920
Ну и третий вариант это inline policies, это когда мы не

00:33:13.920 --> 00:33:17.340
создаем отдельно стоящий полисе с отдельным RN, с

00:33:17.340 --> 00:33:21.580
отдельным ID, а создаем внутри либо определенные

00:33:21.580 --> 00:33:25.620
группы или определенные роли, так называемые inline

00:33:25.620 --> 00:33:26.620
policy.

00:33:26.620 --> 00:33:30.520
Это та полисе, которая привязана к группе или роли, и она

00:33:30.520 --> 00:33:32.660
не может существовать отдельно.

00:33:32.660 --> 00:33:36.340
Таким образом, если вы создаете какое-то уникальное полисе,

00:33:36.340 --> 00:33:38.980
то нет необходимости ее создавать отдельно, а можно

00:33:38.980 --> 00:33:43.540
конкретно к роли либо группе создать, и она там будет

00:33:43.540 --> 00:33:45.100
привязана стоять и работать также.

00:33:45.100 --> 00:33:48.740
Если же у вас какая-то полисе, которую вы будете привязывать

00:33:48.740 --> 00:33:52.540
к нескольким разным ролям, либо к нескольким разным

00:33:52.540 --> 00:33:57.060
группам, то стоит рассмотреть создание отдельно стоящей

00:33:57.060 --> 00:34:00.660
полиси для того, чтобы ее уже привязывать к разным

00:34:00.660 --> 00:34:27.660
сущностям.

00:00:00.000 --> 00:00:07.720
Другой важный момент, который стоит упомянуть, в каком

00:00:07.720 --> 00:00:12.560
виде прописываются наши полисы, это JSON документ,

00:00:12.560 --> 00:00:16.340
который идет в определенной структуре, у него есть определенные

00:00:16.340 --> 00:00:20.600
ключи, которые мы разберем на следующих слайдах, и

00:00:20.600 --> 00:00:23.860
соответствующие ожидаемые значения.

00:00:23.860 --> 00:00:28.240
Когда мы также говорим про полисы, то вне зависимости

00:00:28.240 --> 00:00:32.120
от того, какой это ресурс, либо какая это сущность,

00:00:32.120 --> 00:00:37.440
рассматривается все имеющиеся полисы на конкретную сущность

00:00:37.440 --> 00:00:43.720
или ресурс, и в тот момент, когда доступ есть, он выдается,

00:00:43.720 --> 00:00:50.000
в тот момент, когда доступа нет, она не выдается и пишется

00:00:50.000 --> 00:00:55.080
сообщение implicit deny, то есть неявный отказ, неявный

00:00:55.080 --> 00:00:56.080
запрет.

00:00:56.080 --> 00:01:02.320
И также мы говорим, что когда мы в полисе явно прописываем

00:01:02.320 --> 00:01:07.720
explicit deny, то есть явно прописываем, что доступ запрещен, то

00:01:07.720 --> 00:01:10.280
любой доступ, который вы в других местах в любом

00:01:10.280 --> 00:01:13.700
количестве указываете как разрешен, но хотя бы в одном

00:01:13.700 --> 00:01:16.480
другом месте прописано, что он запрещен, то оно

00:01:16.480 --> 00:01:21.160
преобладает над любым разрешением и доступ вы не получаете.

00:01:21.160 --> 00:01:28.920
Давайте рассмотрим пример IAM policy.

00:01:28.920 --> 00:01:32.760
Вы здесь видите пример IAM policy, это json документ, у

00:01:32.760 --> 00:01:37.100
него есть определенная структура, ожидаются определенные

00:01:37.100 --> 00:01:41.320
ключи и значения, давайте подробнее рассмотрим.

00:01:41.320 --> 00:01:45.200
Мы видим, что есть version, есть statement, version это стандартное

00:01:45.200 --> 00:01:50.640
значение, 2012, 10, 17, ее вы не меняйте, она остается,

00:01:50.640 --> 00:01:53.720
если что-то поменяется, то эту информацию вы всегда

00:01:53.720 --> 00:01:57.720
можете найти в AWS документации.

00:01:58.720 --> 00:02:02.600
Statement, то есть это те наши полиси, которые передаются

00:02:02.600 --> 00:02:04.360
в массиве.

00:02:04.360 --> 00:02:10.120
В нашем случае мы видим, что у нас два полиси, первый

00:02:10.120 --> 00:02:14.680
это разрешает, то есть в пункте effect вы видите allow,

00:02:14.680 --> 00:02:15.680
второй deny.

00:02:15.680 --> 00:02:19.360
Два возможных варианта, либо allow, либо deny.

00:02:19.360 --> 00:02:21.880
Если мы говорим про action, то здесь перечисляется

00:02:21.880 --> 00:02:26.640
список операций, которые мы либо предоставляем доступ,

00:02:26.640 --> 00:02:28.240
или запрещаем доступ.

00:02:28.240 --> 00:02:35.280
Операции, что такое операция, это название сервиса, двоеточие

00:02:35.280 --> 00:02:36.800
и название операции.

00:02:36.800 --> 00:02:42.440
Например, S3, двоеточие get object, это мы выдаем доступ,

00:02:42.440 --> 00:02:48.440
либо запрещаем доступ к сервису S3, а именно к операции

00:02:48.440 --> 00:02:49.440
получить объект.

00:02:49.440 --> 00:02:52.240
То есть после того, как у нас есть это разрешение,

00:02:52.240 --> 00:02:53.320
мы можем скачать файл.

00:02:53.320 --> 00:02:58.000
Когда мы видим место операции звездочку, это говорит о

00:02:58.000 --> 00:03:03.680
том, что все операции в рамках этого сервиса предоставляются.

00:03:03.680 --> 00:03:08.360
Давайте рассмотрим следующий, это resource, то есть здесь

00:03:08.360 --> 00:03:12.880
мы указываем список ресурсов, над которыми мы хотим, для

00:03:12.880 --> 00:03:14.640
которых мы хотим создать наш полиси.

00:03:14.640 --> 00:03:19.760
Здесь важный момент, который стоит упомянуть, это то,

00:03:19.760 --> 00:03:26.400
что, еще раз повторюсь, вне зависимости от того, какое

00:03:26.400 --> 00:03:30.320
количество allow полисы вы создаете, если у вас в каком-то

00:03:30.320 --> 00:03:35.680
из любых существующих полисе на этот ресурс, либо на

00:03:35.680 --> 00:03:41.400
эту сущность, то есть identity, есть deny полисе, то оно имеет

00:03:41.400 --> 00:03:44.920
приоритет перед всеми allow.

00:03:44.920 --> 00:03:48.540
Когда мы говорим, что нет ни allow, ни deny полисе для

00:03:48.540 --> 00:03:51.780
конкретного ресурса, для конкретной операции конкретного

00:03:51.780 --> 00:03:58.000
сервиса, то в этом случае нет явного предоставления

00:03:58.000 --> 00:04:00.880
доступа, то есть allow, и в этом случае мы ничего

00:04:00.880 --> 00:04:05.800
не предоставляем, по дефолту у нас implicit deny, то есть

00:04:05.800 --> 00:04:06.800
неявный запрет.

00:04:06.800 --> 00:04:12.680
Пару дополнительных моментов, касательно resource based policy,

00:04:12.680 --> 00:04:16.840
мы с вами проговорили, что это те полиси, которые

00:04:16.840 --> 00:04:21.880
создаются для определенного ресурса, и в этом документе

00:04:21.880 --> 00:04:26.960
указывается, так как она привязана уже к ресурсу,

00:04:26.960 --> 00:04:31.600
то мы в полисе документе указываем, кто и на какую

00:04:31.600 --> 00:04:41.120
операцию получает или наоборот запрещаем доступ.

00:04:41.120 --> 00:04:45.520
Давайте все то, что мы проговаривали ранее, рассмотрим как блок

00:04:45.520 --> 00:04:46.520
схему.

00:04:46.520 --> 00:04:52.280
Самым первым, когда мы говорим, что есть у нас любой полисе,

00:04:52.280 --> 00:04:57.000
не важно, это ресурс полисе, либо это identity based policy, то

00:04:57.000 --> 00:05:00.240
мы проверяем, есть ли на конкретную операцию для

00:05:00.240 --> 00:05:07.560
этого пользователя, на конкретный ресурс explicit deny, если есть,

00:05:07.560 --> 00:05:09.960
мы говорим, что мы запрещаем доступ.

00:05:09.960 --> 00:05:15.120
Все, дальше, если explicit deny, то есть явного запрета

00:05:15.120 --> 00:05:19.720
нету, то мы двигаемся дальше, теперь ищем, есть ли explicit

00:05:19.720 --> 00:05:25.920
allow, значит есть ли явное разрешение на конкретную

00:05:25.920 --> 00:05:28.560
операцию, если есть, то доступ выдается.

00:05:28.560 --> 00:05:33.800
В том случае, если нет ни explicit deny, ни explicit allow,

00:05:33.800 --> 00:05:38.800
то в целях безопасности мы запрещаем это действие,

00:05:38.800 --> 00:05:41.800
что называется implicit deny.

00:05:41.800 --> 00:05:46.260
Это важный момент, поэтому я постарался в нескольких

00:05:46.260 --> 00:05:50.040
видах это объяснить, если это понятно, то двигаемся

00:05:50.040 --> 00:05:51.040
дальше.

00:05:51.040 --> 00:05:56.440
Мы двигаемся к следующему основному понятию, это IAM

00:05:56.440 --> 00:06:00.840
группы, в целом мы про него поговорили, давайте теперь

00:06:00.840 --> 00:06:02.840
более подробные детали закрепим.

00:06:02.840 --> 00:06:08.320
Первое это то, что в группе могут быть несколько пользователей

00:06:08.320 --> 00:06:10.560
и соответственно каждый пользователь может быть

00:06:10.560 --> 00:06:11.800
в нескольких группах.

00:06:11.800 --> 00:06:16.520
Другой момент, второй, это то, что группа не может

00:06:16.520 --> 00:06:20.960
быть вложной, таким образом вы не можете добавить какую-то

00:06:20.960 --> 00:06:24.680
группу в другую группу, в группе могут быть только

00:06:25.680 --> 00:06:30.080
Третье, это то, что не существует какой-то группы по умолчанию,

00:06:30.080 --> 00:06:32.680
в которой у вас сидят все ваши пользователи.

00:06:32.680 --> 00:06:36.800
Если вам нужно всех пользователей добавить какую-то группу,

00:06:36.800 --> 00:06:39.720
вам нужно будет это сделать либо вручную, либо написать

00:06:39.720 --> 00:06:45.360
простенький скрипт, но это все делается на вашей стороне,

00:06:45.360 --> 00:06:48.120
создается специальная группа, как хотите ее называйте

00:06:48.120 --> 00:06:55.360
и добавляйте всех ваших пользователей туда.

00:06:55.360 --> 00:06:58.640
Другой важный компонент IAM это IAM-Rolle.

00:06:58.640 --> 00:07:02.000
IAM-Rolle используется в большинстве случаев в двух случаях.

00:07:02.000 --> 00:07:05.360
Первый случай это для того, чтобы сервисам предоставить

00:07:05.360 --> 00:07:07.700
доступ к другим сервисам.

00:07:07.700 --> 00:07:10.680
Один из примеров мы в прошлый раз рассматривали.

00:07:10.680 --> 00:07:14.880
Представим, у нас есть лямбда функция и эта лямбда функция

00:07:14.880 --> 00:07:21.860
в своей работе должна подключаться к S3, с S3 загружать по определенному

00:07:21.860 --> 00:07:26.200
пути некоторый файл, изменять его и перезаливать обратно.

00:07:26.200 --> 00:07:28.560
В этом случае для того, чтобы лямбда смогла это

00:07:28.560 --> 00:07:33.280
сделать нужно к роли, которая привязана к этой функции,

00:07:33.280 --> 00:07:34.560
выдать соответствующие права.

00:07:34.560 --> 00:07:37.320
Вы прописываете полиси, привязываете к роли, но

00:07:37.320 --> 00:07:41.200
мы помним с вами, что мы можем создать inline полиси,

00:07:41.200 --> 00:07:44.960
которые есть только в этой роли, а также можем воспользоваться

00:07:44.960 --> 00:07:49.400
managed полиси, которая управляется, поддерживается самим амазоном.

00:07:49.400 --> 00:07:56.040
Второй вариант использования ролей это cross account доступ

00:07:56.040 --> 00:07:59.960
пользователей с одного AWS аккаунта к ресурсам другого

00:07:59.960 --> 00:08:01.200
AWS аккаунта.

00:08:01.200 --> 00:08:05.360
Идея в том, что на втором аккаунте создается роль,

00:08:05.360 --> 00:08:09.440
прописывается роль, в котором указывается account ID основного

00:08:09.440 --> 00:08:15.280
account ID, а здесь в основном account ID, где сидят ваши пользователи,

00:08:15.280 --> 00:08:21.480
дается доступ к assume роль операции, указывается

00:08:21.480 --> 00:08:28.120
конкретный ресурс, ARN этого ресурса на втором AWS аккаунте,

00:08:28.120 --> 00:08:31.360
и только после этого, когда с двух сторон выдали разрешение,

00:08:31.360 --> 00:08:34.680
то у этого пользователя есть возможность переключиться

00:08:34.680 --> 00:08:37.880
на ту роль и со всем тем доступом, который есть

00:08:37.880 --> 00:08:42.660
в этой роли, работать в другом AWS аккаунте.

00:08:42.660 --> 00:08:46.000
Мы с вами подошли к концу второй части нашей сегодняшней

00:08:46.000 --> 00:08:49.720
лекции, познакомились с сервисом IAM, это очень важный

00:08:49.720 --> 00:08:54.600
сервис, который во всех проектах, во всех возможных

00:08:54.600 --> 00:08:58.280
IT инфраструктурах в облаке, она используется по той

00:08:58.280 --> 00:09:01.940
простой причине, что мы работаем удаленно, подключаемся

00:09:01.940 --> 00:09:05.160
к облаку удаленно, и для того, чтобы это делать, нам

00:09:05.160 --> 00:09:07.880
нужно выдать определенные права.

00:09:07.880 --> 00:09:11.560
Более того, когда мы говорим IT инфраструктура, это такая

00:09:11.560 --> 00:09:15.600
система, где внутри системе сидят наши сервисы, и они

00:09:15.600 --> 00:09:16.960
работают между собой.

00:09:16.960 --> 00:09:19.920
Чтобы эти сервисы могли работать между собой, нам

00:09:19.920 --> 00:09:23.560
также нужно выдать соответствующие права.

00:09:23.560 --> 00:09:26.160
Основное правило, когда мы выдаем права, нужно помнить

00:09:26.160 --> 00:09:29.820
то, что мы выдаем по принципу list privilege, то есть выдаем

00:09:29.820 --> 00:09:33.000
только те права, которые нужны в данный момент для

00:09:33.000 --> 00:09:36.000
этого identity, либо для этого ресурса.

00:09:36.000 --> 00:09:41.480
Если остановимся о основных понятиях, то это IAM policy,

00:09:41.480 --> 00:09:44.840
это то, что выдает права, и у нас есть три сущности,

00:09:44.840 --> 00:09:50.640
это IAM user, IAM group, и IAM role.

00:09:50.640 --> 00:09:54.800
Мы с вами добрались до третьей секции, и здесь мы поговорим,

00:09:54.800 --> 00:09:58.640
какие шаги нужно предпринять, какие действия нужно сделать

00:09:58.640 --> 00:10:03.240
для того, чтобы максимально обезопасить ваш новый созданный

00:10:03.240 --> 00:10:06.920
AWS аккаунт.

00:10:06.920 --> 00:10:10.880
Когда вы создаете новый AWS аккаунт, то в этом аккаунте

00:10:10.880 --> 00:10:11.880
ничего нет.

00:10:11.880 --> 00:10:16.720
Единственный вариант подключиться к облаку, это под root user,

00:10:16.720 --> 00:10:19.240
это так называемый супер пользователь, у которого

00:10:19.240 --> 00:10:21.120
есть полный доступ ко всему.

00:10:21.120 --> 00:10:27.280
В best practices не рекомендуется использовать root user для ежедневных

00:10:27.280 --> 00:10:31.040
задач, создать специальный пароль, создать для него

00:10:31.040 --> 00:10:35.300
MFA и спрятать подальше, использовать только в тех

00:10:35.300 --> 00:10:37.960
случаях, когда есть необходимость.

00:10:37.960 --> 00:10:41.840
Есть определенные действия внутри AWS облака, когда вам

00:10:41.840 --> 00:10:45.800
нужно использовать root пользователя, вы с этими действиями

00:10:45.800 --> 00:10:48.880
будете встречаться редко, потому как обычно это разовые

00:10:48.880 --> 00:10:51.520
операции, а не какие-то повторяющиеся действия.

00:10:51.520 --> 00:10:56.720
Теперь, если говорим про best practices, что рекомендует

00:10:56.720 --> 00:11:03.360
AWS, это для вас самого, как владельца этого AWS аккаунта,

00:11:03.360 --> 00:11:07.920
создать специального пользователя admin и уже под admin заходить

00:11:07.920 --> 00:11:12.280
и использовать, производить все ежедневные операции,

00:11:12.280 --> 00:11:13.280
которые вам нужны.

00:11:13.280 --> 00:11:16.080
Когда мы говорим про ваших сотрудников, то для них

00:11:16.080 --> 00:11:20.600
создаются отдельные пользователи, желательно рекомендуется

00:11:20.600 --> 00:11:24.760
создать специальную группу в зависимости от должностных

00:11:24.760 --> 00:11:29.960
обязанностей ваших сотрудников и далее уже все роли, все

00:11:29.960 --> 00:11:37.800
полиси привязывать к группе.

00:11:37.800 --> 00:11:41.480
Один из других настроек, которые вам также нужно

00:11:41.480 --> 00:11:45.520
сделать в root аккаунте, это для root аккаунта, если они

00:11:45.520 --> 00:11:48.520
есть, удалить аксесс ключи.

00:11:48.520 --> 00:11:51.840
Аксесс ключи, как мы помним, используется для программного

00:11:51.840 --> 00:11:56.080
доступа через CLI либо SDK к облаку.

00:11:56.080 --> 00:12:00.440
Так как через root пользователя ничего происходить не будет,

00:12:00.440 --> 00:12:03.180
он обычно используется только тогда, когда вы сами лично

00:12:03.180 --> 00:12:06.960
заходите во всех других случаях, нужно использовать

00:12:06.960 --> 00:12:10.840
специально созданных пользователей, либо роли, если это сервис.

00:12:10.840 --> 00:12:14.520
Поэтому эти аксесс ключи вы удаляйте.

00:12:14.520 --> 00:12:19.000
Другой момент это то, что вам нужно создать так называемый

00:12:19.000 --> 00:12:24.880
пасмурт полиси и сделать его по возможности сложным.

00:12:24.880 --> 00:12:28.960
То есть это тот документ, который описывает насколько

00:12:28.960 --> 00:12:34.920
сложный или из каких символов должен состоять пароль.

00:12:34.920 --> 00:12:45.400
Для всех IAM пользователей.

00:12:45.400 --> 00:12:48.800
Еще одним функционалом, который помогает еще больше

00:12:48.800 --> 00:12:51.880
обезопасить ваше облако является MFA.

00:12:51.880 --> 00:12:56.560
MFA это опциональный функционал, поэтому вам нужно ее специально

00:12:56.560 --> 00:12:57.920
включить, активировать.

00:12:57.920 --> 00:13:00.920
И что значит MFA?

00:13:00.920 --> 00:13:03.800
MFA это Multi-Factor Authentication.

00:13:03.800 --> 00:13:11.000
Идея в том, что пользователи при логине в AWS Management Account

00:13:11.000 --> 00:13:13.120
предоставляли несколько факторов.

00:13:13.120 --> 00:13:14.600
Что такое фактор?

00:13:14.600 --> 00:13:18.160
Фактор это, например, что пользователь знает.

00:13:18.160 --> 00:13:20.200
А пользователь знает логин и пароль.

00:13:20.200 --> 00:13:23.760
Другой фактор это что у пользователя есть.

00:13:23.760 --> 00:13:28.720
Это что-то такое физическое, которое не может быть у

00:13:28.720 --> 00:13:29.920
узловомышленника.

00:13:29.920 --> 00:13:35.320
Например, это телефон и как это реализовано, есть

00:13:35.320 --> 00:13:37.520
так называемый виртуал MFA.

00:13:37.520 --> 00:13:40.000
Устанавливается приложение ваш смартфон.

00:13:40.000 --> 00:13:45.200
Делается специальная привязка вашего аккаунта внутри

00:13:45.200 --> 00:13:49.600
этого приложения с AWS Management Account пользователем.

00:13:49.600 --> 00:13:54.760
И вот такая привязка произошла.

00:13:54.760 --> 00:14:01.120
В приложении вам каждые 30 секунд генерируется шестизначное

00:14:01.120 --> 00:14:02.120
число.

00:14:02.120 --> 00:14:08.520
Таким образом, в момент, когда вы проходите автентификацию,

00:14:08.520 --> 00:14:10.080
вы вводите ваш логин и пароль.

00:14:10.080 --> 00:14:14.840
После этого вы вводите ваш MFA ключ и уже на стороне

00:14:14.840 --> 00:14:17.760
AWS Management Account происходит проверка.

00:14:17.760 --> 00:14:20.120
Действительно ли в это время этому пользователю

00:14:20.120 --> 00:14:22.720
было отображено это шестизначное число.

00:14:22.720 --> 00:14:26.120
Если да, оно совпадает, это говорит о том, что вы как

00:14:26.120 --> 00:14:29.480
пользователь с двух факторов себя идентифицировали.

00:14:29.480 --> 00:14:35.240
И таким образом вы исключаете еще больше вероятность

00:14:35.240 --> 00:14:42.040
того, что это не вы, а какой-то злоумышленник.

00:14:42.040 --> 00:14:46.800
Следующим шагом, который помогает увеличить безопасность

00:14:46.800 --> 00:14:50.480
вашего облака, это так называемый AWS CloudTrail.

00:14:50.480 --> 00:14:54.520
Это сервис, который является аналогом черного ящика

00:14:54.520 --> 00:14:55.520
в самолете.

00:14:55.520 --> 00:14:59.120
Оно является максимально защищенным и записывает

00:14:59.120 --> 00:15:06.480
все те вызовы к AWS API, то есть все те изменения вашей

00:15:06.480 --> 00:15:12.960
инфраструктуры в облаке.

00:15:12.960 --> 00:15:18.600
По умолчанию включено и бесплатно хранится 90 дней

00:15:18.600 --> 00:15:20.760
всех ваших действий в вашем аккаунте.

00:15:20.760 --> 00:15:26.600
И знайте, что у вас есть такая возможность, если

00:15:26.600 --> 00:15:29.000
же вам необходимо настроить какие-то дополнительные

00:15:29.000 --> 00:15:36.760
альерты или же хранить не 90 дней, а больше для каких-то

00:15:36.760 --> 00:15:38.040
определенных положений.

00:15:38.040 --> 00:15:41.480
Если вы какая-то финансовая организация либо государственная,

00:15:41.480 --> 00:15:44.600
вам необходимо эту информацию хранить какое-то количество

00:15:44.600 --> 00:15:45.600
лет.

00:15:45.600 --> 00:15:48.880
В этом случае вы создаете так называемый Trail, это

00:15:48.880 --> 00:15:54.660
ресурс сервиса CloudTrail, который как раз таки накапливает

00:15:54.660 --> 00:15:59.200
все действия, происходящие в вашем аккаунте на какой-то

00:15:59.200 --> 00:16:00.200
больший период.

00:16:00.200 --> 00:16:07.080
В этом случае могут заниматься определенная плата, Trail

00:16:07.080 --> 00:16:12.040
хранит все свои данные внутри S3, а так как логи это текстовая

00:16:12.040 --> 00:16:15.560
информация, то обычно расходы на CloudTrail достаточно низкие.

00:16:15.560 --> 00:16:19.360
Но в случае, когда у вас возникает какая-то проблема

00:16:19.360 --> 00:16:22.880
внутри облака, для целей расследования это просто

00:16:22.880 --> 00:16:25.320
незаменимая информация, поэтому рекомендуется

00:16:25.320 --> 00:16:31.280
ее включать и держать всегда активной.

00:16:31.280 --> 00:16:35.520
Мы с вами проходили на предыдущих занятиях о сервисах связанных

00:16:35.520 --> 00:16:40.320
с милиингом и затратами на облако, то есть с костом.

00:16:40.320 --> 00:16:45.200
И вам также как best practice рекомендуется настроить

00:16:45.200 --> 00:16:50.800
алерты на бюджет, также рекомендуется настроить

00:16:50.800 --> 00:16:54.600
так называемые отчеты, так чтобы вы могли быстро

00:16:54.600 --> 00:16:58.580
оперативно видеть все ваши расходы и предпринимать

00:16:58.580 --> 00:17:00.160
какие-то определенные действия.

00:17:00.160 --> 00:17:04.000
Это вы можете сделать внутри Cost Explorer, если же вам нужна

00:17:04.000 --> 00:17:07.060
более детальная информация, то вы можете воспользоваться

00:17:07.060 --> 00:17:12.040
сервисом Cost and Usage Reports, который все данные, все

00:17:12.040 --> 00:17:16.360
метаданные связаны с вашими расходами, со всеми деталями

00:17:16.360 --> 00:17:19.880
выгружает в S3 и вы эти данные можете использовать для

00:17:19.880 --> 00:17:23.080
построения уникальных кастомных отчетов.

00:17:23.080 --> 00:17:26.600
Зачастую использование Cost and Usage Reports является

00:17:26.600 --> 00:17:30.120
достаточно продвинутым вариантом, практикуется

00:17:30.120 --> 00:17:33.800
в крупных компаниях, поэтому в вашем случае нету смысла

00:17:33.800 --> 00:17:37.480
в самом начале терять время на изучение, на настройку

00:17:37.480 --> 00:17:42.000
этих отчетов, а можно положиться на сервис Cost Explorer, который

00:17:42.000 --> 00:17:45.920
все необходимое вам покажет и в удобном виде сохранит

00:17:45.920 --> 00:17:48.880
ваши отчеты.

00:17:48.880 --> 00:17:52.960
На этом мы подошли к концу третьей части нашей лекции

00:17:52.960 --> 00:17:59.800
и мы поговорили про все те основные шаги, действия,

00:17:59.800 --> 00:18:03.720
те сервисы и тот функционал, который доступен в AWS облаке

00:18:03.720 --> 00:18:09.120
для максимального обеспечения безопасности вашей инфраструктуры

00:18:09.120 --> 00:18:11.280
в облаке.

00:18:11.280 --> 00:18:15.000
Мы переходим к четвертой части нашей лекции и поговорим

00:18:15.000 --> 00:18:18.880
про дополнительный набор сервисов, которые помогают

00:18:18.880 --> 00:18:24.880
нам обезопасить наши аккаунты.

00:18:24.880 --> 00:18:28.440
Самый первый сервис это AWS Organizations.

00:18:28.440 --> 00:18:32.120
AWS Organizations, как мы помним, это сервис, который позволяет

00:18:32.120 --> 00:18:35.600
центрально управлять несколькими AWS аккаунтами.

00:18:35.600 --> 00:18:42.680
Также он позволяет нам настроить consolidated billing.

00:18:42.680 --> 00:18:47.080
Идея в том, что мы все расходы на каждом из наших AWS аккаунтов

00:18:47.080 --> 00:18:49.840
собираем расходы в одно место и отображаем в удобном

00:18:49.840 --> 00:18:54.880
виде в одном основном аккаунте.

00:18:54.880 --> 00:18:58.200
Для того, чтобы обеспечить безопасность, на стороне

00:18:58.200 --> 00:19:00.480
организаций тоже есть некоторый функционал.

00:19:00.480 --> 00:19:03.320
Он называется Service Control Policies.

00:19:03.320 --> 00:19:07.200
Идея в том, что это такой же JSON документ, это такое

00:19:07.200 --> 00:19:12.800
же policy, но оно привязывается уже к AWS аккаунту.

00:19:12.800 --> 00:19:15.920
Более того, мы с вами помним, что есть функционал OU, то

00:19:15.920 --> 00:19:20.760
есть organizational units внутри AWS Organizations, которое позволяет

00:19:20.760 --> 00:19:23.040
ваши аккаунты между собой группировать.

00:19:23.040 --> 00:19:28.960
Таким образом вы можете гибко и максимально удобно

00:19:28.960 --> 00:19:32.960
группировать ваши аккаунты, а Service Control Policies есть возможность

00:19:32.960 --> 00:19:36.400
привязывать не к отдельному аккаунту, а к целой группе,

00:19:36.400 --> 00:19:38.360
то есть к организационному юнито.

00:19:38.360 --> 00:19:43.280
Таким образом максимально правильно настроить доступы,

00:19:43.280 --> 00:19:46.640
например в тех аккаунтах, где у вас происходит разработка,

00:19:46.640 --> 00:19:50.320
дать больше контроля над ресурсами, больше доступа,

00:19:50.320 --> 00:19:55.000
а в ваших продакшн аккаунтах дать максимально меньше

00:19:55.000 --> 00:19:59.160
доступа, но так, чтобы все работало корректно и исключить

00:19:59.160 --> 00:20:02.280
возможные поломки ввиду того, что у кого-то где-то

00:20:02.280 --> 00:20:06.200
больше есть доступа и какой-то злоумышленник если попадает

00:20:06.200 --> 00:20:11.520
в продакшн среду мог минимальный вред нанести вашей IT-инфраструктуре.

00:20:11.520 --> 00:20:17.560
Следующий сервис AWS KMS, то есть Key Management Service.

00:20:17.560 --> 00:20:21.520
Этот сервис помогает нам управлять нашими ключами

00:20:21.520 --> 00:20:24.160
шифрования в облаке.

00:20:24.160 --> 00:20:26.960
На текущий момент вам достаточно знать определение, более

00:20:26.960 --> 00:20:29.960
подробно об этом сервисе мы будем говорить на следующих

00:20:29.960 --> 00:20:30.960
занятиях.

00:20:30.960 --> 00:20:34.880
Следующий сервис Amazon Cognito.

00:20:34.880 --> 00:20:38.040
Мы этот сервис не будем подробно рассматривать,

00:20:38.040 --> 00:20:41.480
так как для цели реального экзамена достаточно знать

00:20:41.480 --> 00:20:45.120
определение и определение следующее.

00:20:45.120 --> 00:20:49.540
Это сервис, который позволяет вам управлять пользователей

00:20:49.540 --> 00:20:53.720
ваших приложений, то есть дает возможность авторизовываться,

00:20:53.720 --> 00:20:57.000
регистрироваться и менеджить, хранить информацию о всех

00:20:57.000 --> 00:20:58.000
ваших пользователях.

00:20:58.000 --> 00:21:05.000
Следующий менеджер сервис связанный с безопасностью

00:21:05.000 --> 00:21:07.620
AWS Shield.

00:21:07.620 --> 00:21:10.420
Вам также достаточно знать определение, а на следующий

00:21:10.420 --> 00:21:17.440
этот сервис позволяет вам защищаться от недосадок.

00:21:17.440 --> 00:21:20.860
Мы с вами переходим к пятой части нашей лекции и поговорим

00:21:20.860 --> 00:21:29.640
про то, как мы можем защищать наши данные в облаке.

00:21:29.640 --> 00:21:32.840
Первое состояние, в котором данные могут пребывать,

00:21:32.840 --> 00:21:36.960
это так называемый at-rest, то есть это тот случай, когда

00:21:36.960 --> 00:21:39.800
данные хранятся на жестких дисках.

00:21:39.800 --> 00:21:42.720
В этом случае у нас есть возможность использовать

00:21:42.720 --> 00:21:47.800
так называемый AES-256 шифрование, либо воспользоваться сервисом

00:21:47.800 --> 00:21:52.320
AWS QMS, про который мы ранее говорили, для шифрования

00:21:52.320 --> 00:21:56.920
данных в состоянии покоя, в состоянии хранения.

00:21:56.920 --> 00:22:02.400
Другое состояние данных, в котором их также нужно

00:22:02.400 --> 00:22:05.280
защищать, это в состоянии передачи, то есть когда

00:22:05.280 --> 00:22:07.880
мы передаем наши данные по сети.

00:22:07.880 --> 00:22:12.600
В этом случае есть сервис AWS Certificate Manager, который

00:22:12.600 --> 00:22:18.720
позволяет нам генерировать SSL ключи, либо TLS сертификаты,

00:22:18.720 --> 00:22:21.640
для того чтобы защитить поток данных.

00:22:21.640 --> 00:22:26.100
Это также относится к веб-трафику, то есть используя этот

00:22:26.100 --> 00:22:33.440
сервис AWS Certificate Manager мы можем настроить Secure HTTP,

00:22:33.440 --> 00:22:37.080
то есть HTTPS соединение.

00:22:37.080 --> 00:22:45.000
Таким образом вы можете посмотреть бакеты, которые,

00:22:45.000 --> 00:22:49.600
таким образом, увидев этот список, вы можете определить,

00:22:49.600 --> 00:22:53.320
действительно ли для этих бакетов нужен доступ с интернета,

00:22:53.320 --> 00:22:57.000
если же нет, то вы сможете точечно пройтись по ним

00:22:57.000 --> 00:22:58.960
и заблокировать общий доступ с интернета.

00:22:58.960 --> 00:23:03.720
В зависимости от того, в какой сфере работает ваша

00:23:03.720 --> 00:23:07.600
компания, в какой стране вы находитесь, либо в каком

00:23:07.600 --> 00:23:11.000
регионе земного шара, вы должны соответствовать

00:23:11.000 --> 00:23:15.480
некоторым стандартам качества, либо регуляторным требованиям.

00:23:15.480 --> 00:23:20.600
AWS со своей стороны на периодической основе проходит разные

00:23:20.600 --> 00:23:25.520
проверки, получает сертификаты качества и заключительные

00:23:25.520 --> 00:23:29.200
документы, что он соответствует некоторым регуляторным

00:23:29.200 --> 00:23:30.200
требованиям.

00:23:30.200 --> 00:23:34.440
Из тех программ, compliance программ, которые стоит

00:23:34.440 --> 00:23:39.120
упомянуть и которые могут прийти на AWS экзамене, это

00:23:39.120 --> 00:23:46.480
что AWS получил сертификат качества ISO 27001.

00:23:46.480 --> 00:23:52.680
Также есть подтверждение, что соответствует требованиям

00:23:52.680 --> 00:23:56.680
акта HIPAA, это для тех компаний, которые работают в сфере

00:23:56.680 --> 00:24:01.680
медицины, и третье — это GDPR, это для компаний, которые

00:24:01.680 --> 00:24:07.160
в большинстве случаев находятся в Европе, и в этом документе

00:24:07.160 --> 00:24:10.800
описываются требования, как хранить и как работать

00:24:10.800 --> 00:24:13.080
с персональными данными.

00:24:13.080 --> 00:24:17.760
Все эти документы, сертификаты качества, заключительные

00:24:17.760 --> 00:24:21.640
документы вы можете скачать в так называемом сервисы

00:24:21.640 --> 00:24:23.120
AWS Artifact.

00:24:23.120 --> 00:24:29.320
Но это не совсем сервис, а больше набор страничек,

00:24:29.320 --> 00:24:33.080
в котором вы можете по требованиям, по необходимости для вашей

00:24:33.080 --> 00:24:38.920
компании скачать эти документы.

00:24:38.920 --> 00:24:43.480
Если мы говорим compliance в рамках AWS аккаунта для

00:24:43.480 --> 00:24:47.800
себя, для того чтобы понимать, что происходит, какие ресурсы

00:24:47.800 --> 00:24:50.920
есть, какие изменения в этих ресурсах произошли,

00:24:50.920 --> 00:24:54.600
то мы можем воспользоваться сервисом AWS Config, который

00:24:54.600 --> 00:24:59.060
все изменения фиксирует и может дополнительные

00:24:59.060 --> 00:25:05.200
действия исполнить по определенным условиям.

00:25:05.200 --> 00:25:09.880
Этого определения достаточно для целей экзамена, и мы

00:25:09.880 --> 00:25:10.880
идем дальше.

00:25:10.880 --> 00:25:17.960
У нас есть самый последний бонусный раздел нашей лекции,

00:25:17.960 --> 00:25:21.200
мы максимально быстро по нему пройдемся.

00:25:21.200 --> 00:25:23.960
Есть такой сервис AWS Service Catalog.

00:25:23.960 --> 00:25:29.240
Идея этого сервиса в том, чтобы выбрать те сервисы,

00:25:29.240 --> 00:25:36.440
которые одобрены вашей компанией, и уже предоставить

00:25:36.440 --> 00:25:40.200
вашим сотрудникам доступ к именно этим сервисам

00:25:40.200 --> 00:25:44.760
через AWS Service Catalog.

00:25:44.760 --> 00:25:50.600
Другие три сервиса это AWS Macie, это тот сервис, который

00:25:50.600 --> 00:25:54.240
использует машинное обучение для того, чтобы сканировать

00:25:54.240 --> 00:25:56.840
все данные, которые есть в вашей инфраструктуре,

00:25:56.840 --> 00:26:00.800
чтобы выявить так называемые персональные данные.

00:26:00.800 --> 00:26:03.040
Дальше уже с выявленной информацией вы можете

00:26:03.040 --> 00:26:08.080
соответственно действовать, либо сохранять в специальное

00:26:08.080 --> 00:26:11.860
хранилище эти данные, либо удалить, если они случайно

00:26:11.860 --> 00:26:12.860
туда попали.

00:26:12.860 --> 00:26:18.040
Другие два сервиса они похожи, это Amazon Inspector и Amazon

00:26:18.040 --> 00:26:19.040
GuardDuty.

00:26:19.040 --> 00:26:24.040
Идея этих сервисов в том, что это managed-сервисы Амазона,

00:26:24.040 --> 00:26:28.920
и как только вы ее запускаете, происходит автоматическое

00:26:28.920 --> 00:26:33.320
сканирование вашего облака, вашей IT-инфраструктуры

00:26:33.320 --> 00:26:36.680
для выявления некоторых проблем безопасности, и

00:26:36.680 --> 00:26:40.000
в последующем составляется некоторый список рекомендаций,

00:26:40.000 --> 00:26:48.240
чтобы улучшить состояние безопасности вашей IT-инфраструктуры.

00:26:48.240 --> 00:26:52.040
На этом мы добрались до последних слайдов нашей

00:26:52.040 --> 00:26:53.040
лекции.

00:26:53.040 --> 00:26:54.520
Мы завершаем нашу лекцию.

00:26:54.520 --> 00:26:59.240
Я бы хотел вкратце дать некоторые ссаммори.

00:26:59.240 --> 00:27:03.600
Первое, мы разобрали, что такое shared responsibility model.

00:27:03.600 --> 00:27:08.440
Далее мы познакомились подробно с сервисом AWS AM.

00:27:08.440 --> 00:27:12.520
После этого мы рассмотрели те шаги действия, которые

00:27:12.520 --> 00:27:17.000
рекомендуется предпринять при создании нового AWS-аккаунта.

00:27:17.000 --> 00:27:21.100
А далее рассмотрели ряд сервисов AWS, которые так

00:27:21.100 --> 00:27:25.640
или иначе связаны с обеспечением безопасности в облаке.

00:27:25.640 --> 00:27:28.400
Здесь хотел бы отметить, что вы большие молодцы.

00:27:28.400 --> 00:27:33.160
Я понимаю, что объем информации большой, много новых терминов,

00:27:33.160 --> 00:27:35.160
много новых названий сервисов.

00:27:35.160 --> 00:27:37.260
Самое главное, вы не переживайте.

00:27:37.260 --> 00:27:40.140
� екомендация от меня делать некоторые конспекты, как

00:27:40.140 --> 00:27:43.880
минимум записывать названия сервисов.

00:27:43.880 --> 00:27:48.400
Когда вы это записываете, либо пересматриваете лекции,

00:27:48.400 --> 00:27:52.400
названия сервисов уже будут запоминаться и казаться

00:27:52.400 --> 00:27:53.560
знакомыми.

00:27:53.560 --> 00:27:56.960
Мы более подробно будем проговаривать про некоторые

00:27:56.960 --> 00:28:01.840
сервисы, которые встречаются чаще на реальном экзамене

00:28:01.840 --> 00:28:02.840
AWS.

00:28:02.840 --> 00:28:06.520
Также у нас будут активности, где будет демо.

00:28:06.520 --> 00:28:10.000
Я вам покажу, как выглядит AWS Management Console на примере

00:28:10.000 --> 00:28:13.760
разных сервисов для того, чтобы лучше закрепить,

00:28:13.760 --> 00:28:14.960
лучше запомнилось визуально.

00:28:14.960 --> 00:28:19.320
У нас также будут несколько активностей лабораторных,

00:28:19.320 --> 00:28:23.480
в которых вы сами сможете попробовать пощупать облако.

00:28:23.480 --> 00:28:27.120
И для некоторых из вас такая активность поможет лучше

00:28:27.120 --> 00:28:32.000
запомнить, понять, как выглядит облако, как с ней работать,

00:28:32.000 --> 00:28:35.960
какие преимущества вы получаете и так далее.

00:28:35.960 --> 00:28:38.480
На этом сайте предоставлены ссылки, которые вам могут

00:28:38.480 --> 00:28:45.020
быть полезны, если вы хотите о какой-то из этих тем узнать

00:28:45.020 --> 00:28:46.020
более подробно.

00:28:46.020 --> 00:28:49.720
На этом мы завершаем наше лекционное занятие.

00:28:49.720 --> 00:28:51.160
Спасибо вам большое.

00:28:51.160 --> 00:28:52.160
Удачи!

00:28:52.160 --> 00:29:07.240
И увидимся на следующих занятиях.