Добрый день, уважаемые студенты!
Я рад вас всех видеть.
Мы с вами вместе добрались до 4-го модуля и сегодня
поговорим про безопасность в облаке.
Сегодня мы с вами разберем ряд AWS сервисов, связанных
с безопасностью.
Что-то из этого списка мы поговорим более подробно,
о чем-то поговорим менее подробно, то есть остановимся
на самых основных моментах и определение этих менее
популярных сервисов.
Тем не менее, эти сервисы могут прийти на реальном
AWS-экзамене и те знания, та информация, которую
вы получите на наших занятиях, будет достаточно для того,
чтобы вы успешно ответили на вопросы реального AWS-экзамена.
Давайте вкратце остановимся на каждой из секций.
Первая — это AWS Shared Responsibility Model.
Мы поговорим, что же это такое и как оно нам помогает.
Далее мы познакомимся с сервисом AWS IAM.
После этого мы определим те шаги, которые нам помогают
обезопасить наш новый AWS-аккаунт.
Далее познакомимся с некоторыми AWS-сервисами, которые также
связаны с безопасностью.
И поговорим о том, как мы можем защитить наши данные
в облаке.
Мы с вами начинаем первую секцию, а именно AWS Shared
Responsibility Model.
Когда мы говорим про безопасность в облаке, то всегда есть
две стороны.
Первая сторона — это мы как пользователи облака,
и с другой стороны — это облачный провайдер.
И подразделяют вот эту ответственность на две части логически.
Это то, что облачный провайдер отвечает за security of the cloud,
то есть за безопасность самого облака.
Когда мы говорим про пользователей, то есть нас, мы говорим,
что мы отвечаем за безопасность security in the cloud, то есть безопасность
в самом облаке.
Мы сказали, что AWS облачный провайдер отвечает за безопасность
облака.
Что же это значит?
Это значит то, что он обеспечивает физическую безопасность
дата-центров 24 на 7, обеспечивается охраной и всем необходимым,
что не дает возможность посторонним проникнуть
в эти дата-центры.
Следующее — это безопасность hardware and software инфраструктуры,
то есть это все то железо, это наши сервера, жесткие
диски и все любое другое оборудование, которое
принадлежит AWS.
Дальше software infrastructure имеется в виду операционные
системы, все приложения, приложения виртуализации.
Все это также обеспечивается безопасностью, имеется
в виду на постоянной основе обновляется, устанавливаются
различные обновления безопасности для того, чтобы никто как
физически, так и виртуально не мог проникнуть за границы
облачного провайдера.
Далее мы говорим безопасность сетевой инфраструктуры
и виртуализации, то есть это наши роутеры, свечи,
load balancer, firewall, кабельная часть, все кабели и так
далее.
Да, мы с вами, к сожалению, не можем приехать к любому
дата центру посмотреть, сами убедиться, это запрещено,
но на постоянной основе AWS приглашает специальных
аудиторов для того, чтобы они проверили, убедились,
выпустили соответствующие отчеты о том, что вся инфраструктура,
она обеспечена безопасностью, все это соответствует
стандартам, все эти отчеты, которые периодически выходят,
есть возможность скачать на бесплатной основе по
необходимости.
Давайте теперь подробнее поговорим, за что отвечает
пользователь, то есть мы и как обеспечить безопасность
в облаке.
В случае, если мы используем сервис EC2, то наша ответственность
выбрать ту операционную систему, которая обновлена,
у которых нет проблем с безопасностью, если же есть
проблемы с безопасностью, то должны быть установлены
все патчи безопасности.
Далее это наша ответственность выбирать те приложения,
у которых нет опять же уязвимостей, либо если есть, то должны
быть применены соответствующие патчи безопасности.
Когда мы говорим про инфраструктуру, то при настройке сетей
мы должны правильно настроить секьюрити группы, правильно
должна быть настроена вся сеть, чтобы не было дыр
безопасности.
Также мы говорим, что нужно провести некоторую беседу
с командой для того, чтобы проводить аккаунт менеджмент,
правильно сохранять, правильно хранить ключи безопасности,
логины, пароли и так далее.
И самое основное, которое также всегда идет рядом,
это безопасность наших данных.
То есть данных in transit, когда мы передаем, должны быть
зашифрованы, и безопасность данных at rest, то есть во
время хранения они тоже должны быть зашифрованы
в виде для того, чтобы исключить возможные атаки, потерю
данных, взлом самой инфраструктуры и поломку всего того рабочего
процесса, который есть.
Теперь хотелось бы рассмотреть вопросы безопасности с
точки зрения модели предоставления сервиса.
Как мы помним, у нас есть три вида, это IaaS, PaaS и SaaS.
Здесь основная идея в том, что начиная от IaaS до SaaS,
уровень контроля над эти ресурсами становится меньше.
Таким образом, и ту часть, которую мы перестаем контролировать
и передаем облачному провайдеру, то обеспечение безопасности
этой части также переходит облачному провайдеру.
Например, в случае с IaaS говорим про EC2, то обеспечение
безопасности это на нашей стороне.
В случае, когда мы говорим IWS RDS, это PaaS решение, то
мы за операционную систему, за ее безопасность уже
не отвечаем.
Мы это передали облачному провайдеру.
В случае, когда мы говорим software as a service, например,
та же почта, либо, например, есть такой сервис IWS Chime,
это аналог Zoom, только сервис IWS.
Они предоставлены в виде готового приложения, и
уже фактически у нас мало контроля или практически
нет контроля ее как-то изменять.
Таким образом, все то, что не относится к нам, должно
быть обезопасено на стороне облачного провайдера.
Для того, чтобы закрепить пройденный материал, я
бы хотел с вами провести некоторую активность.
Я буду задавать вопросы, а вам нужно ответить правильно.
За это ответственны IWS, то есть это относится к security
of the cloud, или за это ответственны пользователи облака, то
есть мы, и относятся к security in the cloud.
Сейчас я вкратце пройдусь по инфраструктуре.
Представим, что у нас есть IWS аккаунт.
Мы используем сервис S3, дальше мы используем сервис
VPC, в котором у нас есть EC2 instance, а также есть инстанс
оракловой базы данных.
Давайте теперь пройдемся по вопросам.
Вам нужно будет ставить на паузу вопрос, брать какое-то
время на подумать, и будем смотреть, сможете ли вы
ответить правильно.
Первый вопрос.
Обновление и установка патчей безопасности операционной
системы на EC2 instance.
Можете поставить на паузу.
Правильный ответ customer, то есть за это ответственны
пользователи.
Следующий вопрос.
Физическая безопасность дата центра.
Правильный ответ IWS.
Третий вопрос.
Кто отвечает за безопасность инфраструктуры в виртуализации?
Правильный ответ IWS.
Следующий вопрос.
Кто отвечает за правильную настройку security group в EC2
instance?
Правильный ответ the customer, то есть мы.
Пятый вопрос.
Конфигурация, то есть настройка приложений, которые запущены
на EC2.
Кто отвечает за ее безопасность?
Мы либо IWS.
Правильный ответ customer, то есть за это ответственны
мы.
Следующий вопрос.
Кто отвечает за установку обновлений патчей безопасности
ораклового инстенса, который запущен как instance RDS?
И правильный ответ IWS.
Мы не занимаемся настройкой операционной системы, обновлением
безопасности, потому как она предоставлена как
PAS решение.
И так как Amazon отвечает за это, то и за безопасность
этой части тоже лежит на нем.
А мы лишь получаем готовую базу данных как сервис.
Следующий вопрос.
Кто отвечает за те же патчи безопасности и обновление
ораклового баз данных, которые запущены на EC2 инстенсе?
Правильный ответ customer, то есть за этот вид развертывания
оракловой базы уже отвечаем мы, потому что все то, что
запускается на EC2 инстенса, ровно таки за безопасность
самого EC2 инстенса, за виртуальную безопасность отвечает
пользователь.
Ну и последний вопрос.
Кто отвечает за правильную настройку доступа в безопасности
в S3 бакеты?
Правильный ответ customer, то есть за это ответственны
мы.
AWS предоставляет возможность нам эти доступы настраивать
к бакетам, а за правильную настройку уже ответственны
мы.
Давайте теперь рассмотрим другую архитектуру.
Логика активности остается такой же.
Я задаю вопрос, вы ставите на паузу и пытайтесь ответить
правильно, либо за это отвечает AWS, либо за это отвечает пользователь,
то есть мы.
Итак, поехали.
В нашей инфраструктуре у нас есть настроенные VPC,
внутри есть настроенный сабнет, в котором есть веб-сервер
на EC2 инстенсе.
Этот EC2 инстанс взаимодействует с S3 бакетом.
Также у нас к VPC подключен интернет-гейтвей, через
который мы подключаемся к нашему веб-серверу через
AWS Management Console, либо используя SSH ключи через командную
строку, то есть AWS CLI.
Итак, первый вопрос.
Обеспечение безопасности AWS Management Console так, чтобы
она не была взломана хакерами.
За это отвечает AWS.
Далее, конфигурация, правильная конфигурация сабнетов.
Правильный ответ customer, то есть AWS предоставляет
нам инструменты для конфигурации сабнетов, а наша задача
их правильно настроить и наша ответственность,
что они безопасно настроены.
Следующий вопрос, правильная безопасная конфигурация
VPC.
За это отвечаем также мы.
Идея такая же, как сабнетами.
Идем дальше.
Защита от сбоев сети в AWS регионах.
Правильный ответ AWS.
То есть, связь, то есть сеть между регионами, это относится
к глобальной инфраструктуре AWS, поэтому за это ответственно
AWS.
Защита SSH ключей.
За защиту SSH ключей ответственно мы, то есть пользователи.
Идем дальше.
Шестой вопрос.
Обеспечение сетевой изоляции между данными пользователей
AWS.
За это ответственно AWS.
То есть, у нас как пользователей нет никакой возможности
добраться до данных других пользователей, тем более
это как-то настраивать.
Поэтому за это ответственно AWS.
Идем дальше.
Шестой вопрос.
Обеспечение широкополосного доступа, быстрого доступа
между веб-сервером и S3-бакетом.
Правильный ответ AWS.
То есть, опять же, это относится к глобальной инфраструктуре
AWS.
Что EC2-инстанц, что S3-бакет находится там.
И для того, чтобы предоставить быстрый доступ между двумя
этими сервисами, мы не используем интернет.
Точнее AWS не использует интернет, он использует свою глобальную
инфраструктуру для того, чтобы это было быстрее
и это было безопаснее.
За это ответственно сам AWS.
И последний вопрос.
Продвижение использования MFA для всех авторизаций пользователей.
За это ответственный customer.
То есть мы...
Идея в чем?
Идея в том, что мы внутри IAM создаем пользователей.
Таким образом, обычные физические пользователи, сотрудники
наши, они могут, используя логин-пароль выданный, авторизовываться
в нашем AWS аккаунте.
Они работают все в одном AWS аккаунте.
И помимо логина-пароля можно настроить MFA, так называемый.
Обычно это виртуальный MFA.
Настраивается, устанавливается приложение и каждые 30 секунд
генерируется новый шестизначный код.
И во время авторизации пользователь не только вводит логин
и пароль, он также подтверждает, что авторизованное устройство,
оно у него, что это его устройство, у него есть к нему доступ.
И таким образом вводит сгенерированный новый ключ.
И после этого дальше заходит.
И вот продвижение и включение этой опции MFA, она полностью
лежит на customer, то есть на нас.
Она изначально отключена, но есть рекомендация от
AWS ее включить.
И в некоторых случаях бывает ее не включают.
Это все зависит от зрелости компании.
Чем она больше, тем больше она обращает внимание на
возможные уязвимости, на возможные места атаки.
И таким образом через MFA мы еще больше гарантируем
себе, что аккаунт не будет взломан и злоумышленник
не подключится к облаку AWS для того, чтобы что-то
украсть либо сломать инфраструктуру.
На этом мы заканчиваем первую секцию.
Давайте остановимся на основных моментах.
Мы разобрали, что такое shared responsibility model и проговорили
о том, что для полной безопасности облака, обе стороны, что
облачный провайдер, что пользователь.
То есть мы должны обеспечить безопасность в определенных
местах.
Для определенных местах можно разделить на два
направления.
То есть AWS обеспечивает безопасность of the cloud, то есть самого облака,
а customer уже работая внутри облака обеспечивает security
in the cloud, то есть безопасность в облаке.
В случае AWS подразумевается физическая безопасность
дата центров, железа, всего того, по которым используется,
чтобы у него не было ошибок, дыр безопасности.
И это все преждевременно обновлялось.
Когда мы говорим про кастомера, то подразумевается правильная
настройка тех сервисов для того, чтобы не открыть
некоторые места для возможной атаки, правильное management,
правильное управление ключами безопасности, логинами,
паролями, то есть, скажем так, credentials и своими пользователями.
Также в зависимости от сервиса, который мы используем,
они у нас подразделяются на три вида по предоставлению
этого сервиса.
Это модель IaaS, модель PaaS и модель SaaS.
И в зависимости от уровня у нас меняется контроль
над IT ресурсом, ну и, соответственно, определяются тем самым,
отвечаем ли мы за безопасность той или иной части конкретного
ресурса.
В случае, когда мы говорим про IaaS, так как у нас больше
контроля над IT ресурсами, значит, у нас больше мест,
где мы должны обеспечить безопасность.
Когда мы говорим про PaaS и SaaS, контроль у нас уменьшается.
Соответственно, за ту часть, которой уже ответственен
облачный провайдер, он уже там же и обеспечивает
безопасность.
Это уже не наша задача.
Мы переходим ко второй части, а это сервис Identity and Access
Management, то есть AWS IAM.
Когда мы говорим про AWS IAM, то это тот сервис, который
обеспечивает любые доступы, так или иначе связанные
с текущим AWS аккаунтом и всеми теми ресурсами, которые
в нем могут быть.
Таким образом, мы говорим через этот сервис, кто может
получить доступ, на какие ресурсы может получить
доступ, как он и при каких условиях получает этот
доступ.
А также следует отметить, что IAM – это бесплатный
сервис, за который мы ничего не оплачиваем.
Давайте теперь остановимся на основных компонентах
сервиса IAM.
Это IAM User, Group Policy и Role.
У каждого есть своя цель.
Когда мы говорим про IAM User, это некая сущность, у которой
есть свой идентификатор, у нее также есть свой ARN,
есть ключи доступа, логин, пароль.
И мы можем эту информацию передать нашему сотруднику
в компании для того, чтобы он мог под этим юзером
подключаться в наше облако к нашему AWS аккаунту.
Далее мы говорим, что у нас есть IAM группы и мы наших
пользователей можем объединять в этих группах.
И когда это используется, это когда у нас есть несколько
пользователей, которые схожи по должностям, обязанностям,
либо как минимум у них должен быть равный доступ внутри
группы, то мы можем этих пользователей добавить
к специально созданной группе с соответствующим
именем и уже группе выдать необходимые права.
Таким образом, всем тем пользователям, которые
там сидят, у них будет возможность доступа к соответствующим
сервисам и действиям.
Здесь следует отметить, что да, в одной группе может
быть несколько пользователей, но и каждый пользователь
может быть в нескольких группах, поэтому это тоже
верно.
И пользователь, например, может для определенного
набора сервисов получить доступ через одну группу
и через другую группу получить доступ к другим сервисам.
Таким образом, в совокупности у него больше будет доступа,
чем у другого пользователя, который сидит только в
одной группе.
Таким образом, можно более тонко настроить доступы
каждого пользователя внутри AWS.
Когда мы говорим policy, это тот документ, который описывается
в виде JSON, и он описывает информацию до каких ресурсов,
на какие операции есть доступ.
Но у какой сущности не прописывается, мы ее как раз-таки policy привязываем
либо к юзеру напрямую, либо к группе.
В целом, best practice это policy привязывать к группам.
Даже если у нас есть один пользователь, нам все равно
рекомендуется создать группу этого пользователя,
подключить к этой группе и уже после все policy, которые
мы создаем, привязывать не к пользователю, а к созданным
нами группам.
Ну и следующая последняя сущность – это IAM-роль.
Идея в том, что мы говорили, что мы строим IT-инфраструктуру
в облаке, она состоит из разных компонентов, каждый
компонент – это какой-то определенный сервис, ее
ресурс.
И они взаимодействуют между собой для того, чтобы выполнять
какую-то бизнес-задачу.
Так вот, изначально у любого сервиса нет никаких доступов,
нет никаких прав, он только может работать внутри своего,
скажем так, сервиса.
И когда мы создаем, например, лямду, то есть функцию, то
мы прописываем там код, и у этого кода он может исполнить
какой-то код, внутри может быть какая-то логика, но
у этого кода нет доступа к другим AWS-ресурсам.
То есть мы не можем обратиться к какой-то определенной
S3-баке для того, чтобы оттуда извлечь какой-то файл.
Этого нет.
Поэтому в AWS-лямде есть возможность привязать роль к лямде,
а к роли уже привязать policy, который дает доступ на соответствующий
бакет.
После чего уже можно внутри кода обращаться к этому
бакету, и мы не получим ошибку, что там access denied и доступ
запрещен.
Еще один use case, когда используются роли, это когда у нас есть
несколько AWS-аккаунтов, и представим, что мы всех
пользователей создали в одном аккаунте, но наша
инфраструктура работает как в первом, так и во втором
AWS-аккаунте.
И нам нужно не создать пользователей во втором AWS-аккаунте, а
нужна возможность как-то обратиться этим пользователям
в первом AWS-аккаунте к ресурсам во втором.
Это делается следующим образом.
На втором AWS-аккаунте создается соответствующая роль, прописывается
trust policy, то есть прописываются те AWS-аккаунты и те пользователи,
которые могут использовать эту роль.
Таким образом, на стороне первого аккаунта мы выдаем
для соответствующих пользователей либо групп возможность
assume, то есть возможность использовать роль, которая
находится в другом аккаунте.
То есть с двух сторон должны разрешить доступ.
В этом случае есть возможность этому пользователю, зная
название аккаунта, куда он подключается, зная название
роли, которую он будет применять, он меняет свою роль, переподключается.
Таким образом, он, скажем так, переселяется или телепортируется
с одного AWS-аккаунта в другой AWS-аккаунт.
И все те доступы, которые есть у этой роли во втором
AWS-аккаунте, у него появляются.
И в рамках этой роли он может работать уже во втором
AWS-аккаунте.
Давайте теперь поговорим, как пользователь может
подключаться к AWS-аккаунту.
Есть два варианта.
Первый – это программное, когда мы используем AWS CLI
либо AWS SDK.
В этом случае ему нужно использовать свой access key ID либо secret access
key, который генерируется при создании пользователя.
У нас будет отдельное демо, и все те моменты, которые
мы проговорим на этой лекции, мы проделаем в этом демо.
Второй вариант – это когда пользователь подключается
к AWS-менеджмент-консоли.
В этом случае ему нужно знать 12-значный account ID или
alias этого аккаунта, если он настроен.
Также он должен знать свой логин, то есть username, также
пароль от этого пользователя.
Ну и третье – если подключен MFA и он требуется, то он должен
через приложение, которое установлено на устройстве
виртуал MFA ввести генерируемый код для того, чтобы успешно
подключиться.
Теперь давайте поговорим про авторизацию.
То есть есть автентификация – это когда пользователь
подключается к облаку и говорит, что пользователь
– это он.
В этом случае он заходит в систему.
Когда мы говорим про авторизацию, тут уже вопрос в том, что
этому пользователю, которому поняли, мы его идентифицировали,
что он может делать.
Изначально, когда создается только пользователь, у него
нет доступа никуда.
То есть есть такое термин как implicit deny.
Implicit deny – это неявный запрет на все ресурсы,
если оно явно не предоставлено.
Оно включено по умолчанию.
Таким образом, чтобы предоставить доступ, мы к этому пользователю
либо к группе, которая подключена к пользователю, подключаем
какой-то AWS-полосе, в котором как раз таки прописывается
куда, при каких условиях, на какие конкретные операции
есть доступ.
После этого важно еще упомянуть, что есть такое понятие
как principle of least privilege.
И идея в том, что нужно максимально стараться предоставлять
доступы только нужные.
Например, если пользователю нужно в истребакете доступ
к режиму чтения, то есть возможность скачивать
файлы для того, чтобы выполнять свою работу, то этому пользователю
не надо предоставлять полный доступ.
То есть не нужно давать ему возможность создавать
новые бакеты, не нужно ему давать возможность обращаться
к файлам, к бакетам, к другим бакетам, к которым он не
должен обращаться, а только к тем, с которыми он работает.
Также в рамках того же бакета не нужно ему выдавать доступ
на удаление либо загрузку новых файлов, если того
не требует его должностные обязанности.
Таким образом, нужно следовать принципу выдавать доступ
только тот, который необходим.
Ну и последнее, что стоит отметить, это то, что сервис
IAM он глобальный.
То есть когда вы подключаетесь, открываете этот сервис,
то сверху справа вы не увидите, к какому региону он относится,
а увидите надпись global.
Это говорит о том, что созданные пользователи автоматически
доступны на всех регионах.
Если вам необходимо ограничить доступ к определенным
регионам, то это можно сделать внутри IAM policy, который
вы привяжете к этому пользователю либо к группе.
Давайте теперь подробнее поговорим, что такое IAM
policy, каких видов они могут быть.
IAM policy подразделяется на identity based policy и resource based
policy.
Identity based policy это полисе, которая привязывается
к некой сущности, то есть identity.
А в нашем случае это может быть роль пользователь
или группа.
Когда мы говорим resource based policy, то на некий ресурс
определенного сервиса есть возможность привязать
полисе, которые относятся только к нему.
И она описывает какие сущности могут обращаться либо что-то
делать с конкретно этим ресурсом.
Примером может быть S3 bucket.
Вы можете к S3 bucket привязать некоторую resource based policy,
которая говорит, что у пользователей, которые находятся в группе
Administrators есть возможность изменять свойства этого
бакета.
А пользователям, которые сидят в, например, Simple
Users группе есть возможность скачивать файлы внутри
этого бакета, но нет возможности удалять либо изменять
эти файлы.
Когда мы говорим также про identity based policy, подразделяются
три вида.
Первое это custom policy, которую мы прописываем.
Она существует отдельно от чего-либо и вы это полисе
уже привязываете к роли пользователю либо группе.
Она может быть managed policy, это значит она управляется
и обновляется, поддерживается самим Amazon.
Примером может быть на каждый сервис может быть
несколько managed policy разного уровня.
Например, мы говорим S3, есть S3 full access policy, это когда
в этом полисе прописывается так, что любой identity, у
которого есть этот полисе имеет полный контроль к
S3 сервису.
Если же мы говорим про полисе попроще, это power user
policy.
В этом случае это продвинутый пользователь, у которого
нет административных прав, он не может создавать
либо удалять бакеты, но он может работать со всем
тем, удалять, создавать файлы внутри бакетов.
Ну и последнее может быть, например, read only policy, которая
предоставляет только возможность считывать некоторые файлы,
при этом создавать, удалять, а тем более создавать новые
бакеты или удалять эти бакеты, он не может.
Ну и третий вариант это inline policies, это когда мы не
создаем отдельно стоящий полисе с отдельным RN, с
отдельным ID, а создаем внутри либо определенные
группы или определенные роли, так называемые inline
policy.
Это та полисе, которая привязана к группе или роли, и она
не может существовать отдельно.
Таким образом, если вы создаете какое-то уникальное полисе,
то нет необходимости ее создавать отдельно, а можно
конкретно к роли либо группе создать, и она там будет
привязана стоять и работать также.
Если же у вас какая-то полисе, которую вы будете привязывать
к нескольким разным ролям, либо к нескольким разным
группам, то стоит рассмотреть создание отдельно стоящей
полиси для того, чтобы ее уже привязывать к разным
сущностям.
Другой важный момент, который стоит упомянуть, в каком
виде прописываются наши полисы, это JSON документ,
который идет в определенной структуре, у него есть определенные
ключи, которые мы разберем на следующих слайдах, и
соответствующие ожидаемые значения.
Когда мы также говорим про полисы, то вне зависимости
от того, какой это ресурс, либо какая это сущность,
рассматривается все имеющиеся полисы на конкретную сущность
или ресурс, и в тот момент, когда доступ есть, он выдается,
в тот момент, когда доступа нет, она не выдается и пишется
сообщение implicit deny, то есть неявный отказ, неявный
запрет.
И также мы говорим, что когда мы в полисе явно прописываем
explicit deny, то есть явно прописываем, что доступ запрещен, то
любой доступ, который вы в других местах в любом
количестве указываете как разрешен, но хотя бы в одном
другом месте прописано, что он запрещен, то оно
преобладает над любым разрешением и доступ вы не получаете.
Давайте рассмотрим пример IAM policy.
Вы здесь видите пример IAM policy, это json документ, у
него есть определенная структура, ожидаются определенные
ключи и значения, давайте подробнее рассмотрим.
Мы видим, что есть version, есть statement, version это стандартное
значение, 2012, 10, 17, ее вы не меняйте, она остается,
если что-то поменяется, то эту информацию вы всегда
можете найти в AWS документации.
Идем дальше.
Statement, то есть это те наши полиси, которые передаются
в массиве.
В нашем случае мы видим, что у нас два полиси, первый
это разрешает, то есть в пункте effect вы видите allow,
второй deny.
Два возможных варианта, либо allow, либо deny.
Если мы говорим про action, то здесь перечисляется
список операций, которые мы либо предоставляем доступ,
или запрещаем доступ.
Операции, что такое операция, это название сервиса, двоеточие
и название операции.
Например, S3, двоеточие get object, это мы выдаем доступ,
либо запрещаем доступ к сервису S3, а именно к операции
получить объект.
То есть после того, как у нас есть это разрешение,
мы можем скачать файл.
Когда мы видим место операции звездочку, это говорит о
том, что все операции в рамках этого сервиса предоставляются.
Давайте рассмотрим следующий, это resource, то есть здесь
мы указываем список ресурсов, над которыми мы хотим, для
которых мы хотим создать наш полиси.
Здесь важный момент, который стоит упомянуть, это то,
что, еще раз повторюсь, вне зависимости от того, какое
количество allow полисы вы создаете, если у вас в каком-то
из любых существующих полисе на этот ресурс, либо на
эту сущность, то есть identity, есть deny полисе, то оно имеет
приоритет перед всеми allow.
Когда мы говорим, что нет ни allow, ни deny полисе для
конкретного ресурса, для конкретной операции конкретного
сервиса, то в этом случае нет явного предоставления
доступа, то есть allow, и в этом случае мы ничего
не предоставляем, по дефолту у нас implicit deny, то есть
неявный запрет.
Пару дополнительных моментов, касательно resource based policy,
мы с вами проговорили, что это те полиси, которые
создаются для определенного ресурса, и в этом документе
указывается, так как она привязана уже к ресурсу,
то мы в полисе документе указываем, кто и на какую
операцию получает или наоборот запрещаем доступ.
Давайте все то, что мы проговаривали ранее, рассмотрим как блок
схему.
Самым первым, когда мы говорим, что есть у нас любой полисе,
не важно, это ресурс полисе, либо это identity based policy, то
мы проверяем, есть ли на конкретную операцию для
этого пользователя, на конкретный ресурс explicit deny, если есть,
мы говорим, что мы запрещаем доступ.
Все, дальше, если explicit deny, то есть явного запрета
нету, то мы двигаемся дальше, теперь ищем, есть ли explicit
allow, значит есть ли явное разрешение на конкретную
операцию, если есть, то доступ выдается.
В том случае, если нет ни explicit deny, ни explicit allow,
то в целях безопасности мы запрещаем это действие,
что называется implicit deny.
Это важный момент, поэтому я постарался в нескольких
видах это объяснить, если это понятно, то двигаемся
дальше.
Мы двигаемся к следующему основному понятию, это IAM
группы, в целом мы про него поговорили, давайте теперь
более подробные детали закрепим.
Первое это то, что в группе могут быть несколько пользователей
и соответственно каждый пользователь может быть
в нескольких группах.
Другой момент, второй, это то, что группа не может
быть вложной, таким образом вы не можете добавить какую-то
группу в другую группу, в группе могут быть только
пользователи.
Третье, это то, что не существует какой-то группы по умолчанию,
в которой у вас сидят все ваши пользователи.
Если вам нужно всех пользователей добавить какую-то группу,
вам нужно будет это сделать либо вручную, либо написать
простенький скрипт, но это все делается на вашей стороне,
создается специальная группа, как хотите ее называйте
и добавляйте всех ваших пользователей туда.
Другой важный компонент IAM это IAM-Rolle.
IAM-Rolle используется в большинстве случаев в двух случаях.
Первый случай это для того, чтобы сервисам предоставить
доступ к другим сервисам.
Один из примеров мы в прошлый раз рассматривали.
Представим, у нас есть лямбда функция и эта лямбда функция
в своей работе должна подключаться к S3, с S3 загружать по определенному
пути некоторый файл, изменять его и перезаливать обратно.
В этом случае для того, чтобы лямбда смогла это
сделать нужно к роли, которая привязана к этой функции,
выдать соответствующие права.
Вы прописываете полиси, привязываете к роли, но
мы помним с вами, что мы можем создать inline полиси,
которые есть только в этой роли, а также можем воспользоваться
managed полиси, которая управляется, поддерживается самим амазоном.
Второй вариант использования ролей это cross account доступ
пользователей с одного AWS аккаунта к ресурсам другого
AWS аккаунта.
Идея в том, что на втором аккаунте создается роль,
прописывается роль, в котором указывается account ID основного
account ID, а здесь в основном account ID, где сидят ваши пользователи,
дается доступ к assume роль операции, указывается
конкретный ресурс, ARN этого ресурса на втором AWS аккаунте,
и только после этого, когда с двух сторон выдали разрешение,
то у этого пользователя есть возможность переключиться
на ту роль и со всем тем доступом, который есть
в этой роли, работать в другом AWS аккаунте.
Мы с вами подошли к концу второй части нашей сегодняшней
лекции, познакомились с сервисом IAM, это очень важный
сервис, который во всех проектах, во всех возможных
IT инфраструктурах в облаке, она используется по той
простой причине, что мы работаем удаленно, подключаемся
к облаку удаленно, и для того, чтобы это делать, нам
нужно выдать определенные права.
Более того, когда мы говорим IT инфраструктура, это такая
система, где внутри системе сидят наши сервисы, и они
работают между собой.
Чтобы эти сервисы могли работать между собой, нам
также нужно выдать соответствующие права.
Основное правило, когда мы выдаем права, нужно помнить
то, что мы выдаем по принципу list privilege, то есть выдаем
только те права, которые нужны в данный момент для
этого identity, либо для этого ресурса.
Если остановимся о основных понятиях, то это IAM policy,
это то, что выдает права, и у нас есть три сущности,
это IAM user, IAM group, и IAM role.
Мы с вами добрались до третьей секции, и здесь мы поговорим,
какие шаги нужно предпринять, какие действия нужно сделать
для того, чтобы максимально обезопасить ваш новый созданный
AWS аккаунт.
Когда вы создаете новый AWS аккаунт, то в этом аккаунте
ничего нет.
Единственный вариант подключиться к облаку, это под root user,
это так называемый супер пользователь, у которого
есть полный доступ ко всему.
В best practices не рекомендуется использовать root user для ежедневных
задач, создать специальный пароль, создать для него
MFA и спрятать подальше, использовать только в тех
случаях, когда есть необходимость.
Есть определенные действия внутри AWS облака, когда вам
нужно использовать root пользователя, вы с этими действиями
будете встречаться редко, потому как обычно это разовые
операции, а не какие-то повторяющиеся действия.
Теперь, если говорим про best practices, что рекомендует
AWS, это для вас самого, как владельца этого AWS аккаунта,
создать специального пользователя admin и уже под admin заходить
и использовать, производить все ежедневные операции,
которые вам нужны.
Когда мы говорим про ваших сотрудников, то для них
создаются отдельные пользователи, желательно рекомендуется
создать специальную группу в зависимости от должностных
обязанностей ваших сотрудников и далее уже все роли, все
полиси привязывать к группе.
Один из других настроек, которые вам также нужно
сделать в root аккаунте, это для root аккаунта, если они
есть, удалить аксесс ключи.
Аксесс ключи, как мы помним, используется для программного
доступа через CLI либо SDK к облаку.
Так как через root пользователя ничего происходить не будет,
он обычно используется только тогда, когда вы сами лично
заходите во всех других случаях, нужно использовать
специально созданных пользователей, либо роли, если это сервис.
Поэтому эти аксесс ключи вы удаляйте.
Другой момент это то, что вам нужно создать так называемый
пасмурт полиси и сделать его по возможности сложным.
То есть это тот документ, который описывает насколько
сложный или из каких символов должен состоять пароль.
Для всех IAM пользователей.
Еще одним функционалом, который помогает еще больше
обезопасить ваше облако является MFA.
MFA это опциональный функционал, поэтому вам нужно ее специально
включить, активировать.
И что значит MFA?
MFA это Multi-Factor Authentication.
Идея в том, что пользователи при логине в AWS Management Account
предоставляли несколько факторов.
Что такое фактор?
Фактор это, например, что пользователь знает.
А пользователь знает логин и пароль.
Другой фактор это что у пользователя есть.
Это что-то такое физическое, которое не может быть у
узловомышленника.
Например, это телефон и как это реализовано, есть
так называемый виртуал MFA.
Устанавливается приложение ваш смартфон.
Делается специальная привязка вашего аккаунта внутри
этого приложения с AWS Management Account пользователем.
И вот такая привязка произошла.
В приложении вам каждые 30 секунд генерируется шестизначное
число.
Таким образом, в момент, когда вы проходите автентификацию,
вы вводите ваш логин и пароль.
После этого вы вводите ваш MFA ключ и уже на стороне
AWS Management Account происходит проверка.
Действительно ли в это время этому пользователю
было отображено это шестизначное число.
Если да, оно совпадает, это говорит о том, что вы как
пользователь с двух факторов себя идентифицировали.
И таким образом вы исключаете еще больше вероятность
того, что это не вы, а какой-то злоумышленник.
Следующим шагом, который помогает увеличить безопасность
вашего облака, это так называемый AWS CloudTrail.
Это сервис, который является аналогом черного ящика
в самолете.
Оно является максимально защищенным и записывает
все те вызовы к AWS API, то есть все те изменения вашей
инфраструктуры в облаке.
По умолчанию включено и бесплатно хранится 90 дней
всех ваших действий в вашем аккаунте.
И знайте, что у вас есть такая возможность, если
же вам необходимо настроить какие-то дополнительные
альерты или же хранить не 90 дней, а больше для каких-то
определенных положений.
Если вы какая-то финансовая организация либо государственная,
вам необходимо эту информацию хранить какое-то количество
лет.
В этом случае вы создаете так называемый Trail, это
ресурс сервиса CloudTrail, который как раз таки накапливает
все действия, происходящие в вашем аккаунте на какой-то
больший период.
В этом случае могут заниматься определенная плата, Trail
хранит все свои данные внутри S3, а так как логи это текстовая
информация, то обычно расходы на CloudTrail достаточно низкие.
Но в случае, когда у вас возникает какая-то проблема
внутри облака, для целей расследования это просто
незаменимая информация, поэтому рекомендуется
ее включать и держать всегда активной.
Мы с вами проходили на предыдущих занятиях о сервисах связанных
с милиингом и затратами на облако, то есть с костом.
И вам также как best practice рекомендуется настроить
алерты на бюджет, также рекомендуется настроить
так называемые отчеты, так чтобы вы могли быстро
оперативно видеть все ваши расходы и предпринимать
какие-то определенные действия.
Это вы можете сделать внутри Cost Explorer, если же вам нужна
более детальная информация, то вы можете воспользоваться
сервисом Cost and Usage Reports, который все данные, все
метаданные связаны с вашими расходами, со всеми деталями
выгружает в S3 и вы эти данные можете использовать для
построения уникальных кастомных отчетов.
Зачастую использование Cost and Usage Reports является
достаточно продвинутым вариантом, практикуется
в крупных компаниях, поэтому в вашем случае нету смысла
в самом начале терять время на изучение, на настройку
этих отчетов, а можно положиться на сервис Cost Explorer, который
все необходимое вам покажет и в удобном виде сохранит
ваши отчеты.
На этом мы подошли к концу третьей части нашей лекции
и мы поговорили про все те основные шаги, действия,
те сервисы и тот функционал, который доступен в AWS облаке
для максимального обеспечения безопасности вашей инфраструктуры
в облаке.
Мы переходим к четвертой части нашей лекции и поговорим
про дополнительный набор сервисов, которые помогают
нам обезопасить наши аккаунты.
Самый первый сервис это AWS Organizations.
AWS Organizations, как мы помним, это сервис, который позволяет
центрально управлять несколькими AWS аккаунтами.
Также он позволяет нам настроить consolidated billing.
Идея в том, что мы все расходы на каждом из наших AWS аккаунтов
собираем расходы в одно место и отображаем в удобном
виде в одном основном аккаунте.
Для того, чтобы обеспечить безопасность, на стороне
организаций тоже есть некоторый функционал.
Он называется Service Control Policies.
Идея в том, что это такой же JSON документ, это такое
же policy, но оно привязывается уже к AWS аккаунту.
Более того, мы с вами помним, что есть функционал OU, то
есть organizational units внутри AWS Organizations, которое позволяет
ваши аккаунты между собой группировать.
Таким образом вы можете гибко и максимально удобно
группировать ваши аккаунты, а Service Control Policies есть возможность
привязывать не к отдельному аккаунту, а к целой группе,
то есть к организационному юнито.
Таким образом максимально правильно настроить доступы,
например в тех аккаунтах, где у вас происходит разработка,
дать больше контроля над ресурсами, больше доступа,
а в ваших продакшн аккаунтах дать максимально меньше
доступа, но так, чтобы все работало корректно и исключить
возможные поломки ввиду того, что у кого-то где-то
больше есть доступа и какой-то злоумышленник если попадает
в продакшн среду мог минимальный вред нанести вашей IT-инфраструктуре.
Следующий сервис AWS KMS, то есть Key Management Service.
Этот сервис помогает нам управлять нашими ключами
шифрования в облаке.
На текущий момент вам достаточно знать определение, более
подробно об этом сервисе мы будем говорить на следующих
занятиях.
Следующий сервис Amazon Cognito.
Мы этот сервис не будем подробно рассматривать,
так как для цели реального экзамена достаточно знать
определение и определение следующее.
Это сервис, который позволяет вам управлять пользователей
ваших приложений, то есть дает возможность авторизовываться,
регистрироваться и менеджить, хранить информацию о всех
ваших пользователях.
Следующий менеджер сервис связанный с безопасностью
AWS Shield.
Вам также достаточно знать определение, а на следующий
этот сервис позволяет вам защищаться от недосадок.
Мы с вами переходим к пятой части нашей лекции и поговорим
про то, как мы можем защищать наши данные в облаке.
Первое состояние, в котором данные могут пребывать,
это так называемый at-rest, то есть это тот случай, когда
данные хранятся на жестких дисках.
В этом случае у нас есть возможность использовать
так называемый AES-256 шифрование, либо воспользоваться сервисом
AWS QMS, про который мы ранее говорили, для шифрования
данных в состоянии покоя, в состоянии хранения.
Другое состояние данных, в котором их также нужно
защищать, это в состоянии передачи, то есть когда
мы передаем наши данные по сети.
В этом случае есть сервис AWS Certificate Manager, который
позволяет нам генерировать SSL ключи, либо TLS сертификаты,
для того чтобы защитить поток данных.
Это также относится к веб-трафику, то есть используя этот
сервис AWS Certificate Manager мы можем настроить Secure HTTP,
то есть HTTPS соединение.
Таким образом вы можете посмотреть бакеты, которые,
таким образом, увидев этот список, вы можете определить,
действительно ли для этих бакетов нужен доступ с интернета,
если же нет, то вы сможете точечно пройтись по ним
и заблокировать общий доступ с интернета.
В зависимости от того, в какой сфере работает ваша
компания, в какой стране вы находитесь, либо в каком
регионе земного шара, вы должны соответствовать
некоторым стандартам качества, либо регуляторным требованиям.
AWS со своей стороны на периодической основе проходит разные
проверки, получает сертификаты качества и заключительные
документы, что он соответствует некоторым регуляторным
требованиям.
Из тех программ, compliance программ, которые стоит
упомянуть и которые могут прийти на AWS экзамене, это
что AWS получил сертификат качества ISO 27001.
Также есть подтверждение, что соответствует требованиям
акта HIPAA, это для тех компаний, которые работают в сфере
медицины, и третье — это GDPR, это для компаний, которые
в большинстве случаев находятся в Европе, и в этом документе
описываются требования, как хранить и как работать
с персональными данными.
Все эти документы, сертификаты качества, заключительные
документы вы можете скачать в так называемом сервисы
AWS Artifact.
Но это не совсем сервис, а больше набор страничек,
в котором вы можете по требованиям, по необходимости для вашей
компании скачать эти документы.
Если мы говорим compliance в рамках AWS аккаунта для
себя, для того чтобы понимать, что происходит, какие ресурсы
есть, какие изменения в этих ресурсах произошли,
то мы можем воспользоваться сервисом AWS Config, который
все изменения фиксирует и может дополнительные
действия исполнить по определенным условиям.
Этого определения достаточно для целей экзамена, и мы
идем дальше.
У нас есть самый последний бонусный раздел нашей лекции,
мы максимально быстро по нему пройдемся.
Есть такой сервис AWS Service Catalog.
Идея этого сервиса в том, чтобы выбрать те сервисы,
которые одобрены вашей компанией, и уже предоставить
вашим сотрудникам доступ к именно этим сервисам
через AWS Service Catalog.
Другие три сервиса это AWS Macie, это тот сервис, который
использует машинное обучение для того, чтобы сканировать
все данные, которые есть в вашей инфраструктуре,
чтобы выявить так называемые персональные данные.
Дальше уже с выявленной информацией вы можете
соответственно действовать, либо сохранять в специальное
хранилище эти данные, либо удалить, если они случайно
туда попали.
Другие два сервиса они похожи, это Amazon Inspector и Amazon
GuardDuty.
Идея этих сервисов в том, что это managed-сервисы Амазона,
и как только вы ее запускаете, происходит автоматическое
сканирование вашего облака, вашей IT-инфраструктуры
для выявления некоторых проблем безопасности, и
в последующем составляется некоторый список рекомендаций,
чтобы улучшить состояние безопасности вашей IT-инфраструктуры.
На этом мы добрались до последних слайдов нашей
лекции.
Мы завершаем нашу лекцию.
Я бы хотел вкратце дать некоторые ссаммори.
Первое, мы разобрали, что такое shared responsibility model.
Далее мы познакомились подробно с сервисом AWS AM.
После этого мы рассмотрели те шаги действия, которые
рекомендуется предпринять при создании нового AWS-аккаунта.
А далее рассмотрели ряд сервисов AWS, которые так
или иначе связаны с обеспечением безопасности в облаке.
Здесь хотел бы отметить, что вы большие молодцы.
Я понимаю, что объем информации большой, много новых терминов,
много новых названий сервисов.
Самое главное, вы не переживайте.
� екомендация от меня делать некоторые конспекты, как
минимум записывать названия сервисов.
Когда вы это записываете, либо пересматриваете лекции,
названия сервисов уже будут запоминаться и казаться
знакомыми.
Мы более подробно будем проговаривать про некоторые
сервисы, которые встречаются чаще на реальном экзамене
AWS.
Также у нас будут активности, где будет демо.
Я вам покажу, как выглядит AWS Management Console на примере
разных сервисов для того, чтобы лучше закрепить,
лучше запомнилось визуально.
У нас также будут несколько активностей лабораторных,
в которых вы сами сможете попробовать пощупать облако.
И для некоторых из вас такая активность поможет лучше
запомнить, понять, как выглядит облако, как с ней работать,
какие преимущества вы получаете и так далее.
На этом сайте предоставлены ссылки, которые вам могут
быть полезны, если вы хотите о какой-то из этих тем узнать
более подробно.
На этом мы завершаем наше лекционное занятие.
Спасибо вам большое.
Удачи!
И увидимся на следующих занятиях.
