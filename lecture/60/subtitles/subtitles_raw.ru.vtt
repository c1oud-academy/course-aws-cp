WEBVTT

00:00:00.000 --> 00:00:05.240
Добрый день, уважаемые студенты! Я рад вас видеть на очередной лекции.

00:00:05.240 --> 00:00:09.520
Сегодня мы с вами поговорим про Networking и Content Delivery.

00:00:09.520 --> 00:00:15.880
Итак, давайте начнем. Сегодняшняя наша лекция поделена на шесть частей.

00:00:15.880 --> 00:00:21.880
В первой части мы поговорим про основы сетей, рассмотрим базовые понятия.

00:00:21.880 --> 00:00:28.880
Далее, в следующие три части, поговорим про сервис Amazon Virtual Private Cloud

00:00:28.880 --> 00:00:34.400
или чаще вы можете встретить как Amazon VPC.

00:00:34.400 --> 00:00:39.400
Затронем темы VPC Networking и VPC Security.

00:00:39.400 --> 00:00:44.000
Последние две темы это отдельные два сервиса.

00:00:44.000 --> 00:00:52.400
Первый это Amazon Route 53, а последний это Amazon CloudFront.

00:00:52.400 --> 00:00:55.400
Мы начинаем первую секцию, это основы сетей.

00:00:55.400 --> 00:01:02.400
Мы рассмотрим основы сетей для того, чтобы облегчить вам понимание следующих секций,

00:01:02.400 --> 00:01:09.400
а именно секции, когда мы говорим про сети AWS, в частности сервис Amazon VPC.

00:01:09.400 --> 00:01:19.400
Что такое сеть? Сеть это два или более клиентских машин, соединенных между собой для обмена информации.

00:01:19.400 --> 00:01:28.400
Сеть может быть поделена на так называемые логические части, которые называются subnets.

00:01:28.400 --> 00:01:36.400
Для того, чтобы соединить машины между собой, нам необходимо сетевое оборудование.

00:01:36.400 --> 00:01:41.400
Как сетевое оборудование может выступить switch или router.

00:01:41.400 --> 00:01:46.400
У каждой машины внутри сети есть уникальный IP-адрес,

00:01:46.400 --> 00:01:52.400
который идентифицирует это устройство внутри определенной сети.

00:01:52.400 --> 00:02:03.400
IP-адрес это некоторое числовое обозначение в десятичной системе числения.

00:02:03.400 --> 00:02:06.400
Состоит из четырех частей.

00:02:06.400 --> 00:02:22.400
Далее машина переводится в двоичную систему числения, как вы видите, и таким образом программа на низшем уровне работает с этим IP-адресом.

00:02:22.400 --> 00:02:29.400
Мы же его видим в десятичной системе числения, и как пример вы видите 192.0.2.0.

00:02:29.400 --> 00:02:42.400
Каждый отсек, раздел внутри IP-адреса это какое-то число, которое может принимать значения от нуля до 255.

00:02:42.400 --> 00:02:45.400
То есть 256 уникальных значений.

00:02:45.400 --> 00:02:48.400
256 это 2 в степени 8.

00:02:48.400 --> 00:03:02.400
Что говорит о том, что в двоичной системе числения для обозначения чисел от нуля до 255 нам нужно выделить 8 бит.

00:03:02.400 --> 00:03:10.400
Начиная от 00008 раз, заканчивая единичками 8 раз.

00:03:10.400 --> 00:03:24.400
Таким образом IP-адрес в бинарном формате представляет из себя 8 умноженное на 4 32 бита.

00:03:24.400 --> 00:03:30.400
Мы с вами проговорили, что IP-адрес состоит из 32 битов.

00:03:30.400 --> 00:03:36.400
Такой адрес называется IPv4-адрес.

00:03:36.400 --> 00:03:43.400
У нас также есть другой вид IP-адреса, это IPv6, который состоит из 128 битов.

00:03:43.400 --> 00:03:52.400
Таким образом оно может сгенерировать еще большее количество уникальных IP-адресов для конкретной сети.

00:03:52.400 --> 00:03:59.400
Когда мы говорим про IPv6-адрес, то оно представлено в виде 8 групп.

00:03:59.400 --> 00:04:04.400
В каждой группе могут выступать буквы и цифры.

00:04:04.400 --> 00:04:13.400
Мы видим этот адрес в 16-речной системе счисления и каждая группа из себя представляет 16 битов.

00:04:13.400 --> 00:04:18.400
Может принимать значение от нуля до FFFFF.

00:04:18.400 --> 00:04:22.400
Это опять же повторюсь в 16-речной системе счисления.

00:04:22.400 --> 00:04:31.400
В работе вы не так часто будете сталкиваться напрямую с IPv6-адресами.

00:04:31.400 --> 00:04:35.400
В основном будете работать с IPv4-адресами.

00:04:35.400 --> 00:04:37.400
Поэтому давайте подробнее ее рассмотрим.

00:04:37.400 --> 00:04:52.400
В локальной сети для того, чтобы определить список возможных значений IPv4-адресов, мы используем так называемый CIDR блок.

00:04:52.400 --> 00:04:57.400
CIDR расшифруется как Clustless Inter-Domain Routing.

00:04:57.400 --> 00:05:03.400
Он записывается в следующем формате.

00:05:03.400 --> 00:05:09.400
Это стартовый, то есть самый первый IP-адрес в формате IPv4.

00:05:09.400 --> 00:05:19.400
Далее слеш и какой-то номер, который может принимать значение от нуля до 32.

00:05:19.400 --> 00:05:25.400
И означает, какое количество битов у нас зафиксировано.

00:05:25.400 --> 00:05:32.400
Если мы помним, что IPv4-адрес состоит из 32 битов.

00:05:32.400 --> 00:05:44.400
Поэтому если мы видим, что в CIDR блоке написано 24, это говорит о том, что 24 бита из 32 зафиксировано и меняться не может.

00:05:44.400 --> 00:05:47.400
Таким образом, 8 битов могут меняться.

00:05:47.400 --> 00:05:56.400
Когда мы говорим 8 битов, то это 2 в 8 степени количества уникальных IP-адресов.

00:05:56.400 --> 00:06:00.400
2 в степени 8 это 256.

00:06:00.400 --> 00:06:11.400
Таким образом, конкретно вот CIDR блок, указанный на нашем слайде, может принимать 256 уникальных IP-адресов.

00:06:11.400 --> 00:06:19.400
Самый первый IP-адрес, который относится к этой сети, это 192.0.2.0.

00:06:19.400 --> 00:06:26.400
Таким образом, дальше идет от нуля последняя часть, которая у нас может меняться, 0.1.2.3.4.

00:06:26.400 --> 00:06:36.400
И так до самого последнего, который будет иметь IP-адрес 192.0.2.255.

00:06:36.400 --> 00:06:37.400
Хорошо.

00:06:37.400 --> 00:06:43.400
Я надеюсь, здесь понятно, для того чтобы закрепить материал, мы с вами сделаем следующую активность.

00:06:43.400 --> 00:06:54.400
Давайте представим, что у нас есть CIDR блок, который первая часть совпадает, то есть 192.0.2.0,

00:06:54.400 --> 00:06:58.400
слеш место 24 будет 16.

00:06:58.400 --> 00:07:09.400
Давайте остановим это видео и попробуем посчитать, какое количество уникальных адресов будет в этой сети с таким CIDR блоком.

00:07:12.400 --> 00:07:16.400
Хорошо, я думаю, все из вас справились.

00:07:16.400 --> 00:07:23.400
Правильный ответ это 65536.

00:07:23.400 --> 00:07:25.400
Как мы вышли на это число?

00:07:25.400 --> 00:07:36.400
Мы с вами говорили, что CIDR блок у нас 192.0.2.0.16.

00:07:36.400 --> 00:07:44.400
Это говорит о том, что из 32 битов IP-адреса 16 у нас зафиксированы.

00:07:44.400 --> 00:07:50.400
Значит, ровно 16 битов у нас они flexible, то есть могут меняться.

00:07:50.400 --> 00:07:59.400
Когда мы говорим 16 битов, это значит 2 в степени 16 уникальных IP-адресов.

00:07:59.400 --> 00:08:04.400
Если мы посчитаем 2 в степени 16, это 65536.

00:08:07.400 --> 00:08:12.400
Хорошо, я думаю, здесь стало более понятнее.

00:08:12.400 --> 00:08:17.400
Давайте разберем еще два граничных случая.

00:08:17.400 --> 00:08:27.400
Представим, что у нас CIDR блок следующего вида 192.0.2.0.32.

00:08:27.400 --> 00:08:37.400
Давайте сделаем еще одну активность и попробуйте посчитать, какое количество IP-адресов есть в этом CIDR блоке.

00:08:37.400 --> 00:08:39.400
Можете остановить видео.

00:08:39.400 --> 00:08:47.400
Хорошо, я очень надеюсь, что каждый из вас смог правильно посчитать и получить верный ответ.

00:08:47.400 --> 00:08:49.400
Правильный ответ – это 1.

00:08:49.400 --> 00:08:58.400
CIDR блок, где окончание слеш 32 идентифицирует одну машину.

00:08:58.400 --> 00:09:00.400
Как это посчитать?

00:09:00.400 --> 00:09:06.400
Когда мы говорим слеш 32, это говорит о том, что 32 бита у нас зафиксированы.

00:09:06.400 --> 00:09:19.400
А так как у нас всего в IPv4 адресе 32 бита, то чтобы посчитать, какое количество уникальных адресов у нас есть,

00:09:19.400 --> 00:09:25.400
мы отнимаем от 32 количество зафиксированных битов.

00:09:25.400 --> 00:09:29.400
Тоже 32. 32-32 получается 0.

00:09:29.400 --> 00:09:32.400
А 2 в степени 0 у нас 1.

00:09:32.400 --> 00:09:38.400
Таким образом, вы запомните, что в Amazon, когда вы работаете в AWS Management Console,

00:09:38.400 --> 00:09:45.400
для того чтобы указать конкретный IP-адрес, вы знаете, что CIDR блок – это слеш 32,

00:09:45.400 --> 00:09:49.400
ну и указывайте, соответственно, ваш IP-адрес.

00:09:49.400 --> 00:09:57.400
И второй граничный случай, я не буду его задавать как активности, давайте отвечу.

00:09:57.400 --> 00:10:04.400
Когда мы говорим, что у нас CIDR блок 0.0.0.0 слеш 0,

00:10:04.400 --> 00:10:10.400
в этом случае мы понимаем, что у нас мы начинаем с самого первого IP-адреса,

00:10:10.400 --> 00:10:20.400
так как у нас 0 количество зафиксированных битов, то все биты могут меняться, то есть flexible.

00:10:20.400 --> 00:10:27.400
Это говорит о том, что у нас количество уникальных адресов в этой сети 2 в степени 32.

00:10:27.400 --> 00:10:32.400
И это представляет из себя весь интернет.

00:10:32.400 --> 00:10:38.400
Также в AWS Management Console, когда вам нужно указать, что у вас доступ,

00:10:38.400 --> 00:10:44.400
вы открываете всему интернету, либо route путь прокладываете до интернета,

00:10:44.400 --> 00:10:46.400
либо запрещаете выход в интернет,

00:10:46.400 --> 00:10:54.400
то как CIDR блок вы всегда можете указывать все нули через точку слеш 0, это и будет интернетом.

00:10:54.400 --> 00:11:01.400
Следующая модель, с которой нам нужно познакомиться, возможно вы ее уже прошли,

00:11:01.400 --> 00:11:06.400
это OC модель, то есть Open Systems Interconnection Model.

00:11:06.400 --> 00:11:15.400
Основная идея этой модели в том, что она концептально описывает, как данные передаются по сети.

00:11:15.400 --> 00:11:21.400
То есть у нас есть 7 уровней, начиная от application, заканчивая физическим уровнем,

00:11:21.400 --> 00:11:25.400
когда мы работаем на уровне последовательности единичеки нулей.

00:11:25.400 --> 00:11:32.400
А самый верхний уровень application, это когда мы работаем по протоколу HTTP, HTTPS и другие.

00:11:32.400 --> 00:11:37.400
Таким образом, когда мы делаем HTTP request на какой-то сайт,

00:11:37.400 --> 00:11:43.400
то наш запрос, он с верхнего уровня опуткается до самого нижнего,

00:11:43.400 --> 00:11:51.400
и в итоге последовательность нулей и единичек от нас идет к нашему получателю.

00:11:51.400 --> 00:11:59.400
Как только наша последовательность единичеки нулей, то есть наши данные или наш запрос дошел до получателя,

00:11:59.400 --> 00:12:05.400
он обратно, скажем так, расшифровывает обратно вот эту последовательность

00:12:05.400 --> 00:12:09.400
и поднимается на верхний уровень application для того, чтобы прочитать, понять

00:12:09.400 --> 00:12:13.400
и возможно обратно ответить каким-то сообщением.

00:12:13.400 --> 00:12:17.400
Ответ также будет проходить, опускаться с верхнего уровня до нижней,

00:12:17.400 --> 00:12:21.400
и как только придет вам, вы для того, чтобы прочитать эту последовательность,

00:12:21.400 --> 00:12:27.400
будете от самого нижнего уровня подниматься до самого верхнего

00:12:27.400 --> 00:12:31.400
и получите тот ответ в исходном виде, который вам был отправлен.

00:12:31.400 --> 00:12:37.400
Этой информации вам достаточно для того, чтобы понимать, как функционирует сеть,

00:12:37.400 --> 00:12:43.400
как данные проходят по сети и в целом легче понять, как работает Amazon VPC сервис.

00:12:43.400 --> 00:12:51.400
Мы с вами переходим ко второй части нашей лекции и подробнее познакомимся с сервисом Amazon VPC.

00:12:51.400 --> 00:12:57.400
Amazon VPC расшифровывается как Amazon Virtual Private Cloud.

00:12:57.400 --> 00:13:05.400
Это сервис, который позволяет вам настроить логически изолированную сеть в облаке.

00:13:05.400 --> 00:13:15.400
У вас есть полный контроль над этой сетью, и вы можете создавать ресурсы в этой вашей сети.

00:13:15.400 --> 00:13:20.400
Более того, вы можете применять любые кастомные настройки в этой сети.

00:13:20.400 --> 00:13:24.400
А также есть несколько уровней безопасности.

00:13:24.400 --> 00:13:32.400
Это Security Group и Network Access Control листы, либо чаще вы встречаете как Network ACLs.

00:13:32.400 --> 00:13:42.400
Здесь вы можете видеть схему, которая объясняет, как VPC может быть расположена в облаке.

00:13:42.400 --> 00:13:48.400
Когда мы говорим VPC, она присутствует только в одном AWS аккаунте.

00:13:48.400 --> 00:13:54.400
Также VPC полностью должна находиться в одном регионе.

00:13:54.400 --> 00:14:02.400
Если вам нужно использовать несколько регионов, то значит у вас будет по одному VPC на каждом из регионов.

00:14:02.400 --> 00:14:08.400
Мы с вами помним, что в рамках региона у нас может быть несколько Availability Zone.

00:14:08.400 --> 00:14:14.400
Таким образом, одна VPC может находиться в нескольких Availability Zones.

00:14:14.400 --> 00:14:20.400
VPC идентифицируется CIDR блоком, который мы ранее поговорили.

00:14:20.400 --> 00:14:29.400
Также внутри VPC мы можем делать некоторые логические группы, которые называются Subnets.

00:14:29.400 --> 00:14:34.400
Subnets тоже идентифицируются CIDR блоком меньшего размера.

00:14:34.400 --> 00:14:47.400
И Range, то есть возможные значения IP адресов Subnet, они должны входить в возможные значения VPC.

00:14:47.400 --> 00:14:53.400
Касательно Subnets, они могут быть двух видов.

00:14:53.400 --> 00:14:56.400
Первый это Private, второй это Public.

00:14:56.400 --> 00:15:00.400
Public это те Subnets, которые доступны из интернета.

00:15:00.400 --> 00:15:04.400
Private это те Subnets, которые из интернета недоступны.

00:15:04.400 --> 00:15:13.400
Пару слов хотелось бы сказать о том, в какой размерности могут быть CIDR блоки у VPC.

00:15:13.400 --> 00:15:22.400
Самый максимальный размер это 65536 уникальных IP адресов, что равняется CIDR блоку слеш 16.

00:15:22.400 --> 00:15:26.400
Самые маленькие это 16 IP адресов.

00:15:26.400 --> 00:15:32.400
И в CIDR блоке она записывается как слеш 28.

00:15:32.400 --> 00:15:38.400
То есть 4 вида у нас могут быть flexible, то есть меняться.

00:15:38.400 --> 00:15:49.400
Когда мы говорим про CIDR блок для VPC, очень нужно аккуратно и ответственно подойти к размеру этого CIDR блока,

00:15:49.400 --> 00:15:53.400
а также к начальному IP адресу.

00:15:53.400 --> 00:16:01.400
Связано это с тем, что CIDR блок, который вы назначите для VPC, позже уже не может быть изменен.

00:16:01.400 --> 00:16:06.400
Таким образом, если вам нужно поменять CIDR блок, вам необходимо создать новый VPC.

00:16:06.400 --> 00:16:10.400
Если у вас в старом VPC есть какие-то ресурсы, которые работают,

00:16:10.400 --> 00:16:20.400
вам необходимо выделить время, силы, деньги, людей для того, чтобы все эти ресурсы перенести в новый VPC с новым CIDR блоком.

00:16:20.400 --> 00:16:26.400
Это может быть очень дорого и неприятно, поэтому правило такое,

00:16:26.400 --> 00:16:35.400
что вы с каким-то достаточным запасом выбираете размер VPC.

00:16:35.400 --> 00:16:41.400
Более того, всегда помните, что VPC между собой пересекаться не могут.

00:16:41.400 --> 00:16:47.400
Даже если у вас VPC находится в разных AWS аккаунтах,

00:16:47.400 --> 00:16:53.400
то такая рекомендация на будущее – CIDR блоки создавать не пересекающимися,

00:16:53.400 --> 00:17:00.400
так как есть разные сервисы в AWS, которые помогают VPC из разных аккаунтов соединять между собой.

00:17:00.400 --> 00:17:06.400
Если CIDR блоки этих VPC будут пересекаться, то вы их между собой соединить не сможете.

00:17:06.400 --> 00:17:09.400
Поэтому этот момент всегда учитывайте.

00:17:09.400 --> 00:17:12.400
Другой момент – это касательно сабнетов.

00:17:12.400 --> 00:17:21.400
Как уже говорилось ранее, CIDR блок сабнета должен входить в CIDR блок VPC.

00:17:21.400 --> 00:17:27.400
� азмер сабнета максимально может быть равен размеру самого VPC.

00:17:27.400 --> 00:17:31.400
Таким образом, в этом VPC будет только один сабнет.

00:17:31.400 --> 00:17:35.400
Если же мы внутри VPC создаем несколько сабнетов,

00:17:35.400 --> 00:17:45.400
нам надо убедиться в том, что CIDR блоки в рамках одного VPC также не пересекаются.

00:17:48.400 --> 00:17:52.400
Когда мы создаем CIDR блок большой, маленький – неважно.

00:17:52.400 --> 00:17:55.400
Для VPC, для сабнета – также неважно.

00:17:55.400 --> 00:18:05.400
В облаке AWS, AWS резервирует 5 IP адресов для системного использования.

00:18:05.400 --> 00:18:15.400
Вы можете видеть, что самый первый IP адрес в рейнже CIDR блока

00:18:15.400 --> 00:18:18.400
зарезервирован под network-адрес.

00:18:18.400 --> 00:18:22.400
Дальше, второй – для internal communication.

00:18:22.400 --> 00:18:25.400
Третий – для DNS resolution.

00:18:25.400 --> 00:18:28.400
Четвертый – для будущего использования.

00:18:28.400 --> 00:18:34.400
И самый последний – он используется как network broadcast-адрес.

00:18:34.400 --> 00:18:42.400
Таким образом, для CIDR блока, у которого размерность – слэш 24,

00:18:42.400 --> 00:18:46.400
то есть 256 уникальных адресов,

00:18:46.400 --> 00:18:51.400
фактически для вашего использования доступны минус 5.

00:18:51.400 --> 00:18:55.400
Это значит 251 IP адресов.

00:18:55.400 --> 00:18:59.400
Давайте здесь делаем очередную активность.

00:18:59.400 --> 00:19:01.400
И вопрос следующий.

00:19:01.400 --> 00:19:04.400
Представьте у вас следующий CIDR блок.

00:19:04.400 --> 00:19:11.400
10.0.0.0 слэш 28.

00:19:11.400 --> 00:19:13.400
Вопрос.

00:19:13.400 --> 00:19:20.400
Какое количество IP адресов внутри этого CIDR блока доступно для вашего использования?

00:19:20.400 --> 00:19:31.400
Хорошо, я думаю, все вы справились.

00:19:31.400 --> 00:19:36.400
Давайте попробуем вместе посчитать.

00:19:36.400 --> 00:19:42.400
CIDR блок с размером слэш 28 говорит о том, что 28 битов

00:19:42.400 --> 00:19:48.400
в 30-битном IPv4 CIDR блоке дофиксированы.

00:19:48.400 --> 00:19:52.400
Значит, количество битов, которое может меняться,

00:19:52.400 --> 00:19:57.400
равно 32 минус 28 – это 4.

00:19:57.400 --> 00:20:03.400
Какое количество IP адресов для 4 битов мы можем посчитать следующим образом.

00:20:03.400 --> 00:20:13.400
Для этого мы считаем 2 в степени, число, которое вышло, в нашем случае 4.

00:20:13.400 --> 00:20:17.400
2 в степени 4 равняется 16.

00:20:17.400 --> 00:20:23.400
Как только что мы сказали, 5 адресов AWS резервирует для системного использования.

00:20:23.400 --> 00:20:28.400
Таким образом, 16 минус 5 равняется 11.

00:20:28.400 --> 00:20:34.400
И ответ у нас для CIDR блока с размером слэш 28 у нас не 16,

00:20:34.400 --> 00:20:42.400
а 11 уникальных IP адресов, которые доступны для нашего пользования.

00:20:42.400 --> 00:20:47.400
Когда мы говорим про публичные IP адреса, выделяют два вида.

00:20:47.400 --> 00:20:54.400
Первый – это публичный IPv4 адрес и Эластик IP адрес.

00:20:54.400 --> 00:20:58.400
Чем они отличаются?

00:20:58.400 --> 00:21:04.400
Когда мы создаем VPC внутри облака AWS, то все инстанции внутри этого VPC

00:21:04.400 --> 00:21:09.400
автоматически получают внутренний IP адрес, который называется Private IP.

00:21:09.400 --> 00:21:14.400
Но параллельно с этим вы можете поставить галочку в пункте

00:21:14.400 --> 00:21:19.400
Auto assign public IP адрес во время создания VPC.

00:21:19.400 --> 00:21:24.400
Таким образом, помимо Private IP адрес, все инстанции будут получать

00:21:24.400 --> 00:21:31.400
Public IPv4 адрес, который является динамическим Public IP адресом.

00:21:31.400 --> 00:21:36.400
Если же вам необходим статический публичный IP адрес,

00:21:36.400 --> 00:21:40.400
в этом случае вы можете воспользоваться функционалом Эластик IP адрес,

00:21:40.400 --> 00:21:43.400
который эту возможность предоставляет.

00:21:43.400 --> 00:21:48.400
Вы этот IP адрес можете привязать к ресурсу, а именно к инстанцу

00:21:48.400 --> 00:21:53.400
либо к интерфейсу внутри вашего VPC.

00:21:53.400 --> 00:21:59.400
Следует помнить, что услуга Эластик IP адрес также является платной.

00:21:59.400 --> 00:22:05.400
Таким образом, следует взять за правило все Эластик IP адреса,

00:22:05.400 --> 00:22:13.400
которые не привязаны к ресурсам, высвобождать для того, чтобы не платить впустую.

00:22:16.400 --> 00:22:21.400
Пару слов хотелось бы сказать касательно Эластик Network Interface.

00:22:21.400 --> 00:22:29.400
Это отдельный ресурс, который вы можете привязать к инстанцу внутри вашего VPC,

00:22:29.400 --> 00:22:32.400
который может обслуживать некоторый IPv4 адрес.

00:22:32.400 --> 00:22:37.400
Помимо Эластик Network Interface, у каждого инстанца внутри VPC

00:22:37.400 --> 00:22:40.400
есть так называемый Default Network Interface.

00:22:40.400 --> 00:22:46.400
К этому Default Network Interface привязывается Private IPv4 адрес,

00:22:46.400 --> 00:22:50.400
который выбирается из CIDR-блока вашего VPC.

00:22:53.400 --> 00:23:01.400
К инстанцу вы можете привязывать определенное количество Network Interface,

00:23:01.400 --> 00:23:05.400
и это количество зависит от типа инстанца.

00:23:05.400 --> 00:23:09.400
Чем она выше, тем она больше, тем большее количество Network Interface

00:23:09.400 --> 00:23:13.400
вы можете подключить к конкретному инстанцу.

00:23:14.400 --> 00:23:18.400
Давайте подробнее поговорим, что такое Root Table.

00:23:18.400 --> 00:23:26.400
Root Table – это некая таблица, которая состоит из набора правил, рулов или roots.

00:23:26.400 --> 00:23:32.400
Каждое правило идентифицируется местом отправки и местом назначения,

00:23:32.400 --> 00:23:38.400
или английскими терминами destination and the target.

00:23:40.400 --> 00:23:45.400
Как destination у нас выступает некоторый CIDR-блок, он может описывать наш subnet,

00:23:45.400 --> 00:23:50.400
а как target указывается уже некий ресурс.

00:23:50.400 --> 00:23:58.400
В любом Root Table есть первый, самый основной rule.

00:23:58.400 --> 00:24:04.400
Это rule, которая со всех наших subnets как target указывает local.

00:24:04.400 --> 00:24:11.400
Это нужно для того, чтобы все инстанции между нашими subnet могли между собой взаимодействовать.

00:24:11.400 --> 00:24:21.400
У VPC есть Root Table по умолчанию, который называется Main Root Table.

00:24:21.400 --> 00:24:26.400
Он автоматически создается и привязывается к нашему VPC.

00:24:27.400 --> 00:24:32.400
Важный момент – это то, что каждый subnet должен быть ассоциирован,

00:24:32.400 --> 00:24:35.400
то есть привязан к одному из Root Table.

00:24:35.400 --> 00:24:40.400
Но у каждого Root Table может быть несколько subnet.

00:24:40.400 --> 00:24:46.400
Более того, у каждого VPC может быть не один, а несколько Root Table.

00:24:46.400 --> 00:24:53.400
Таким образом вы гибко можете настроить все ваши Roots между вашими subnet.

00:24:55.400 --> 00:24:57.400
Мы завершаем вторую секцию.

00:24:57.400 --> 00:25:01.400
Давайте пройдемся по основным моментам, которые необходимо запомнить.

00:25:01.400 --> 00:25:07.400
VPC – это логически изолированная часть облака AWS,

00:25:07.400 --> 00:25:11.400
в которой мы можем создавать необходимые для нас ресурсы.

00:25:11.400 --> 00:25:16.400
VPC относится только к одному аккаунту и к одному определенному региону.

00:25:16.400 --> 00:25:23.400
Но VPC может находиться в нескольких availability-зонах в рамках одного региона.

00:25:24.400 --> 00:25:28.400
VPC идентифицируется одним определенным CIDR блоком.

00:25:28.400 --> 00:25:32.400
Что такое CIDR блок мы проговорили в предыдущей секции.

00:25:32.400 --> 00:25:38.400
Каждый VPC может быть поделен на логические группы, которые называются subnet.

00:25:38.400 --> 00:25:45.400
Каждое subnet также идентифицируется CIDR блоком, который должен входить в CIDR блок VPC.

00:25:46.400 --> 00:25:50.400
Также у нас есть такое понятие как Root Table.

00:25:50.400 --> 00:25:57.400
Это некий ресурс, который контролирует трафик между нашими subnet внутри нашего VPC.

00:25:57.400 --> 00:26:04.400
У нас есть внутри каждого Root Table встроенный путь Local Root,

00:26:04.400 --> 00:26:10.400
который нельзя удалить и который помогает нам

00:26:12.400 --> 00:26:19.400
предоставить возможность всем инстенсам внутри разных subnet общаться между собой в рамках одного VPC.

00:26:20.400 --> 00:26:25.400
Вы можете добавлять дополнительные роуты, рулеты,

00:26:25.400 --> 00:26:30.400
или правила в ваши Root Table для того, чтобы гибко настроить

00:26:31.400 --> 00:26:34.400
сетевые потоки внутри вашего VPC.

00:26:36.400 --> 00:26:38.400
Мы с вами добрались до третьей секции.

00:26:38.400 --> 00:26:46.400
На третьей секции мы с вами поговорим про особенности настройки роутинга трафика внутри VPC.

00:26:48.400 --> 00:26:52.400
Одним из важных компонентов VPC является интернет-гейтвей.

00:26:52.400 --> 00:26:59.400
Интернет-гейтвей используется для того, чтобы связать интернет с вашими инстенсами внутри вашего VPC.

00:27:01.400 --> 00:27:06.400
Для того, чтобы ваш паблик subnet сделать публичным, то есть доступным из интернета,

00:27:06.400 --> 00:27:09.400
нам необходимо добавить интернет-гейтвей,

00:27:09.400 --> 00:27:14.400
а также добавить один роут в нашем Root Table,

00:27:14.400 --> 00:27:22.400
в котором как destination выступает интернет, то есть это 0.0.0.0 слеш 0,

00:27:22.400 --> 00:27:27.400
как target выступает наш интернет-гейтвей.

00:27:29.400 --> 00:27:35.400
Другой частый случай это когда для инстенсов внутри private subnet необходимо выходить в интернет.

00:27:35.400 --> 00:27:42.400
При этом мы должны запретить доступ с интернета добираться до инстенсов внутри private subnet.

00:27:42.400 --> 00:27:48.400
Для этих целей используется так называемый Network Address Translation Gateway.

00:27:48.400 --> 00:27:51.400
Чаще вы его будете встречать как NAT-гейтвей.

00:27:51.400 --> 00:27:59.400
Для того, чтобы правильно настроить гейтвей, вам в первую очередь необходимо настроить паблик subnet.

00:27:59.400 --> 00:28:03.400
Как настроить паблик subnet мы с вами знаем.

00:28:03.400 --> 00:28:05.400
Повторюсь еще раз.

00:28:05.400 --> 00:28:09.400
Представим, у вас есть Root Table специально для вашего паблик subnet,

00:28:09.400 --> 00:28:15.400
и в нем как destination вы указываете весь интернет, как target указываете интернет-гейтвей.

00:28:15.400 --> 00:28:20.400
Таким образом ваш subnet становится паблик.

00:28:20.400 --> 00:28:24.400
Далее внутри public subnet мы создаем NAT-гейтвей.

00:28:24.400 --> 00:28:35.400
Теперь нам необходимо в Root Table для private subnet добавить root с интернета,

00:28:35.400 --> 00:28:42.400
то есть destination является интернет, а target является NAT-гейтвей.

00:28:42.400 --> 00:28:51.400
После этого все инстенсы внутри private subnet смогут выходить в интернет через NAT-гейтвей.

00:28:51.400 --> 00:28:59.400
При этом NAT-гейтвей обратно впускать уже запросы из интернета в private subnet давать не будет.

00:28:59.400 --> 00:29:05.400
Помимо NAT-гейтвея есть еще вариант настроить NAT-инстенс,

00:29:05.400 --> 00:29:12.400
то есть поднимается отдельный EC2-инстенс и на нем настраивается NAT-гейтвей.

00:29:12.400 --> 00:29:21.400
Отличие в том, что если инстенс сломается, с ним что-то произойдет, то интернет у вас пропадет.

00:29:21.400 --> 00:29:24.400
Его нужно будет заменить.

00:29:24.400 --> 00:29:29.400
В случае, когда мы говорим про NAT-гейтвей, это managed service от Amazon,

00:29:29.400 --> 00:29:40.400
поэтому все возможные поломки, недоступность, она обеспечивается со стороны Amazon

00:29:40.400 --> 00:29:47.400
и в случае каких-то поломок прозрачно для вас заменяется на новый рабочий ресурс.

00:29:47.400 --> 00:29:58.400
Таким образом, от Amazon есть рекомендация как best practice использовать NAT-гейтвей вместо NAT-инстенсов.

00:29:58.400 --> 00:30:05.400
Одним интересным подходом, который вы можете реализовать внутри AWS, является VPC-шеринг.

00:30:05.400 --> 00:30:16.400
Идея ее в том, что вы можете свои subnets в рамках вашего VPC расшарить для VPC из другого аккаунта.

00:30:16.400 --> 00:30:22.400
Но этот аккаунт должен быть внутри общего AWS Organizations.

00:30:22.400 --> 00:30:32.400
Есть несколько нюансов. Это то, что вы можете видеть, а также изменять все те ресурсы внутри этого shared subnet,

00:30:32.400 --> 00:30:40.400
но при этом вы не видите и не можете изменять ресурсы других аккаунтов, которые находятся в этом subnet.

00:30:40.400 --> 00:30:48.400
То же самое касается всех участников, которые совместно работают внутри этого shared subnet.

00:30:48.400 --> 00:31:01.400
Этот подход очень удачно будет применен для тех IT-инфраструктур, у которых приложения внутри этой IT-инфраструктуры сильно взаимосвязаны.

00:31:01.400 --> 00:31:10.400
Таким образом, помимо того, что упрощается связь между приложениями, вы также можете сэкономить на некоторых общих ресурсах,

00:31:10.400 --> 00:31:15.400
таких как NAT Gateway, VPC Interface Endpoints и так далее.

00:31:15.400 --> 00:31:22.400
Еще одним интересным подходом, который вы можете воспользоваться внутри AWS, является VPC-пиринг.

00:31:22.400 --> 00:31:29.400
Это та возможность, которая позволяет вам соединять между собой разные VPC.

00:31:29.400 --> 00:31:36.400
Эти VPC могут находиться как в одном аккаунте, так и в нескольких разных аккаунтах.

00:31:36.400 --> 00:31:48.400
Для того, чтобы произвести соединение, то есть peering connection между двумя VPC, нам необходимо, во-первых, создать peering connection ресурс,

00:31:48.400 --> 00:32:00.400
как вы видите по центру PCXID, также внести для каждого VPC роуты в соответствующих роут-тейблах.

00:32:00.400 --> 00:32:14.400
Если поговорить более подробно, то в роут-тейбле VPC A нам необходимо добавить роут, где destination является CIDR-блок VPC B,

00:32:14.400 --> 00:32:22.400
а как в target указать наш peering connection ресурс, то есть мы через него доходим до нашего VPC B.

00:32:22.400 --> 00:32:32.400
А в роут-тейбле VPC B сделать обратную роут, когда как destination указывается CIDR-блок VPC A,

00:32:32.400 --> 00:32:36.400
а target является peering connection ресурс.

00:32:36.400 --> 00:32:44.400
Когда мы говорим про VPC peering, у нас есть несколько ограничений.

00:32:44.400 --> 00:32:52.400
Самое первое и самое важное, это то, что IP-адреса, то есть CIDR-блоки, они не могут пересекаться.

00:32:52.400 --> 00:32:56.400
Если они пересекаются, то peering connection настроить вы не сможете.

00:32:56.400 --> 00:33:06.400
Это как раз то, что я вам говорил на предыдущих слайдах, и вам всегда нужно иметь в виду,

00:33:06.400 --> 00:33:18.400
даже если VPC не планируется соединять между собой, то на всякий случай должен быть центральный список со всеми CIDR-блоками,

00:33:18.400 --> 00:33:26.400
для того чтобы создавать их такими, чтобы не было пересечений.

00:33:26.400 --> 00:33:31.400
Другой момент, это то, что VPC peering он нетранзитивный.

00:33:31.400 --> 00:33:41.400
Это говорит о том, что если мы настроим связь между VPC A и VPC B, далее между VPC B и VPC C,

00:33:41.400 --> 00:33:46.400
то связь между VPC A и VPC C не появится.

00:33:46.400 --> 00:33:58.400
Если вам нужно VPC A также соединить с VPC C, то необходимо настроить отдельный peering connection.

00:33:58.400 --> 00:34:12.400
И другим моментом, который также важно помнить, это то, что между двумя VPC вы можете настроить только один peering connection.

00:34:12.400 --> 00:34:18.400
Все это время мы говорили с вами, как соединить сети внутри облака.

00:34:18.400 --> 00:34:28.400
Если же нам необходимо подключиться к облаку с нашего локального офиса, либо с локального дата-центра, какая возможность тоже есть.

00:34:28.400 --> 00:34:36.400
Для этого существует сервис AWS Site-to-Site VPN, который позволяет нам это все настроить.

00:34:36.400 --> 00:34:46.400
Давайте пройдемся по самым основным моментам, что необходимо сделать, чтобы предоставить доступ с локального офиса на ваш VPC в облаке.

00:34:46.400 --> 00:34:54.400
Самым первым нам необходимо создать так называемый Virtual Private Network Gateway или Virtual Gateway.

00:34:54.400 --> 00:34:59.400
Вы видите по центру экрана Virtual Gateway ID. Он привязывается к нашему VPC.

00:34:59.400 --> 00:35:05.400
Следующее. Нам необходимо сконфигурировать так называемый Customer Gateway.

00:35:05.400 --> 00:35:19.400
Customer Gateway не является неким ресурсом. Это является AWS ресурсом, который предоставляет информацию AWS о вашем PPN-девайсе, то есть оборудовании.

00:35:19.400 --> 00:35:33.400
Третье. Нам необходимо настроить, например, для Private Subnet, road table, добавить road, где destination является наш локальный офис, то есть cidr-блок нашего локального офиса,

00:35:33.400 --> 00:35:39.400
а таргетом является VGWID, то есть это Virtual Gateway ID.

00:35:39.400 --> 00:35:51.400
После этого нам необходимо воспользоваться сервисом AWS Site-to-Site VPN для того, чтобы соединить между собой две системы.

00:35:51.400 --> 00:36:01.400
Это основные моменты, которые необходимо проделать для того, чтобы локальную инфраструктуру соединить с инфраструктурой в облаке AWS.

00:36:01.400 --> 00:36:13.400
Следующий похожий сервис, который позволяет нам соединить нашу инфраструктуру в облаке с локальной инфраструктурой, является сервис AWS Direct Connect.

00:36:13.400 --> 00:36:26.400
Отличие ее в том, что в случае с предыдущим сервисом AWS Site-to-Site VPN мы настраиваем VPN-подключение через интернет.

00:36:26.400 --> 00:36:38.400
Таким образом, связь у нас есть, но скорость передачи данных и канал сети определяется размером канала вашего интернета.

00:36:38.400 --> 00:36:48.400
Если у вас слабое интернет-подключение, это говорит о том, что у вас подключение к облаку через сервис AWS Site-to-Site VPN будет также небольшим.

00:36:48.400 --> 00:37:04.400
В случае, если вам необходимо передавать большой объем данных, либо передавать это все быстрее, то есть вариант в обход интернета подключиться к так называемым DX-локейшнам.

00:37:04.400 --> 00:37:12.400
Проще говоря, это глобальная инфраструктура AWS, и мы напрямую подключаемся к ней.

00:37:12.400 --> 00:37:23.400
В этом случае нет необходимости выходить в интернет, а напрямую подключать нашу локальную инфраструктуру с инфраструктурой в облаке.

00:37:23.400 --> 00:37:32.400
Часто бывает такое, что вам необходимо вызвать некий AWS-сервис из VPC.

00:37:32.400 --> 00:37:45.400
То есть не все сервисы AWS могут работать внутри VPC, но тем не менее есть решение, которое позволяет нам, не покидая внутренней сети AWS,

00:37:45.400 --> 00:37:52.400
не выходя в интернет, добираться от VPC до необходимого нам AWS-сервиса.

00:37:52.400 --> 00:38:04.400
Это так называемые VPC-Endpoints, выделяет два вида, это Interface VPC Endpoint, либо Interface Endpoint, который поддерживает AWS Private Link.

00:38:04.400 --> 00:38:08.400
Другой вариант это Gateway Endpoint.

00:38:08.400 --> 00:38:18.400
В зависимости от того, какой сервис вам нужен, вы можете посмотреть в документации, какой из вариантов Endpoint поддерживается и его соответственно использовать.

00:38:18.400 --> 00:38:30.400
Давайте посмотрим на примере сервиса S3, что необходимо настроить для того, чтобы из VPC иметь возможность работать с сервисом Amazon S3.

00:38:30.400 --> 00:38:42.400
Для этого нам необходимо создать ресурс VPC Endpoint, а также в Road Table для нашего Subnet прописать дополнительный Road,

00:38:42.400 --> 00:38:50.400
где destination является Amazon S3 ID, а target является наш VPC Endpoint ресурс.

00:38:50.400 --> 00:39:06.400
Чуть ранее мы с вами поговорили про VPC Peering, это когда нам необходимо два отдельных VPC, даже если они находятся в разных AWS-аккаунтах, соединить между собой.

00:39:06.400 --> 00:39:18.400
Одним из ограничений этого подхода было то, что нет транзитивности, то есть вы первый VPC соединяете со вторым, второй соединяете с третьим,

00:39:18.400 --> 00:39:22.400
и это не говорит о том, что появляется связь от первого до третьего.

00:39:22.400 --> 00:39:32.400
Если вам необходимо было первое VPC соединить с третьим, то необходимо настраивать отдельный VPC Peering Connection для того, чтобы связь появилась.

00:39:32.400 --> 00:39:47.400
Теперь представьте такую ситуацию, что у вас слева на слайде несколько разных VPC, а также есть VPN соединения, и все они между собой взаимосвязаны.

00:39:47.400 --> 00:39:58.400
Для того, чтобы все VPC связать между собой, опять же это зависит от вашей бизнес-потребности, то вам необходимо создать вот такое количество VPC Peering.

00:39:58.400 --> 00:40:15.400
Поддерживать это может быть очень неудобно, и создается буквально большое количество VPC Peering с каждым последующим разом.

00:40:15.400 --> 00:40:28.400
Для того, чтобы решить проблему подобную в существующих IT-инфраструктурах, предлагается использовать сервис AWS Transit Gateway.

00:40:28.400 --> 00:40:38.400
Идея ее в том, что она работает по принципу Hub and Spoke Model, то есть AWS Transit Gateway выступает как центральным хабом,

00:40:38.400 --> 00:40:48.400
и все VPC, которые соединяются к этому Transit Gateway, автоматически получают доступ ко всем VPC, которые уже подключены к AWS Transit Gateway.

00:40:48.400 --> 00:41:02.400
Таким образом, вы видите с правой стороны, как можно упростить вид вашей инфраструктуры, используя AWS Transit Gateway.

00:41:02.400 --> 00:41:11.400
Мы с вами добрались до конца третьей секции. Давайте вкратце пройдемся о том, что мы прошли.

00:41:11.400 --> 00:41:22.400
Первый VPC-компонент – это Internet Gateway, который помогает соединить интернет с нашими ресурсами в Public Subnet.

00:41:22.400 --> 00:41:32.400
Далее есть компонент NAT Gateway либо NAT Instance, который позволяет уже инстанцам из Private Subnet добираться до интернета,

00:41:32.400 --> 00:41:40.400
при этом запрещать доступ из интернета, подключаться до инстанцев внутри Private Subnet.

00:41:40.400 --> 00:41:53.400
Далее мы поговорили про VPC Endpoint. Идея в том, что не все сервисы бывают внутри VPC, и в зависимости от ваших бизнес требований,

00:41:53.400 --> 00:42:02.400
если вам нужно использовать этот AWS сервис, есть возможность, не выходя в интернет, а внутри сети AWS,

00:42:02.400 --> 00:42:11.400
локально, то есть подключиться от этого сервиса к вашему VPC, для того чтобы это было безопасно, быстрее,

00:42:11.400 --> 00:42:16.400
и в целом вы получили доступ из VPC к необходимому вам сервису.

00:42:16.400 --> 00:42:22.400
Следующее – это VPC Peering. Это когда вам необходимо попарно соединить между собой ваши VPC.

00:42:22.400 --> 00:42:27.400
При этом VPC могут находиться в разных AWS-аккаунтах.

00:42:27.400 --> 00:42:42.400
Следующее – это VPC Sharing. Идея в том, что вы можете ваши сабнеты расшарить с другими VPC, с VPC с других AWS-аккаунтов.

00:42:42.400 --> 00:42:50.400
Основной момент, который надо учитывать, это чтобы все аккаунты были в одном AWS-организации.

00:42:50.400 --> 00:43:03.400
Далее мы поговорили с вами про AWS Side-to-Side VPN. Идея в том, что вы можете вашу облачную инфраструктуру соединить с локальной инфраструктурой

00:43:03.400 --> 00:43:08.400
через интернет, прокинув специальное подключение VPN-подключение.

00:43:08.400 --> 00:43:14.400
Есть и плюсы и минусы такого подхода. Другой вариант – это AWS Direct Connect.

00:43:14.400 --> 00:43:21.400
Идея в том, что вы не через интернет подключаетесь к облаку, а подключаетесь к глобальной инфраструктуре AWS.

00:43:21.400 --> 00:43:30.400
Таким образом выходить в интернет не нужно. И при этом вы получаете больше канал.

00:43:30.400 --> 00:43:43.400
И этот вариант лучше, если вам необходимо передавать большой объем информации с вашего локального офиса в облако либо обратно.

00:43:43.400 --> 00:43:56.400
И последнее то, что мы поговорили – это AWS Transit Gateway. Идея в том, что если ваши VPC должны быть тесно связаны между собой,

00:43:56.400 --> 00:44:07.400
и когда вы используете VPC-пиринг, то создаете большое количество этих VPC-пирингов, то как решением может быть AWS Transit Gateway,

00:44:07.400 --> 00:44:15.400
когда у вас есть центральный ресурс Transit Gateway, к которому подключаются все ваши VPC.

00:44:15.400 --> 00:44:23.400
Таким образом все подключенные VPC получают доступ ко всем другим VPC, которые уже подключены к этому Transit Gateway.

00:44:23.400 --> 00:44:32.400
Мы добрались до четвертой секции. И на этой секции мы поговорим про безопасность VPC.

00:44:32.400 --> 00:44:41.400
Давайте начнем. Начнем мы с Security Group. Security Group – это некий виртуальный фаервол для ваших инстенсов,

00:44:41.400 --> 00:44:50.400
который позволяет контролировать входящий и исходящий трафик. Важно запомнить, что Security Groups работают на уровне инстенса.

00:44:50.400 --> 00:45:02.400
Таким образом вы можете в рамках одного сабнета для каждого инстенса внутри него настроить специальный набор Security Group.

00:45:02.400 --> 00:45:12.400
Когда мы говорим про Security Groups, следует понимать это как набор правил, которые контролируют входящий и исходящий трафик.

00:45:12.400 --> 00:45:21.400
В только что созданной Security Group у вас будет отсутствовать Inbound Rules, то есть входящий трафик.

00:45:21.400 --> 00:45:31.400
Таким образом сторонний хост не сможет обратиться и добраться до инстенса с новой созданной Security Group.

00:45:31.400 --> 00:45:40.400
Если мы говорим про Outbound Rules, то есть исходящий трафик, то по умолчанию он полностью разрешен и ничем не ограничен.

00:45:40.400 --> 00:45:50.400
Если вам необходимо ограничить исходящий трафик, то вы можете удалить Rule, то есть правило, которое создается по умолчанию,

00:45:50.400 --> 00:45:58.400
и задать свои правила, которые в каком-то объеме ограничены.

00:45:58.400 --> 00:46:03.400
Здесь также следует отметить, что Security Groups являются Stateful.

00:46:03.400 --> 00:46:19.400
То есть это означает, что когда вы с вашего инстенса делаете запрос к другому ресурсу, если у вас есть Outbound Трафик, то запрос разрешается.

00:46:19.400 --> 00:46:30.400
Далее, когда вы получаете ответ на ваш запрос, вне зависимости от того, Inbound Rule разрешен или запрещен, вы его получаете.

00:46:30.400 --> 00:46:34.400
То есть запоминается состояние.

00:46:34.400 --> 00:46:36.400
Обратное тоже верно.

00:46:36.400 --> 00:46:48.400
То есть если разрешен Inbound Rule от внешнего ресурса, то запоминается состояние, что он пришел со стороны, так как он уже был разрешен.

00:46:48.400 --> 00:46:59.400
Мы запоминаем это состояние, и уже вне зависимости от того, разрешен ли исходящий трафик, он разрешается в любом случае и передает ответ обратно.

00:46:59.400 --> 00:47:04.400
Давайте рассмотрим пример Security Groups.

00:47:04.400 --> 00:47:10.400
Вы здесь видите, есть настроенные рулы для исходящего и входящего трафика.

00:47:10.400 --> 00:47:24.400
Если посмотреть на исходящие рулы, то мы видим, что разрешены порты 80-443, то есть HTTP и HTTPS доступ со всего интернета.

00:47:24.400 --> 00:47:30.400
То есть любой IPv4 адрес с интернета может подключаться к нашему инстанцу.

00:47:30.400 --> 00:47:39.400
Другое, третье, это то, что как в source указан CDR блок нашей сети,

00:47:39.400 --> 00:47:50.400
таким образом мы с локальной сети по порту 22, то есть SSH, можем подключаться к инстанцу, к которой привязана эта Security Group.

00:47:50.400 --> 00:48:08.400
Если мы говорим про исходящий трафик, то мы можем как destination указать ID к Security Groups наших баз данных и выдать разрешение на порт 1433.

00:48:08.400 --> 00:48:19.400
Таким образом, инстанц этой Security Group может подключаться к базам данных по порту 1433.

00:48:19.400 --> 00:48:27.400
Это порт по умолчанию для Microsoft SQL Server баз данных.

00:48:27.400 --> 00:48:35.400
Следующим компонентом, который позволяет обеспечить безопасность VPC, является Network Access Control Lists.

00:48:35.400 --> 00:48:39.400
Чаще вы ее будете встречать как Network ACLs.

00:48:39.400 --> 00:48:48.400
Network ACLs выступает как firewall и контролирует входящий и исходящий трафик на уровне сабнетов.

00:48:48.400 --> 00:48:57.400
Оно является опциональным, поэтому использовать или нет это на ваше усмотрение.

00:48:57.400 --> 00:49:07.400
Amazon со своей стороны рекомендует ее использовать и продублировать входящие и исходящие рулы для всех ваших VPC.

00:49:07.400 --> 00:49:16.400
Когда мы говорим про Network ACL, каждый сабнет должен быть привязан к одному из Network ACL.

00:49:16.400 --> 00:49:26.400
Если вы явно не указываете связь, то сабнеты привязываются к дефолтовому Network ACL.

00:49:26.400 --> 00:49:33.400
Здесь важный момент, это то, что каждый сабнет может быть соединен только с одним Network ACL.

00:49:33.400 --> 00:49:39.400
Тогда как несколько сабнетов могут быть соединены с одним Network ACL.

00:49:39.400 --> 00:49:49.400
Когда вы один сабнет перепривязываете к другому Network ACL, то предыдущая привязка удаляется.

00:49:54.400 --> 00:50:02.400
Network ACL выглядит следующим образом. Это пример Network ACL, созданного по умолчанию.

00:50:02.400 --> 00:50:08.400
По умолчанию разрешается весь входящий и исходящий IPv4 трафик.

00:50:08.400 --> 00:50:13.400
Если это применимо, то IPv6 трафик также разрешается.

00:50:13.400 --> 00:50:20.400
Здесь следует отметить, что Network ACL является stateless, то есть не сохраняется состояние.

00:50:20.400 --> 00:50:31.400
Таким образом, когда вы делаете, представим, исходящий запрос на некий ресурс, если у вас разрешен outbound трафик, то запрос проходит.

00:50:31.400 --> 00:50:46.400
Далее, так как Network ACL является stateless, то при возвращении ответа он также проверяет, если через inbound трафик он разрешен, тогда вы получаете ответ.

00:50:46.400 --> 00:50:58.400
Если же в inbound трафике прописано, что он не пропускает этот входящий трафик, то вы не получите ответа, даже если он дойдет до вашего получателя.

00:50:58.400 --> 00:51:09.400
Обратное тоже верно, то есть для того, чтобы внешний ресурс получил от вас ответ, то должны быть разрешены и outbound, и inbound трафик.

00:51:09.400 --> 00:51:26.400
Иначе вы получите запрос от ресурса, но ответить этому ресурсу уже не сможете, так как не пропустит Network ACL и нет соответствующего рула внутри outbound трафика.

00:51:26.400 --> 00:51:32.400
Здесь вы можете видеть пример Network ACL, уже заполненного.

00:51:32.400 --> 00:51:39.400
Когда мы создаем кастомный Network ACL, то весь трафик входящий и исходящий, он запрещен.

00:51:39.400 --> 00:51:47.400
Поэтому по необходимости вам нужно добавить рулы, то есть правила, которые разрешают входящий либо исходящий трафик.

00:51:47.400 --> 00:51:58.400
Здесь вы можете видеть, что входящий трафик и исходящий трафик разрешен для HTTPS и SSH соединения.

00:51:58.400 --> 00:52:05.400
При этом по HTTPS могут подключаться любой IP-V адрес, то есть с интернета есть доступ,

00:52:05.400 --> 00:52:16.400
а с SSH могут подключаться только IP-адреса с cidre-блока 192.0.2.0-24.

00:52:16.400 --> 00:52:23.400
То есть здесь вы можете указывать таким образом вашу локальную сеть.

00:52:26.400 --> 00:52:33.400
Возможно, сейчас вам немного непонятно, чем же все-таки отличается Security группой от Network ACL,

00:52:33.400 --> 00:52:39.400
поэтому давайте сравним в табличном виде, чем же они все-таки отличаются.

00:52:39.400 --> 00:52:44.400
Когда мы говорим про Security группы, то Security группа работает на уровне инстенса,

00:52:44.400 --> 00:52:49.400
тогда как Network ACL работает на уровне Subnet, то есть привязывается к Subnet.

00:52:49.400 --> 00:52:58.400
Когда мы говорим про правила, Security группы поддерживают только правила, которые что-то разрешают, то есть разрешают трафик.

00:52:58.400 --> 00:53:03.400
Когда мы говорим про Network ACL, там присутствует не только правила, которые что-то разрешают,

00:53:03.400 --> 00:53:07.400
а также можно настроить правила, которые запрещают трафик.

00:53:07.400 --> 00:53:14.400
Когда мы говорим про Security группы, то оно является Stateful, то есть запоминает состояние.

00:53:14.400 --> 00:53:27.400
И это значит, что трафик, который смог войти, он обязательно выйдет, несмотря на Outbound-рулы.

00:53:27.400 --> 00:53:29.400
И обратное тоже верно.

00:53:29.400 --> 00:53:37.400
Если у вас есть Outbound-трафик, который прошел, то вне зависимости от того, какие Inbound-правила у вас прописаны, оно вернется обратно.

00:53:37.400 --> 00:53:43.400
Когда мы говорим про Network ACL, она является Stateless, то есть она не запоминает состояние.

00:53:43.400 --> 00:53:58.400
И когда для того, чтобы запрос прошел успешно через Network ACL, оно должно быть разрешено как в Inbound-рулах, так и в Outbound-рулах, иначе в какой-то момент она не пройдет.

00:53:58.400 --> 00:54:09.400
И четвертый момент, который отличается, это то, что Security группы для того, чтобы принять решение, разрешать трафик или нет,

00:54:09.400 --> 00:54:13.400
просматривает все имеющиеся рулы, после чего принимает решение.

00:54:13.400 --> 00:54:21.400
А когда мы говорим про Network ACL, он по приоритету сверху вниз просматривает все рулы.

00:54:21.400 --> 00:54:27.400
В тот момент, когда мы находим правила, которые разрешают трафик, все оставшиеся правила не рассматриваются.

00:54:27.400 --> 00:54:30.400
И трафик разрушается.

00:54:30.400 --> 00:54:35.400
Мы заканчиваем четвертую секцию.

00:54:35.400 --> 00:54:43.400
Здесь мы с вами рассмотрели более подробно, что же такое Security группы и что такое Network ACL.

00:54:43.400 --> 00:54:47.400
Оба эти компонента помогают нам защитить наши VPC.

00:54:47.400 --> 00:54:50.400
Мы с вами добрались до пятой секции.

00:54:50.400 --> 00:54:55.400
И здесь мы поговорим про сервис Amazon Road 53.

00:54:55.400 --> 00:55:00.400
Это сервис, который предоставляет нам DNS сервис.

00:55:00.400 --> 00:55:10.400
Самыми простыми словами это значит то, что в тот момент, когда пользователи открывают сайт www.example.com,

00:55:10.400 --> 00:55:22.400
то этот сервис перенаправляет трафик на соответствующие IP адреса, а именно IP адреса нашей инфраструктуры, на наши инстанции.

00:55:22.400 --> 00:55:27.400
Road 53 поддерживает большой выбор AWS сервисов.

00:55:27.400 --> 00:55:34.400
Это может быть не только EC2 инстанции, также это может быть S3 бакеты, Elastic Load Balancing и другие сервисы.

00:55:34.400 --> 00:55:49.400
Внутри Amazon Road 53 можно гибко настроить трафик для того, чтобы реагировать на состояние таргет IP адресов,

00:55:49.400 --> 00:55:54.400
то есть IP адресов, куда перенаправляет этот сервис и соответственно действовать.

00:55:54.400 --> 00:56:01.400
То есть таким образом можно настроить перенаправление трафика в случае возникновения проблем у принимающей стороны.

00:56:01.400 --> 00:56:10.400
Также следует отметить, что через Road 53 мы можем покупать домены.

00:56:10.400 --> 00:56:22.400
Какие домены верхнего уровня доступны, вы можете посмотреть и ознакомиться на странице сервиса Amazon Road 53.

00:56:22.400 --> 00:56:31.400
На этом слайде вы можете видеть, как обрабатывается запрос пользователя, когда он открывает определенный сайт.

00:56:31.400 --> 00:56:40.400
Когда пользователь вводит, например, 3w.example.com, название сайта, то этот запрос уходит на DNS Resolver.

00:56:40.400 --> 00:56:48.400
Это такие сервера, которые сохраняют связки доменной имени и какой IP адрес его обслуживает,

00:56:48.400 --> 00:56:53.400
либо информации о том, где, на каком источнике можно этот IP адрес получить.

00:56:53.400 --> 00:57:01.400
В случае, если у DNS Resolver этой информации нет, но он знает, куда пойти, он идет в сервис Amazon Road 53,

00:57:01.400 --> 00:57:09.400
который смотрит в своих настройках и соответственно возвращает IP адрес этому DNS Resolver.

00:57:09.400 --> 00:57:17.400
DNS Resolver дальше возвращает этот IP адрес пользователю, и это происходит прозрачно для пользователя.

00:57:17.400 --> 00:57:23.400
Когда он вводит в строке браузера, он видит уже открытый сайт.

00:57:23.400 --> 00:57:27.400
Но здесь есть два шага. Первый шаг мы с вами увидели.

00:57:27.400 --> 00:57:35.400
И второй шаг, как только браузер получает IP адрес, он делает уже этот запрос на соответствующий IP адрес

00:57:35.400 --> 00:57:38.400
и получает оттуда ответ, отображает пользователю.

00:57:38.400 --> 00:57:50.400
В строке ввода, в строке поиска у пользователя все так же останется то доменное имя, которое он ввел вначале.

00:57:53.400 --> 00:58:04.400
Amazon Road 53 поддерживает несколько различных полиси, которые помогают нам направлять и гибко настраивать наш трафик.

00:58:04.400 --> 00:58:13.400
Самый первый это Simple Routing. Идея ее в том, что вы в настройках Road 53 указываете один или несколько IP адресов,

00:58:13.400 --> 00:58:21.400
которые обслуживают ваше доменное имя. В тот момент, когда приходит запрос, то этот сервис в рандомном порядке,

00:58:21.400 --> 00:58:30.400
в случайном порядке отдаёт один из IP адресов, и уже браузер на стороне пользователя переходит на этот IP адрес,

00:58:30.400 --> 00:58:39.400
чтобы получить ответ на запрос пользователя. Следующий более продвинутый полиси это Weighted Round Robin Routing.

00:58:39.400 --> 00:58:53.400
Идея ее в том, что вы можете для списка ваших IP адресов, серверов, которые обслуживают трафик, задать некоторые веса.

00:58:53.400 --> 00:59:05.400
И представим, у вас есть два сервера, один мощный, другой менее мощный. В этом случае вы можете, например, 75% трафика направить на большой сервер,

00:59:05.400 --> 00:59:18.400
а оставшийся 25% на маленький. Третий вариант это Latency Routing. Она более, скажем так, сложная по сравнению с предыдущими двумя.

00:59:18.400 --> 00:59:30.400
Идея ее в том, что она измеряет скорость ответа от определенных IP адресов и выбирает тот, который быстрее всего отвечает.

00:59:30.400 --> 00:59:36.400
Давайте я приведу пример. Представим, наша инфраструктура развернута в двух AWS регионах.

00:59:36.400 --> 00:59:51.400
И по происшествию некоторого времени и сбора необходимой информации, Route 53 будет выдавать для пользователей тот регион, который для этого пользователя будет работать быстрее.

00:59:51.400 --> 01:00:07.400
Следующее это Geolocation Routing. Идея в том, что мы можем для пользователей с определенного региона направлять на указанные нами сервера либо IP адреса, которые обслуживают этот трафик.

01:00:07.400 --> 01:00:16.400
Это используется обычно для того, чтобы направлять трафик на соответствующий сайт с нужным языком.

01:00:16.400 --> 01:00:29.400
Представим, что мы как пользователь подключаемся со стороны Центральной Азии, мы знаем русский язык.

01:00:29.400 --> 01:00:39.400
И в этом случае вы можете настроить сайт таким образом, что он направляет на версию сайта на русском языке.

01:00:39.400 --> 01:00:54.400
В случае, если подключается пользователь с англоязычной стороны, в этом случае, соответственно, пользователя направят на те сервера, которые обслуживают трафик англоязычный.

01:00:54.400 --> 01:01:14.400
Следующая Policy это Geoproximity Routing. Идея в том, что в отличие от Geolocation Routing, когда мы смотрим на расположение локацию пользователей, в Geoproximity Routing мы смотрим на расположение нашей инфраструктуры.

01:01:14.400 --> 01:01:25.400
И, соответственно, выдаем ответ. Следующий это Failover Routing. Идея в том, что мы передаем IP-адреса Active и Passive.

01:01:25.400 --> 01:01:35.400
И в момент, когда с Active IP-адресом или ресурсом, который обрабатывает трафик, все хорошо, весь трафик направляется туда.

01:01:35.400 --> 01:01:48.400
В случае возникновения некоторых проблем, то трафик автоматически перенаправляется на резервный IP-адрес для того, чтобы обработать и не пропустить каждый вопрос.

01:01:48.400 --> 01:02:00.400
В тот момент, когда Active становится снова доступным, то срабатывает переключатель и весь трафик, основной трафик будет перенаправляться обратно на Active IP-адреса.

01:02:00.400 --> 01:02:10.400
Самый последний это Multi-Value Answer Routing. Идея ее в том, что во всех предыдущих случаях мы возвращали один конкретный IP-адрес пользователю.

01:02:10.400 --> 01:02:26.400
В случае с Multi-Value Answer Routing мы передаем несколько IP-адресов, а далее уже браузер в зависимости от настроек либо алгоритма работы определяет, на какой IP-адрес нужно идти.

01:02:26.400 --> 01:02:35.400
Здесь вы можете видеть пример использования сервиса Amazon Route 53 и какие выгоды она дает.

01:02:35.400 --> 01:02:40.400
Например, наша инфраструктура развернута в нескольких регионах.

01:02:40.400 --> 01:03:00.400
И в случае подключения пользователя с некоторого региона, который ближе к первому региону, а на стороне Route 53 у нас настроен Latency-based routing, в этом случае пользователь будет направлен на тот регион, который ему ближе.

01:03:00.400 --> 01:03:10.400
И в целом получит ответ намного быстрее, чем если бы запрос ушел на регион, находящийся немного дальше.

01:03:10.400 --> 01:03:20.400
На этом сайде вы видите пример страницы AWS, где происходит настройка Failover Routing Policy.

01:03:20.400 --> 01:03:32.400
И пример этот дан для того, чтобы показать, что есть возможности гибко настроить правила направления нашего трафика.

01:03:32.400 --> 01:03:54.400
Если мы говорим про конкретный пример, то мы видим, что есть у нас Failover Threshold 3, то есть если последовательно 3 запроса были неудачными, то у нас происходит переключение и весь трафик уходит на наш резервный IP-адрес, который обслуживает этот трафик.

01:03:54.400 --> 01:04:06.400
И дальше каждый либо 30 секунд, либо 10 секунд, Request Interval, мы проверяем, можем ли мы обратно вернуться на наш Active IP-адрес, который является основным.

01:04:06.400 --> 01:04:16.400
На этом сайде приведен еще один пример настройки Failover Routing Policy.

01:04:16.400 --> 01:04:29.400
Представим, у нас есть инфраструктура, которая обслуживает основной трафик и в Route 53 эта инфраструктура является основным, то есть Active Route.

01:04:29.400 --> 01:04:39.400
И соответственно запрос доходит до наших EC2-инстанцев, которые обращаются к базе данных для того, чтобы вернуть какой-то динамический ответ.

01:04:39.400 --> 01:04:58.400
А на стороне Route 53 настроена Failover, в случае, если инстанцы становятся недоступными, то у нас срабатывает Failover Policy, и мы переключаемся на Secondary, то есть Passive IP-адреса.

01:04:58.400 --> 01:05:05.400
В этом случае мы можем направить трафик на наш статический веб-сайт, который хостится на Amazon S3.

01:05:05.400 --> 01:05:21.400
Таким образом мы не сможем обработать всех пользователей как положено, но по крайней мере можем направить на соответствующий веб-сайт, в котором они могут получить более-менее понятный ответ, и вы не потеряете ваших клиентов.

01:05:21.400 --> 01:05:37.400
В тот момент, когда Route 53 получит ответ, периодически проверяя, что наши EC2-инстанцы успешно могут принимать запросы, то происходит обратное переключение, и весь трафик уже идет на наши EC2-инстанцы.

01:05:37.400 --> 01:05:42.400
Мы завершаем пятую секцию. Давайте вкратце остановимся на том, что мы прошли.

01:05:42.400 --> 01:05:51.400
Первое, это то, что Route 53 – это высокодоступный и масштабируемый сервис, который предоставляет нам DNS.

01:05:51.400 --> 01:06:03.400
Простыми словами, это тот сервис, который направляет наш трафик от нашего доменного имени к нашим инстанцам, которые обрабатывают этот запрос.

01:06:03.400 --> 01:06:16.400
Через сервис Amazon Route 53 мы также можем покупать доменные имена. Какие верхнеуровневые домены доступны для нас, мы можем посмотреть на официальной странице этого сервиса.

01:06:16.400 --> 01:06:27.400
Далее, что важно отметить и что может прийти, и скорее всего придет на реальном AWS-экзамене, это какие роутинг-полиси существуют в Route 53.

01:06:27.400 --> 01:06:42.400
На самом деле, эти вопросы являются одними из самых простых. Вам достаточно понять, чем является каждая роутинг-полиси, и этого будет достаточно, чтобы правильно ответить на вопрос.

01:06:42.400 --> 01:06:49.400
С подобными вопросами вы встретитесь на наших практик-тестах и сможете на них попрактиковаться.

01:06:49.400 --> 01:06:59.400
После этого мы посмотрели несколько примеров использования сервиса Route 53 с инфраструктурой AWS.

01:06:59.400 --> 01:07:08.400
Мы добрались до самой последней секции в рамках нашей лекции и поговорим про сервис Amazon CloudFront.

01:07:08.400 --> 01:07:19.400
Это один из базовых сервисов, который используется практически во всех IT-инфраструктурах, которые так или иначе обрабатывают интернет-трафик.

01:07:19.400 --> 01:07:24.400
Этот сервис является Content Delivery Network, то есть CDN.

01:07:24.400 --> 01:07:44.400
Простыми словами, это тот сервис, который все ваши медиа-файлы переносит ближе к вашим пользователям, так чтобы это работало быстрее, это было дешевле и в целом безопаснее для вас.

01:07:44.400 --> 01:07:56.400
Давайте посмотрим на примере, почему важно и чем помогает нам CDN для улучшения пользовательского опыта.

01:07:56.400 --> 01:08:08.400
Когда пользователь делает запрос, он может проходить через несколько узлов для того, чтобы добраться до оригинального сервера и запросить ваши некоторые данные, медиаданные с вашего сервера.

01:08:08.400 --> 01:08:21.400
То расстояние от пользователя до наших серверов может быть достаточно большим и оно отражается на скорости работы вашего приложения.

01:08:21.400 --> 01:08:23.400
Это ухудшает пользовательский опыт.

01:08:23.400 --> 01:08:42.400
Поэтому есть такой подход как CDN, Content Delivery Network. Идея в том, что в некоторых узлах ваши медиаданные либо любые другие данные кэшируются.

01:08:42.400 --> 01:09:00.400
Таким образом пользователь не доходя до оригинальных, скажем так, изначальных источников серверов может раньше получить необходимый контент и это все ускорит время обработки каждого запроса каждого пользователя.

01:09:00.400 --> 01:09:10.400
Таким образом, Content Delivery Network, то есть CDN является для нас решением.

01:09:10.400 --> 01:09:19.400
Content Delivery Network это понятие IT, в области IT, не привязанное к Амазону.

01:09:19.400 --> 01:09:25.400
Поэтому это довольно таки давно существующая технология, подход.

01:09:25.400 --> 01:09:31.400
Идея в том, что это сеть связанных между собой серверов, которые кэшируют некоторый контент.

01:09:31.400 --> 01:09:40.400
Как контент может выступать HTML страницы, CSS страницы, JavaScript файлы, картинки, видео, аудиодорожки и так далее.

01:09:40.400 --> 01:09:42.400
То есть любые медиафайлы.

01:09:42.400 --> 01:09:47.400
Более того, продвинутые SDN могут обрабатывать и кэшировать динамический контент.

01:09:47.400 --> 01:10:01.400
Таким образом, нет необходимости пользователям ждать, когда запрос от него дойдет до оригинального сервиса.

01:10:01.400 --> 01:10:09.400
Фактически где-то посередине в кэше сохранен или есть готовый ответ для этого пользователя, который он получает.

01:10:09.400 --> 01:10:14.400
И таким образом улучшается пользовательский опыт.

01:10:14.400 --> 01:10:23.400
Если мы говорим про Амазон AWS, то есть специальный сервис, который является SDN, то есть Content Delivery Network.

01:10:23.400 --> 01:10:27.400
Называется Amazon CloudFront.

01:10:27.400 --> 01:10:32.400
Мы с вами проговорили ранее, что такое глобальная инфраструктура AWS.

01:10:32.400 --> 01:10:36.400
Это когда у нас есть AWS регионы.

01:10:36.400 --> 01:10:38.400
В каждом регионе есть availability зоны.

01:10:38.400 --> 01:10:41.400
В каждой availability зоны есть дата-центры.

01:10:41.400 --> 01:10:44.400
И проговорили, что такое дата-центры.

01:10:44.400 --> 01:10:49.400
Также есть параллельная инфраструктура AWS, которая относится к CloudFront.

01:10:49.400 --> 01:10:52.400
Называется Amazon CloudFront Infrastructure.

01:10:52.400 --> 01:10:54.400
Состоит она из двух компонентов.

01:10:54.400 --> 01:10:57.400
Это Edge Locations, а также Regional Edge Caches.

01:10:57.400 --> 01:10:59.400
Чем отличается?

01:10:59.400 --> 01:11:09.400
Edge Locations – это те сервера, которые находятся наиболее близко к конечным пользователям.

01:11:09.400 --> 01:11:17.400
Таким образом, в нем сохраняется контент, который самый популярный, самый необходимый, который запрашивается чаще всего.

01:11:17.400 --> 01:11:27.400
Чуть дальше находится Regional Edge Cache, в котором сохраняется информация уже чуть большего региона.

01:11:27.400 --> 01:11:36.400
И в нем есть данные, которые также популярные, но менее популярные, чем те данные, которые находятся на Edge Locations.

01:11:36.400 --> 01:11:41.400
Также это могут быть данные, которые по тем или иным причинам не поместились в Edge Locations.

01:11:41.400 --> 01:11:45.400
Они передаются и сохраняются в кэше Regional Edge Cache.

01:11:48.400 --> 01:11:59.400
После Regional Edge Cache у нас уже самое дальнее расстояние – это напрямую обратиться к оригинальным источникам.

01:11:59.400 --> 01:12:07.400
Таким образом, повторюсь, у нас есть три шага, три узла.

01:12:07.400 --> 01:12:12.400
Самый дальний – это напрямую обращаться к оригинальным серверам.

01:12:12.400 --> 01:12:17.400
Чуть быстрее, если мы получаем контент из Regional Edge Cache.

01:12:17.400 --> 01:12:21.400
И самый быстрый контент мы получаем из Edge Locations.

01:12:23.400 --> 01:12:28.400
Давайте пройдемся по основным преимуществам использования сервиса Amazon CloudFront.

01:12:28.400 --> 01:12:31.400
Первое – это то, что это сервис быстрый, глобальный.

01:12:31.400 --> 01:12:40.400
Далее – это то, что мы можем настроить безопасность на наших конечных кэшируемых серверах.

01:12:42.400 --> 01:12:48.400
Мы можем дополнительно программировать поведение сервиса CloudFront, используя Lambda Edge.

01:12:50.400 --> 01:12:56.400
Этот сервис является SDN, который максимально интегрирован с сервисами AWS.

01:12:56.400 --> 01:13:02.400
А также это решение, которое намного выгоднее и быстрее,

01:13:02.400 --> 01:13:08.400
чем если бы мы обслуживали наших интернет-пользователей напрямую с наших серверов.

01:13:10.400 --> 01:13:17.400
Amazon CloudFront является ресурсом платным, но также, как и любой другой AWS сервис,

01:13:17.400 --> 01:13:20.400
мы оплачиваем только за то, что мы использовали.

01:13:20.400 --> 01:13:27.400
В рамках сервиса Amazon CloudFront мы оплачиваем за объем данных, которые мы передали в кэш-сервера.

01:13:28.400 --> 01:13:35.400
Также мы оплачиваем за количество запросов HTTP и HTTPS-запросов на эти кэш-сервера.

01:13:36.400 --> 01:13:39.400
Дополнительно оплачиваются Invalidation Requests.

01:13:39.400 --> 01:13:45.400
Это когда нам необходимо по запросу очистить все кэш-сервера от наших данных.

01:13:45.400 --> 01:13:50.400
Обычно это требуется, когда мы находим какую-то ошибку и быстро ее исправляем.

01:13:50.400 --> 01:13:57.400
И хотим, чтобы пользователи получали обновленную версию приложения либо данных.

01:13:57.400 --> 01:14:00.400
В этом случае мы делаем Invalidation Requests.

01:14:00.400 --> 01:14:03.400
Другой вариант – это когда у нас большое обновление,

01:14:03.400 --> 01:14:08.400
и мы хотим, чтобы вот это большое обновление быстрее дошло до наших пользователей.

01:14:08.400 --> 01:14:11.400
В этом случае нам необходимо очистить кэш,

01:14:11.400 --> 01:14:21.400
и все пользователи, которые начинают запрашивать, первый пользователь сделает запрос через CloudFront.

01:14:21.400 --> 01:14:28.400
Далее CloudFront, так как этих данных нет, сделает запрос на оригинальные сервера и получит эти данные,

01:14:28.400 --> 01:14:30.400
после чего закэширует.

01:14:30.400 --> 01:14:34.400
А все последующие пользователи, которые будут запрашивать эти же данные,

01:14:34.400 --> 01:14:42.400
уже будут получать не с оригинальных серверов, а быстрее уже с наших эдж-серверов.

01:14:44.400 --> 01:14:51.400
И еще один момент – это то, что есть возможность настроить так называемый Dedicated IP Custom SSL.

01:14:51.400 --> 01:14:58.400
Это та опция, которая не часто используется пользователями AWS,

01:14:58.400 --> 01:15:01.400
но вам достаточно запомнить, что такая опция есть.

01:15:01.400 --> 01:15:07.400
Более подробно вы можете посмотреть на официальной документации сервиса Amazon CloudFront.

01:15:09.400 --> 01:15:14.400
Мы закончили шестую последнюю секцию в рамках нашей лекции.

01:15:14.400 --> 01:15:20.400
Мы познакомились подробно с сервисом Amazon CloudFront,

01:15:20.400 --> 01:15:24.400
а также узнали, что же такое SDN, для чего оно используется,

01:15:24.400 --> 01:15:32.400
и также узнали, что есть на стороне AWS сервис, который предоставляет нам SDN.

01:15:33.400 --> 01:15:37.400
Из преимуществ использования CloudFront – это то, что это сервис глобальный,

01:15:37.400 --> 01:15:41.400
можно гибко настроить его, программировать его поведение,

01:15:41.400 --> 01:15:48.400
также есть возможность сделать необходимые настройки с точки зрения безопасности.

01:15:48.400 --> 01:15:53.400
Это тот сервис, который является сервисом AWS,

01:15:53.400 --> 01:15:58.400
соответственно, достаточно хорошо проинтегрирован с другими сервисами

01:15:58.400 --> 01:16:03.400
и является достаточно экономичным решением в случае,

01:16:03.400 --> 01:16:09.400
когда вы передаете большой объем информации до ваших пользователей, ваших приложений.

01:16:11.400 --> 01:16:14.400
На этом мы завершаем наше лекционное занятие.

01:16:14.400 --> 01:16:19.400
Давайте пройдемся по самым основным моментам, которые мы сегодня прошли.

01:16:19.400 --> 01:16:25.400
Это то, что мы рассмотрели основы сетей, не привязанной к AWS,

01:16:25.400 --> 01:16:34.400
но это та информация, которая поможет легче понять сервисы, связанные с нейтворкингом внутри AWS.

01:16:35.400 --> 01:16:38.400
Далее мы познакомились с сервисом Amazon VPC,

01:16:38.400 --> 01:16:46.400
рассмотрели дополнительные ее компоненты, в том числе компоненты, которые помогают обеспечить безопасность,

01:16:46.400 --> 01:16:49.400
это Security Group и Network ICO.

01:16:51.400 --> 01:16:58.400
После чего мы познакомились с сервисами Amazon CloudFront и Route53,

01:16:58.400 --> 01:17:01.400
рассмотрели примеры использования этих сервисов

01:17:01.400 --> 01:17:08.400
и как эти сервисы помогают нам лучше построить нашу инфраструктуру в облаке.

01:17:09.400 --> 01:17:13.400
Здесь вы можете видеть ссылки, которые могут вам понадобиться,

01:17:13.400 --> 01:17:20.400
если вы хотите дополнительно ознакомиться со всем тем, что мы прошли сегодня.

01:17:21.400 --> 01:17:25.400
На этом мы завершаем наше лекционное занятие.

01:17:25.400 --> 01:17:29.400
Я надеюсь, вы узнали что-то новое сегодня для себя.

01:17:29.400 --> 01:17:32.400
И увидимся с вами на следующих наших активностях.