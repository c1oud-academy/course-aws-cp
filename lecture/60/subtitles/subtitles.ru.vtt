WEBVTT

00:00:00.000 --> 00:00:05.240
Добрый день, уважаемые студенты! Я рад
вас видеть на очередной лекции.

00:00:05.240 --> 00:00:09.520
Сегодня мы с вами поговорим про
Networking и Content Delivery.

00:00:09.520 --> 00:00:15.880
Итак, давайте начнем. Сегодняшняя наша
лекция поделена на шесть частей.

00:00:15.880 --> 00:00:21.880
В первой части мы поговорим про основы
сетей и рассмотрим базовые понятия.

00:00:21.880 --> 00:00:28.880
Далее, в следующих трех частях, поговорим
про сервис Amazon Virtual Private Cloud

00:00:28.880 --> 00:00:39.400
или чаще вы можете встретить как Amazon VPC.
Затронем темы VPC Networking и VPC Security.

00:00:39.400 --> 00:00:44.000
Последние две темы
это отдельные два сервиса.

00:00:44.000 --> 00:00:52.400
Первый – это Amazon Route 53,
а второй – это Amazon CloudFront.

00:00:52.400 --> 00:00:55.400
Мы начинаем первую секцию, это основы
сетей, т.е. Networking basics.

00:00:55.400 --> 00:01:02.400
Мы рассмотрим основы сетей для того,
чтобы облегчить вам понимание следующих секций,

00:01:02.400 --> 00:01:06.512
а именно секции,
когда мы говорим про сети в AWS,

00:01:06.524 --> 00:01:10.400
в частности сервис Amazon VPC.
Что такое сеть?

00:01:10.400 --> 00:01:19.400
Сеть – это два или более клиентских машин,
соединенных между собой для обмена информации.

00:01:19.400 --> 00:01:28.400
Сеть может быть поделена на так называемые
логические части, которые называются subnets.

00:01:28.400 --> 00:01:36.400
Для того, чтобы соединить машины между собой,
нам необходимо сетевое оборудование.

00:01:36.400 --> 00:01:41.400
Как сетевое оборудование может
выступать switch или router.

00:01:41.400 --> 00:01:46.400
У каждой машины внутри
сети есть уникальный IP-адрес,

00:01:46.400 --> 00:01:52.400
который идентифицирует это устройство
внутри определенной сети.

00:01:52.400 --> 00:02:03.400
IP-адрес – это некоторое числовое обозначение
в десятичной системе счисления, которое

00:02:03.400 --> 00:02:14.400
состоит из четырех частей. Далее машина
переводится в двоичную систему счисления,

00:02:14.400 --> 00:02:22.400
как вы видите, и таким образом программа
на низшем уровне работает с этим IP-адресом.

00:02:22.400 --> 00:02:29.400
Мы же его видим в десятичной системе
счисления, и как пример вы видите 192.0.2.0.

00:02:29.400 --> 00:02:36.093
Каждый отсек,
раздел внутри IP-адреса это число,

00:02:36.105 --> 00:02:42.400
которое может принимать
значения от 0 до 255.

00:02:42.400 --> 00:02:50.400
т.е. 256 уникальных значений.
256 это 2 в степени 8, что говорит о том,

00:02:50.400 --> 00:02:56.711
что в двоичной системе
счисления для обозначения

00:02:56.723 --> 00:03:02.400
чисел от 0 до 255 нам
нужно выделить 8 бит.

00:03:02.400 --> 00:03:10.400
Начиная от нулей 8 раз (00000000),
заканчивая единичками 8 раз (11111111).

00:03:10.400 --> 00:03:24.400
Таким образом IP-адрес в бинарном формате
представляет из себя 8 умноженное на 4 32 бита.

00:03:24.400 --> 00:03:30.127
Мы с вами проговорили,
что IP-адрес состоит

00:03:30.139 --> 00:03:36.400
из 32 битов.
Такой адрес называется IPv4-адрес.

00:03:36.400 --> 00:03:43.400
У нас также есть другой вид IP-адреса,
это IPv6, который состоит из 128 битов.

00:03:43.400 --> 00:03:52.400
Таким образом оно может сгенерировать больше
уникальных IP-адресов для конкретной сети.

00:03:52.400 --> 00:03:59.400
Когда мы говорим про IPv6-адрес,
то оно представлено в виде 8 групп.

00:03:59.400 --> 00:04:03.841
В каждой группе могут
выступать буквы и цифры.

00:04:03.853 --> 00:04:08.400
Мы видим этот адрес в
шестнадцатеричной системе

00:04:08.400 --> 00:04:13.184
счисления и каждая
группа из себя представляет

00:04:13.196 --> 00:04:18.400
16 битов,
и может принимать значение от 0 до FFFF.

00:04:18.400 --> 00:04:22.400
Это опять же повторюсь в
шестнадцатеричной системе счисления.

00:04:22.400 --> 00:04:31.400
В работе вы не так часто будете
сталкиваться напрямую с IPv6-адресами.

00:04:31.400 --> 00:04:37.400
В основном будете работать с IPv4-адресами.
Поэтому давайте подробнее ее рассмотрим.

00:04:37.400 --> 00:04:49.400
В локальной сети для того, чтобы определить
список возможных значений IPv4-адресов,

00:04:49.400 --> 00:04:52.792
мы используем так
называемый CIDR блок.

00:04:52.804 --> 00:04:57.400
CIDR расшифруется как
Classless Inter-Domain Routing.

00:04:57.400 --> 00:05:09.400
Он записывается в следующем формате: это стартовый, 
т.е. самый первый IP-адрес в формате IPv4,

00:05:09.400 --> 00:05:19.400
далее слеш и какой-то номер, который
может принимать значение от 0 до 32.

00:05:19.400 --> 00:05:25.400
И означает, какое количество
битов у нас зафиксировано.

00:05:25.400 --> 00:05:36.400
Мы с вами помним, что IPv4-адрес состоит из
32 битов. Поэтому если мы видим, что в CIDR

00:05:36.400 --> 00:05:39.729
блоке написано 24,
это говорит о том,

00:05:39.741 --> 00:05:44.400
что 24 бита из 32 зафиксировано
и меняться не может.

00:05:44.400 --> 00:05:48.400
Таким образом, 8 битов могут меняться.
Когда мы говорим 8 битов,

00:05:48.400 --> 00:06:00.400
то это 2 в 8 степени количества уникальных
IP-адресов. 2 в степени 8 это 256.

00:06:00.400 --> 00:06:11.400
Таким образом, CIDR блок, указанный на слайде,
может принимать 256 уникальных IP-адресов.

00:06:11.400 --> 00:06:19.400
Самый первый IP-адрес, который
относится к этой сети, это 192.0.2.0.

00:06:19.400 --> 00:06:26.400
Таким образом, дальше идет от 0 последняя часть,
которая у нас может меняться, 0.1.2.3.4.

00:06:26.400 --> 00:06:37.400
и так до самого последнего, который будет
иметь IP-адрес 192.0.2.255. Хорошо.

00:06:37.400 --> 00:06:43.400
Я надеюсь, все понятно, и чтобы закрепить 
материал, мы с вами сделаем следующую активность.

00:06:43.400 --> 00:06:52.400
Давайте представим, что у нас есть CIDR блок,
у которого первая часть совпадает,

00:06:52.400 --> 00:07:02.400
т.е. 192.0.2.0 / и вместо 24 будет 16. Давайте
остановим это видео и попробуем посчитать,

00:07:02.400 --> 00:07:09.400
какое количество уникальных адресов будет
в этой сети с таким CIDR блоком.

00:07:12.400 --> 00:07:23.400
Хорошо, я думаю, все из вас справились.
Правильный ответ это 65536.

00:07:23.400 --> 00:07:36.400
Как мы вышли на это число? Мы с вами говорили,
что CIDR блок у нас 192.0.2.0/16.

00:07:36.400 --> 00:07:44.400
Это говорит о том, что из 32 битов
IP-адреса 16 у нас зафиксированы.

00:07:44.400 --> 00:07:50.400
Значит, ровно 16 битов у нас
flexible, т.е. могут меняться.

00:07:50.400 --> 00:07:59.400
Когда мы говорим 16 битов, это значит
2 в степени 16 уникальных IP-адресов.

00:07:59.400 --> 00:08:12.400
Если мы посчитаем 2 в степени 16, это 65536.
Хорошо, я думаю, здесь стало более понятнее.

00:08:12.400 --> 00:08:17.400
Давайте разберем еще
два граничных случая.

00:08:17.400 --> 00:08:27.400
Представим, что у нас CIDR блок
следующего вида 192.0.2.0/32.

00:08:27.400 --> 00:08:36.400
Давайте сделаем еще одну активность и попробуйте
посчитать, какое количество IP-адресов

00:08:36.400 --> 00:08:39.400
есть в этом CIDR блоке.
Можете остановить видео.

00:08:39.400 --> 00:08:47.400
Хорошо, я очень надеюсь, что каждый из вас
смог правильно посчитать и получить верный ответ.

00:08:47.400 --> 00:08:58.400
Правильный ответ – это 1. CIDR блок,
где окончание /32 идентифицирует одну машину.

00:08:58.400 --> 00:09:01.915
Как это посчитать?
Когда мы говорим /32,

00:09:01.927 --> 00:09:06.400
это говорит о том,
что 32 бита у нас зафиксированы.

00:09:06.400 --> 00:09:11.227
А так как у нас всего
в IPv4 адресе 32 бита,

00:09:11.239 --> 00:09:16.400
то чтобы посчитать,
какое количество уникальных

00:09:16.400 --> 00:09:21.657
адресов у нас есть,
мы отнимаем от 32 количество

00:09:21.669 --> 00:09:32.400
зафиксированных битов, а они у нас тоже 32.
32-32 получается 0, а 2 в степени 0 у нас 1.

00:09:32.400 --> 00:09:38.400
Таким образом, вы запомните, что в Amazon,
когда вы работаете в AWS Management Console,

00:09:38.400 --> 00:09:45.400
для того чтобы указать конкретный IP-адрес,
вы знаете, что CIDR блок – это /32,

00:09:45.400 --> 00:09:49.400
ну и указываете,
соответственно, ваш IP-адрес.

00:09:49.400 --> 00:09:57.400
И второй граничный случай, я не буду его
задавать как активность, давайте сразу отвечу.

00:09:57.400 --> 00:10:04.400
Когда мы говорим, что у нас
CIDR блок 0.0.0.0/0,

00:10:04.400 --> 00:10:10.400
в этом случае мы понимаем, что мы
начинаем с самого первого IP-адреса,

00:10:10.400 --> 00:10:20.400
так как у нас 0 зафиксированных битов,
то все биты могут меняться, т.е. flexible.

00:10:20.400 --> 00:10:27.400
Это говорит о том, что количество уникальных
адресов в этой сети 2 в степени 32,

00:10:27.400 --> 00:10:32.400
и это представляет
из себя весь интернет.

00:10:32.400 --> 00:10:38.400
Также в AWS Management Console, когда
вам нужно указать, что доступ открываете

00:10:38.400 --> 00:10:46.400
всему интернету, либо route путь прокладываете
до интернета, либо запрещаете выход в интернет,

00:10:46.400 --> 00:10:54.400
то как CIDR блок вы всегда можете указывать
все нули через точку /0, это и будет интернетом.

00:10:54.400 --> 00:11:01.400
Следующая модель, с которой нам нужно
познакомиться, возможно вы ее уже прошли,

00:11:01.400 --> 00:11:06.400
это OSI модель, т.е. Open Systems
Interconnection Model. Основная идея

00:11:06.400 --> 00:11:15.400
этой модели в том, что она концептуально
описывает, как данные передаются по сети.

00:11:15.400 --> 00:11:21.400
т.е. у нас есть 7 уровней, начиная от
application, заканчивая физическим уровнем,

00:11:21.400 --> 00:11:25.400
когда мы работаем на уровне
последовательности единичек и нулей.

00:11:25.400 --> 00:11:32.400
А самый верхний уровень application, это когда
мы работаем по протоколу HTTP, HTTPS и другие.

00:11:32.400 --> 00:11:37.400
Таким образом, когда мы делаем
HTTP request на какой-то сайт,

00:11:37.400 --> 00:11:43.400
то наш запрос с верхнего уровня
опускается до самого нижнего,

00:11:43.400 --> 00:11:51.400
и в итоге последовательность нулей
и единичек от нас идет к нашему получателю.

00:11:51.400 --> 00:11:55.505
Как только наша
последовательность единичек и нулей,

00:11:55.517 --> 00:11:59.400
т.е.
наши данные или запрос дойдет до получателя,

00:11:59.400 --> 00:12:04.079
он обратно расшифровывает
эту последовательность

00:12:04.091 --> 00:12:08.400
и поднимается на
верхний уровень application

00:12:08.400 --> 00:12:13.400
для того, чтобы прочитать, понять и
возможно обратно ответить каким-то сообщением.

00:12:13.400 --> 00:12:17.400
Ответ также будет проходить, опускаться
с верхнего уровня до нижнего,

00:12:17.400 --> 00:12:21.400
и как только придет к вам, для того
чтобы прочитать эту последовательность,

00:12:21.400 --> 00:12:27.400
вы будете от самого нижнего уровня
подниматься до самого верхнего

00:12:27.400 --> 00:12:31.400
и получите тот ответ в исходном виде,
 который вам был отправлен.

00:12:31.400 --> 00:12:37.400
Этой информации вам достаточно для того,
чтобы понимать, как функционирует сеть,

00:12:37.400 --> 00:12:43.400
как данные проходят по сети и в целом легче
понять, как работает сервис Amazon VPC .

00:12:43.400 --> 00:12:51.400
Мы переходим ко второй части нашей лекции и
подробнее познакомимся с сервисом Amazon VPC.

00:12:51.400 --> 00:12:57.400
Amazon VPC расшифровывается как
Amazon Virtual Private Cloud.

00:12:57.400 --> 00:13:05.400
Это сервис, который позволяет вам настроить
логически изолированную сеть в облаке.

00:13:05.400 --> 00:13:10.062
У вас есть полный
контроль над этой сетью,

00:13:10.074 --> 00:13:15.400
и вы можете создавать
ресурсы в этой вашей сети.

00:13:15.400 --> 00:13:20.400
Более того, вы можете применять любые
кастомные настройки в этой сети,

00:13:20.400 --> 00:13:24.400
а также есть несколько
уровней безопасности.

00:13:24.400 --> 00:13:32.400
Это Security Group и Network Access Control 
Lists, либо чаще вы встречаете как Network ACLs.

00:13:32.400 --> 00:13:42.400
Здесь вы можете видеть схему, которая объясняет,
как VPC может быть расположена в облаке.

00:13:42.400 --> 00:13:48.400
Когда мы говорим VPC, она присутствует
только в одном AWS аккаунте.

00:13:48.400 --> 00:13:54.000
Также VPC полностью должна находиться в
одном регионе. Если вам нужно

00:13:54.000 --> 00:14:02.400
использовать несколько регионов, то значит у
вас будет по одному VPC на каждом из регионов.

00:14:02.400 --> 00:14:08.400
Мы с вами помним, что в рамках региона
у нас может быть несколько Availability Zone.

00:14:08.400 --> 00:14:14.400
Таким образом, одна VPC может находиться
в нескольких Availability Zone-ах.

00:14:14.400 --> 00:14:20.400
VPC идентифицируется CIDR блоком,
про который мы ранее говорили.

00:14:20.400 --> 00:14:29.400
Также внутри VPC мы можем делать некоторые
логические группы, которые называются Subnets.

00:14:29.400 --> 00:14:34.400
Subnets тоже идентифицируются
CIDR блоком меньшего размера и Range,

00:14:34.400 --> 00:14:47.400
т.е. возможные значения IP адресов Subnet-а
должны входить в возможные значения VPC.

00:14:47.400 --> 00:14:56.400
Касательно Subnets, они могут быть двух видов.
Первый это Private, второй это Public.

00:14:56.400 --> 00:15:00.400
Public это те Subnets,
которые доступны из интернета.

00:15:00.400 --> 00:15:04.400
Private это те Subnets,
которые из интернета недоступны.

00:15:04.400 --> 00:15:13.400
Пару слов хотелось бы сказать о том,
в какой размерности могут быть CIDR блоки у VPC.

00:15:13.400 --> 00:15:22.400
Самый максимальный размер это 65536 уникальных
IP-адресов, что равняется CIDR блоку /16.

00:15:22.400 --> 00:15:32.400
Самые маленькие это 16 IP-адресов и
в CIDR блоке она записывается как /28,

00:15:32.400 --> 00:15:38.400
т.е. 4 вида у нас могут быть
flexible, т.е. меняться.

00:15:38.400 --> 00:15:47.400
Когда мы говорим про CIDR блок для VPC,
нужно очень аккуратно и ответственно

00:15:47.400 --> 00:15:53.400
подойти к размеру этого CIDR блока,
а также к начальному IP адресу.

00:15:53.400 --> 00:15:57.218
Связано это с тем,
что CIDR блок, который вы

00:15:57.230 --> 00:16:01.400
назначите для VPC,
позже не сможет быть изменен.

00:16:01.400 --> 00:16:06.400
Таким образом, если вам нужно поменять
CIDR блок, вам необходимо создать новый VPC.

00:16:06.400 --> 00:16:09.326
Если у вас в старом VPC
есть какие-то ресурсы,

00:16:09.338 --> 00:16:12.400
которые работают,
вам необходимо выделить время,

00:16:12.400 --> 00:16:16.093
силы, деньги, людей для того,
чтобы все эти

00:16:16.105 --> 00:16:20.400
ресурсы перенести в новый
VPC с новым CIDR блоком.

00:16:20.400 --> 00:16:26.400
Это может быть очень дорого и
 неприятно, поэтому правило такое,

00:16:26.400 --> 00:16:35.400
что вы с каким-то достаточным
запасом выбираете размер VPC.

00:16:35.400 --> 00:16:41.400
Более того, всегда помните, что VPC
между собой пересекаться не могут.

00:16:41.400 --> 00:16:47.400
Даже если у вас VPC находится
в разных AWS аккаунтах,

00:16:47.400 --> 00:16:53.400
то такая рекомендация на будущее –
CIDR блоки создавать не пересекающимися,

00:16:53.400 --> 00:17:00.400
т.к. есть разные сервисы в AWS, которые помогают
VPC из разных аккаунтов соединять между собой.

00:17:00.400 --> 00:17:06.400
Если CIDR блоки этих VPC будут пересекаться,
то вы их между собой соединить не сможете.

00:17:06.400 --> 00:17:12.400
Поэтому этот момент всегда учитывайте.
Другой момент – это касательно subnet-ов.

00:17:12.400 --> 00:17:21.400
Как уже говорилось ранее, CIDR блок
subnet-а должен входить в CIDR блок VPC.

00:17:21.400 --> 00:17:27.400
Размер subnet-а максимально может
быть равен размеру самого VPC.

00:17:27.400 --> 00:17:31.400
Таким образом, в этом VPC
будет только один subnet.

00:17:31.400 --> 00:17:35.400
Если же мы внутри VPC
создаем несколько subnet-ов,

00:17:35.400 --> 00:17:45.400
нам надо убедиться в том, что CIDR блоки
в рамках одного VPC также не пересекаются.

00:17:48.400 --> 00:17:55.400
Когда мы создаем CIDR блок неважно большой
или маленький, для VPC либо для subnet-а в облаке

00:17:55.400 --> 00:18:05.400
AWS резервирует 5 IP-адресов
для системного использования.

00:18:05.400 --> 00:18:11.428
Вы можете видеть,
что самый первый IP-адрес в

00:18:11.440 --> 00:18:18.400
range CIDR блока
зарезервирован под network address.

00:18:18.400 --> 00:18:25.400
Дальше, второй – для internal communication.
Третий – для DNS resolution.

00:18:25.400 --> 00:18:34.400
Четвертый – для будущего использования,
и последний – как network broadcast address.

00:18:34.400 --> 00:18:46.400
Таким образом, для CIDR блока, у которого
размерность – /24, т.е. 256 уникальных адресов,

00:18:46.400 --> 00:18:55.400
фактически для вашего использования доступны
минус 5. Это значит 251 IP-адресов.

00:18:55.400 --> 00:19:01.400
Давайте здесь сделаем очередную
активность и вопрос следующий.

00:19:01.400 --> 00:19:13.400
Представьте у вас следующий CIDR блок:
10.0.0.0/28. Вопрос.

00:19:13.400 --> 00:19:20.400
Какое количество IP-адресов внутри этого
CIDR блока доступно для вашего использования?

00:19:20.400 --> 00:19:36.400
Хорошо, я думаю, все вы справились.
Давайте попробуем вместе посчитать.

00:19:36.400 --> 00:19:42.400
CIDR блок с размером /28
говорит о том, что 28 битов

00:19:42.400 --> 00:19:48.400
в 32-битном IPv4 CIDR
блоке зафиксированы.

00:19:48.400 --> 00:19:57.400
Значит, количество битов, которое может
меняться, это 32 минус 28 равно 4.

00:19:57.400 --> 00:20:03.400
Какое количество IP-адресов для 4 битов
мы можем посчитать следующим образом.

00:20:03.400 --> 00:20:17.400
Для этого мы считаем 2 в степени, число,
которое вышло, в нашем случае 4: 2 в степени 4 = 16.

00:20:17.400 --> 00:20:23.400
Как только что мы сказали, 5 адресов AWS
резервирует для системного использования.

00:20:23.400 --> 00:20:34.400
Таким образом, 16 минус 5 равняется 11. И 
ответ: для CIDR блока с размером /28 у нас не 16,

00:20:34.400 --> 00:20:42.400
а 11 уникальных IP-адресов,
которые доступны для нашего пользования.

00:20:42.400 --> 00:20:47.400
Когда мы говорим про публичные
IP-адреса, выделяют два вида.

00:20:47.400 --> 00:20:58.400
Первый – это публичный IPv4-адрес и
Elastic IP адрес. Чем они отличаются?

00:20:58.400 --> 00:21:04.400
Когда мы создаем VPC внутри облака AWS,
 то все инстансы внутри этого VPC

00:21:04.400 --> 00:21:09.400
автоматически получают внутренний IP-адрес,
 который называется Private IP address.

00:21:09.400 --> 00:21:14.400
Но параллельно с этим вы можете
поставить галочку в пункте

00:21:14.400 --> 00:21:19.400
Auto assign public IP address
 во время создания VPC.

00:21:19.400 --> 00:21:24.400
Таким образом, помимо Private IP address,
все инстансы будут получать

00:21:24.400 --> 00:21:31.400
Public IPv4 address, который является
 динамическим Public IP address.

00:21:31.400 --> 00:21:38.400
Если же вам необходим статический
публичный IP-адрес, в этом случае вы можете

00:21:38.400 --> 00:21:43.400
воспользоваться функционалом Elastic IP address,
который эту возможность предоставляет.

00:21:43.400 --> 00:21:51.400
Вы этот IP-адрес можете привязать к ресурсу,
а именно к инстансу либо к интерфейсу внутри

00:21:51.400 --> 00:21:59.400
вашего VPC. Следует помнить, что услуга
Elastic IP address также является платной.

00:21:59.400 --> 00:22:05.400
Таким образом, следует взять
за правило все Elastic IP address,

00:22:05.400 --> 00:22:13.400
которые не привязаны к ресурсам,
высвобождать для того, чтобы не платить впустую.

00:22:16.400 --> 00:22:21.400
Пару слов хотелось бы сказать касательно
Elastic Network Interface.

00:22:21.400 --> 00:22:29.400
Это отдельный ресурс, который вы можете
привязать к инстансу внутри вашего VPC,

00:22:29.400 --> 00:22:32.400
который может обслуживать
некоторый IPv4-адрес.

00:22:32.400 --> 00:22:37.400
Помимо Elastic Network Interface,
у каждого инстанса внутри VPC

00:22:37.400 --> 00:22:40.400
есть так называемый
Default Network Interface.

00:22:40.400 --> 00:22:46.400
К этому Default Network Interface
привязывается Private IPv4-адрес,

00:22:46.400 --> 00:22:50.400
который выбирается из
CIDR-блока вашего VPC.

00:22:53.400 --> 00:23:01.400
К инстансу вы можете привязывать
определенное количество Network Interface-ов,

00:23:01.400 --> 00:23:06.400
и это количество зависит от типа инстанса,
чем она выше, тем она больше,

00:23:06.400 --> 00:23:13.400
тем большее количество Network Interface
вы можете подключить к конкретному инстансу.

00:23:14.400 --> 00:23:18.400
Давайте подробнее поговорим,
что такое Route Table.

00:23:18.400 --> 00:23:26.400
Route Table – это некая таблица, которая
состоит из набора правил, rules или routes.

00:23:26.400 --> 00:23:32.400
Каждое правило идентифицируется
местом отправки и местом назначения,

00:23:32.400 --> 00:23:38.400
или английскими терминами
destination and target.

00:23:40.400 --> 00:23:45.400
Как destination у нас выступает некоторый
CIDR-блок, он может описывать наш subnet,

00:23:45.400 --> 00:23:50.400
а как target указывается
уже некий ресурс.

00:23:50.400 --> 00:23:58.400
В любом Route Table есть первый,
самый основной rule.

00:23:58.400 --> 00:24:04.400
Это rule, который со всех наших
subnets как target указывает local.

00:24:04.400 --> 00:24:11.400
Это нужно для того, чтобы все инстансы между
нашими subnet могли между собой взаимодействовать.

00:24:11.400 --> 00:24:21.400
У VPC есть Route Table по умолчанию,
который называется Main Route Table.

00:24:21.400 --> 00:24:26.400
Он автоматически создается и
 привязывается к нашему VPC.

00:24:27.400 --> 00:24:32.400
Важный момент – это то, что каждый subnet 
должен быть ассоциирован, т.е. привязан

00:24:32.400 --> 00:24:40.400
к одному из Route Table, но у каждого Route 
Table может быть несколько subnet.

00:24:40.400 --> 00:24:46.400
Более того, у каждого VPC может быть
не один, а несколько Route Table.

00:24:46.400 --> 00:24:53.400
Таким образом вы гибко можете настроить
все ваши Routes между вашими subnet.

00:24:55.400 --> 00:25:01.400
Мы завершаем вторую секцию. Давайте пройдемся по
основным моментам, которые необходимо запомнить.

00:25:01.400 --> 00:25:07.400
VPC – это логически изолированная
 часть облака AWS,

00:25:07.400 --> 00:25:11.400
в которой мы можем создавать
необходимые для нас ресурсы.

00:25:11.400 --> 00:25:16.400
VPC относится только к одному аккаунту
 и к одному определенному региону.

00:25:16.400 --> 00:25:23.400
Но VPC может находиться в нескольких
availability зонах в рамках одного региона.

00:25:24.400 --> 00:25:28.400
VPC идентифицируется одним
 определенным CIDR блоком.

00:25:28.400 --> 00:25:32.400
Что такое CIDR блок мы проговорили
 в предыдущей секции.

00:25:32.400 --> 00:25:38.400
Каждый VPC может быть поделен на
логические группы, которые называются subnet.

00:25:38.400 --> 00:25:45.400
Каждый subnet также идентифицируется CIDR
блоком, который должен входить в CIDR блок VPC.

00:25:46.400 --> 00:25:50.400
Также у нас есть такое
понятие как Route Table.

00:25:50.400 --> 00:25:57.400
Это некий ресурс, который контролирует
трафик между нашими subnet внутри нашего VPC.

00:25:57.400 --> 00:26:04.400
Внутри каждого Route Table
 есть встроенный путь Local Route,

00:26:04.400 --> 00:26:10.400
который нельзя удалить и который помогает нам
предоставить возможность всем

00:26:12.400 --> 00:26:19.400
инстансам внутри разных subnet-ов
общаться между собой в рамках одного VPC.

00:26:20.400 --> 00:26:25.400
Вы можете добавлять дополнительные routes,
rules, или правила в ваши

00:26:25.400 --> 00:26:34.400
Route Table для того, чтобы гибко настроить
сетевые потоки внутри вашего VPC.

00:26:36.400 --> 00:26:38.400
Мы с вами добрались до третьей секции.

00:26:38.400 --> 00:26:46.400
В третьей секции мы поговорим про особенности
настройки роутинга, трафика внутри VPC.

00:26:48.400 --> 00:26:52.400
Одним из важных компонентов VPC
является Internet gateway.

00:26:52.400 --> 00:26:59.400
Он используется для того, чтобы связать
интернет с вашими инстансами внутри вашего VPC.

00:27:01.400 --> 00:27:06.400
Для того, чтобы ваш public subnet сделать
 публичным, т.е. доступным из интернета,

00:27:06.400 --> 00:27:14.400
нам необходимо добавить Internet gateway, а 
также добавить один route в нашем Route Table,

00:27:14.400 --> 00:27:22.400
в котором как destination выступает
интернет, т.е. это 0.0.0.0/0,

00:27:22.400 --> 00:27:29.400
как target выступает наш Internet gateway.
Другой частый случай

00:27:29.400 --> 00:27:35.400
это когда для инстансов внутри
private subnet необходимо выходить в интернет.

00:27:35.400 --> 00:27:38.888
При этом мы должны
запретить доступ с интернета

00:27:38.900 --> 00:27:42.400
добираться до инстансов
внутри private subnet.

00:27:42.400 --> 00:27:48.400
Для этих целей используется так называемый
 Network Address Translation Gateway.

00:27:48.400 --> 00:27:51.400
Чаще вы его будете встречать как
NAT Gateway. Для того, чтобы

00:27:51.400 --> 00:27:59.400
правильно настроить gateway, вам в первую
очередь необходимо настроить public subnet.

00:27:59.400 --> 00:28:05.400
Как настроить public subnet мы с вами знаем.
Повторюсь еще раз.

00:28:05.400 --> 00:28:09.400
Представим, у вас есть Route Table
специально для вашего public subnet,

00:28:09.400 --> 00:28:12.807
и в нем как destination вы
указываете весь интернет,

00:28:12.819 --> 00:28:15.400
как target указываете
Internet gateway.

00:28:15.400 --> 00:28:19.513
Таким образом ваш
subnet становится public.

00:28:19.525 --> 00:28:24.400
Далее внутри public subnet
мы создаем NAT gateway.

00:28:24.400 --> 00:28:35.400
Теперь нам необходимо в Route Table
для private subnet добавить Route с интернета,

00:28:35.400 --> 00:28:42.400
т.е. destination является интернет,
а target является NAT gateway.

00:28:42.400 --> 00:28:46.936
После этого все инстансы
внутри private subnet

00:28:46.948 --> 00:28:51.400
смогут выходить в
интернет через NAT gateway.

00:28:51.400 --> 00:28:55.512
При этом NAT gateway
обратно впускать уже запросы

00:28:55.524 --> 00:28:59.400
из интернета в private
subnet давать не будет.

00:28:59.400 --> 00:29:05.400
Помимо NAT gateway есть еще
вариант настроить NAT instance,

00:29:05.400 --> 00:29:12.400
т.е. поднимается отдельный EC2 инстанс и
на нем настраивается NAT gateway.

00:29:12.400 --> 00:29:16.419
Отличие в том,
что если инстанс сломается,

00:29:16.431 --> 00:29:21.400
с ним что-то произойдет,
то интернет у вас пропадет.

00:29:21.400 --> 00:29:29.400
Его нужно будет заменить. В случае, когда мы
говорим про NAT gateway, это managed service

00:29:29.400 --> 00:29:40.400
от Amazon, поэтому все возможные поломки,
недоступность обеспечивается со стороны Amazon

00:29:40.400 --> 00:29:47.400
и в случае каких-то поломок прозрачно для
вас заменяется на новый рабочий ресурс.

00:29:47.400 --> 00:29:53.172
Таким образом,
есть рекомендация как best practice

00:29:53.184 --> 00:29:58.400
использовать NAT gateway
вместо NAT instance.

00:29:58.400 --> 00:30:01.850
Одним интересным подходом,
который вы можете

00:30:01.862 --> 00:30:05.400
реализовать внутри AWS,
является VPC sharing.

00:30:05.400 --> 00:30:14.400
Идея ее в том, что вы можете свои subnets в
рамках вашего VPC расшарить для VPC из другого

00:30:14.400 --> 00:30:25.400
аккаунта, но этот аккаунт должен быть внутри
общего AWS Organizations. Есть несколько нюансов.

00:30:25.400 --> 00:30:32.400
Это то, что вы можете видеть, а также изменять
все те ресурсы внутри этого shared subnet,

00:30:32.400 --> 00:30:40.400
но при этом вы не видите и не можете изменять
ресурсы других аккаунтов, которые находятся

00:30:40.400 --> 00:30:46.400
в этом subnet. То же самое касается всех
участников, которые совместно работают внутри

00:30:46.400 --> 00:30:56.400
этого shared subnet. Этот подход очень удачно
будет применен для тех IT-инфраструктур,

00:30:56.400 --> 00:31:01.400
у которых приложения внутри этой
IT-инфраструктуры сильно взаимосвязаны.

00:31:01.400 --> 00:31:04.853
Таким образом, помимо того,
что упрощается связь

00:31:04.865 --> 00:31:08.400
между приложениями,
вы также можете сэкономить на

00:31:08.400 --> 00:31:15.400
некоторых общих ресурсах, таких как
NAT Gateway, VPC Interface Endpoints и так далее.

00:31:15.400 --> 00:31:18.853
Еще одним интересным подходом,
который вы можете

00:31:18.865 --> 00:31:22.400
воспользоваться внутри AWS,
является VPC peering.

00:31:22.400 --> 00:31:29.400
Это та возможность, которая позволяет
вам соединять между собой разные VPC.

00:31:29.400 --> 00:31:36.400
Эти VPC могут находиться как в одном аккаунте,
так и в нескольких разных аккаунтах.

00:31:36.400 --> 00:31:42.090
Для того, чтобы произвести соединение, т.е.
peering connection между

00:31:42.114 --> 00:31:48.400
двумя VPC, нам необходимо, во-первых,
создать peering connection ресурс,

00:31:48.400 --> 00:31:54.210
как вы видите по центру pcx-id,
также внести для

00:31:54.222 --> 00:32:00.400
каждого VPC route-ы в
соответствующих route tables.

00:32:00.400 --> 00:32:06.671
Если говорить более подробно,
то в route table-е VPC A нам

00:32:06.695 --> 00:32:14.400
необходимо добавить route,
где destination является CIDR блок VPC B,

00:32:14.400 --> 00:32:22.400
а как target указать наш peering connection 
ресурс, т.е. через него доходим до нашего VPC B.

00:32:22.400 --> 00:32:27.130
А в route table VPC B
сделать обратный route,

00:32:27.142 --> 00:32:32.400
когда как destination
указывается CIDR блок VPC A,

00:32:32.400 --> 00:32:38.010
а target является peering connection 
ресурс. Когда мы

00:32:38.034 --> 00:32:44.400
говорим про VPC peering,
у нас есть несколько ограничений.

00:32:44.400 --> 00:32:52.400
Самое первое и самое важное, это то, что 
IP-адреса, т.е. CIDR-блоки не могут пересекаться.

00:32:52.400 --> 00:32:56.400
Если они пересекаются,
то peering connection настроить вы не сможете.

00:32:56.400 --> 00:33:06.400
Это как раз то, что я вам говорил на предыдущих
слайдах, и вам всегда нужно иметь в виду,

00:33:06.400 --> 00:33:12.436
даже если VPC не планируется соединять 
между собой, то на всякий

00:33:12.460 --> 00:33:18.400
случай должен быть центральный
список со всеми CIDR блоками,

00:33:18.400 --> 00:33:26.400
для того чтобы создавать их такими,
чтобы не было пересечений.

00:33:26.400 --> 00:33:31.400
Другой момент, это то,
что VPC peering он нетранзитивный.

00:33:31.400 --> 00:33:36.282
Это говорит о том,
что если мы настроим связь

00:33:36.294 --> 00:33:41.400
между VPC A и VPC B,
далее между VPC B и VPC C,

00:33:41.400 --> 00:33:46.400
то связь между VPC A 
и VPC C не появится.

00:33:46.400 --> 00:33:58.400
Если вам нужно VPC A также соединить с VPC C,
то необходимо настроить отдельный

00:33:58.400 --> 00:34:05.443
peering connection. И другим моментом,
который также важно помнить, это то, что между

00:34:05.467 --> 00:34:12.400
двумя VPC вы можете настроить
только один peering connection.

00:34:12.400 --> 00:34:18.400
Все это время мы говорили с вами,
как соединять сети внутри облака.

00:34:18.400 --> 00:34:23.388
Если же нам необходимо подключиться
к облаку с нашего локального

00:34:23.412 --> 00:34:28.400
офиса, либо с локального дата-центра,
такая возможность тоже есть.

00:34:28.400 --> 00:34:36.400
Для этого существует сервис AWS Site-to-Site VPN,
который позволяет нам это все настроить.

00:34:36.400 --> 00:34:41.425
Давайте пройдемся по самым основным 
моментам, что необходимо сделать,

00:34:41.449 --> 00:34:46.400
чтобы предоставить доступ с
локального офиса на ваш VPC в облаке.

00:34:46.400 --> 00:34:54.400
Самым первым нам необходимо создать Virtual 
Private Network Gateway или Virtual Gateway.

00:34:54.400 --> 00:34:59.400
Вы видите по центру экрана Virtual Gateway ID.
Он привязывается к нашему VPC.

00:34:59.400 --> 00:35:05.400
Следующее, нам необходимо сконфигурировать
так называемый Customer Gateway.

00:35:05.400 --> 00:35:12.010
Customer Gateway не является неким ресурсом.
Это является AWS ресурсом,

00:35:12.034 --> 00:35:19.400
который предоставляет информацию AWS
о вашем VPN-девайсе, т.е. оборудовании.

00:35:19.400 --> 00:35:26.073
Третье - нам необходимо настроить, например,
для Private Subnet, route table,

00:35:26.097 --> 00:35:30.213
добавить route, где destination 
является наш локальный офис,

00:35:30.225 --> 00:35:39.400
т.е. CIDR блок нашего локального офиса, а target 
является vgw-id, т.е. это Virtual Gateway ID.

00:35:39.400 --> 00:35:44.656
После этого нам необходимо
воспользоваться сервисом

00:35:44.680 --> 00:35:51.400
 AWS Site-to-Site VPN для того,
чтобы соединить между собой две системы.

00:35:51.400 --> 00:35:56.388
Это основные моменты,
которые необходимо проделать для того, чтобы

00:35:56.412 --> 00:36:01.400
локальную инфраструктуру соединить
с инфраструктурой в облаке AWS.

00:36:01.400 --> 00:36:07.428
Следующий похожий сервис, который позволяет 
нам соединить нашу инфраструктуру

00:36:07.452 --> 00:36:13.400
в облаке с локальной инфраструктурой,
является сервис AWS Direct Connect.

00:36:13.400 --> 00:36:19.346
Отличие ее в том, что в случае с 
предыдущим сервисом

00:36:19.370 --> 00:36:26.400
AWS Site-to-Site VPN мы настраиваем
VPN-подключение через интернет.

00:36:26.400 --> 00:36:32.388
Таким образом, связь у нас есть,
но скорость передачи данных

00:36:32.412 --> 00:36:38.400
и канал сети определяется
размером канала вашего интернета.

00:36:38.400 --> 00:36:42.977
Если у вас слабое интернет-подключение,
это говорит о том, что у вас

00:36:43.001 --> 00:36:48.400
подключение к облаку через сервис AWS
Site-to-Site VPN будет также небольшим.

00:36:48.400 --> 00:36:56.388
В случае, если вам необходимо передавать
большой объем данных, либо передавать это все

00:36:56.412 --> 00:37:04.400
быстрее, то есть вариант в обход интернета
подключиться к так называемым DX-locations.

00:37:04.400 --> 00:37:12.400
Проще говоря, это глобальная инфраструктура AWS,
и мы напрямую подключаемся к ней.

00:37:12.400 --> 00:37:17.555
В этом случае нет необходимости 
выходить в интернет, а напрямую

00:37:17.579 --> 00:37:23.400
подключать нашу локальную
инфраструктуру с инфраструктурой в облаке.

00:37:23.400 --> 00:37:32.400
Часто бывает такое, что вам необходимо 
вызвать некий AWS сервис из VPC,

00:37:32.400 --> 00:37:38.888
т.е. не все сервисы AWS могут работать 
внутри VPC, но тем не менее

00:37:38.912 --> 00:37:45.400
есть решение, которое позволяет нам,
не покидая внутренней сети AWS,

00:37:45.400 --> 00:37:52.400
не выходя в интернет, добираться от VPC 
до необходимого нам AWS сервиса.

00:37:52.400 --> 00:37:58.138
Это так называемые VPC Endpoints,
выделяют два вида, это Interface VPC

00:37:58.162 --> 00:38:04.400
Endpoint, либо Interface Endpoint,
который поддерживает AWS Private Link.

00:38:04.400 --> 00:38:08.400
Другой вариант - это Gateway Endpoint.

00:38:08.400 --> 00:38:13.481
В зависимости от того, какой сервис вам нужен,
вы можете посмотреть в документации,

00:38:13.505 --> 00:38:18.400
какой из вариантов Endpoint поддерживается
и его соответственно использовать.

00:38:18.400 --> 00:38:24.388
Давайте посмотрим на примере сервиса 
Amazon S3, что необходимо настроить

00:38:24.412 --> 00:38:30.400
для того, чтобы из VPC иметь
возможность работать с сервисом Amazon S3.

00:38:30.400 --> 00:38:36.388
Для этого нам необходимо создать 
ресурс VPC Endpoint, а также

00:38:36.412 --> 00:38:42.400
в route table для нашего Subnet
прописать дополнительный route,

00:38:42.400 --> 00:38:50.400
где destination является Amazon S3 ID,
а target является наш VPC Endpoint ресурс.

00:38:50.400 --> 00:38:58.684
Чуть ранее мы с вами говорили про VPC Peering,
это когда нам необходимо два отдельных

00:38:58.708 --> 00:39:06.400
VPC, даже если они находятся на разных 
AWS аккаунтах, соединить между собой.

00:39:06.400 --> 00:39:12.388
Одним из ограничений этого подхода было то,
что нет транзитивности,

00:39:12.412 --> 00:39:18.400
т.е. вы первый VPC соединяете со вторым,
второй соединяете с третьим,

00:39:18.400 --> 00:39:22.400
и это не говорит о том,
что появляется связь от первого до третьего.

00:39:22.400 --> 00:39:27.050
Если вам необходимо было первое
VPC соединить с третьим, то необходимо

00:39:27.074 --> 00:39:32.400
настраивать отдельный VPC Peering
Connection для того, чтобы связь появилась.

00:39:32.400 --> 00:39:39.381
Теперь представьте такую ситуацию,
что у вас слева на слайде несколько

00:39:39.405 --> 00:39:47.400
разных VPC, а также есть VPN соединения,
и все они между собой взаимосвязаны.

00:39:47.400 --> 00:39:52.745
Для того, чтобы все VPC связать между собой,
опять же это зависит от вашей

00:39:52.757 --> 00:39:58.400
бизнес-потребности, то вам необходимо
создать вот такое количество VPC Peering.

00:39:58.400 --> 00:40:07.436
Поддерживать это может быть очень неудобно,
и создается буквально

00:40:07.448 --> 00:40:15.400
большое количество VPC Peering
с каждым последующим разом.

00:40:15.400 --> 00:40:21.031
Для того, чтобы решить подобную 
проблему в существующих

00:40:21.043 --> 00:40:28.400
IT-инфраструктурах, предлагается 
использовать сервис AWS Transit Gateway.

00:40:28.400 --> 00:40:33.303
Идея ее в том, что она работает 
по принципу Hub and Spoke Model,

00:40:33.315 --> 00:40:38.400
т.е. AWS Transit Gateway 
выступает центральным хабом,

00:40:38.400 --> 00:40:43.249
и все VPC, которые соединяются к
этому Transit Gateway, автоматически

00:40:43.261 --> 00:40:48.400
получают доступ ко всем VPC,
которые уже подключены к AWS Transit Gateway.

00:40:48.400 --> 00:40:55.800
Таким образом, вы видите с правой стороны,
как можно упростить

00:40:55.812 --> 00:41:02.400
вид вашей инфраструктуры,
используя AWS Transit Gateway.

00:41:02.400 --> 00:41:11.400
Мы с вами добрались до конца третьей секции.
Давайте вкратце пройдемся по тому, что мы прошли.

00:41:11.400 --> 00:41:17.267
Первый VPC компонент – это Internet Gateway,
который помогает

00:41:17.279 --> 00:41:22.400
соединить интернет с нашими
ресурсами в Public Subnet.

00:41:22.400 --> 00:41:27.191
Далее, есть компонент NAT Gateway 
либо NAT Instance, который

00:41:27.203 --> 00:41:32.400
позволяет уже инстансам из Private
Subnet добираться до интернета,

00:41:32.400 --> 00:41:40.400
при этом запрещать доступ из интернета,
подключаться до инстансов внутри Private Subnet.

00:41:40.400 --> 00:41:47.235
Далее мы поговорили про VPC Endpoint.
Идея в том, что не все сервисы

00:41:47.247 --> 00:41:53.400
бывают внутри VPC,
и в зависимости от ваших бизнес требований,

00:41:53.400 --> 00:42:02.400
если вам нужно использовать этот AWS сервис, есть
возможность, не выходя в интернет, внутри сети AWS,

00:42:02.400 --> 00:42:11.400
локально, подключиться от этого сервиса к вашему
VPC, для того чтобы это было безопасно, быстрее,

00:42:11.400 --> 00:42:16.400
и в целом вы получили доступ из
VPC к необходимому вам сервису.

00:42:16.400 --> 00:42:22.400
Следующее – это VPC Peering. Это когда вам
необходимо попарно соединить между собой ваши VPC.

00:42:22.400 --> 00:42:27.400
При этом VPC могут находиться
 в разных AWS аккаунтах.

00:42:27.400 --> 00:42:34.765
Следующее – это VPC Sharing.
Идея в том, что вы можете ваши

00:42:34.777 --> 00:42:42.400
subnets расшарить с другими VPC,
с VPC с других AWS аккаунтов.

00:42:42.400 --> 00:42:50.400
Основной момент, который надо учитывать, это
чтобы все аккаунты были в одном AWS Оrganizations.

00:42:50.400 --> 00:42:56.843
Далее мы поговорили с вами про
 AWS Site-to-Site VPN. Идея в том, что вы

00:42:56.855 --> 00:43:03.400
можете вашу облачную инфраструктуру
соединить с локальной инфраструктурой

00:43:03.400 --> 00:43:08.400
через интернет, подключив специальное 
подключение VPN-подключение.

00:43:08.400 --> 00:43:14.400
Есть и плюсы и минусы такого подхода.
Другой вариант – это AWS Direct Connect.

00:43:14.400 --> 00:43:21.400
Идея в том, что вы подключаетесь к облаку не
через интернет, а к глобальной инфраструктуре AWS.

00:43:21.400 --> 00:43:30.400
Таким образом выходить в интернет не
нужно и при этом вы получаете больше канал.

00:43:30.400 --> 00:43:36.682
И этот вариант лучше,
если вам необходимо передавать большой

00:43:36.694 --> 00:43:43.400
объем информации с вашего
локального офиса в облако либо обратно.

00:43:43.400 --> 00:43:50.039
И последнее то, что мы поговорили – это 
AWS Transit Gateway. Идея

00:43:50.051 --> 00:43:56.400
в том, что если ваши VPC должны
быть тесно связаны между собой,

00:43:56.400 --> 00:44:01.847
и когда вы используете VPC peering,
то создаете большое количество

00:44:01.859 --> 00:44:07.400
этих VPC peering-ов, то как решением 
может быть AWS Transit Gateway,

00:44:07.400 --> 00:44:15.400
когда у вас есть центральный ресурс Transit 
Gateway, к которому подключаются все ваши VPC.

00:44:15.400 --> 00:44:19.388
Таким образом все подключенные
VPC получают доступ ко всем

00:44:19.400 --> 00:44:23.400
другим VPC, которые уже подключены 
к этому Transit Gateway.

00:44:23.400 --> 00:44:32.400
Мы добрались до четвертой секции.
И в этой секции мы поговорим про безопасность VPC.

00:44:32.400 --> 00:44:36.651
Давайте начнем.
Начнем мы с Security Groups.

00:44:36.663 --> 00:44:41.400
Security Groups – это некий виртуальный
firewall для ваших инстансов,

00:44:41.400 --> 00:44:45.782
который позволяет контролировать
входящий и исходящий трафик.

00:44:45.794 --> 00:44:50.400
Важно запомнить, что Security Groups 
работают на уровне инстанса.

00:44:50.400 --> 00:44:56.198
Таким образом вы можете в
рамках одного subnet-а для каждого

00:44:56.210 --> 00:45:02.400
инстанса внутри него настроить
специальный набор Security Groups.

00:45:02.400 --> 00:45:07.388
Когда мы говорим про Security Groups,
следует понимать это как

00:45:07.400 --> 00:45:12.400
набор правил, которые контролируют
 входящий и исходящий трафик.

00:45:12.400 --> 00:45:16.888
В только что созданной
Security Group у вас будет

00:45:16.900 --> 00:45:21.400
отсутствовать Inbound Rules, т.е.
входящий трафик.

00:45:21.400 --> 00:45:26.248
Таким образом сторонний
хост не сможет обратиться и

00:45:26.260 --> 00:45:31.400
добраться до инстанса с
новой созданной Security Group.

00:45:31.400 --> 00:45:35.888
Если мы говорим про Outbound Rules, т.е.
исходящий трафик,

00:45:35.900 --> 00:45:40.400
то по умолчанию он полностью
разрешен и ничем не ограничен.

00:45:40.400 --> 00:45:45.512
Если вам необходимо ограничить 
исходящий трафик, то вы можете

00:45:45.524 --> 00:45:50.400
удалить Rule, т.е. правило, 
которое создается по умолчанию,

00:45:50.400 --> 00:45:58.400
и задать свои правила,
которые в каком-то объеме ограничены.

00:45:58.400 --> 00:46:03.400
Здесь также следует отметить,
что Security Groups являются Stateful,

00:46:03.400 --> 00:46:11.045
т.е. это означает, что когда вы с 
вашего инстанса делаете запрос к

00:46:11.057 --> 00:46:19.400
другому ресурсу, если у вас есть
 Outbound traffic, то запрос разрешается.

00:46:19.400 --> 00:46:24.932
Далее, когда вы получаете ответ 
на ваш запрос, вне зависимости

00:46:24.944 --> 00:46:34.400
от того, Inbound Rule разрешен или запрещен,
вы его получаете, т.е. запоминается состояние.

00:46:34.400 --> 00:46:42.567
Обратное тоже верно, т.е. если разрешен
Inbound Rule от внешнего ресурса, то запоминается

00:46:42.579 --> 00:46:48.400
состояние, что он пришел со стороны,
так как он уже был разрешен.

00:46:48.400 --> 00:46:53.850
Мы запоминаем это состояние,
и уже вне зависимости от того, разрешен ли

00:46:53.862 --> 00:46:59.400
исходящий трафик, он разрешается в
любом случае и передает ответ обратно.

00:46:59.400 --> 00:47:04.400
Давайте рассмотрим пример Security Groups.

00:47:04.400 --> 00:47:10.400
Вы здесь видите, есть настроенные
rules для исходящего и входящего трафика.

00:47:10.400 --> 00:47:17.559
Если посмотреть на исходящие rules,
то мы видим, что разрешены

00:47:17.571 --> 00:47:24.400
порты 80 и 443, т.е. HTTP и HTTPS 
доступ со всего интернета,

00:47:24.400 --> 00:47:30.400
т.е. любой IPv4 адрес с интернета
может подключаться к нашему инстансу.

00:47:30.400 --> 00:47:39.400
Другое, третье, это то, что как 
source указан CIDR блок нашей сети,

00:47:39.400 --> 00:47:44.845
таким образом мы с локальной сети 
по порту 22, т.е. SSH, можем

00:47:44.857 --> 00:47:50.400
подключаться к инстансу,
к которой привязана эта Security Group.

00:47:50.400 --> 00:47:59.768
Если мы говорим про исходящий трафик,
то мы можем как destination указать

00:47:59.780 --> 00:48:08.400
Security Group ID наших баз данных
и выдать разрешение на порт 1433.

00:48:08.400 --> 00:48:19.400
Таким образом, инстанс этой Security Group
может подключаться к базам данных по порту 1433.

00:48:19.400 --> 00:48:27.400
Это порт по умолчанию для
Microsoft SQL Server баз данных.

00:48:27.400 --> 00:48:31.240
Следующим компонентом,который позволяет
 обеспечить безопасность VPC,

00:48:31.252 --> 00:48:39.400
является Network Access Control Lists. 
Чаще вы его будете встречать как Network ACLs.

00:48:39.400 --> 00:48:48.400
Network ACLs выступает как firewall и контролирует
входящий и исходящий трафик на уровне subnet-ов.

00:48:48.400 --> 00:48:57.400
Оно является опциональным, поэтому 
использовать или нет это на ваше усмотрение.

00:48:57.400 --> 00:49:02.084
Amazon со своей стороны
рекомендует ее использовать и

00:49:02.096 --> 00:49:07.400
продублировать входящие и
исходящие rules для всех ваших VPC.

00:49:07.400 --> 00:49:16.400
Когда мы говорим про Network ACL, каждый
subnet должен быть привязан к одному из Network ACL.

00:49:16.400 --> 00:49:26.400
Если вы явно не указываете связь, то subnets 
привязываются к дефолтовому Network ACLs.

00:49:26.400 --> 00:49:33.400
Здесь важный момент, это то, что каждый subnet
может быть соединен только с одним Network ACL.

00:49:33.400 --> 00:49:39.400
Тогда как несколько subnet могут
быть соединены с одним Network ACL.

00:49:39.400 --> 00:49:49.400
Когда вы один subnet перепривязываете к другому
Network ACL, то предыдущая привязка удаляется.

00:49:54.400 --> 00:50:02.400
Network ACL выглядит следующим образом.
Это пример Network ACL, созданного по умолчанию.

00:50:02.400 --> 00:50:08.400
По умолчанию разрешается весь
входящий и исходящий IPv4 traffic.

00:50:08.400 --> 00:50:13.400
Если это применимо,
то IPv6 traffic также разрешается.

00:50:13.400 --> 00:50:20.400
Здесь следует отметить, что Network ACL
является stateless, т.е. не сохраняется состояние.

00:50:20.400 --> 00:50:26.131
Таким образом, когда вы делаете,
представим, исходящий запрос на некий

00:50:26.143 --> 00:50:31.400
ресурс, если у вас разрешен 
outbound traffic, то запрос проходит.

00:50:31.400 --> 00:50:39.173
Далее, так как Network ACL является stateless,
то при возвращении ответа он также

00:50:39.185 --> 00:50:46.400
проверяет, если через inbound traffic он 
разрешен, тогда вы получаете ответ.

00:50:46.400 --> 00:50:52.266
Если же в inbound traffic прописано,
что он не пропускает этот входящий

00:50:52.278 --> 00:50:58.400
трафик, то вы не получите ответа,
даже если он дойдет до вашего получателя.

00:50:58.400 --> 00:51:03.970
Обратное тоже верно, т.е.
для того, чтобы внешний ресурс получил от

00:51:03.982 --> 00:51:09.400
вас ответ, то должны быть разрешены 
и outbound, и inbound traffic.

00:51:09.400 --> 00:51:17.992
Иначе вы получите запрос от ресурса,
но ответить этому ресурсу уже не сможете, так

00:51:18.004 --> 00:51:26.400
как не пропустит Network ACL и нет
соответствующего rule внутри outbound traffic.

00:51:26.400 --> 00:51:32.400
Здесь вы можете видеть пример
уже заполненного Network ACLs.

00:51:32.400 --> 00:51:39.400
Когда мы создаем кастомный Network ACLs,
то весь трафик входящий и исходящий, он запрещен.

00:51:39.400 --> 00:51:43.318
Поэтому по необходимости вам
 нужно добавить rules, т.е. правила,

00:51:43.330 --> 00:51:52.499
которые разрешают входящий либо исходящий трафик.
Здесь вы можете видеть, что входящий трафик и

00:51:52.511 --> 00:51:58.400
исходящий трафик разрешен
для HTTPS и SSH соединения.

00:51:58.400 --> 00:52:05.400
При этом по HTTPS может подключаться
любой IPv4 адрес, т.е. с интернета есть доступ,

00:52:05.400 --> 00:52:16.400
а с SSH могут подключаться только
IP-адреса с CIDR блоком 192.0.2.0/24,

00:52:16.400 --> 00:52:29.711
т.е. здесь вы можете указывать вашу локальную сеть.
Возможно, сейчас вам немного непонятно, чем же

00:52:29.723 --> 00:52:33.400
все-таки отличается Security
groups от Network ACLs,

00:52:33.400 --> 00:52:39.400
поэтому давайте сравним в табличном виде,
чем же они все-таки отличаются.

00:52:39.400 --> 00:52:44.400
Когда мы говорим про Security groups,
то Security groups работают на уровне инстанса,

00:52:44.400 --> 00:52:49.400
тогда как Network ACLs работа.т на уровне 
Subnet, т.е. привязывается к Subnet.

00:52:49.400 --> 00:52:53.705
Когда мы говорим про правила,
Security groups поддерживают

00:52:53.717 --> 00:52:58.400
только правила, которые что-то 
разрешают, т.е. разрешают трафик.

00:52:58.400 --> 00:53:03.400
Когда мы говорим про Network ACLs, там присутствует
не только правила, которые что-то разрешают,

00:53:03.400 --> 00:53:10.344
а также можно настроить правила, которые запрещают
трафик. Когда мы говорим про Security groups,

00:53:10.356 --> 00:53:20.617
то оно является Stateful, т.е. запоминает состояние.
И это значит, что трафик, который смог войти,

00:53:20.629 --> 00:53:29.400
он обязательно выйдет, несмотря на 
Outbound rules. И обратное тоже верно.

00:53:29.400 --> 00:53:33.447
Если у вас есть Outbound traffic,
который прошел, то вне зависимости

00:53:33.459 --> 00:53:37.400
от того, какие Inbound rules у вас прописаны,
оно вернется обратно.

00:53:37.400 --> 00:53:43.400
Когда мы говорим про Network ACLs, она является 
Stateless, т.е. она не запоминает состояние.

00:53:43.400 --> 00:53:51.229
И когда для того, чтобы запрос прошел успешно
через Network ACLs, оно должно быть разрешено

00:53:51.241 --> 00:53:58.400
как в Inbound rules, так и в Outbound rules,
иначе в какой-то момент она не пройдет.

00:53:58.400 --> 00:54:03.622
Четвертый момент,
который отличается, это то, что Security

00:54:03.634 --> 00:54:09.400
groups для того, чтобы принять решение,
разрешать трафик или нет,

00:54:09.400 --> 00:54:13.400
просматривает все имеющиеся rules,
после чего принимает решение.

00:54:13.400 --> 00:54:21.400
А когда мы говорим про Network ACLs, он по 
приоритету сверху вниз просматривает все rules.

00:54:21.400 --> 00:54:24.640
В тот момент, когда мы находим правила,
которые разрешают трафик,

00:54:24.652 --> 00:54:30.400
все оставшиеся правила не
рассматриваются и трафик разрешается.

00:54:30.400 --> 00:54:39.306
Мы заканчиваем четвертую секцию.
Здесь мы с вами рассмотрели более подробно, что

00:54:39.318 --> 00:54:47.400
же такое Security groups и что такое Network ACLs.
Оба эти компонента помогают нам защитить наши VPC.

00:54:47.400 --> 00:54:55.400
Мы с вами добрались до пятой секции
и здесь мы поговорим про сервис Amazon Route 53.

00:54:55.400 --> 00:55:05.715
Это сервис, который предоставляет нам DNS сервис.
Самыми простыми словами это значит то, что

00:55:05.727 --> 00:55:10.400
в тот момент, когда пользователи 
открывают сайт www.example.com,

00:55:10.400 --> 00:55:16.820
то этот сервис перенаправляет
трафик на соответствующие IP-адреса,

00:55:16.832 --> 00:55:22.400
а именно IP-адреса нашей инфраструктуры,
на наши инстансы.

00:55:22.400 --> 00:55:27.400
Amazon Route 53 поддерживает
большой выбор AWS сервисов.

00:55:27.400 --> 00:55:30.832
Это может быть не только Amazon EC2 инстансы,
также это может

00:55:30.844 --> 00:55:34.400
быть Amazon S3 buckets,
Elastic Load Balancing и другие сервисы.

00:55:34.400 --> 00:55:41.956
Внутри Amazon Route 53 можно
гибко настроить трафик для

00:55:41.968 --> 00:55:49.400
того, чтобы реагировать на 
состояние таргет IP-адресов,

00:55:49.400 --> 00:55:54.400
т.е. IP-адресов, куда перенаправляет
этот сервис и соответственно действовать.

00:55:54.400 --> 00:55:57.921
Таким образом можно настроить
перенаправление трафика

00:55:57.933 --> 00:56:01.400
в случае возникновения
проблем у принимающей стороны.

00:56:01.400 --> 00:56:10.400
Также следует отметить, что через
 Amazon Route 53 мы можем покупать домены.

00:56:10.400 --> 00:56:16.874
Какие домены верхнего уровня доступны,
вы можете посмотреть

00:56:16.886 --> 00:56:22.400
и ознакомиться на странице
сервиса Amazon Route 53.

00:56:22.400 --> 00:56:26.643
На этом слайде вы можете видеть,
как обрабатывается

00:56:26.655 --> 00:56:31.400
запрос пользователя,
когда он открывает определенный сайт.

00:56:31.400 --> 00:56:35.888
Когда пользователь вводит,
например, www.example.com,

00:56:35.900 --> 00:56:40.400
название сайта,
то этот запрос уходит на DNS Resolver.

00:56:40.400 --> 00:56:48.400
Это такие сервера, которые сохраняют связки
доменной имени и какой IP-адрес его обслуживает,

00:56:48.400 --> 00:56:53.400
либо информации о том, где,
на каком источнике можно этот IP-адрес получить.

00:56:53.400 --> 00:56:57.351
В случае, если у DNS Resolver 
этой информации нет, но

00:56:57.363 --> 00:57:01.400
он знает, куда пойти,
он идет в сервис Amazon Route 53,

00:57:01.400 --> 00:57:09.400
который смотрит в своих настройках и соответственно
возвращает IP-адрес этому DNS Resolver.

00:57:09.400 --> 00:57:12.883
DNS Resolver дальше
возвращает этот IP-адрес

00:57:12.895 --> 00:57:17.400
пользователю,
и это происходит прозрачно для пользователя.

00:57:17.400 --> 00:57:23.400
Когда он вводит в строке браузера,
он видит уже открытый сайт.

00:57:23.400 --> 00:57:27.400
Но здесь есть два шага. 
Первый шаг мы с вами увидели.

00:57:27.400 --> 00:57:35.400
И второй шаг, как только браузер получает IP-адрес,
он делает этот запрос на соответствующий IP-адрес

00:57:35.400 --> 00:57:44.443
и получает оттуда ответ, отображает пользователю.
В строке поиска у пользователя все так

00:57:44.455 --> 00:57:50.400
же останется то доменное имя,
которое он ввел вначале.

00:57:53.400 --> 00:57:58.613
Amazon Route 53 поддерживает
несколько различных policy,

00:57:58.625 --> 00:58:04.400
которые помогают нам направлять
и гибко настраивать наш трафик.

00:58:04.400 --> 00:58:09.284
Самый первый это Simple Routing.
Идея ее в том, что вы в настройках

00:58:09.296 --> 00:58:16.779
Amazon Route 53 указываете один или несколько
IP-адресов, которые обслуживают ваше доменное имя.

00:58:16.791 --> 00:58:21.400
В тот момент, когда приходит запрос, 
то этот сервис

00:58:21.400 --> 00:58:25.647
в случайном порядке отдаёт 
один из IP-адресов, и уже

00:58:25.659 --> 00:58:30.400
браузер на стороне пользователя
переходит на этот IP-адрес,

00:58:30.400 --> 00:58:34.809
чтобы получить ответ на запрос 
пользователя. Следующий,

00:58:34.821 --> 00:58:39.400
более продвинутый policy это
Weighted Round Robin Routing.

00:58:39.400 --> 00:58:46.269
Идея ее в том, что вы можете 
для списка ваших IP-адресов,

00:58:46.281 --> 00:58:53.400
серверов, которые обслуживают трафик,
задать некоторые веса.

00:58:53.400 --> 00:58:59.429
И представим, у вас есть два сервера,
один мощный, другой менее мощный. 

00:58:59.441 --> 00:59:05.400
В этом случае вы можете, например,
75% трафика направить на большой сервер,

00:59:05.400 --> 00:59:11.888
а оставшийся 25% на маленький.
Третий вариант - это Latency Routing.

00:59:11.900 --> 00:59:18.400
Она более сложная по
сравнению с предыдущими двумя.

00:59:18.400 --> 00:59:24.683
Идея ее в том, что она измеряет 
скорость ответа от определенных

00:59:24.695 --> 00:59:30.400
IP-адресов и выбирает тот,
который быстрее всего отвечает.

00:59:30.400 --> 00:59:36.400
Давайте я приведу пример. Представим, наша
 инфраструктура развернута в двух AWS регионах.

00:59:36.400 --> 00:59:43.806
И по происшествию некоторого времени и сбора
необходимой информации, Amazon Route 53 будет

00:59:43.818 --> 00:59:51.400
выдавать для пользователей тот регион, который
для этого пользователя будет работать быстрее.

00:59:51.400 --> 00:59:59.515
Следующее - это Geolocation Routing. Идея в том,
что мы можем для пользователей с определенного

00:59:59.527 --> 01:00:07.400
региона направлять на указанные нами сервера
либо IP-адреса, которые обслуживают этот трафик.

01:00:07.400 --> 01:00:16.400
Это используется обычно для того, чтобы направлять
трафик на соответствующий сайт с нужным языком.

01:00:16.400 --> 01:00:29.400
Представим, что мы как пользователь подключаемся
из страны Центральной Азии, мы знаем русский язык.

01:00:29.400 --> 01:00:34.622
И в этом случае вы можете
настроить сайт таким образом,

01:00:34.634 --> 01:00:39.400
что он направляет на версию
сайта на русском языке.

01:00:39.400 --> 01:00:46.278
В случае, если подключается пользователь
с англоязычной страны, в этом случае,

01:00:46.290 --> 01:00:54.400
соответственно, пользователя направят на те сервера,
которые обслуживают англоязычный трафик.

01:00:54.400 --> 01:01:04.340
Следующая Policy - это Geoproximity Routing. Идея
в том, что в отличие от Geolocation Routing,

01:01:04.352 --> 01:01:14.400
когда мы смотрим на локацию пользователей,
в Geoproximity Routing мы смотрим на расположение

01:01:14.400 --> 01:01:19.618
нашей инфраструктуры, и, соответственно,
выдаем ответ. Следующий - это Failover Routing.

01:01:19.630 --> 01:01:25.400
Идея в том, что мы передаем 
IP-адреса Active и Passive.

01:01:25.400 --> 01:01:30.266
И в момент, когда с Active 
IP-адресом или ресурсом, который

01:01:30.278 --> 01:01:35.400
обрабатывает трафик, все хорошо,
весь трафик направляется туда.

01:01:35.400 --> 01:01:42.048
В случае возникновения некоторых проблем,
то трафик автоматически перенаправляется

01:01:42.060 --> 01:01:48.400
на резервный IP-адрес для того,
чтобы обработать и не пропустить каждый вопрос.

01:01:48.400 --> 01:01:54.768
В тот момент, когда Active становится снова
доступным, то срабатывает переключатель

01:01:54.780 --> 01:02:00.400
и весь основной трафик будет
перенаправляться обратно на Active IP-адреса.

01:02:00.400 --> 01:02:05.558
Самый последний - это Multivalue Answer Routing.
Идея ее в том, что во всех

01:02:05.570 --> 01:02:10.400
предыдущих случаях мы возвращали
один конкретный IP-адрес пользователю.

01:02:10.400 --> 01:02:18.477
В случае с Multivalue Answer Routing мы
передаем несколько IP-адресов, а далее уже браузер

01:02:18.489 --> 01:02:26.400
в зависимости от настроек либо алгоритма
работы определяет, на какой IP-адрес нужно идти.

01:02:26.400 --> 01:02:35.400
Здесь вы можете видеть пример использования
сервиса Amazon Route 53 и какие выгоды она дает.

01:02:35.400 --> 01:02:40.400
Например, наша инфраструктура 
развернута в нескольких регионах.

01:02:40.400 --> 01:02:45.382
И в случае подключения
пользователя с некоторого региона,

01:02:45.406 --> 01:02:50.388
который ближе к первому региону,
а на стороне Amazon Route 53

01:02:50.400 --> 01:02:54.774
у нас настроен Latency-based routing,
в этом случае

01:02:54.798 --> 01:03:00.400
пользователь будет направлен на тот регион,
который ему ближе.

01:03:00.400 --> 01:03:10.400
И в целом получит ответ намного быстрее, чем если
бы запрос ушел на регион, находящийся немного

01:03:10.400 --> 01:03:20.400
дальше. На этом слайде пример страницы AWS,
где происходит настройка Failover Routing Policy.

01:03:20.400 --> 01:03:25.871
И пример этот дан для того,
чтобы показать, что есть

01:03:25.883 --> 01:03:32.400
возможности гибко настроить
правила направления нашего трафика.

01:03:32.400 --> 01:03:37.727
Если мы говорим про конкретный пример,
то мы видим, что есть у

01:03:37.751 --> 01:03:43.604
нас Failover Threshold 3, т.е.
если последовательно 3 запроса были

01:03:43.616 --> 01:03:49.170
неудачными, то у нас происходит 
переключение и весь трафик уходит

01:03:49.194 --> 01:03:54.400
на наш резервный IP-адрес,
который обслуживает этот трафик.

01:03:54.400 --> 01:04:00.388
И дальше каждые либо 30 секунд,
либо 10 секунд, Request Interval, мы проверяем,

01:04:00.400 --> 01:04:06.400
можем ли мы обратно вернуться на наш 
Active IP-адрес, который является основным.

01:04:06.400 --> 01:04:16.400
На этом слайде приведен еще один
пример настройки Failover Routing Policy.

01:04:16.400 --> 01:04:22.845
Представим, у нас есть инфраструктура,
которая обслуживает основной трафик

01:04:22.857 --> 01:04:29.400
и в Amazon Route 53 эта инфраструктура
является основной, т.е. Active Route.

01:04:29.400 --> 01:04:34.255
И, соответственно, запрос доходит до 
наших Amazon EC2 инстансов, которые

01:04:34.267 --> 01:04:39.400
обращаются к базе данных для того,
чтобы вернуть какой-то динамический ответ.

01:04:39.400 --> 01:04:49.037
А на стороне Amazon Route 53 настроен Failover,
в случае, если инстансы становятся недоступными,

01:04:49.049 --> 01:04:58.400
то у нас срабатывает Failover Policy, и мы
переключаемся на Secondary, т.е. Passive IP-адреса.

01:04:58.400 --> 01:05:05.400
В этом случае мы можем направить трафик на наш
статический веб-сайт, который хостится на Amazon S3.

01:05:05.400 --> 01:05:09.348
Таким образом мы не сможем
обработать всех пользователей

01:05:09.372 --> 01:05:13.176
как положено,
но по крайней мере сможем направить на

01:05:13.188 --> 01:05:16.960
соответствующий веб-сайт,
в котором они могут получить

01:05:16.984 --> 01:05:21.400
более-менее понятный ответ,
и вы не потеряете ваших клиентов.

01:05:21.400 --> 01:05:24.947
В тот момент,
когда Amazon Route 53 получит ответ,

01:05:24.971 --> 01:05:29.317
периодически проверяя,
что наши Amazon EC2 инстансы успешно

01:05:29.329 --> 01:05:33.641
могут принимать запросы,
то происходит обратное переключение,

01:05:33.665 --> 01:05:37.400
и весь трафик уже идет на
наши Amazon EC2 инстансы.

01:05:37.400 --> 01:05:42.400
Мы завершаем пятую секцию. Давайте 
вкратце остановимся на том, что мы прошли.

01:05:42.400 --> 01:05:47.007
Первое, это то,
что Amazon Route 53 – это высокодоступный

01:05:47.019 --> 01:05:51.400
и масштабируемый сервис,
который предоставляет нам DNS.

01:05:51.400 --> 01:05:57.642
Простыми словами, это тот сервис,
который направляет наш трафик от нашего

01:05:57.654 --> 01:06:03.400
доменного имени к нашим инстансам,
которые обрабатывают этот запрос.

01:06:03.400 --> 01:06:10.187
Через сервис Amazon Route 53 мы также можем
покупать доменные имена. Какие верхнеуровневые

01:06:10.199 --> 01:06:16.400
домены доступны для нас, мы можем
посмотреть на официальной странице этого сервиса.

01:06:16.400 --> 01:06:21.665
Далее, что важно отметить и что может прийти,
и скорее всего придет на

01:06:21.677 --> 01:06:27.400
реальном AWS экзамене, это какие
Routing policy существуют в Amazon Route 53.

01:06:27.400 --> 01:06:34.681
На самом деле, эти вопросы являются одними
из самых простых. Вам достаточно понять, чем

01:06:34.693 --> 01:06:42.400
является каждая Routing policy, и этого будет
достаточно, чтобы правильно ответить на вопрос.

01:06:42.400 --> 01:06:49.400
С подобными вопросами вы встретитесь на наших
Practice test-ах и сможете на них попрактиковаться.

01:06:49.400 --> 01:06:55.007
После этого мы посмотрели
несколько примеров использования

01:06:55.019 --> 01:06:59.400
сервиса Amazon Route
53 с инфраструктурой AWS.

01:06:59.400 --> 01:07:04.153
Мы добрались до самой
последней секции в рамках нашей

01:07:04.165 --> 01:07:08.400
лекции и поговорим про
сервис Amazon CloudFront.

01:07:08.400 --> 01:07:13.888
Это один из базовых сервисов,
который используется практически во всех

01:07:13.900 --> 01:07:19.400
IT-инфраструктурах, которые так или 
иначе обрабатывают интернет-трафик.

01:07:19.400 --> 01:07:24.400
Этот сервис является 
Content Delivery Network, т.е. CDN.

01:07:24.400 --> 01:07:34.504
Простыми словами, это тот сервис, который все 
ваши медиа-файлы переносит ближе к вашим

01:07:34.516 --> 01:07:44.400
пользователям, так, чтобы это работало быстрее,
дешевле и в целом безопаснее для вас.

01:07:44.400 --> 01:07:50.042
Давайте посмотрим на примере,
почему важно и чем

01:07:50.054 --> 01:07:56.400
помогает нам CDN для улучшения
пользовательского опыта.

01:07:56.400 --> 01:08:02.135
Когда пользователь делает запрос, он может
проходить через несколько узлов для того, чтобы

01:08:02.147 --> 01:08:08.400
добраться до оригинального сервера и запросить
ваши некоторые данные, медиаданные с вашего 

01:08:08.400 --> 01:08:15.282
сервера, то расстояние от пользователя до
наших серверов может быть достаточно

01:08:15.294 --> 01:08:23.400
большим и оно отражается на скорости работы вашего
приложения. Это ухудшает пользовательский опыт.

01:08:23.400 --> 01:08:32.760
Поэтому есть такой подход как CDN,
Content Delivery Network. Идея в том,

01:08:32.772 --> 01:08:42.400
что в некоторых узлах ваши медиаданные
либо любые другие данные кэшируются.

01:08:42.400 --> 01:08:51.582
Таким образом пользователь не доходя до 
оригинальных источников серверов может получить

01:08:51.594 --> 01:09:00.400
необходимый контент и это все ускорит время
обработки каждого запроса каждого пользователя.

01:09:00.400 --> 01:09:10.400
Таким образом, Content Delivery Network, т.е.
CDN является для нас решением.

01:09:10.400 --> 01:09:19.400
Content Delivery Network это понятие 
в области IT, не привязанное к Amazon.

01:09:19.400 --> 01:09:25.400
Поэтому это довольно таки давно
существующая технология, подход.

01:09:25.400 --> 01:09:31.400
Идея в том, что это сеть связанных между собой
серверов, которые кэшируют некоторый контент.

01:09:31.400 --> 01:09:35.773
Как контент может выступать 
HTML страницы, CSS страницы,

01:09:35.785 --> 01:09:42.400
JavaScript файлы, картинки, видео, аудиодорожки 
и так далее, т.е. любые медиафайлы.

01:09:42.400 --> 01:09:47.400
Более того, продвинутые CDN могут
обрабатывать и кэшировать динамический контент.

01:09:47.400 --> 01:09:54.453
Таким образом,
нет необходимости пользователям ждать,

01:09:54.465 --> 01:10:01.400
когда запрос от него дойдет
до оригинального сервиса.

01:10:01.400 --> 01:10:05.245
Фактически где-то посередине
в кэше сохранен или есть

01:10:05.257 --> 01:10:09.400
готовый ответ для этого пользователя,
который он получает.

01:10:09.400 --> 01:10:18.931
И таким образом улучшается пользовательский опыт.
Если мы говорим про AWS, то есть специальный

01:10:18.943 --> 01:10:27.400
сервис, который является CDN, т.е. Content
Delivery Network, называется Amazon CloudFront.

01:10:27.400 --> 01:10:32.400
Мы с вами проговорили ранее,
что такое глобальная инфраструктура AWS.

01:10:32.400 --> 01:10:38.400
Это когда у нас есть AWS регионы.
В каждом регионе есть availability zones.

01:10:38.400 --> 01:10:44.400
В каждой availability zone есть дата-центры.
И проговорили, что такое дата-центры.

01:10:44.400 --> 01:10:49.400
Также есть параллельная инфраструктура AWS,
которая относится к CloudFront и

01:10:49.400 --> 01:10:54.400
называется Amazon CloudFront Infrastructure.
Состоит она из двух компонентов.

01:10:54.400 --> 01:10:59.400
Это Edge Locations, а также 
Regional Edge Caches. Чем отличается?

01:10:59.400 --> 01:11:09.400
Edge Locations – это те сервера, которые находятся
наиболее близко к конечным пользователям.

01:11:09.400 --> 01:11:13.121
Таким образом, в нем сохраняется 
контент, который самый

01:11:13.133 --> 01:11:17.400
популярный, самый необходимый,
который запрашивается чаще всего.

01:11:17.400 --> 01:11:27.400
Чуть дальше находится Regional Edge Cache,
сохраняется информация чуть большего региона.

01:11:27.400 --> 01:11:31.542
В нем есть данные,
которые также популярные, но менее

01:11:31.554 --> 01:11:36.400
популярные, чем те данные,
которые находятся на Edge Locations.

01:11:36.400 --> 01:11:41.400
Также это могут быть данные, которые по тем
или иным причинам не поместились в Edge Locations.

01:11:41.400 --> 01:11:45.400
Они передаются и сохраняются
в кэше Regional Edge Cache.

01:11:48.400 --> 01:11:54.326
После Regional Edge Cache у
нас уже самое дальнее расстояние

01:11:54.338 --> 01:11:59.400
– это напрямую обратиться
к оригинальным источникам.

01:11:59.400 --> 01:12:07.400
Таким образом, повторюсь,
у нас есть три шага, три узла.

01:12:07.400 --> 01:12:12.400
Самый дальний – это напрямую
обращаться к оригинальным серверам.

01:12:12.400 --> 01:12:17.400
Чуть быстрее, если мы получаем 
контент из Regional Edge Cache.

01:12:17.400 --> 01:12:21.400
И самый быстрый контент
мы получаем из Edge Locations.

01:12:23.400 --> 01:12:28.400
Давайте пройдемся по основным преимуществам
использования сервиса Amazon CloudFront.

01:12:28.400 --> 01:12:35.288
Первое – этот сервис быстрый, глобальный.
Далее – это то, что мы можем настроить

01:12:35.300 --> 01:12:40.400
безопасность на наших
конечных кэшируемых серверах.

01:12:42.400 --> 01:12:45.270
Мы можем дополнительно
программировать поведение

01:12:45.282 --> 01:12:48.400
сервиса Amazon CloudFront,
используя AWS Lambda Edge.

01:12:50.400 --> 01:12:56.400
Этот сервис является CDN, который 
максимально интегрирован с сервисами AWS.

01:12:56.400 --> 01:13:02.400
А также это решение,
которое намного выгоднее и быстрее,

01:13:02.400 --> 01:13:08.400
чем если бы мы обслуживали наших
интернет-пользователей напрямую с наших серверов.

01:13:10.400 --> 01:13:17.400
Amazon CloudFront является платным ресурсом,
но также, как и любой другой AWS сервис,

01:13:17.400 --> 01:13:20.400
мы оплачиваем только за то,
 что мы использовали.

01:13:20.400 --> 01:13:27.400
В рамках сервиса Amazon CloudFront мы оплачиваем
за объем данных, которые мы передали в кэш-сервера.

01:13:28.400 --> 01:13:35.400
Также мы оплачиваем за количество запросов
HTTP и HTTPS-запросов на эти кэш-сервера.

01:13:36.400 --> 01:13:39.400
Дополнительно оплачиваются 
Invalidation Requests.

01:13:39.400 --> 01:13:45.400
Это когда нам необходимо по запросу
очистить все кэш-сервера от наших данных.

01:13:45.400 --> 01:13:50.400
Обычно это требуется, когда мы находим
какую-то ошибку и быстро ее исправляем

01:13:50.400 --> 01:13:57.400
и хотим, чтобы пользователи получали
обновленную версию приложения либо данных.

01:13:57.400 --> 01:14:03.400
В этом случае мы делаем Invalidation Requests.
Другой вариант – когда у нас большое обновление,

01:14:03.400 --> 01:14:08.400
и мы хотим, чтобы это обновление
быстрее дошло до наших пользователей.

01:14:08.400 --> 01:14:16.290
В этом случае нам необходимо очистить кэш,
и все пользователи, которые начинают запрашивать,

01:14:16.302 --> 01:14:21.400
первый пользователь сделает
запрос через CloudFront.

01:14:21.400 --> 01:14:24.854
Далее CloudFront,
так как этих данных нет, сделает

01:14:24.866 --> 01:14:30.400
запрос на оригинальные сервера и получит 
эти данные, после чего закэширует.

01:14:30.400 --> 01:14:34.400
А все последующие пользователи,
которые будут запрашивать эти же данные,

01:14:34.400 --> 01:14:42.400
уже будут получать не с оригинальных серверов,
а быстрее уже с наших Edge серверов.

01:14:44.400 --> 01:14:47.888
И еще один момент – это то,
что есть возможность

01:14:47.900 --> 01:14:51.400
настроить так называемый
Dedicated IP Custom SSL.

01:14:51.400 --> 01:14:58.400
Это та опция, которая не часто 
используется пользователями AWS,

01:14:58.400 --> 01:15:01.400
но вам достаточно запомнить, 
что такая опция есть.

01:15:01.400 --> 01:15:07.400
Более подробно вы можете посмотреть на
официальной документации сервиса Amazon CloudFront.

01:15:09.400 --> 01:15:14.400
Мы закончили шестую последнюю
секцию в рамках нашей лекции.

01:15:14.400 --> 01:15:20.400
Мы познакомились подробно
с сервисом Amazon CloudFront,

01:15:20.400 --> 01:15:24.400
а также узнали, что же такое CDN,
для чего оно используется,

01:15:24.400 --> 01:15:32.400
и также узнали, что есть на стороне AWS сервис,
который предоставляет нам CDN.

01:15:33.400 --> 01:15:37.400
Из преимуществ использования Amazon
CloudFront – это то, что это сервис глобальный,

01:15:37.400 --> 01:15:41.400
можно гибко настроить его,
программировать его поведение,

01:15:41.400 --> 01:15:48.400
также есть возможность сделать необходимые
настройки с точки зрения безопасности.

01:15:48.400 --> 01:15:53.400
Это тот сервис, который 
является сервисом AWS,

01:15:53.400 --> 01:15:58.400
соответственно, достаточно хорошо 
проинтегрирован с другими сервисами

01:15:58.400 --> 01:16:03.400
и является достаточно 
экономичным решением в случае,

01:16:03.400 --> 01:16:09.400
когда вы передаете большой объем информации
до ваших пользователей, ваших приложений.

01:16:11.400 --> 01:16:14.400
На этом мы завершаем 
наше лекционное занятие.

01:16:14.400 --> 01:16:19.400
Давайте пройдемся по самым основным моментам,
которые мы сегодня прошли.

01:16:19.400 --> 01:16:25.400
Это то, что мы рассмотрели основы сетей,
не привязанной к AWS,

01:16:25.400 --> 01:16:29.601
но это та информация,
которая поможет легче

01:16:29.613 --> 01:16:34.400
понять сервисы,
связанные с Networking внутри AWS.

01:16:35.400 --> 01:16:42.425
Далее мы познакомились с сервисом Amazon VPC,
рассмотрели дополнительные ее компоненты,

01:16:42.437 --> 01:16:49.400
в том числе компоненты, которые помогают обеспечить
безопасность, это Security groups и Network ACLs.

01:16:51.400 --> 01:16:58.400
После чего мы познакомились с сервисами
Amazon CloudFront и Amazon Route 53,

01:16:58.400 --> 01:17:01.400
рассмотрели примеры 
использования этих сервисов

01:17:01.400 --> 01:17:08.400
и как эти сервисы помогают нам лучше
построить нашу инфраструктуру в облаке.

01:17:09.400 --> 01:17:13.400
Здесь вы можете видеть ссылки,
которые могут вам понадобиться,

01:17:13.400 --> 01:17:20.400
если вы хотите дополнительно ознакомиться
со всем тем, что мы прошли сегодня.

01:17:21.400 --> 01:17:29.400
На этом мы завершаем наше лекционное занятие.
Я надеюсь, вы узнали что-то новое сегодня для себя.

01:17:29.400 --> 01:17:32.400
Увидимся с вами на следующих наших активностях.