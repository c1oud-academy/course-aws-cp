WEBVTT

00:00:01.770 --> 00:00:04.866
Добрый день, уважаемые студенты!
Я рад вас видеть.

00:00:04.878 --> 00:00:16.169
Мы с вами добрались до третьего модуля и сегодня
поговорим про глобальную инфраструктуру AWS.

00:00:16.181 --> 00:00:26.597
Сегодняшняя лекция намного короче,
чем предыдущие и состоит из двух частей.

00:00:26.609 --> 00:00:30.869
В первой части мы проговорим про
глобальную инфраструктуру AWS,

00:00:30.881 --> 00:00:39.335
а во второй части поближе познакомимся с некоторыми
группами сервисов и сервисами, которые в нее входят.

00:00:39.347 --> 00:00:45.540
Эти же сервисы вы можете встретить на
реальном экзамене AWS Certified Cloud Practitioner.

00:00:49.170 --> 00:00:58.047
Глобальная инфраструктура AWS, что же это такое?
Это специально продуманная и построенная, гибкая,

00:00:58.059 --> 00:01:06.163
масштабируемая, безопасная и надежная
среда для облачных вычислений,

00:01:06.175 --> 00:01:12.171
которая доступна для вас по всему земному
шару в 22 различных регионах.

00:01:12.183 --> 00:01:18.989
Когда мы говорим про регионы, мы подразумеваем
определенную географическую локацию.

00:01:19.001 --> 00:01:31.859
Каждый регион – это изолированная часть глобальной
инфраструктуры AWS и может работать самостоятельно.

00:01:31.871 --> 00:01:43.253
Внутри региона зачастую два или более
Availability zone, так называемые зоны доступности.

00:01:43.265 --> 00:01:50.532
Когда мы говорим про зоны доступности, каждая
из них может содержать несколько дата-центров.

00:01:50.544 --> 00:01:58.630
Таким образом обеспечивается высокая
доступность каждого региона.

00:02:00.240 --> 00:02:08.706
Если у вас в рамках вашего бизнеса есть
необходимость присутствовать в нескольких регионах,

00:02:08.718 --> 00:02:16.374
на нескольких локациях, то задачи по репликации,
по переносу, либо копированию и клонированию ваших

00:02:16.386 --> 00:02:21.412
данных, вашей инфраструктуры на другой регион,
производится вашими силами, является вашей

00:02:21.424 --> 00:02:30.533
ответственностью перед клиентами. Для всего этого
есть уже разработанные инструменты, которые помогут

00:02:30.545 --> 00:02:41.437
упростить этот процесс. Также следует отметить,
что помимо стандартных регионов, которые разбросаны

00:02:41.449 --> 00:02:51.551
по всему земному шару, существуют три отдельных
региона. Первые два – находятся в Китае.

00:02:51.563 --> 00:02:59.749
Они обособленны от основной части,
от глобальной инфраструктуры, а также появления

00:02:59.761 --> 00:03:08.760
новых features, в целом развитие AWS в этом
регионе на некоторое количество шагов отстает.

00:03:09.060 --> 00:03:16.573
Таким образом, все те новинки, которые появились
в прошлом году, или в этом году, маловероятно,

00:03:16.585 --> 00:03:25.892
что вы сможете использовать в регионах, которые
находятся в Китае. Поэтому если у вас бизнес такой,

00:03:25.904 --> 00:03:35.967
который требует от вас создание инфраструктуры
в Китае, следует учитывать эти моменты.

00:03:35.979 --> 00:03:49.924
Другой регион, который также следует выделить, это
AWS GovCloud, это специальный изолированный регион

00:03:49.936 --> 00:04:01.596
в США, предназначенный для правительственных
проектов, т.е. все сайты, которые правительственные

00:04:01.608 --> 00:04:08.680
и которые хостятся в облаке,
они хостятся именно в этом регионе.

00:04:15.600 --> 00:04:21.402
У вас может возникнуть достаточно правильный
вопрос: «У нас есть достаточно много регионов

00:04:21.414 --> 00:04:31.228
по всему земному шару и какой же выбрать?»
Самый первый момент, который часто упоминается,

00:04:31.240 --> 00:04:38.532
это так называемые Data governance и
Legal requirements, т.е. официальные документы,

00:04:38.544 --> 00:04:46.020
требования внутри вашей страны, которые
регулируют построение IT-архитектур, обработку

00:04:46.032 --> 00:04:55.815
данных, обработку персональных данных,
а также хранение, трансграничную передачу, и другие

00:04:55.827 --> 00:05:04.365
моменты, которые могут в каком-то смысле
усложнить или создать дополнительные сложности

00:05:04.377 --> 00:05:11.167
при построении IT-инфраструктуры в облаке AWS.
Поэтому, когда вы начинаете большой проект,

00:05:11.179 --> 00:05:16.980
обязательно посмотрите эти официальные
документы в вашей стране и постарайтесь это учесть.

00:05:19.140 --> 00:05:26.063
Со стороны AWS тоже есть некоторые активности,
которые помогают клиентам, т.е. нам.

00:05:26.075 --> 00:05:37.731
Они выпускают так называемые Whitepapers – это такой
документ различного объёма в зависимости от темы.

00:05:37.743 --> 00:05:46.122
Он может быть посвящен на различные темы, цель
которого дать некоторые рекомендации от самого AWS,

00:05:46.134 --> 00:05:56.533
о том, как правильно, рационально, безопасно,
оптимально построить некоторые решения в облаке AWS.

00:05:56.545 --> 00:06:05.268
Какая-то часть этих whitepapers предназначена как
раз для освещения этих моментов,

00:06:05.280 --> 00:06:11.286
вопросов по Data governance и Legal requirements
для каждой отдельно взятой страны.

00:06:11.298 --> 00:06:18.927
Следует также проверить, этот список
постоянно пополняется, обновляется и,

00:06:18.939 --> 00:06:23.860
если есть подобный документ для вашей страны,
следует непременно с ним ознакомиться.

00:06:25.770 --> 00:06:30.920
Следующим аспектом, который следует учитывать,
это близость к вашим клиентам.

00:06:30.932 --> 00:06:35.729
Если клиенты находятся по большей
части в определенном регионе,

00:06:35.741 --> 00:06:43.715
то наиболее рационально выбрать регион,
ближайший к этой локации.

00:06:43.727 --> 00:06:53.167
Следует также учесть, что географически одинаковое
расстояние от вашей локации до двух разных регионов

00:06:53.179 --> 00:07:02.235
не говорит о том, что скорость доставки контента,
так называемое Latency, будет одинаковым.

00:07:02.247 --> 00:07:13.768
Поэтому для точного подбора нужно выбрать
несколько ближайших регионов и провести несколько

00:07:13.780 --> 00:07:21.042
тестов, для того чтобы точно измерить среднее
значение Latency между вами и вашими клиентами.

00:07:21.054 --> 00:07:29.540
Также здесь хотелось бы отметить, я не буду приводить
примеры, это можно быстро найти одним запросом Гугла,

00:07:29.552 --> 00:07:37.061
есть специальные веб-сайты, которые позволяют
делать это автоматически, т.е. вы нажимаете старт

00:07:37.073 --> 00:07:47.593
и по нажатию этой кнопки начинается ping в различные
регионы AWS и сохраняются значения этого ping,

00:07:47.605 --> 00:07:57.460
и таким образом, через несколько этапов прохода
этой проверки скорости вы получаете усредненное

00:07:57.472 --> 00:08:02.165
значение от вашего местоположения,
где был открыт ваш сайт, т.е. с вашего

00:08:02.177 --> 00:08:08.610
локального интернет-провайдера до всех
регионов AWS. Это может быть удобно.

00:08:12.660 --> 00:08:20.251
Следующий момент, это доступность сервисов в
определенном регионе, который вы хотите выбрать.

00:08:20.263 --> 00:08:29.782
Это я говорю к тому, что есть регион North Virginia,
в котором выходят первыми все новинки,

00:08:29.794 --> 00:08:35.141
это считается основным регионом среди стандартных
регионов и через какое-то время,

00:08:35.153 --> 00:08:42.678
как оно появилось там, это обновление перетекает
во все остальные регионы с той или иной скоростью,

00:08:42.690 --> 00:08:53.263
и новый сервис либо новый функционал старого
сервиса становится доступным в других регионах.

00:08:53.275 --> 00:09:03.693
Поэтому может получится так, что определенный сервис
или функционал сервиса критичен для вашего бизнеса,

00:09:03.705 --> 00:09:12.720
в таком случае надо обязательно проверить доступность
этой функции либо сервиса в выбранном вами регионе.

00:09:13.260 --> 00:09:20.202
В целом, если нет абсолютной разницы с точки
зрения Latency между всеми регионами до вас,

00:09:20.214 --> 00:09:29.253
это могут быть какие-то изолированные расчеты,
которые не требуют близости к вашим клиентам,

00:09:29.265 --> 00:09:42.298
происходят внутри вашей инфраструктуры и на выходе
отдается лишь какой-то вывод, который не важно

00:09:42.310 --> 00:09:47.100
с какой скоростью передается, главное доходит,
то в этом случае рекомендуется

00:09:47.112 --> 00:09:53.375
выбирать главный регион North Virginia,
где появляются все обновления.

00:09:53.387 --> 00:09:57.900
Есть некоторые нюансы,
которые упрощают работу с облаком при

00:09:57.912 --> 00:10:03.757
выборе North Virginia, но это уже Advanced топики,
которые даже не придут на

00:10:03.769 --> 00:10:08.880
AWS Certified Cloud Practitioner экзамене,
и эти нюансы мы пройдем на следующих курсах.

00:10:10.219 --> 00:10:19.354
Самый последний момент, который надо учитывать,
это – цена, т.е. по всему земному шару, даже если все

00:10:19.366 --> 00:10:27.514
везде одинаковое, все стандартизировано, дата-центры
одинаковые, то уровень жизни отличается в разных

00:10:27.526 --> 00:10:35.107
локациях, соответственно это отражается на цене
сервисов. Какой-то сервис, который находится

00:10:35.119 --> 00:10:43.752
в определенном регионе, может стоить дороже
или дешевле, чем в другом регионе.

00:10:43.764 --> 00:10:50.051
Еще один момент, который может повлиять на цену,
это то, что старые регионы, которые давно работают,

00:10:50.063 --> 00:10:56.506
достаточно популярные, что позволяет им
увеличивать количество дата-центров,

00:10:56.518 --> 00:11:00.423
расширяться, таким образом они
выигрывают от масштабирования и зачастую

00:11:00.435 --> 00:11:08.639
в таких крупных регионах цены ниже, по сравнению
с регионами, которые новые или непопулярные.

00:11:08.651 --> 00:11:15.910
Поэтому этот момент следует учитывать,
но в момент сравнения цен вы и так все это увидите.

00:11:19.870 --> 00:11:28.192
Следующим вложением внутри каждого AWS региона,
находятся Availability zones.

00:11:28.204 --> 00:11:36.038
Availability zone – изолированная, самодостаточная
сеть между несколькими дата-центрами, которая может

00:11:36.050 --> 00:11:43.381
работать самостоятельно и предоставляет высокую
доступность всем сервисам, IT-ресурсам в облаке AWS.

00:11:43.393 --> 00:11:55.086
Следует запомнить некоторые физические расстояния
между структурами AWS. Начнем с ближайших.

00:11:55.098 --> 00:12:01.137
Мы говорили ранее, что внутри Availability zone
есть несколько дата-центров.

00:12:01.149 --> 00:12:07.801
Каждый дата-центр – это такое здание,
которое может состоять из сотен тысяч серверов.

00:12:07.813 --> 00:12:17.307
Можете представить масштабы? Каждый дата-центр
расположен от другого дата-центра в рамках одной

00:12:17.319 --> 00:12:27.614
Availability zone на десятки км, когда говорим про
расстояния между Availability zones, то мы говорим

00:12:27.626 --> 00:12:37.306
о расстоянии до 100 км, и теперь следующий порядок,
это несколько сотен км - расстояние между регионами.

00:12:37.330 --> 00:12:40.044
Подобного рода вопросы
приходят на экзаменах.

00:12:40.056 --> 00:12:46.689
От вас не будет требоваться знание определенных
цифр, но вы должны запомнить порядок цифр.

00:12:46.701 --> 00:12:54.628
Это десятки км между дата-центрами, если
до 100 км – это расстояние между Availability zones,

00:12:54.640 --> 00:13:04.449
если больше 100 км – это расстояние между
регионами. Обычно это несколько сотен км.

00:13:04.461 --> 00:13:12.560
Когда мы говорим про Naming, т.е. наименование,
у каждого региона есть свое кодовое название.

00:13:12.572 --> 00:13:24.227
Как пример, возьмем первый западноевропейский
регион eu-west-1, вы видите его на слайде, и naming

00:13:24.239 --> 00:13:30.035
availability zone в рамках этого региона отличается
тем, что в конце добавляется буква, начиная

00:13:30.047 --> 00:13:42.224
с a, b, c, d и т.д. Здесь есть одна определенная
фишка, т.е. из разряда «все гениальное – просто».

00:13:42.236 --> 00:13:54.852
Все, скажем так, клиенты, мы и вы, подсознательно
стараемся выбирать и создавать наши ресурсы

00:13:54.876 --> 00:13:59.500
в первой availability zone, т.е. «а»,
стремление к тому, чтобы быть первыми.

00:13:59.512 --> 00:14:05.225
Для того чтобы распределить
равномерно между несколькими availability zones,

00:14:05.237 --> 00:14:10.870
так чтобы каждый мог выбрать «а»,
был сделан некоторый трюк.

00:14:11.530 --> 00:14:18.567
Вы можете сейчас остановить видео и подумать,
попробуйте угадать. Сообщите куратору.

00:14:18.579 --> 00:14:28.286
Я надеюсь, что кто-то угадал,
как это было решено. Давайте расскажу.

00:14:28.298 --> 00:14:33.623
На самом деле, все гениальное – просто.
Как это делается? Когда вы регистрируете

00:14:33.635 --> 00:14:41.348
AWS аккаунт, представим, что
в одном регионе есть три availability zones.

00:14:41.360 --> 00:14:55.965
Назовем их первая availability zone «а» в первом
городе, вторая availability zone «b» во втором,

00:14:55.977 --> 00:15:04.405
третья availability zone «с» в третьем городе.
При регистрации, например, я зарегистрировался и

00:15:04.417 --> 00:15:14.368
случайным образом перемешиваются названия
availability zones с реальными availability zones.

00:15:14.380 --> 00:15:24.473
Например, первая availability zone «а»
может быть привязана к первому городу,

00:15:24.485 --> 00:15:28.503
вторая availability zone «b» ко второму городу,
третья availability zone «с» к третьему городу.

00:15:28.515 --> 00:15:35.548
Когда регистрируется кто-то другой, этот порядок
случайным образом меняется и таким образом для

00:15:35.560 --> 00:15:42.887
него первая availability zone «а» фактически
будет означать хостинг в третьем городе.

00:15:42.899 --> 00:15:49.117
Вторым пусть будет первый город,
и третьим будет второй город.

00:15:49.129 --> 00:15:56.016
Таким образом, все выбирают и могут выбрать
availability zone «а», но фактически рандомно

00:15:56.028 --> 00:16:05.440
на фоне, они были распределены равномерно и нагрузка
на все availability zones примерно одинакова.

00:16:05.452 --> 00:16:10.970
Надеюсь, кто-то угадал, если угадали,
молодцы. Идем дальше.

00:16:16.660 --> 00:16:24.486
Мы с вами уже начали говорить про дата-центры. Еще
пару моментов, которые хотелось бы добавить, это то,

00:16:24.498 --> 00:16:36.616
что задача AWS как облачного провайдера касательно
дата-центров – это предоставить полную физическую

00:16:36.628 --> 00:16:43.818
безопасность, и чтобы легче это обеспечить,
не разглашается даже расположение дата-центров.

00:16:43.830 --> 00:16:52.582
В лучшем случае, вы можете знать страну
расположения дата-центров и таким образом,

00:16:52.594 --> 00:17:00.310
это помогает лучше защитить дата-центры от
физического обнаружения и попыток проникновения.

00:17:00.322 --> 00:17:09.229
Другой момент – используются самые новейшие
технологии, самые новейшие оборудования и железо.

00:17:09.241 --> 00:17:17.057
Оно специально изначально разрабатывается
избыточным, это так называемый Redundant дизайн.

00:17:17.069 --> 00:17:27.264
Что такое избыточная архитектура? Представим,
что вам надо три сервера для корректной работы,

00:17:27.276 --> 00:17:33.733
а вы делаете и настраиваете пять серверов. Таким
образом, вы гарантируете, что, если что-то ломается,

00:17:33.745 --> 00:17:41.378
один из серверов, это абсолютно никак не повлияет
на работу того, что обрабатывают эти сервера.

00:17:41.390 --> 00:17:48.284
Вы безопасно отключаете одну, для корректной
работы вам достаточно три, а там еще четыре.

00:17:48.296 --> 00:17:57.295
Таким образом, работа не останавливается,
и в момент, когда находится по мониторингу,

00:17:57.307 --> 00:18:07.408
что вот этот сервер вышел из строя, он выводится
из балансирования трафика и заменяется новым.

00:18:07.420 --> 00:18:21.114
Касательно железа, следует упомянуть, что закупка
оборудования происходит, как правило,

00:18:21.126 --> 00:18:30.829
от оригинальных производителей. Зачастую те
продукты, то сетевое оборудование, будь то другое

00:18:30.841 --> 00:18:36.108
железо, мы покупаем уже с определенным брендом,
таким образом мы переплачиваем за бренд.

00:18:36.120 --> 00:18:43.281
В случае с AWS, у них есть прямой выход на
производителей с несколькими альтернативами

00:18:43.293 --> 00:18:52.553
одного и того же физического оборудования,
и они могут максимально выгодно приобрести нужное

00:18:52.565 --> 00:18:57.190
и правильное железо, для того чтобы
обеспечивать нам высокую доступность.

00:18:59.800 --> 00:19:05.418
Мы с вами проговорили, что такое дата-центры, и
теперь давайте поговорим о таком понятии,

00:19:05.430 --> 00:19:13.745
как Points of Presence, т.е. точки присутствия.
Другими словами, это та технология, позволяющая

00:19:13.757 --> 00:19:22.855
на ближайших к пользователям серверах кэшировать
контент, который был запрошен и часто запрашивается

00:19:22.867 --> 00:19:35.609
другими пользователями, для того чтобы сократить
расстояние до клиентов и уменьшить время, когда

00:19:35.621 --> 00:19:45.215
пользователи добираются до контента, будь то
медиаконтент, текстовая информация, веб-сайты и т.д.

00:19:45.227 --> 00:19:54.413
Когда мы говорим про AWS, у него есть собственный
CDN (Content Delivery Network), это сеть серверов по

00:19:54.425 --> 00:20:04.816
доставке контента – Amazon CloudFront, и распределена
по всему миру и используется для сокращения Latency.

00:20:04.828 --> 00:20:23.020
Есть также сервис Amazon Route 53,
это сервис для регистрации доменных имен.

00:20:24.010 --> 00:20:34.326
Далее, все сервисы, так или иначе работающие
с доставкой контента, связаны с Amazon CloudFront,

00:20:34.338 --> 00:20:45.046
что такое Amazon CloudFront? Это сеть из серверов,
которые называются Edge Location – эти сервера

00:20:45.058 --> 00:20:58.622
расположены к определенной группе пользователей,
чтобы обеспечивать им быстрый доступ к данным.

00:20:58.634 --> 00:21:12.074
На момент записи видео, они расположены
в 69 крупных городах в 30 странах по всему миру.

00:21:12.086 --> 00:21:25.762
Этим обеспечивается высокоскоростной и
бесперебойный доступ к данным.

00:21:25.774 --> 00:21:32.728
Помимо Edge Locations, существует так
называемый Regional Edge Caches.

00:21:32.740 --> 00:21:46.785
Отличие – Edge Loсations ближе к пользователям и
хранит часто запрашиваемые объекты, файлы и т.д.

00:21:46.797 --> 00:21:57.963
Regional Edge Caches – агрегирует данные из
нескольких Edge Locations, и находится, чуть

00:21:57.975 --> 00:22:14.900
«дальше от клиентов» и там хранятся менее популярные
данные, которые не поместились в Edge Locations.

00:22:17.290 --> 00:22:24.711
Мы уже достаточно проговорили про глобальную
инфраструктуру AWS, о ее компонентах и основная

00:22:24.723 --> 00:22:32.156
идея в том, что благодаря этой инфраструктуре
вы можете построить свою IT-инфраструктуру

00:22:32.168 --> 00:22:42.683
в облаке, которая достаточно гибкая, легко
масштабируется, отказоустойчивая и высокодоступная.

00:22:42.695 --> 00:22:49.862
Давайте пройдемся по основным моментам,
пройденным в первой части нашей сессии.

00:22:49.874 --> 00:22:58.000
Мы узнали, что такое Availability zones,
что такое регионы, что такое дата-центры.

00:22:58.012 --> 00:23:06.697
Дальше мы перешли к CDN, т.е.
Content Delivery Network, Edge Locations,

00:23:06.709 --> 00:23:13.298
Regional Edge Caches, и в целом это вся
необходимая информация касательно глобальной

00:23:13.310 --> 00:23:18.730
инфраструктуры AWS для успешной
сдачи экзамена AWS Certified Cloud Practitioner.

00:23:21.310 --> 00:23:27.936
Мы с вами переходим ко второй, последней части
нашей сегодняшней сессии и сделаем некий обзор

00:23:27.948 --> 00:23:40.639
основных групп сервисов и сервисов внутри этих
групп, которые мы будем проходить на нашем курсе.

00:23:40.651 --> 00:23:49.806
Как уже упоминалось в предыдущей лекции, глобальная
структура AWS состоит из нескольких уровней.

00:23:49.818 --> 00:23:56.367
Самый базовый уровень – это инфраструктура,
в которой есть наши регионы,

00:23:56.379 --> 00:24:05.225
Availability zones, Edge Locations под которыми
сидят наши дата-центры.

00:24:05.237 --> 00:24:14.077
Если идем выше, абстрагируемся, есть набор
Foundational сервисов, основополагающие сервисы,

00:24:14.089 --> 00:24:18.042
а именно Compute – вычислительные мощности,
это сервис Amazon EC2;

00:24:18.054 --> 00:24:25.126
далее Networking – все, что связано с сетями,
начиная от сервиса AWS VPC;

00:24:25.138 --> 00:24:38.576
и Storage – это хранение, основные сервисы
Amazon S3, Amazon EBS (Elastic Block Storage) и т.д.

00:24:38.588 --> 00:24:50.323
Следующий уровень – Platform services, это все те
сервисы, которые базируются на основных сервисах,

00:24:50.335 --> 00:25:02.106
и предоставляют свой сервис по модели либо
Platform as a Service, либо Software as a Service.

00:25:02.118 --> 00:25:06.457
Все то, что поверх, уже последний уровень,
это наши приложения, которые

00:25:06.469 --> 00:25:13.310
пишут наши разработчики, после чего они
доходят до наших клиентов.

00:25:15.490 --> 00:25:28.878
Здесь перечислены 23 категории сервисов внутри
AWS, этот список постоянно меняется и дополняется.

00:25:28.890 --> 00:25:40.898
На нашем курсе мы рассмотрим следующие 7, которые
могут потенциально прийти на реальном экзамене AWS.

00:25:40.910 --> 00:25:52.721
Поэтому внутри каждой группы мы рассмотрим основные
сервисы, чтобы полноценно подготовиться к экзамену.

00:25:52.733 --> 00:26:02.997
На следующих слайдах мы подробно остановимся
на сервисах внутри каждой из 7 групп сервисов

00:26:03.009 --> 00:26:08.185
и вкратце расскажем для чего нужен этот сервис.
На следующих слайдах мы подробно

00:26:08.197 --> 00:26:14.871
остановимся на каждом из сервисов,
но здесь некий широкий обзор того, что мы

00:26:14.883 --> 00:26:23.570
будем делать, что к чему относится, и если
вы конспектируете, самое время записывать.

00:26:23.950 --> 00:26:32.270
Первая группа – группа сервисов хранения.
В рамках нашего курса и для экзамена

00:26:32.282 --> 00:26:42.083
AWS Certified Cloud Practitioner нам необходимо
знать 4 сервиса: Amazon Simple Storage Service

00:26:42.095 --> 00:26:56.459
(Amazon S3) – сервис объектного хранения данных.
Следующий – Amazon Elastic Block Store (Amazon EBS),

00:26:56.471 --> 00:27:04.059
этот сервис используется в связке с нашими
виртуальными серверами Amazon EC2.

00:27:04.071 --> 00:27:11.347
Почему, объясняю. Я специально перепрыгнул
на второй сервис, чтобы дать описание каждому и

00:27:11.359 --> 00:27:18.071
сейчас я приведу сравнение и описание
каждого из типа хранения.

00:27:18.083 --> 00:27:30.810
Когда мы храним файлы в виде объектов, объектно,
то файл воспринимается как единое целое и

00:27:30.822 --> 00:27:37.082
вне зависимости от его размера оно не должно
меняться, т.е. мы его загрузили, и в тот момент,

00:27:37.094 --> 00:27:48.866
когда в нем что-то меняется, неважно, большая
часть файла или один байт, этот файл уже другой.

00:27:48.878 --> 00:28:00.980
Он обновлен, для того чтобы обновить файл в объектном
хранилище, весь файл целиком нужно загрузить заново.

00:28:01.150 --> 00:28:06.627
А когда мы говорим про Amazon EBS – это
блочное хранение. То же самое, что

00:28:06.639 --> 00:28:13.616
жесткие диски на вашем компьютере или ноутбуке.
Когда мы храним файлы или данные блоками.

00:28:13.628 --> 00:28:19.003
Представим большой файл, для того чтобы
хранить такой большой файл, вы занимаете

00:28:19.015 --> 00:28:25.320
десятки или даже сотни тысяч
блоков для хранения этого файла.

00:28:25.332 --> 00:28:35.657
Таким образом, благодаря этому блочному хранению,
мы имеем возможность при малейшем изменении этого

00:28:35.669 --> 00:28:45.924
большого файла, достаточно найти и обновить этот
блок и файл может быть доступен в новой версии.

00:28:45.936 --> 00:29:01.315
Теперь вопрос. Я вам рекомендую
остановить видео и подумать.

00:29:01.327 --> 00:29:12.976
В каком из видов хранения, в объектном или блочном,
обычно устанавливается операционная система и почему?

00:29:12.988 --> 00:29:23.416
Надеюсь, мы услышали много интересных и правильных
ответов. На самом деле ответ был дан еще до того,

00:29:23.428 --> 00:29:37.420
как был задан. Операционная система
устанавливается на блочном типе хранения. Почему?

00:29:37.870 --> 00:29:49.498
Когда мы работаем с операционной системой, она может
состоять из миллионов маленьких файлов, и проще

00:29:49.510 --> 00:30:04.111
сохранить эти файлы в одном блоке, чем вести учет
каждого маленького файла в объектном типе хранилища.

00:30:04.123 --> 00:30:14.184
Таким образом, хранение занимает меньше места и
учет как таковой этих маленьких файлов нам не нужен.

00:30:14.196 --> 00:30:25.953
Другой момент - у нас операционная система, это
некий живой организм, постоянно меняется, файлы

00:30:25.965 --> 00:30:38.205
обновляются, и говоря про объектный тип, у нас есть
разные файлы внутри нашей операционной системы.

00:30:38.217 --> 00:30:46.173
Если что-то обновилось, чтобы достучаться до новой
версии, нужно весь файл загрузить в объектное

00:30:46.185 --> 00:30:53.479
хранилище. А если размер файла большой, а
обновилась лишь малая часть, то мы тратим

00:30:53.491 --> 00:31:01.989
фактически больше времени, чтобы загрузить его
туда, поэтому нерационально устанавливать

00:31:02.001 --> 00:31:13.730
операционную систему в объектное хранилище,
а правильнее в блочное. Идем дальше.

00:31:16.010 --> 00:31:22.337
Следующий сервис – это Amazon EFS (Amazon Elastic
File System), блочное хранилище, файловая система.

00:31:22.349 --> 00:31:30.981
В отличие от Amazon EBS, она может быть разделена,
расшарена между несколькими Amazon EC2 инстансами.

00:31:30.993 --> 00:31:37.751
Amazon EFS не может работать как операционная
система, чтобы установить операционную систему и

00:31:37.763 --> 00:31:48.544
ваш сервер запустился, вам надо привязать
к нему Amazon EBS, после запуска, монтируется

00:31:48.556 --> 00:32:00.558
другой диск, который может быть Amazon EFS. Таким
образом, можно будет, например, если есть задача

00:32:00.570 --> 00:32:07.883
в проведении каких-то расчетов и необходимо
место для обмена данными между несколькими

00:32:07.895 --> 00:32:15.011
инстансами, то Amazon EFS может быть
достаточно хорошим и правильным вариантом.

00:32:15.023 --> 00:32:27.896
Четвертый сервис – это сервис в сервисе, т.е. у нас
есть Amazon S3, внутри есть другой сервис для

00:32:27.908 --> 00:32:34.279
объектного хранения – Amazon S3 Glacier, возле
него еще один сервис – Amazon S3 Glacier Archive.

00:32:34.291 --> 00:32:44.370
В чем отличие и идея? Говоря об Amazon S3,
он состоит из нескольких вариантов хранения,

00:32:44.382 --> 00:32:57.613
о них мы поговорим на следующих лекциях
и глобальное отличие S3 классов хранения

00:32:57.625 --> 00:33:06.184
от классов хранения Glacier и Glacier Archive,
в том, что файлы, хранящиеся объектно,

00:33:06.196 --> 00:33:17.322
записываются один раз и очень редко,
маловероятно запрашиваются обратно.

00:33:17.334 --> 00:33:25.555
Зная поведение ваших данных, например,
есть данные, которые записаны один раз

00:33:25.567 --> 00:33:32.801
и они не используются, но их надо хранить
по определенным нормативным документам.

00:33:32.813 --> 00:33:40.930
К примеру, все финансовые операции в банках,
их логи, должны храниться 5 лет.

00:33:40.942 --> 00:33:46.073
После 5 лет вся эта информация о
транзакциях может быть удалена.

00:33:46.085 --> 00:33:55.958
Подобного рода данные достаточно часто встречаются,
поэтому был создан специальный сервис для хранения

00:33:55.970 --> 00:34:05.859
подобных данных. Их можно загрузить туда и хранить
очень дешево, зная, что мы их никогда не запросим.

00:34:05.871 --> 00:34:10.762
Отличие Glacier от Glacier Archive в том,
что Glacier Archive еще дешевле.

00:34:10.774 --> 00:34:26.318
Там хранятся только те данные, про которые мы
с 99% уверенностью знаем, что мы их не запросим.

00:34:26.330 --> 00:34:36.774
Если мы их запросим, то оплата за запрошенные
данные может достаточно дорогой.

00:34:36.786 --> 00:34:47.669
В момент, когда вы выбираете класс хранения,
будь то Glacier или любой из классов хранения S3,

00:34:47.681 --> 00:34:52.020
следует учитывать стоимость и особенности
каждого из классов хранения.

00:34:53.120 --> 00:35:03.295
Переходим к следующей группе сервисов –
группа сервисов Compute (вычисления).

00:35:03.307 --> 00:35:11.229
Здесь будет рассмотрено большее количество
сервисов. Пройдемся вкратце по каждому из них.

00:35:11.241 --> 00:35:15.110
Самый первый и основной – это
Amazon EC2 (Elastic Compute Cloud),

00:35:15.122 --> 00:35:25.976
это сервис, я буду стараться говорить простым
языком, чтобы вы уловили основной смысл и

00:35:25.988 --> 00:35:30.077
при необходимости смогли найти сложные описания,
сложные дефиниции самостоятельно в документации.

00:35:30.089 --> 00:35:38.411
Работать с документацией вы уже умеете. Amazon
Elastic Compute Cloud – это когда вам нужно запросить

00:35:38.423 --> 00:35:45.137
чистый виртуальный сервер, с которым вы
дальше можете что-то настраивать, что-то делать.

00:35:45.149 --> 00:35:55.847
Далее, это Amazon EC2 Auto Scaling, это сервис,
настраиваемый поверх Amazon EC2, ранее я рассказывал,

00:35:55.859 --> 00:36:02.168
что есть такое понятие, как автомасштабирование,
и можно настроить инфраструктуру таким образом,

00:36:02.180 --> 00:36:08.420
что в зависимости от нагрузки она увеличивается
или уменьшается, некий абстрактный живой организм.

00:36:08.660 --> 00:36:14.299
Одним из сервисов, реализующих это,
является Amazon EC2 Auto Scaling.

00:36:14.311 --> 00:36:23.589
Вы создаете некоторую группу, к ней привязываете
Amazon EC2 инстансы, передаете различные параметры,

00:36:23.601 --> 00:36:30.823
и далее, в зависимости от определенных условий, эти
сервера автоматически отключаются либо дополняются

00:36:30.835 --> 00:36:38.477
при необходимости. Условия могут быть разными,
в т.ч. и показатели нагрузки на ваши сервера.

00:36:38.489 --> 00:36:49.424
Следующий – это Amazon Elastic Container Service
(Amazon ECS). Это сервис контейнерной оркестрации,

00:36:49.436 --> 00:36:58.804
т.е. используем этот сервис, только когда нам надо
работать с Docker-контейнерами, и связанный сервис

00:36:58.816 --> 00:37:09.476
Amazon ECR (Elastic Container Registry), это когда
нужно найти некий образ Docker-контейнера,

00:37:09.488 --> 00:37:17.024
и как раз то место, где все хранится или
можно сохранить, это как раз Amazon ECR.

00:37:17.036 --> 00:37:25.771
Далее, это сервис AWS Elastic Beanstalk, он
достаточно активно продвигается самим AWS, но т.к.

00:37:25.783 --> 00:37:32.604
есть ряд других сервисов, предоставляющих
больше контроля и свободы,

00:37:32.616 --> 00:37:42.891
AWS Elastic Beanstalk на текущий момент не является
самым популярным при создании приложений.

00:37:42.903 --> 00:37:51.191
Но идея такая, что если у вас есть Apache, либо
Microsoft IIS приложения, вы пишете приложения,

00:37:51.203 --> 00:38:02.188
оформляете код, архивируете код, дополняете
конфигурационными файлами для Beanstalk, в которых

00:38:02.200 --> 00:38:10.130
расписываете необходимые для вас параметры и
этот архив передаете в сервис AWS Elastic Beanstalk.

00:38:10.520 --> 00:38:22.807
После этого у вас автоматически это приложение,
код разархивириуется, компилируется и deployed, т.е.

00:38:22.819 --> 00:38:34.422
устанавливается на Production Environment
среду, в котором она сразу становится доступной.

00:38:34.434 --> 00:38:45.815
Это сервис, облегчающий жизнь разработчикам, которые
не очень сильны в системном администрировании,

00:38:45.827 --> 00:38:56.032
и этот сервис будет очень кстати.
Следующий мой любимый сервис, это AWS Lambda,

00:38:56.044 --> 00:39:06.241
представитель модели FaaS, это следующая модель
предоставления сервисов, Function as a service.

00:39:06.253 --> 00:39:12.529
В чем идея? Представим, что вы разработчик, знаете
один язык программирования Python, но вы хотите

00:39:12.541 --> 00:39:21.414
какой-то стартап. В этом случае нужно знать
что-то еще из системного администрирования.

00:39:21.426 --> 00:39:28.107
Иногда это напрягает, кто-то боится,
кто-то не хочет, кому-то лень это изучать.

00:39:28.119 --> 00:39:38.108
В случае с AWS Lambda все просто, вы пишете код,
он деплоится внутри этой функции и все! Магия!

00:39:38.120 --> 00:39:47.192
В момент, когда функция нужна, она вызывается
и все то, что находится под этим, полностью

00:39:47.204 --> 00:39:53.210
обслуживание вот этого выполнения кода,
обходит вас стороной.

00:39:53.390 --> 00:40:07.826
Таким образом, обновление версий Python, обновления
операционной системы, патчи безопасности,

00:40:07.838 --> 00:40:12.285
администрирование самим виртуальным сервером,
это все обходит вас стороной.

00:40:12.297 --> 00:40:27.502
Вы пишете код и оплачиваете только за
гигабайт-секунды. Это такая мера измерения,

00:40:27.514 --> 00:40:35.655
помогающая считать отработку AWS Lambda,
чтобы как-то оценивать и за что оплачивать.

00:40:35.667 --> 00:40:43.375
Идея в том, что AWS Lambda работает
какое-то количество времени, максимум 15 мин.

00:40:43.387 --> 00:40:56.241
Сама AWS Lambda запускается в маленькой виртуальной
среде с определенным количеством операционной памяти.

00:40:56.253 --> 00:41:04.928
Например, выделяете для нее 512 МБ, если она
запускается за 2 сек, если перемножить,

00:41:04.940 --> 00:41:09.173
то получится 1 ГБ\сек потратила эта Lambda,
для исполнения определенного кода.

00:41:09.185 --> 00:41:17.925
За 1 ГБ\сек, в зависимости от цен
со страницы Pricing, будет оплата.

00:41:17.937 --> 00:41:25.463
AWS Lambda – одна из самых основных сервисов
подхода Serverless, т.е. безсерверной архитектуры.

00:41:25.475 --> 00:41:30.361
Про это мы будем очень много говорить, когда будет
возможность, я буду рассказывать интересные

00:41:30.373 --> 00:41:36.620
моменты, что-то из своего опыта работы.
Мы к этому вернемся еще не раз.

00:41:37.182 --> 00:41:44.103
Следующий сервис – Amazon Elastic
Kubernetes Service (Amazon EKS).

00:41:44.115 --> 00:41:50.699
Ранее мы говорили про Amazon ECS
для работы с Docker-образами.

00:41:50.711 --> 00:41:59.265
Docker-образы – это отдельная технология, а умение
совладать с этим количеством Docker-образов и

00:41:59.277 --> 00:42:09.412
правильно их оркестрировать, это другая технология,
называется Kubernetes, или K8S. AWS для Kubernetes

00:42:09.424 --> 00:42:18.673
создал отдельный специальный сервис Amazon EKS,
для предоставления Kubernetes as a service.

00:42:18.685 --> 00:42:26.388
Вам не нужно его настраивать, разбираться в его
администрировании, поднимать и выделять сервер.

00:42:26.400 --> 00:42:32.161
Вы просто выводите определенные
параметры для работы вашего Kubernetes,

00:42:32.173 --> 00:42:37.369
указываете пути до ваших Docker-образов,
дополнительные параметры работы.

00:42:37.381 --> 00:42:48.427
Она запускается и производится оплата
согласно прайсингу за этот сервис.

00:42:48.439 --> 00:42:54.501
Фактически, вы избавляетесь от большой
административной части работы.

00:42:54.513 --> 00:43:02.713
Естественно, насколько это возможно сделана
тюнинг-оптимизация, подходящая для большинства

00:43:02.725 --> 00:43:05.960
задач. Если у вас такая задача,
это идеальный вариант.

00:43:06.170 --> 00:43:14.761
Если же у вас какая-то специфичная задача, нужна
супероптимизация, тонкие настройки, в этом случае,

00:43:14.773 --> 00:43:19.631
возможно, правильным вариантом будет самостоятельно
хостить Kubernetes на виртуальных серверах,

00:43:19.643 --> 00:43:27.069
но это требует дополнительных умений, знаний,
специалиста как минимум и может обойтись дороже,

00:43:27.081 --> 00:43:35.860
чем платить за сервис через Pay-as-you-go-pricing,
когда вы платите столько, сколько вы использовали.

00:43:35.872 --> 00:43:49.103
Последнее, это Amazon Fargate – вычислительный
движок для Amazon ECS, помогающий вам запускать и

00:43:49.115 --> 00:43:58.039
управлять контейнерами, вроде аналога Kubernetes,
но без Kubernetes, сервис оркестрации контейнеров.

00:43:58.051 --> 00:44:06.799
Он также предоставляется по модели Software as a
service, т.е. готовый, достаточно ввести

00:44:06.811 --> 00:44:13.945
определенные настройки и вы запускаетесь.
На этом мы закончили с группой compute-сервисов.

00:44:13.957 --> 00:44:22.932
Идем дальше. Следующая группа сервисов –
это сервисы, связанные с базами данных.

00:44:22.944 --> 00:44:33.265
Так как у меня есть некоторый опыт работы
как разработчика баз данных, я надеюсь, что смогу

00:44:33.277 --> 00:44:41.185
параллельно со знаниями AWS, также передать
структурированные знания по базам данных,

00:44:41.197 --> 00:44:46.422
которые помогут вам лучше понимать сервисы AWS
именно по направлению баз данных.

00:44:46.434 --> 00:44:52.644
Это поставит вас на уровень выше по
сравнению с другими студентами и

00:44:52.656 --> 00:45:00.878
другими кандидатами при устройстве на работу.
Надеюсь, пригодится.

00:45:00.890 --> 00:45:06.715
Первый сервис – Amazon Relational Database Service,
реляционная база данных, которая предоставляется как

00:45:06.727 --> 00:45:15.244
сервис. Один из самых популярных сервисов, в котором
можно выбрать из достаточно немаленького списка

00:45:15.256 --> 00:45:32.773
существующих движков систем управления базами данных,
как Postgres, MySQL, Oracle, Microsoft Server и др.

00:45:32.785 --> 00:45:40.784
Далее – Amazon Aurora. Amazon RDS и Amazon Aurora
всегда идут рука об руку, потому что Amazon Aurora

00:45:40.796 --> 00:45:47.212
точно такой же сервис, как и Amazon RDS, но
отличается тем, что специальная команда AWS

00:45:47.224 --> 00:46:00.322
взяла два самых популярных open source СУБД, это
MySQL и Postgres и оптимизировала его настолько,

00:46:00.334 --> 00:46:11.342
внедрила и интегрировала настолько, что за те же
деньги оно дает намного больше функционала

00:46:11.354 --> 00:46:19.761
и возможностей, нежели поставить
чистый MySQL или Postgres через Amazon RDS.

00:46:19.773 --> 00:46:34.590
Но и здесь есть «ложка дегтя в бочке меда».
Amazon Aurora – чисто AWS решение, поэтому,

00:46:34.640 --> 00:46:42.578
как только вы начинаете использовать ее,
с учетом того, что MySQL и Postgres достаточно

00:46:42.590 --> 00:46:50.029
сильно модифицированы, где-то может синтаксис
сильно отличаться при написании SQL-запросов.

00:46:50.041 --> 00:47:00.041
Это говорит о том, что вы доходите до
Vendor lock-in, это когда вы привязываетесь

00:47:00.065 --> 00:47:07.764
к одному производителю, к какому-то приложению
или программному обеспечению.

00:47:07.776 --> 00:47:16.010
В этом плане все сильно зависит от ваших запросов
и возможностей, а также планов на будущее,

00:47:16.022 --> 00:47:23.782
будете ли вы дальше двигаться с AWS или
потенциально может произойти что-то, что вам

00:47:23.794 --> 00:47:29.660
нужно будет перепрыгнуть от одного
облачного провайдера к другому.

00:47:29.672 --> 00:47:39.413
Если такие риски есть, то нужно продолжать с
Amazon RDS, потому как вы привяжетесь в начале,

00:47:39.425 --> 00:47:44.365
все приложение будет интегрировано с Amazon Aurora,
так как даже подобного функционала, как у

00:47:44.377 --> 00:47:50.311
Amazon Aurora, не будет у другого облачного
провайдера, даже если у него будет своя

00:47:50.323 --> 00:47:57.363
Amazon Aurora, скажем так, то она
будет очень сильно отличаться.

00:47:57.375 --> 00:48:05.651
Даже простой перенос от Amazon Aurora с
движком MySQL на другой чистый, не привязанный

00:48:05.663 --> 00:48:16.513
к Aurora MySQL, потребует значительных усилий и
затрат ресурсов и времени. Оно может того не стоить.

00:48:16.525 --> 00:48:26.181
Поэтому надо семь раз подумать, и когда вы решите
продолжать с AWS до конца по тем или иным

00:48:26.193 --> 00:48:34.610
причинам, то можно выбрать Amazon Aurora и
двигаться с ней и наслаждаться тем, что она дает.

00:48:35.060 --> 00:48:43.251
Если нет, то понимать и знать, что вы в любой момент
можете перепрыгнуть в тот момент, когда условия

00:48:43.263 --> 00:48:53.970
работы с AWS будет не устраивать, миграция это
не легко, но относительно легче и менее болезненно

00:48:53.982 --> 00:49:06.583
перенестись от Amazon RDS с чистым MySQL, Postgres
либо любым другим СУБД на сервис аналогичного

00:49:06.595 --> 00:49:19.995
облачного провайдера. Далее, идет Amazon Redshift.
Говоря про первые два сервиса, Amazon RDS

00:49:20.007 --> 00:49:26.099
и Amazon Aurora, имеем в виду реляционные
базы данных транзакционного типа.

00:49:26.111 --> 00:49:36.051
Это значит, мы работаем транзакциями,
пишем много, но можем мало читать.

00:49:36.063 --> 00:49:48.063
Мы делаем CRUD-операции, аббревиатура составлена
из первых букв названий основных операций в СУБД:

00:49:48.075 --> 00:50:02.280
C-create, R-read, U-update, D-delete. Это фактически
описание жизненного цикла данных в базе данных.

00:50:02.292 --> 00:50:13.288
В CRUD-операциях, имеется в виду каждая из этих
операций легковесная, и делает что-то одно простое:

00:50:13.300 --> 00:50:20.090
записал, считал, обновил, удалил. Для работы
приложения достаточно транзакционных типов

00:50:20.102 --> 00:50:27.349
отношений с базами данных, когда вам нужно,
к примеру, список пользователей, вы делаете

00:50:27.361 --> 00:50:31.951
простой селект, который считывает
нужные данные из нужной таблицы.

00:50:31.963 --> 00:50:40.100
Может будет сложный запрос, где присутствуют
несколько таблиц, но не более.

00:50:40.112 --> 00:50:47.604
Здесь упор делается на скорость. Когда говорим
про Amazon Redshift, это нетранзакционная,

00:50:47.616 --> 00:50:56.502
это аналитическая база данных, ее отличие в том,
что вы не пишите туда транзакции, вы пишете один

00:50:56.514 --> 00:51:03.908
раз и много раз будете считывать. Много считывать
потому, что она аналитическая и подразумевается,

00:51:03.920 --> 00:51:15.065
что данные крутятся по-разному и вы пытаетесь
получить некий вид этих данных, чтобы извлечь

00:51:15.077 --> 00:51:20.580
полезную информацию для вашего
бизнеса и принять какие-то решения.

00:51:21.370 --> 00:51:26.051
Еще одно отличие, когда мы работаем с
Amazon RDS или Amazon Aurora,

00:51:26.063 --> 00:51:37.854
обычно эти базы так используют приложения,
а приложениями пользуются пользователи.

00:51:37.866 --> 00:51:42.848
Когда мы говорим про Amazon Redshift, обычно
загружается большой объем информации,

00:51:42.860 --> 00:51:52.564
данные готовятся заранее в нужном виде, готовятся
сложнейшие запросы, чтобы крутить данные по-разному.

00:51:52.576 --> 00:52:01.681
Вызываются вручную обычно высшим менеджментом, не
обязательно технический специалист или IT-директор,

00:52:01.693 --> 00:52:07.589
это может быть CEO или еще кто-то, который нажимает
на кнопку и получает сложный запрос, который для

00:52:07.601 --> 00:52:15.565
него приготовили и он видит выжимку всего того
большого объема данных, он может достигать тера-

00:52:15.577 --> 00:52:33.259
и петабайтов, и на основе этой выжимки принимает
какое-то важное бизнес-решение. Идем дальше.

00:52:33.271 --> 00:52:38.352
Четвертый сервис, который важно
знать – это Amazon DynamoDB.

00:52:38.364 --> 00:52:44.545
Когда мы говорим про Amazon RDS или
Amazon Aurora, имеем в виду SQL-базы данных.

00:52:44.557 --> 00:52:51.536
В последние годы стали уже популярны
NoSQL базы данных и Amazon DynamoDB

00:52:51.548 --> 00:53:01.326
– один из ярких представителей NoSQL базы данных.
Чем они отличаются и историю борьбы этих двух типов

00:53:01.338 --> 00:53:14.446
баз данных я расскажу чуть позже. Сейчас вам
важно запомнить, что для некоторых приложений нет

00:53:14.458 --> 00:53:21.640
необходимости содержать достаточно сложную
структуру из таблиц внутри реляционной базы данных,

00:53:21.652 --> 00:53:30.193
они должны быть между собой связанными,
целостными и есть определенные ограничения.

00:53:30.205 --> 00:53:39.988
Работая с Amazon DynamoDB, это не связанные между
собой, не структурированный набор записанных данных,

00:53:40.000 --> 00:53:46.014
и в нужном месте, зная, как их вытащить, вы
запрашиваете эти данные для целей приложения,

00:53:46.026 --> 00:53:53.637
чтобы выдать дальше пользователю. Так вот, ввиду
некоторых особенностей популярных в последние годы

00:53:53.649 --> 00:54:00.002
приложений, Amazon DynamoDB является достаточно
интересным решением с некоторыми преимуществами.

00:54:00.014 --> 00:54:03.947
Но это опять же сильно зависит
от ваших бизнес-требований.

00:54:03.959 --> 00:54:10.794
Здесь следует отметить, что Amazon DynamoDB
также является serverless-приложением.

00:54:10.806 --> 00:54:26.736
Вам не нужно ничего поддерживать, он дается как
сервис и часто используется в связке с AWS Lambda,

00:54:26.748 --> 00:54:33.030
Amazon DynamoDB и ряд других сервисов,
которые мы рассмотрим на следующих слайдах.

00:54:34.880 --> 00:54:41.478
Идем дальше, следующая группа сервисов – это
сеть и доставка контента.

00:54:41.490 --> 00:54:47.820
Долго останавливаться не будем,
потому что с основными сервисами мы

00:54:47.832 --> 00:54:51.157
уже пересекались на предыдущих лекциях.
Вкратце пройдемся.

00:54:51.169 --> 00:55:00.971
Первая – Amazon VPC, идея в том, что допустим
в вашей корпоративной сети или сети университета,

00:55:00.983 --> 00:55:07.771
есть развернутая локальная сеть.
Через нее проходят разные перемещения.

00:55:07.783 --> 00:55:17.489
Например, можно скачать общую папку,
где лежат электронные версии книг и учебников,

00:55:17.501 --> 00:55:23.735
может быть организованы дистрибутивы различных
приложений для студентов на бесплатной

00:55:23.747 --> 00:55:30.779
основе и т.д., вы подключаетесь
и работаете с ними через вашу локальную сеть.

00:55:30.791 --> 00:55:37.391
Бывает так, что в целях безопасности,
в университетах во время, скажем, рубежного

00:55:37.403 --> 00:55:46.624
контроля или экзаменов, отключают выход
в интернет, но остается доступ к вашему

00:55:46.636 --> 00:55:53.242
внутреннему университетскому сайту для сдачи
экзаменов, увидеть оценки и т.д.

00:55:53.254 --> 00:56:02.193
Ваш сайт, если хостится локально, т.к. вы сидите
в одной локальной сети, вы напрямую можно

00:56:02.205 --> 00:56:10.416
обращаться к нему. Если он хостится отдельно,
то ваш университетский сайт заносится в так

00:56:10.428 --> 00:56:19.130
называемый «белый список» и, соответственно,
вы можете загрузить его, но не другие сайты.

00:56:20.750 --> 00:56:30.057
Следом идет Elastic Load Balancing,
это второй из сервисов, помогающих «оживить»

00:56:30.069 --> 00:56:38.666
нашу инфраструктуру и стать автомасштабируемым,
наряду с Amazon EC2 Auto Scaling.

00:56:38.678 --> 00:56:43.449
Оба используются с Amazon EC2, т.е.
у нас поднимается виртуальный сервер;

00:56:43.461 --> 00:56:50.967
далее идет Auto Scaling, который в нужный момент
увеличивает или уменьшает количество серверов

00:56:50.979 --> 00:56:59.928
в группе; и следом Elastic Load Balancing,
балансирующий (распределяющий) нагрузку на группу.

00:56:59.940 --> 00:57:10.863
Сервис Amazon CloudFront – мы уже говорили о нем,
Content Delivery Network, сети для доставки контента.

00:57:10.875 --> 00:57:15.842
AWS Transit Gateway, здесь я перескочу
немного вперед, AWS Direct Connect и AWS VPN,

00:57:15.942 --> 00:57:25.942
эти сервисы помогают вам связать ваш локальный
дата-центр с вашей облачной инфраструктурой.

00:57:26.042 --> 00:57:30.042
Они отличаются своими особенностями, плюсами,
минусами и в зависимости от ваших бизнес-требований

00:57:30.142 --> 00:57:38.142
вы можете выбрать тот или иной вариант. Следует
упомянуть, что может быть несколько подходящих

00:57:38.242 --> 00:57:44.242
вариантов, поэтому намеренно выбираются два
наиболее подходящих из них, чтобы был резервный

00:57:44.342 --> 00:57:56.342
канал связи между локальным дата-центром, либо
локальным оффлайн офисом до облачной инфраструктуры.

00:57:56.442 --> 00:58:04.442
Это часто практикуется. Последний сервис – это
Amazon Route 53, мы про него упоминали,

00:58:04.542 --> 00:58:17.542
это domain name system (DNS),
через него можно покупать или арендовать домены.

00:58:17.642 --> 00:58:34.642
Следующая группа сервисов связана с безопасностью.
Большинство из них мы уже проходили.

00:58:34.642 --> 00:58:41.642
Вкратце напомню. AWS IAM и
AWS Organizations вам знакомы.

00:58:41.742 --> 00:58:50.742
Amazon Cognito – сервис, позволяющий
вам регистрироваться или логиниться

00:58:50.842 --> 00:58:59.842
вашим пользователям внутри вашего приложения
или веб-сайта нативно в AWS.

00:58:59.942 --> 00:59:04.942
Хотел бы отметить, что Amazon Cognito,
также, как и Amazon Aurora,

00:59:05.042 --> 00:59:09.042
полностью сервис AWS, подобного вы
не найдете больше нигде, это Vendor lock.

00:59:09.042 --> 00:59:18.042
Поэтому для ведения учета ваших
пользователей существуют различные приложения,

00:59:18.142 --> 00:59:24.142
поддерживающие не только AWS,
но и другие облачные провайдеры и в случае,

00:59:24.242 --> 00:59:29.242
если вы переживаете за Vendor lock,
следует также рассмотреть те варианты.

00:59:30.142 --> 00:59:40.142
Следующий – это AWS Artifact. Этот сервис является
больше сборником документов, доступных в режиме

00:59:40.242 --> 00:59:48.242
чтения. AWS проходит различные проверки от
регулирующих органов на получение сертификатов

00:59:48.342 --> 00:59:57.342
соответствия, сертификатов
безопасности на соответствие требованиям.

00:59:57.342 --> 01:00:03.373
И вам как компании, которая хостит свою
инфраструктуру в облаке AWS,

01:00:03.473 --> 01:00:13.473
также могут пригодиться некоторые подтверждающие
документы по запросу госорганов в вашей стране.

01:00:13.573 --> 01:00:31.473
Если вам придет такой запрос, вы знаете куда
обратиться для получения необходимых документов.

01:00:31.573 --> 01:00:41.573
Следующий очень важный сервис – AWS Key Management
Service, кому-то этот сервис может показаться сложным

01:00:41.673 --> 01:00:55.673
для понимания. Но как только вы его поймете,
вы освоите одну из самых сложных тем в AWS,

01:00:55.773 --> 01:01:04.278
с этим сервисом мы еще столкнёмся. Он позволяет
нам создавать и управлять ключами шифрования.

01:01:04.290 --> 01:01:12.755
Эти ключи позволяют шифровать весь поток данных,
как в процессе хранения, так и в процессе передачи.

01:01:12.767 --> 01:01:20.366
Оно интегрировано с большим количеством сервисов
AWS и является одним из основных наряду с AWS IAM.

01:01:20.378 --> 01:01:30.381
Последний сервис, связанный с безопасностью, это
AWS Shield, это SaaS сервис, т.е. managed сервис.

01:01:30.393 --> 01:01:39.178
Отличие от обычных сервисов в том, что он
предоставляется по модели SaaS, который позволяет

01:01:39.190 --> 01:01:54.493
максимально сконцентрироваться на основном
продукте, а этот сервис управляется самим AWS.

01:01:54.505 --> 01:02:02.864
Вам достаточно передать определенные настройки
управления. Сервис помогает в защите от DDoS-атак.

01:02:02.876 --> 01:02:22.542
Что это такое, вы можете узнать
одним кликом в интернете.

01:02:22.602 --> 01:02:35.803
Предпоследняя группа сервисов, о них
мы уже проговаривали, поэтому остановимся

01:02:35.815 --> 01:02:46.095
на них максимально кратко. Это сервисы,
управляющие вашими затратами в облаке

01:02:46.107 --> 01:02:53.137
– AWS Cost and Usage Report,
AWS Budgets и AWS Cost Explorer.

01:02:53.149 --> 01:02:59.612
Подробно о них мы с вами говорили на
предыдущей лекции, поэтому двигаемся дальше.

01:03:00.622 --> 01:03:16.827
Последняя группа сервисов – AWS management
and governance, т.е. сервисы управления,

01:03:16.839 --> 01:03:24.381
облегчающие работу в облаке. Первый – это AWS
Management Console, в какой-то мере можно назвать

01:03:24.393 --> 01:03:32.617
сервис, дает возможность добраться до других
сервисов. Про него будет отдельное Демо,

01:03:32.629 --> 01:03:45.071
там мы его рассмотрим подробнее.
AWS Config – у вас есть IT-инфраструктура и в ней

01:03:45.083 --> 01:03:52.398
много разных ресурсов, каждый из
них может так или иначе меняться, и

01:03:52.410 --> 01:04:00.765
AWS Config позволяет отслеживать эти
изменения и реагировать на них.

01:04:00.777 --> 01:04:10.942
Amazon CloudWatch – важный сервис,
там хранятся все логи ваших приложений.

01:04:10.954 --> 01:04:26.156
AWS Auto Scaling мы проходили уже,
также, как и AWS Command Line Interface.

01:04:26.168 --> 01:04:38.815
AWS Trusted Advisor помогает вам оптимизировать
безопасность и так называемый «performance», т.е.

01:04:38.827 --> 01:04:46.149
производительность вашей IT-инфраструктуры.
Схожий с ним сервис, это AWS Well-Architected Tool,

01:04:46.161 --> 01:04:55.167
про его теоретические моменты мы
еще проговорим подробно.

01:04:55.179 --> 01:05:08.032
В целом это некоторый набор рекомендаций,
помогающий лучше выстроить инфраструктуру

01:05:08.112 --> 01:05:15.523
в вашем облаке. Последний, но немаловажный
сервис, это AWS CloudTrail.

01:05:15.535 --> 01:05:24.374
Когда ваше приложение пишет логи,
оно не изменяет никакие IT-ресурсы.

01:05:24.386 --> 01:05:34.487
Допустим, у вас поднят виртуальный сервер, там
есть приложение, когда пользователь отправляет

01:05:34.499 --> 01:05:44.772
ему запрос, происходит изменение в данных,
связанных с этим пользователем, происходят

01:05:44.784 --> 01:05:51.342
какие-то изменения в самом приложении, оно может
по-другому отображаться, но сам виртуальный сервер

01:05:51.354 --> 01:06:00.035
никуда не уходит, и изменения в инфраструктуре
не происходят. Так вот, есть отдельный вид

01:06:00.047 --> 01:06:08.881
операций, это именно User Activity и API usage.
API имеется в виду, ранее говорилось,  что все

01:06:08.893 --> 01:06:21.351
сервисы AWS, а это, наверное, самый большой в мире
набор API (Application Programming Interface)

01:06:21.363 --> 01:06:34.466
т.е. язык, на котором сервисы (машины) общаются
между собой по определенному протоколу.

01:06:34.478 --> 01:06:45.886
При запросе одних API ничего не меняется,
но при запросе других меняется инфраструктура.

01:06:45.898 --> 01:06:57.976
Приведу пример: при создании новых инстансов
вы сделали API-запрос, неважно как, через AWS SDK,

01:06:57.988 --> 01:07:12.069
AWS CLI или AWS Management Console, все это
запускает API-вызов в отношении AWS и поднимается

01:07:12.081 --> 01:07:26.189
ваш сервер; или же поднимаете инстанс базы данных
и т.д. Эти API-действия привязаны к пользователю

01:07:26.201 --> 01:07:33.428
или к роли внутри AWS, который это запросил,
сохраняются в AWS CloudTrail.

01:07:33.440 --> 01:08:10.379
Его можно сравнить с «черным ящиком» в самолетах,
в котором непрерывно записываются все данные,

01:08:10.391 --> 01:08:27.068
показания приборов, параметры и т.д. в момент
полета. Если в облаке происходит какая-то ситуация

01:08:27.080 --> 01:08:45.810
или попытка несанкционированного проникновения,
через AWS IAM отключаются все доступы и идет

01:08:45.822 --> 01:08:50.762
обращение в AWS CloudTrail для выяснения причин
произошедшего в рамках вашей инфраструктуры.

01:08:51.482 --> 01:09:03.318
На этом мы заканчиваем сегодняшнюю
сессию и подведем небольшой итог.

01:09:03.330 --> 01:09:13.008
В первой части рассмотрели регионы, Availability 
zones, edge locations, глобальную инфраструктуру AWS.

01:09:13.020 --> 01:09:29.647
Вторая часть чуть больше, там рассмотрены
категории и виды сервисов, их определения,

01:09:29.659 --> 01:09:36.043
для чего они существуют. Они могут прийти
в вопросах на реальном AWS экзамене.

01:09:36.055 --> 01:09:47.907
На этом слайде представлены ссылки, где можно
получить более подробную информацию по данной теме.

01:09:47.919 --> 01:09:55.292
На этом мы заканчиваем, всем большое спасибо
за внимание и до встречи на следующем занятии!