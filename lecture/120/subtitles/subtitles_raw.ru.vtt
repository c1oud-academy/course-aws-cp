WEBVTT

00:00:00.000 --> 00:00:05.000
Добрый день, уважаемые студенты! Я рад вас всех видеть на очередной лекции.

00:00:05.000 --> 00:00:08.000
Тема сегодняшней лекции это Cloud Architecture.

00:00:08.000 --> 00:00:14.000
То есть мы поговорим, как правильно строить IT-архитектуру в облаке AWS.

00:00:14.000 --> 00:00:16.000
Итак, давайте начнем.

00:00:17.000 --> 00:00:20.000
Сегодняшняя лекция состоит из трех частей.

00:00:21.000 --> 00:00:24.000
В первой части мы поговорим про AWS Well-Architected Framework.

00:00:24.000 --> 00:00:29.000
Это набор best practices от команды архитекторов AWS.

00:00:29.000 --> 00:00:32.000
Как правильно строить IT-архитектуру в облаке.

00:00:32.000 --> 00:00:40.000
Далее, во второй части, мы познакомимся с некоторыми важными терминами, связанные с надежностью и доступностью вашей инфраструктуры.

00:00:40.000 --> 00:00:51.000
И третье, мы поговорим про сервис AWS Trusted Advisor, который помогает нам строить архитектуру с учетом best practices.

00:00:51.000 --> 00:00:58.000
Мы с вами начинаем первую часть сегодняшней нашей лекции AWS Well-Architected Framework.

00:00:58.000 --> 00:01:05.000
Перед тем, как мы подробнее про него поговорим, давайте остановимся на том, что же такое архитектура.

00:01:05.000 --> 00:01:16.000
IT-архитектура это в каком-то смысле искусство и наука по планированию и построению сложных структур.

00:01:16.000 --> 00:01:20.000
Построением этих сложных структур занимаются IT-архитекторы.

00:01:20.000 --> 00:01:25.000
В нашем случае Cloud Architects, то есть облачные архитекторы.

00:01:25.000 --> 00:01:27.000
Чем они занимаются?

00:01:27.000 --> 00:01:35.000
Это те люди, которые, первое, ведут переговоры с так называемыми лицами, принимающие решения.

00:01:35.000 --> 00:01:42.000
Это может быть высший менеджмент либо владельцы бизнеса, для того, чтобы понять, какие цели преследует бизнес.

00:01:42.000 --> 00:01:55.000
Второе, архитектор с учетом тех требований, зная, какие IT-технологии на текущий момент есть в наличии, доступны,

00:01:55.000 --> 00:02:10.000
и понимая, какая команда есть в наличии, прикидывает, возможно ли эти бизнес-требования реализовать в адекватные сроки и с адекватными финансовыми затратами.

00:02:10.000 --> 00:02:25.000
Далее, третье, архитектор уже тесно взаимодействуя с командой разработки, эту архитектуру строит и постоянно мониторит,

00:02:25.000 --> 00:02:33.000
что все важные моменты были выстроены, настроены корректно.

00:02:33.000 --> 00:02:45.000
Почему это важно? Потому что правильно построенная IT-архитектура сильно увеличивает шансы, что бизнес ждет успех.

00:02:45.000 --> 00:03:00.000
На ежедневной основе специалисты AWS ведут переговоры, консультируют тысячи и десятки тысяч клиентов по всему миру.

00:03:00.000 --> 00:03:15.000
У каждого клиента есть определенная архитектура. Она может быть маленькой, большой, сложной, простой, либо быть стандартного плана,

00:03:15.000 --> 00:03:26.000
либо содержать в себе некоторые уникальные свойства. Таким образом, накапливается драгоценный опыт у специалистов AWS,

00:03:26.000 --> 00:03:36.000
и как результат этого опыта была разработана Well-Architected Framework. Это набор из пяти различных секций,

00:03:36.000 --> 00:03:47.000
которые позволяют вам строить архитектуру, которая безопасна, она производительна, надежна и эффективна.

00:03:47.000 --> 00:03:59.000
Well-Architected Framework состоит из пяти частей, а именно Operational Excellence, Security, Reliability, Performance Efficiency и Cost Optimization.

00:03:59.000 --> 00:04:08.000
Мы на каждом из них остановимся на следующих слайдах. Самый первый pillar, то есть направление, это Operational Excellence.

00:04:08.000 --> 00:04:18.000
Идея этого направления в том, чтобы мониторить и запускать системы таким образом, чтобы они приносили бизнес-ценность,

00:04:18.000 --> 00:04:34.000
а также на постоянной основе улучшать процессы поддержки. В связи с этим есть три важных топика, это Automating Changes,

00:04:34.000 --> 00:04:43.000
то есть автоматизация изменений. Далее это Responding to Events, то есть реагирование на различные события.

00:04:43.000 --> 00:04:55.000
И пятое это введение стандартов для более эффективного управления ежедневными операционными задачами.

00:04:55.000 --> 00:05:05.000
Давайте рассмотрим основные пять принципов Operational Excellence. Самое первое – Perform Operations as Code. Идея в том, что там,

00:05:05.000 --> 00:05:13.000
где возможно, необходимо автоматизировать и исключать человеческий фактор. Самый наглядный пример, связанный с IT-инфраструктурой,

00:05:13.000 --> 00:05:22.000
это использование сервиса AWS Platformation либо его аналогов. Как мы с вами помним, это сервис, который позволяет нам на вход подать

00:05:22.000 --> 00:05:34.000
код нашей инфраструктуры, и AWS CloudFormation уже сам автоматически поднимает за нас инфраструктуру.

00:05:34.000 --> 00:05:45.000
Так как мы работаем с кодом, мы можем использовать различные системы контроля версии и работать с всей командой совместно над одним кодом.

00:05:45.000 --> 00:05:54.000
Это намного легче, намного удобнее, все изменения сохраняются и удобно можно откатиться назад. Таким образом, вы не только исключаете

00:05:54.000 --> 00:06:04.000
человеческий фактор при настройке вашей инфраструктуры, но и ускоряетесь в каком-то смысле, так как совместная работа становится

00:06:04.000 --> 00:06:10.000
более эффективной. Более того, когда вы работаете как код, вы видите всю инфраструктуру как на ладони.

00:06:10.000 --> 00:06:22.000
Следующее, это то, что необходимо выпускать частые и маленькие изменения. То есть, чем выпускать большие обновления раз в месяц,

00:06:22.000 --> 00:06:32.000
лучше каждые несколько дней выпускать небольшие изменения, обновления вашего приложения. Почему это важно?

00:06:32.000 --> 00:06:41.000
Потому что с маленькими изменениями вы легче локализуете вашу проблему и в следующие обновления они не будут накладываться сверху,

00:06:41.000 --> 00:06:47.000
а вы сразу исправляете эту ошибку и уже следующие изменения ложатся на правильный код.

00:06:47.000 --> 00:06:55.000
В случае, если что-то накладывается сверху, то изменить ее не всегда возможно, либо это потребует больше времени.

00:06:55.000 --> 00:07:03.000
Таким образом, мы экономим время, экономим, соответственно, финансовые средства.

00:07:03.000 --> 00:07:11.000
Когда мы говорим также про маленькие изменения, то это изменение намного легче откатить назад.

00:07:11.000 --> 00:07:24.000
Поэтому необходимо строить процессы, инфраструктуру таким образом, чтобы была возможность чаще деплоить ваши изменения вашего приложения.

00:07:24.000 --> 00:07:31.000
Следующий принцип это то, что необходимо периодически пересматривать ваши операционные процедуры.

00:07:31.000 --> 00:07:38.000
Это может быть некоторая документация, это могут быть некоторые прописанные процессы.

00:07:38.000 --> 00:07:48.000
И идея в том, что когда вы постоянно ее пересматриваете, некоторые неактуальные части могут быть оперативно удалены,

00:07:48.000 --> 00:07:54.000
а те, которые существуют и есть, могут быть улучшены, автоматизированы.

00:07:54.000 --> 00:08:09.000
И это позволяет в целом быстрее двигаться команде поддержки, команде облачных инженеров, и справляться с IT инфраструктурой становится легче.

00:08:09.000 --> 00:08:19.000
Далее четвертое это то, что мы должны предвидеть, ожидать проблемы, поломки нашей инфраструктуры.

00:08:19.000 --> 00:08:30.000
Что это значит? Необходимо на постоянной основе проводить анализ инфраструктуры, понимать, какие узлы являются узкими местами,

00:08:30.000 --> 00:08:39.000
поломка какой из частей содержит в себе наибольшее влияние на работу приложения.

00:08:39.000 --> 00:08:51.000
И таким образом, периодически просматривая эти моменты, мы понимаем, где нам необходимо добавить дополнительную избыточность.

00:08:51.000 --> 00:09:07.000
Идея в том, что мы максимально модернизируем нашу инфраструктуру таким образом, чтобы инфраструктура всегда была доступна и была менее подвержена различным поломкам.

00:09:07.000 --> 00:09:17.000
Если эти поломки происходят, то тестирование тех процедур, которые должны быть выполнены для оперативного восстановления,

00:09:17.000 --> 00:09:28.000
их тоже нужно периодически пересматривать и симулировать, для того чтобы команда была в тонусе и готова на подобные события.

00:09:28.000 --> 00:09:43.000
И последний принцип это то, что со всех событий, которые происходят в жизни вашей IT инфраструктуры, будь то ошибки, поломки и так далее, необходимо извлекать какую-то пользу.

00:09:43.000 --> 00:09:56.000
Это к тому, что возможно стоит оно того, периодически встречаться и делать некоторое ревью, обзор того, что произошло, как оно было исправлено,

00:09:56.000 --> 00:10:02.000
где были недочеты, как можно улучшить этот процесс и так далее.

00:10:02.000 --> 00:10:19.000
Более того, очень хорошая практика является организацией внутренних конференций между IT-командами, для того чтобы команды делились своим опытом того, как они справлялись с различными проблемами.

00:10:19.000 --> 00:10:27.000
Например, если мы говорим про команду разработки, они могут поделиться некоторыми интересными новеньками в сфере разработки.

00:10:27.000 --> 00:10:47.000
Если мы говорим про команду клауд-инженеров, то в этом случае можно рассмотреть, какие части инфраструктуры были удачно автоматизированы, что это дало, какие плюсы, минусы и так далее.

00:10:47.000 --> 00:10:54.000
То есть, в целом увеличивать квалификацию всей команды всей компании.

00:10:54.000 --> 00:10:58.000
Следующий пиллер – это безопасность.

00:10:58.000 --> 00:11:13.000
Идея ее в том, что нам необходимо обеспечить безопасность нашей инфраструктуры, систем, информации и так далее, пока мы доставляем бизнес-ценность нашей компании.

00:11:13.000 --> 00:11:17.000
Выделяет несколько направлений.

00:11:17.000 --> 00:11:22.000
Первое – это то, что нам необходимо защищать конфиденциальность и целостность данных.

00:11:22.000 --> 00:11:31.000
Далее, нам необходимо понимать, кто и что может делать вашей инфраструктуре.

00:11:31.000 --> 00:11:38.000
То есть, это правильная работа с правами доступа в облаке.

00:11:38.000 --> 00:11:45.000
Далее, нам необходимо обеспечить защиту периметра наших систем.

00:11:45.000 --> 00:11:50.000
То есть, это связано с шифрованием в том числе.

00:11:50.000 --> 00:12:10.000
И последнее четвертое – необходимо подготовить и настроить некоторые автоматические события, которые триггерятся по возникновению некоторых событий, связанных с безопасностью.

00:12:10.000 --> 00:12:31.000
То есть, мы, если можем понимать в автоматическом режиме, что у нас в инфраструктуре что-то поломалось, был взлом хакерами, либо была разрушена целостность периметра,

00:12:31.000 --> 00:12:40.000
и, соответственно, мошенники смогли добраться до наших данных, баз данных и так далее.

00:12:40.000 --> 00:12:45.000
Если это автоматически вылавливается, то это очень хорошо.

00:12:45.000 --> 00:12:51.000
Давайте теперь подробнее остановимся о принципах безопасности.

00:12:51.000 --> 00:13:06.000
Она состоит из семи частей. Самое первое – это нам необходимо регулировать кому какие права доступа мы выдаем.

00:13:06.000 --> 00:13:09.000
То есть, нужно следовать принципу Least Privilege.

00:13:09.000 --> 00:13:12.000
Мы выдаем только те права, которые нужны.

00:13:12.000 --> 00:13:23.000
Более того, необходимо настроить централизованное управление правами доступа, что облегчит работу с правами доступа.

00:13:23.000 --> 00:13:38.000
Более того, если это возможно, либо сократить время выдачи прав, либо совсем исключить возможность выдачи прав на определенные ресурсы, части инфраструктуры на какой-то долгий период.

00:13:38.000 --> 00:13:56.000
Идея в том, что credential-ы периодически должны обновляться, начиная от паролей до AWS Management Console, заканчивая access и secret ключами.

00:13:56.000 --> 00:13:58.000
Следующее – это Enable Traceability.

00:13:58.000 --> 00:14:17.000
Идея ее в том, что нам необходимо в режиме реального времени отслеживать изменения инфраструктуры, интегрироваться с логами и метриками для того, чтобы иметь возможность автоматически реагировать и принимать какие-то действия по восстановлению системы.

00:14:17.000 --> 00:14:29.000
Далее, нам необходимо включить все механизмы безопасности на всех уровнях нашей инфраструктуры.

00:14:29.000 --> 00:14:51.000
То есть, у нас есть определенные возможности настроить более безопасные IT ресурсы в VPC, у нас есть subnets, у нас есть Network ACL, Load Balancer, даже на уровне операционной системы и приложений это также можно настроить.

00:14:51.000 --> 00:15:09.000
Чем больше мы подготовим слоев безопасности, которые не мешают эффективной работе самого приложения, тем сложнее будет мошенникам, хакерам добраться до конечной их цели.

00:15:09.000 --> 00:15:20.000
Следующий принцип – это попытаться максимально автоматизировать те процессы, которые позволяют нам обеспечить безопасность.

00:15:20.000 --> 00:15:32.000
Если это автоматизировано, то, во-первых, исключается человеческий фактор, так как исключаются человеческие факторы и работают автоматически, то это может во много раз быть дешевле.

00:15:32.000 --> 00:15:44.000
Далее, необходимо при работе с данными обеспечить защиту данных не только во время хранения, но и во время передачи данных.

00:15:44.000 --> 00:15:53.000
Следующий принцип – это выдавать доступ к данным только тем специалистам, которым нужен доступ по работе,

00:15:53.000 --> 00:15:57.000
далее, выдавать права только в том объеме, которым они нужны,

00:15:57.000 --> 00:16:17.000
и, третье, если есть возможность предоставить доступ таким образом, чтобы ограничить доступ к данным только к тем, которые нужны для конкретного специалиста, то надо им использоваться.

00:16:17.000 --> 00:16:39.000
И самое последнее – это то, что необходимо настроить процессы управления инцидентами так, чтобы оперативнее на них реагировать и максимально вжатые сроки восстанавливать систему после сбоя.

00:16:39.000 --> 00:16:51.000
Следующий пилер – это reliability, то есть надежность. Идея ее в том, что мы строим такие системы, которые соответствуют требованиям бизнеса,

00:16:51.000 --> 00:17:02.000
они надежны и в случае возникновения определенных проблем, ошибок система либо автоматически, либо с помощью команды оперативно восстанавливается.

00:17:02.000 --> 00:17:11.000
Давайте рассмотрим 5 основных принципов построения надежных систем.

00:17:11.000 --> 00:17:19.000
Первое – это то, что необходимо по возможности автоматизировать процессы восстановления при определенных падениях.

00:17:19.000 --> 00:17:25.000
Например, если мы знаем, что часто у нас возникает подобного рода проблемы, попытаться решить либо на уровне кода приложения,

00:17:25.000 --> 00:17:33.000
если это не связано с самим приложением, а на уровне инфраструктуры, то необходимо ее исключить.

00:17:33.000 --> 00:17:40.000
Если же исключить не получается, то необходимо настроить автоматическое восстановление при падении.

00:17:40.000 --> 00:17:52.000
Следующее – это то, что отдавать предпочтение горизонтальному масштабированию вместо вертикального масштабирования.

00:17:52.000 --> 00:18:00.000
Почему? Потому что если у вас один мощный сервер, который обрабатывает запросы ваших пользователей,

00:18:00.000 --> 00:18:04.000
если он упадет, то все приложения становятся недоступными.

00:18:04.000 --> 00:18:12.000
В случае, если у вас много маленьких виртуальных серверов и каждый из них может обрабатывать запросы пользователей,

00:18:12.000 --> 00:18:17.000
то при поломке одного из виртуальных серверов его можно легко заменить.

00:18:17.000 --> 00:18:25.000
И даже если оно упадет, в момент, когда оно отсутствует, большая часть запросов пользователей будут успешно обрабатываться.

00:18:25.000 --> 00:18:33.000
Далее – это то, что необходимо периодически тестировать все ваши процедуры, связанные с восстановлением.

00:18:33.000 --> 00:18:50.000
Необходимо настроить вашу инфраструктуру таким образом, что она либо масштабируется, то есть уменьшается,

00:18:50.000 --> 00:18:54.000
либо увеличивается в зависимости от нагрузки автоматически.

00:18:54.000 --> 00:19:03.000
Это позволяет вам запрашивать только те ресурсы, которые нужны для вашей нагрузки.

00:19:03.000 --> 00:19:10.000
Таким образом, вы не оплачиваете впустую и несете только те расходы, которые вы используете.

00:19:10.000 --> 00:19:22.000
И последнее – это то, что вам необходимо автоматизировать процесс внесения изменений в вашу инфраструктуру.

00:19:22.000 --> 00:19:30.000
Это позволит как исключить человеческий фактор, так и легко откатываться в случае возникновения проблем.

00:19:30.000 --> 00:19:35.000
Следующий пилер – это performance efficiency.

00:19:35.000 --> 00:19:46.000
Идея ее в том, что мы работаем с теми ресурсами, и для каждого ресурса мы подбираем правильные свойства.

00:19:46.000 --> 00:19:53.000
Когда мы говорим про инстанции EC2, то нам необходимо, используя различные метрики, собирая необходимые данные,

00:19:53.000 --> 00:20:00.000
понять, какой размер, какой тип инстанцев наиболее подходит нашим нагрузкам.

00:20:00.000 --> 00:20:06.000
Необходимо также настроить мониторинг производительности.

00:20:06.000 --> 00:20:11.000
Это позволит собирать данные, на основе этих данных принимать правильные решения.

00:20:11.000 --> 00:20:23.000
Давайте рассмотрим основные принципы, best practices, которые позволяют строить IT инфраструктуру с эффективной производительностью.

00:20:23.000 --> 00:20:29.000
Самое первое – это то, что рекомендуется присматриваться к новым технологиям.

00:20:29.000 --> 00:20:36.000
И зачастую бывает такое, что новые технологии позволяют значительно ускориться, вылечить эффективность,

00:20:36.000 --> 00:20:42.000
где-то исключить человеческий фактор и автоматизировать ваши внутренние процессы.

00:20:42.000 --> 00:20:56.000
Далее, у вас есть возможность присутствовать глобально, благодаря тому, что AWS присутствует в различных регионах.

00:20:56.000 --> 00:21:06.000
То есть, подразумевается, что вы можете построить инфраструктуру таким образом, которая задеплоена на несколько регионов.

00:21:06.000 --> 00:21:12.000
Здесь я бы хотел сделать небольшую ремарку, а именно то, что best practices – best practices,

00:21:12.000 --> 00:21:19.000
но вам всегда следует смотреть ваш конкретный случай, и не всегда best practices вам подходит.

00:21:19.000 --> 00:21:29.000
Почему я это говорю прямо сейчас? Это то, что go global in minutes – оно внуждает вас работать в нескольких регионах.

00:21:29.000 --> 00:21:37.000
Для большинства нагрузок, для большинства компаний это не всегда верно, так как достаточно быть в одном регионе

00:21:37.000 --> 00:21:46.000
и построить инфраструктуру, которая задеплоена в несколько availability zone, но в одном и том же регионе.

00:21:46.000 --> 00:21:55.000
Таким образом, компания не несет дополнительные расходы, дублируя свою инфраструктуру на два региона.

00:21:55.000 --> 00:22:04.000
Это очень дорого, это затратно с точки зрения сил и работы команды, и требует некоторое время.

00:22:04.000 --> 00:22:12.000
Соответственно, вам необходимо всегда примерять для себя best practices, в случае, если оно подходит,

00:22:12.000 --> 00:22:16.000
то можно двигаться и следовать этому best practices.

00:22:16.000 --> 00:22:22.000
Абсолютно то же самое я могу сказать про следующий best practices – это use serverless architectures.

00:22:22.000 --> 00:22:28.000
То есть бессерверные архитектуры – это несомненно новая, новейшая технология,

00:22:28.000 --> 00:22:38.000
которая удачно подходит и позволяет значительно сэкономить на эти архитектуре для начинающих стартапов,

00:22:38.000 --> 00:22:42.000
у которых нагрузки непредсказуемы.

00:22:42.000 --> 00:22:51.000
Когда мы говорим про стабильные нагрузки на вашу IT инфраструктуру,

00:22:51.000 --> 00:22:56.000
то бессерверные архитектуры не всегда являются самым выгодным решением.

00:22:56.000 --> 00:23:02.000
Поэтому, еще раз повторюсь, вам необходимо всегда примерять на себя любой best practices.

00:23:02.000 --> 00:23:06.000
И только в том случае, когда он вам подходит, вы сделали холодный расчет,

00:23:06.000 --> 00:23:12.000
понимаете, что вы получите выгоду от этого, то в этом случае, да, вы следуете best practices.

00:23:12.000 --> 00:23:18.000
В случае, если оно вам не подходит, это всегда ваше решение – решение компании.

00:23:18.000 --> 00:23:22.000
Соблюдать или не соблюдать best practices.

00:23:22.000 --> 00:23:34.000
Самое последнее, оно связано с самым первым пунктом – то, что вам необходимо максимально часто экспериментировать.

00:23:34.000 --> 00:23:40.000
Благодаря этому, у вас есть возможность выстроить IT архитектуру таким образом,

00:23:40.000 --> 00:23:43.000
что она максимально удачно подходит под ваши нагрузки.

00:23:43.000 --> 00:23:48.000
Более того, нагрузки, они меняются со временем.

00:23:48.000 --> 00:23:51.000
Требования бизнеса, они также меняются со временем.

00:23:51.000 --> 00:23:58.000
Соответственно, IT инфраструктура тоже должна меняться и адаптироваться под новые реалии.

00:23:58.000 --> 00:24:08.000
Мы добрались до последнего пиллера. Идея ее в том, что мы должны избегать лишних расходов.

00:24:08.000 --> 00:24:16.000
Облачные технологии, само облако позволяет вам каждый ресурс отслеживать.

00:24:16.000 --> 00:24:22.000
Но без необходимых дополнительных тегов, информации об этом ресурсе,

00:24:22.000 --> 00:24:32.000
очень сложно понять, кому из специалистов, либо какой из команды относится этот ресурс, можно ли его удалять,

00:24:32.000 --> 00:24:36.000
он критичен или не критичен, нужен или не нужен и так далее.

00:24:36.000 --> 00:24:44.000
Поэтому это такой процесс, который постоянный, и вам необходимо проводить эту постоянную работу

00:24:44.000 --> 00:24:53.000
по анализу ваших расходов, чтобы понимать, куда расходуются ваши деньги, деньги компании.

00:24:53.000 --> 00:25:03.000
Также вам необходимо периодически, анализируя ваши расходы, понимать и подбирать оптимальный тип ваших ресурсов.

00:25:03.000 --> 00:25:07.000
Это относится не только к типу, но также к количеству.

00:25:07.000 --> 00:25:11.000
И благодаря этому не нести лишние расходы.

00:25:11.000 --> 00:25:20.000
Как я уже ранее говорил, работа с расходами это некоторый продолжающийся процесс,

00:25:20.000 --> 00:25:27.000
который нужно периодически анализировать, так как инфраструктура постоянно меняется,

00:25:27.000 --> 00:25:32.000
какие-то части инфраструктуры растут, какая-то часть становится ненужной.

00:25:32.000 --> 00:25:39.000
И вот в процессе анализа ваших расходов вы понимаете, что можно отключить, что можно переделать,

00:25:39.000 --> 00:25:45.000
что можно оставить так, как оно есть, так как оно работает в самом оптимальном виде.

00:25:45.000 --> 00:26:04.000
Сюда же также относятся те работы, которые требуют от вас анализа расходов при масштабировании вашей инфраструктуры.

00:26:04.000 --> 00:26:14.000
Может быть так, что при масштабировании, например, в 10 раз, та часть архитектуры,

00:26:14.000 --> 00:26:22.000
которая построена определенным образом, она не оптимальна, вы несете лишние расходы и можно ее переделать.

00:26:22.000 --> 00:26:32.000
Поэтому специалисты, которые занимаются расходами, они постоянно тесно взаимодействуют с IT-архитекторами

00:26:32.000 --> 00:26:40.000
на предмет того, что можно ли некоторые места переделать или нужно ли некоторые места переделать,

00:26:40.000 --> 00:26:43.000
так как это может сэкономить определенную сумму денег.

00:26:43.000 --> 00:26:48.000
Далее уже IT-архитектор подключается, он смотрит, что есть альтернативный вариант.

00:26:48.000 --> 00:26:57.000
И если оно также хорошо подходит для выполнения бизнес требований, ее можно реализовать,

00:26:57.000 --> 00:27:02.000
то, соответственно, принимается решение об изменении архитектуры.

00:27:02.000 --> 00:27:06.000
Давайте остановимся на основных принципах cost optimization.

00:27:06.000 --> 00:27:15.000
Первое это то, что для того, чтобы в компании работали процессы по оптимизации расходов в облако,

00:27:15.000 --> 00:27:20.000
необходимо выделить либо одного специалиста, либо небольшой отдел специалистов,

00:27:20.000 --> 00:27:26.000
которые на постоянной основе занимаются, анализируют ваши расходы в облаке.

00:27:26.000 --> 00:27:39.000
Следующее это то, что необходимо следить за тем, что вы платите в облаке только за те ресурсы, которые нужны.

00:27:39.000 --> 00:27:43.000
Как понять ресурсы нужны и не нужны?

00:27:43.000 --> 00:27:58.000
Если ресурсы работают и были запрошены вами для выполнения цели бизнеса, то эти ресурсы нужны.

00:27:58.000 --> 00:28:05.000
Если же эти ресурсы не выполняют никакой бизнес-задачи, не преследуют какой-то определенную цель,

00:28:05.000 --> 00:28:12.000
то эти ресурсы, они избыточны, необходимо от таких ресурсов избавляться, для того, чтобы не платить впустую.

00:28:12.000 --> 00:28:21.000
Следующий пункт говорит о том, что расходы на облако могут расти, могут уменьшаться.

00:28:21.000 --> 00:28:29.000
И то, что ваши расходы выросли на 20%, не говорит о том, что это плохо. Это неполноценная информация.

00:28:29.000 --> 00:28:38.000
Вам необходимо, наряду с вашими расходами, также измерять эффективность вашей инфраструктуры.

00:28:38.000 --> 00:28:47.000
Возможно, это будут некоторые бизнес-метрики. И может получиться так, что с увеличением на 20% ваших расходов в облако,

00:28:47.000 --> 00:28:52.000
вы увеличили на 50% прибыль вашей компании за последний месяц.

00:28:52.000 --> 00:29:02.000
И вы видите, что даже если расходы на облако выросли, они были увеличены эффективно так,

00:29:02.000 --> 00:29:10.000
что прирост дохода прибыли компании, он был больше, чем рост вашей инфраструктуры.

00:29:10.000 --> 00:29:17.000
Поэтому необходимо максимально собирать больше информации, для того, чтобы видеть общую картину.

00:29:17.000 --> 00:29:31.000
Следующий пункт говорит о том, что вам выгодно сконцентрироваться на ваших бизнес-задачах.

00:29:31.000 --> 00:29:37.000
И все, что связано с железом, все, что связано с управлением дата-центрами, передать AWS.

00:29:37.000 --> 00:29:46.000
Этот пункт, который рекомендует нам из локального дата-центра переехать в облако.

00:29:46.000 --> 00:29:50.000
Опять же, все зависит от бизнес-контекста, от текущей ситуации.

00:29:50.000 --> 00:30:02.000
Есть некоторые компании, есть некоторые инфраструктуры, которые выгоднее и лучше поднять на локальном дата-центре.

00:30:02.000 --> 00:30:08.000
Поэтому всегда смотрите свой случай и анализируйте индивидуально.

00:30:08.000 --> 00:30:20.000
И самый последний пункт, это то, что необходимо проводить процесс тегирования.

00:30:20.000 --> 00:30:31.000
И вот эту культуру тегирования ресурсов внутри облака AWS прививать во всех командах внутри вашей компании.

00:30:31.000 --> 00:30:43.000
Благодаря тегированию вы сможете понимать не только, что на конкретный сервис вся компания потратила, например, 2000 долларов за последний месяц.

00:30:43.000 --> 00:30:46.000
Это достаточно неполноценная информация.

00:30:46.000 --> 00:30:54.000
Если бы, например, команды тегировали свои ресурсы определенной меткой, с определенным ключом,

00:30:54.000 --> 00:31:11.000
вы бы понимали, что внутри расходов на определенный сервис, если посмотреть на тег-платформу, вы увидите, что из 2000 долларов, 1000 долларов расходует команда А,

00:31:11.000 --> 00:31:17.000
500 долларов расходует команда В и оставшаяся 253-24 команда.

00:31:17.000 --> 00:31:20.000
В этом случае вы видите полноценную картину.

00:31:20.000 --> 00:31:26.000
Но для того, чтобы увидеть эту картину, каждая команда должна следовать этим правилам.

00:31:26.000 --> 00:31:33.000
Процесс тегирования ресурсов должен контролироваться централизованно.

00:31:33.000 --> 00:31:44.000
Должны быть определены набор ключей тегов, которые учитываются в компании, которые обязательно следует заполнять.

00:31:44.000 --> 00:31:48.000
Команды должны следовать этим правилам.

00:31:48.000 --> 00:31:54.000
Только в этом случае вы получите чистые данные, на которых можно принимать определенные решения.

00:31:54.000 --> 00:32:00.000
На этом мы добрались до конца первой части нашей лекции.

00:32:00.000 --> 00:32:04.000
Мы с вами подробнее разобрали, что такое Well-Architected Framework.

00:32:04.000 --> 00:32:14.000
Если говорить вкратце, это документ, который в пяти направлениях разбирает best practices.

00:32:14.000 --> 00:32:25.000
И в случае следования этим best practices вы построите такую архитектуру, которая, во-первых, не содержит в себе избыточных расходов.

00:32:25.000 --> 00:32:30.000
Она доступна, надежна, эффективна с точки зрения производительности.

00:32:30.000 --> 00:32:38.000
Well-Architected Framework это best practices.

00:32:38.000 --> 00:32:44.000
И как я уже ранее говорил, best practices это не всегда готовые инструкции.

00:32:44.000 --> 00:32:50.000
Вы заметили, что какая-то часть best practices это достаточно очевидные вещи.

00:32:50.000 --> 00:32:56.000
И описывают в общих чертах, в каком направлении нужно двигаться.

00:32:56.000 --> 00:33:03.000
Другой важный момент это то, что best practices они не всегда применимы вашим случаем.

00:33:03.000 --> 00:33:09.000
Поэтому ваши случаи вы всегда должны анализировать отдельно.

00:33:09.000 --> 00:33:20.000
И в случае, если следование определенного best practices принесет свои выгоды, то рекомендуется двигаться в этом направлении.

00:33:20.000 --> 00:33:28.000
Мы с вами добрались до второй части нашей сегодняшней лекции.

00:33:28.000 --> 00:33:35.000
И мы познакомимся здесь с некоторыми терминами, связанными с надежностью и доступностью.

00:33:35.000 --> 00:33:44.000
Как постоянно говорит технический директор компании Amazon, Вернер Вогелс, все падает все время.

00:33:44.000 --> 00:33:49.000
Это к тому, что не следует надеяться на железо.

00:33:49.000 --> 00:33:58.000
И оно всегда подводит, тем более с увеличением масштабов вашей инфраструктуры.

00:33:58.000 --> 00:34:02.000
Вероятность того, что где-то что-то пойдет не так, оно увеличивается.

00:34:02.000 --> 00:34:09.000
Соответственно ваша инфраструктура должна ожидать, что в любом месте она может сломаться.

00:34:09.000 --> 00:34:14.000
И ваша система должна автоматически реагировать на такие события.

00:34:14.000 --> 00:34:19.000
И в идеальном варианте автоматически восстанавливаться.

00:34:19.000 --> 00:34:28.000
Это приводит к тому, что ваша инфраструктура становится максимально надежной и доступной.

00:34:28.000 --> 00:34:32.000
Итак, что же такое надежность?

00:34:32.000 --> 00:34:43.000
Надежность это некоторая способность вашей системы предоставлять ту функциональность вашим пользователям, которая была задумана изначально.

00:34:43.000 --> 00:34:49.000
Когда мы говорим про IT-системы, то сюда входят все компоненты этой системы.

00:34:49.000 --> 00:34:54.000
Начиная от железа, заканчивая настройками приложения и вашими данными.

00:34:54.000 --> 00:35:01.000
Для того, чтобы лучше понять, что такое надежность, давайте возьмем как пример системы машину.

00:35:01.000 --> 00:35:06.000
Машина это такая же система, которая состоит из нескольких различных компонентов.

00:35:06.000 --> 00:35:15.000
Как пример это может быть система охлаждения двигателя, это может быть система вспрыска топлива для того, чтобы машина завелась.

00:35:15.000 --> 00:35:24.000
Это может быть работа тормоза для того, чтобы иметь возможность останавливаться и безопасно ездить.

00:35:24.000 --> 00:35:29.000
Представим, что система вспрыска она не работает.

00:35:29.000 --> 00:35:32.000
В этом случае машина недоступна.

00:35:32.000 --> 00:35:46.000
Если система вспрыска не работает какое-то продолжительное время, и мы повторяющееся количество попыток не можем завести нашу машину,

00:35:46.000 --> 00:35:52.000
то мы говорим, что наша машина она ненадежная, эта система ненадежная.

00:35:52.000 --> 00:36:02.000
Для того, чтобы измерять надежность IT системы вводят некоторые формулы.

00:36:02.000 --> 00:36:10.000
Самым распространенным вариантом является MTBF, то есть Mean Time Between Failures.

00:36:10.000 --> 00:36:13.000
Это среднее время между падениями.

00:36:13.000 --> 00:36:22.000
Как она рассчитывается, мы берем общее время работы вашего сервиса и делим на количество падений.

00:36:22.000 --> 00:36:25.000
Можно привести следующий пример.

00:36:25.000 --> 00:36:46.000
Если за 12 месяцев работы вашего сервиса ваша система падала 12 раз, то это говорит о том, что ваша система не такая надежная.

00:36:46.000 --> 00:36:59.000
И разделив 12 месяцев на 12 падений, мы можем измерить и сравнить себя в прошлом, в будущем и понимать, система стала надежнее или нет.

00:36:59.000 --> 00:37:10.000
Либо сравнить с другими эталонными IT системами.

00:37:10.000 --> 00:37:14.000
Есть другой подход, как рассчитывать надежность вашей системы.

00:37:14.000 --> 00:37:24.000
Представим, что у вас есть система, которая работает стабильно с понедельника по пятницу и в субботу она падает.

00:37:24.000 --> 00:37:28.000
В субботу и воскресенье вы занимаетесь над восстановлением вашего сервиса.

00:37:28.000 --> 00:37:34.000
Далее восстанавливаете до понедельника и следующей неделе повторяется то же самое каждую неделю.

00:37:34.000 --> 00:37:39.000
Таким образом, 5 дней в неделю ваша система работает.

00:37:39.000 --> 00:37:47.000
Это значит, с правой стороны слайда вы видите System Browse Online, то есть система доступна.

00:37:47.000 --> 00:37:58.000
И стрелка до System Fails, то есть среднее время до падения это 5 дней.

00:37:58.000 --> 00:38:05.000
Далее у нас есть следующая стрелка в нижней части от System Fails до System Repair.

00:38:05.000 --> 00:38:11.000
То есть это то среднее время, которое нужно на восстановление вашей системы.

00:38:11.000 --> 00:38:13.000
В нашем случае это 2 дня.

00:38:13.000 --> 00:38:24.000
И если мы говорим, что Mean Time Between Failures равняется сумме этих двух,

00:38:24.000 --> 00:38:31.000
то среднее время между падениями это 5 дней плюс 2 дня.

00:38:31.000 --> 00:38:39.000
То есть 7 дней это наш показатель надежности.

00:38:39.000 --> 00:38:44.000
Давайте перейдем к следующему термину. Это Availability, то есть доступность.

00:38:44.000 --> 00:38:48.000
Оно тесно связано с reliability, с надежностью.

00:38:48.000 --> 00:38:54.000
Если ваша система ненадежна, то какой-то период времени ваша система не функционирует.

00:38:54.000 --> 00:39:01.000
Если ваша система не функционирует, значит она недоступна для ваших пользователей.

00:39:01.000 --> 00:39:03.000
Как измеряется доступность?

00:39:03.000 --> 00:39:12.000
Стандартная формула это количество времени, когда система функционировала корректно,

00:39:12.000 --> 00:39:17.000
поделенное на общее время, общий период, который мы измеряем.

00:39:17.000 --> 00:39:22.000
Есть два варианта, как описывают доступность вашей системы.

00:39:22.000 --> 00:39:25.000
Это количество девяток.

00:39:25.000 --> 00:39:32.000
Как пример, если говорят пять девяток доступности, это значит в измеряемом промежутке

00:39:32.000 --> 00:39:41.000
в 99.999% времени ваша система доступна.

00:39:41.000 --> 00:39:45.000
Другой вариант, прямо прописывают этот процент.

00:39:45.000 --> 00:39:59.000
Например, мы говорим, наша система в течение одного года доступна в 99.999% времени.

00:39:59.000 --> 00:40:07.000
Следующий термин, который связан с предыдущим, то есть availability, это high availability,

00:40:07.000 --> 00:40:09.000
то есть высокая доступность.

00:40:09.000 --> 00:40:17.000
Этот термин применяется к инфраструктурам, которые, несмотря на снижение производительности

00:40:17.000 --> 00:40:23.000
отдельных компонентов инфраструктуры, продолжают работать и остаются доступными

00:40:23.000 --> 00:40:26.000
для ваших конечных пользователей.

00:40:26.000 --> 00:40:34.000
Это те инфраструктуры, в которых восстановление происходит максимально быстро,

00:40:34.000 --> 00:40:41.000
время, необходимое для проведения каких-либо административных работ

00:40:41.000 --> 00:40:45.000
либо работ по обновлению системы, она минимизирована.

00:40:45.000 --> 00:40:54.000
Также минимизировано вмешательство человеческого фактора, либо совсем исключено.

00:40:54.000 --> 00:41:04.000
В этих инфраструктурах обычно для восстановления после падения требуется меньше минуты.

00:41:04.000 --> 00:41:12.000
В этой таблице представлены уровни доступности инфраструктуры.

00:41:12.000 --> 00:41:21.000
Когда мы говорим 99% доступности, и если мы говорим о времени в один год,

00:41:21.000 --> 00:41:29.000
то 1% это 3 дня и 15 часов, когда система может быть недоступна.

00:41:29.000 --> 00:41:38.000
В этом случае, если для проведения различных работ, либо внезапных проблем с доступностью системы

00:41:38.000 --> 00:41:46.000
вам суммарно требуется не более 3 дней и 15 часов, тогда мы говорим

00:41:46.000 --> 00:41:52.000
ваша инфраструктура доступна 99% времени.

00:41:52.000 --> 00:42:01.000
Если же мы добавляем еще одну девятку, это 99,9, то здесь система может быть недоступна

00:42:01.000 --> 00:42:06.000
в течение одного года лишь 8 часов и 45 минут.

00:42:06.000 --> 00:42:19.000
Итак, добавляя еще девятки, вы видите, мы доходим до самого высокого уровня доступности.

00:42:19.000 --> 00:42:29.000
Когда говорим 5 девяток, это 99,999% доступности, то есть всего лишь 5 минут

00:42:29.000 --> 00:42:35.000
инфраструктура может быть недоступна в течение целого года.

00:42:35.000 --> 00:42:44.000
Давайте остановимся на факторах, которые влияют на доступность вашей инфраструктуры.

00:42:44.000 --> 00:42:52.000
Самое первое – это отказоустойчивость. Здесь подразумевается наличие встроенной избыточности,

00:42:52.000 --> 00:42:59.000
которая позволяет продолжать работать вашим приложением, даже если какие-то компоненты выходят из строя.

00:42:59.000 --> 00:43:06.000
Проще говоря, наличие резервных ресурсов, на которые система может переключиться

00:43:06.000 --> 00:43:17.000
при падении основных ресурсов. Если приводим пример, то примером избыточности может быть

00:43:17.000 --> 00:43:24.000
одна реплика вместе с одной основной базой данных.

00:43:24.000 --> 00:43:29.000
В случае, когда что-то происходит со основной базой данных, происходит автоматическое переключение,

00:43:29.000 --> 00:43:32.000
и ваша реплика становится основной базой данных.

00:43:32.000 --> 00:43:39.000
Двигаемся дальше. Следующий пункт – это recoverability, то есть наличие в инфраструктуре.

00:43:39.000 --> 00:43:45.000
Определенно прописаны логики, которые автоматически восстанавливаются после падения.

00:43:45.000 --> 00:43:52.000
Здесь для того, чтобы это работало, нужно, чтобы система могла правильно идентифицировать,

00:43:52.000 --> 00:43:58.000
если произошел сбой, какой компонент перестал работать.

00:43:58.000 --> 00:44:07.000
Далее, для определенных видов поломки у вас должны быть прописаны механизмы,

00:44:07.000 --> 00:44:13.000
которые соответствующие реагируют и либо изменяют инфраструктуру,

00:44:13.000 --> 00:44:25.000
или допрашивают дополнительные ресурсы для того, чтобы заменить те ресурсы, которые вышли из строя.

00:44:25.000 --> 00:44:31.000
Третий пункт – это scalability, то есть возможность к автомастабированию.

00:44:31.000 --> 00:44:42.000
Ваша система должна быть способна увеличиваться в размерах в зависимости от нагрузки на ваш сервис.

00:44:42.000 --> 00:44:52.000
Здесь следует также отметить, что невозможно бесконечно увеличивать доступность вашей инфраструктуры,

00:44:52.000 --> 00:44:57.000
так как это несет совместно с собой дополнительные расходы.

00:44:57.000 --> 00:45:05.000
Поэтому доступность – это всегда игра, баланс между теми расходами,

00:45:05.000 --> 00:45:13.000
которые вы можете понести на вашу инфраструктуру, и процентом доступности.

00:45:13.000 --> 00:45:17.000
На этом мы добрались до конца второй части нашей лекции.

00:45:17.000 --> 00:45:24.000
Мы познакомились с такими важными терминами, как надежность, доступность, высокая доступность,

00:45:24.000 --> 00:45:31.000
и проговорили факторы, которые влияют на доступность вашей инфраструктуры.

00:45:31.000 --> 00:45:39.000
И мы с вами добрались до последней части нашей сегодняшней лекции и познакомимся с сервисом AWS Trusted Advisor.

00:45:39.000 --> 00:45:45.000
Это тот сервис, который в режиме реального времени дает вам рекомендации.

00:45:45.000 --> 00:46:09.000
Эти рекомендации поделены на пять направлений и сообщают о том, соответствует ли ваша инфраструктура тому или иному бест-практицу в рамках AWS Well-Architected Framework.

00:46:09.000 --> 00:46:19.000
Как вы видите, поделены рекомендации на пять направлений. Это cost optimization, performance, security, fault tolerance и service limits.

00:46:19.000 --> 00:46:24.000
Отображается количество бест-практицев, которые соблюдены зеленым.

00:46:24.000 --> 00:46:35.000
Далее, оранжевым отображается количество бест-практицев, которые желательно исправить, чтобы ваша архитектура соответствовала бест-практицу.

00:46:35.000 --> 00:46:50.000
И красным отображаются те кейсы, которые критически важны и настоятельно рекомендуют обратить внимание и исправить эти пункты.

00:46:50.000 --> 00:46:57.000
Давайте рассмотрим несколько примеров, какие рекомендации дает нам AWS Trusted Advisor.

00:46:57.000 --> 00:47:05.000
Первый, самый популярный пример, это рекомендация включить MFA на root-аккаунте.

00:47:05.000 --> 00:47:07.000
Как происходит проверка?

00:47:07.000 --> 00:47:26.000
То есть, срабатывает alert в случае, если MFA не включен для root-аккаунта и соответствующая рекомендация включить MFA-девайс либо виртуальный, либо hardware-версию для вашего root-аккаунта.

00:47:26.000 --> 00:47:32.000
Другой вариант, это происходит проверка на наличие password policy.

00:47:32.000 --> 00:47:44.000
Если же не находится ни одно policy для управления вашими паролями, то соответственно приходит рекомендация это сделать.

00:47:44.000 --> 00:48:00.000
Следующий пример, это в security-группах, если есть правила, которые предоставляют доступ к портам 2580 либо 443,

00:48:00.000 --> 00:48:24.000
и при этом, как cidr-блок указывается slash ноль, то есть весь интернет, то срабатывает alert и как рекомендация вам предлагается все эти рулы удалить и предоставлять доступ к соответствующим портам только к конкретному компьютеру,

00:48:24.000 --> 00:48:32.000
то есть одному IP-адресу, либо cidr-блоку корпоративной среды.

00:48:32.000 --> 00:48:45.000
Другой пример связан с EBS-снапшотами. � екомендация приходит желтым, если у нас есть снапшоты, возраст которых от 7 до 30 дней,

00:48:45.000 --> 00:48:55.000
либо если для некоторых жестких дисков снапшоты не были созданы.

00:48:55.000 --> 00:49:05.000
На этом мы добрались до конца последней части нашей лекции и познакомились с сервисом AWS trusted advisor.

00:49:05.000 --> 00:49:19.000
Это тот сервис, который позволяет вам в режиме реального времени проверить соответствует ли ваша IT-инфраструктура best practice из well-architected framework.

00:49:19.000 --> 00:49:29.000
На этом мы добрались до конца нашей сегодняшней лекции. Мы подробнее разобрали, что же такое well-architected advisor.

00:49:29.000 --> 00:49:39.000
Зачем он нужен? Далее мы рассмотрели некоторые важные термины, такие как надежность и доступность, как они измеряются.

00:49:39.000 --> 00:49:49.000
Ну и в конце мы познакомились с сервисом trusted advisor, который в автоматическом режиме проверяет соответствия нашей инфраструктуры well-architected framework.

00:49:49.000 --> 00:49:59.000
Если вам нужна дополнительная информация, вы можете воспользоваться следующими ссылками для более улыбленного изучения тем, пройденных сегодняшней нашей лекцией.

00:49:59.000 --> 00:50:09.000
Я очень надеюсь, что вы получили более полное представление о пройденных сервисах и терминах.

00:50:09.000 --> 00:50:19.000
Спасибо за внимание. Увидимся с вами на следующих наших активностях.