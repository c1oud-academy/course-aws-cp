WEBVTT

00:00:00.000 --> 00:00:05.000
Добрый день, уважаемые студенты!
Я рад вас всех видеть на очередной лекции.

00:00:05.000 --> 00:00:10.488
Тема сегодняшней лекции - это
Cloud Architecture, то есть мы поговорим,

00:00:10.512 --> 00:00:16.000
как правильно строить IT-архитектуру
в облаке AWS. Итак, давайте начнем.

00:00:17.000 --> 00:00:24.000
Сегодняшняя лекция состоит из трех частей. В первой
части поговорим про AWS Well-Architected Framework.

00:00:24.000 --> 00:00:32.000
Это набор best practices от команды архитекторов
AWS, как правильно строить IT-архитектуру в облаке.

00:00:32.000 --> 00:00:35.564
Далее, во второй части, мы
познакомимся с некоторыми важными

00:00:35.588 --> 00:00:40.000
терминами, связанные с надежностью
и доступностью вашей инфраструктуры.

00:00:40.000 --> 00:00:45.580
И третье, мы поговорим про
сервис AWS Trusted Advisor, который

00:00:45.604 --> 00:00:51.000
помогает нам строить
архитектуру с учетом best practices.

00:00:51.000 --> 00:00:58.000
Мы с вами начинаем первую часть сегодняшней
нашей лекции AWS Well-Architected Framework.

00:00:58.000 --> 00:01:05.000
Перед тем, как мы подробнее про него поговорим,
давайте остановимся на том, что такое архитектура.

00:01:05.000 --> 00:01:16.000
IT-архитектура - это в каком-то смысле искусство и
наука по планированию и построению сложных структур.

00:01:16.000 --> 00:01:21.178
Построением этих сложных структур
занимаются IT-архитекторы. В нашем

00:01:21.202 --> 00:01:27.000
случае Cloud Architects, то есть облачные
архитекторы. Чем они занимаются?

00:01:27.000 --> 00:01:35.000
Это те люди, которые, первое, ведут переговоры с
так называемыми лицами, принимающие решения,

00:01:35.000 --> 00:01:42.000
это может быть высший менеджмент либо владельцы
бизнеса, чтобы понять, какие цели преследует бизнес.

00:01:42.000 --> 00:01:49.086
Второе, архитектор с учетом
тех.требований, зная, какие IT-технологии

00:01:49.110 --> 00:01:56.195
на текущий момент есть в наличии,
доступны, и понимая, какая команда

00:01:56.219 --> 00:02:02.624
есть в наличии, прикидывает,
возможно ли эти бизнес-требования

00:02:02.648 --> 00:02:10.000
реализовать в адекватные сроки и с
адекватными финансовыми затратами.

00:02:10.000 --> 00:02:21.964
Далее, третье, архитектор уже тесно взаимодействуя
с командой разработки, эту архитектуру

00:02:21.988 --> 00:02:33.000
строит и постоянно мониторит, чтобы все
важные моменты были корректно настроены.

00:02:33.000 --> 00:02:39.388
Почему это важно?
Потому что правильно построенная IT-архитектура

00:02:39.412 --> 00:02:45.000
сильно увеличивает шансы
того, что бизнеса ждет успех.

00:02:45.000 --> 00:02:51.901
На ежедневной основе
специалисты AWS ведут переговоры,

00:02:51.925 --> 00:03:00.000
консультируют тысячи и десятки
тысяч клиентов по всему миру.

00:03:00.000 --> 00:03:07.087
У каждого клиента есть определенная
архитектура. Она может быть

00:03:07.111 --> 00:03:15.000
маленькой, большой, сложной,
простой, либо быть стандартного плана,

00:03:15.000 --> 00:03:20.488
либо содержать в себе некоторые
уникальные свойства.

00:03:20.512 --> 00:03:26.000
Таким образом, накапливается
драгоценный опыт у специалистов AWS,

00:03:26.000 --> 00:03:31.544
и как результат этого опыта была
разработана Well-Architected Framework.

00:03:31.568 --> 00:03:38.872
Это набор из пяти различных
секций, которые позволяют вам строить

00:03:38.896 --> 00:03:47.000
архитектуру, которая безопасна,
производительна, надежна и эффективна.

00:03:47.000 --> 00:03:52.588
Well-Architected Framework состоит
из пяти частей, а именно Operational

00:03:52.612 --> 00:03:59.000
Excellence, Security, Reliability,
Performance Efficiency и Cost Optimization.

00:03:59.000 --> 00:04:03.232
Мы на каждой из них
остановимся на следующих слайдах.

00:04:03.256 --> 00:04:08.000
Самый первый pillar, то есть направление,
это Operational Excellence.

00:04:08.000 --> 00:04:12.988
Идея этого направления в том,
чтобы мониторить и запускать

00:04:13.012 --> 00:04:18.000
системы таким образом, чтобы
они приносили бизнес-ценность,

00:04:18.000 --> 00:04:25.988
а также на постоянной основе
улучшать процессы поддержки.

00:04:26.012 --> 00:04:34.494
В связи с этим есть три важных топика, это
Automating Changes, то есть автоматизация

00:04:34.518 --> 00:04:43.000
изменений. Далее, это Responding to Events,
то есть реагирование на различные события.

00:04:43.000 --> 00:04:55.000
Третье - введение стандартов для более эффективного
управления ежедневными операционными задачами.

00:04:55.000 --> 00:04:59.988
Давайте рассмотрим основные
пять принципов Operational Excellence.

00:05:00.012 --> 00:05:05.000
Самое первое – Perform Operations
as Code. Идея в том, что там,

00:05:05.000 --> 00:05:08.988
где возможно, необходимо
автоматизировать и исключать человеческий

00:05:09.012 --> 00:05:13.000
фактор. Самый наглядный пример,
связанный с IT-инфраструктурой,

00:05:13.000 --> 00:05:17.488
это использование сервиса AWS
CloudFormation либо его аналогов.

00:05:17.512 --> 00:05:22.000
Как мы с вами помним, это сервис,
который позволяет нам на вход подать

00:05:22.000 --> 00:05:34.000
код нашей инфраструктуры, и AWS CloudFormation уже
сам автоматически поднимает за нас инфраструктуру.

00:05:34.000 --> 00:05:39.488
Так как мы работаем с кодом, мы
можем использовать различные системы

00:05:39.512 --> 00:05:45.000
контроля версии и работать всей
командой совместно над одним кодом.

00:05:45.000 --> 00:05:49.183
Это намного легче, намного
удобнее, все изменения сохраняются и

00:05:49.207 --> 00:05:54.000
удобно можно откатиться назад.
Таким образом, вы не только исключаете

00:05:54.000 --> 00:05:58.597
человеческий фактор при
настройке вашей инфраструктуры, но и

00:05:58.621 --> 00:06:04.000
ускоряетесь в каком-то смысле,
так как совместная работа становится

00:06:04.000 --> 00:06:10.000
более эффективной. Более того, когда вы работаете
как код, вы видите всю инфраструктуру как на ладони.

00:06:10.000 --> 00:06:15.988
Следующее, это то, что необходимо
выпускать частые и маленькие

00:06:16.012 --> 00:06:22.000
изменения, т.е. чем выпускать
большие обновления раз в месяц,

00:06:22.000 --> 00:06:30.000
лучше каждые несколько дней выпускать
небольшие изменения, обновления приложения.

00:06:30.000 --> 00:06:36.142
Почему это важно? Потому что с маленькими
изменениями вы легче локализуете вашу

00:06:36.166 --> 00:06:41.000
проблему и в следующие обновления
они не будут накладываться сверху,

00:06:41.000 --> 00:06:47.000
а вы сразу исправляете эту ошибку и уже следующие
изменения накладываются на правильный код.

00:06:47.000 --> 00:06:50.988
В случае, если что-то
накладывается сверху, то изменить

00:06:51.012 --> 00:06:55.000
ее не всегда возможно, либо
это потребует больше времени.

00:06:55.000 --> 00:07:03.000
Таким образом, мы экономим время, и,
соответственно, финансовые средства.

00:07:03.000 --> 00:07:11.000
Когда мы говорим также про маленькие изменения,
то эти изменения намного легче откатить назад.

00:07:11.000 --> 00:07:17.156
Поэтому необходимо строить
процессы, инфраструктуру таким образом,

00:07:17.180 --> 00:07:24.000
чтобы была возможность чаще деплоить
ваши изменения вашего приложения.

00:07:24.000 --> 00:07:31.000
Следующий принцип - необходимо периодически
пересматривать ваши операционные процедуры.

00:07:31.000 --> 00:07:38.000
Это может быть некоторая документация, это
могут быть некоторые прописанные процессы.

00:07:38.000 --> 00:07:45.988
Идея - когда вы постоянно ее пересматриваете,
некоторые неактуальные части могут быть

00:07:46.012 --> 00:07:54.000
оперативно удалены, а те, которые существуют
и есть, могут быть улучшены и автоматизированы.

00:07:54.000 --> 00:08:01.002
Это позволяет в целом быстрее
двигаться команде поддержки, команде

00:08:01.026 --> 00:08:09.000
облачных инженеров, и справляться с
IT-инфраструктурой становится легче.

00:08:09.000 --> 00:08:19.000
Далее, четвертое - это то, что мы должны предвидеть,
ожидать проблемы, поломки нашей инфраструктуры.

00:08:19.000 --> 00:08:28.650
Что это значит? Необходимо на постоянной основе
проводить анализ инфраструктуры, понимать узкие

00:08:28.674 --> 00:08:39.000
места, поломка какой из частей содержит в
себе наибольшее влияние на работу приложения.

00:08:39.000 --> 00:08:44.460
И таким образом, периодически
просматривая эти моменты, мы

00:08:44.484 --> 00:08:51.000
понимаем, где нам необходимо
добавить дополнительную избыточность.

00:08:51.000 --> 00:08:58.552
Идея в том, что мы максимально модернизируем
нашу инфраструктуру таким образом,

00:08:58.576 --> 00:09:07.000
чтобы инфраструктура всегда была доступна и
была менее подвержена различным поломкам.

00:09:07.000 --> 00:09:11.699
Если эти поломки происходят,
то тестирование тех процедур,

00:09:11.723 --> 00:09:17.000
которые должны быть выполнены
для оперативного восстановления,

00:09:17.000 --> 00:09:22.488
их тоже нужно периодически
пересматривать и симулировать,

00:09:22.512 --> 00:09:28.000
чтобы команда была в тонусе
и готова к подобным событиям.

00:09:28.000 --> 00:09:34.845
Последний принцип - это то, что со всех
событий, которые происходят в жизни вашей

00:09:34.869 --> 00:09:43.000
IT-инфраструктуры, будь то ошибки, поломки и
так далее, необходимо извлекать какую-то пользу.

00:09:43.000 --> 00:09:52.540
Возможно стоит периодически встречаться и
делать некоторое ревью, обзор того, что произошло,

00:09:52.564 --> 00:10:02.000
как оно было исправлено, где были недочеты,
как можно улучшить этот процесс и так далее.

00:10:02.000 --> 00:10:10.532
Более того, хорошей практикой является организация
внутренних конференций между IT-командами,

00:10:10.556 --> 00:10:19.000
для того чтобы команды делились своим опытом
того, как они справлялись с различными проблемами.

00:10:19.000 --> 00:10:22.760
Например, если мы говорим
про команду разработки, они могут

00:10:22.784 --> 00:10:27.000
поделиться некоторыми интересными
новинками в сфере разработки.

00:10:27.000 --> 00:10:33.594
Если мы говорим про команду
Cloud инженеров, то в этом случае

00:10:33.618 --> 00:10:39.992
можно рассмотреть, какие части
инфраструктуры были удачно

00:10:40.016 --> 00:10:46.996
автоматизированы, результаты,
какие плюсы, минусы и так далее,

00:10:47.020 --> 00:10:54.000
т.е. в целом увеличивать
квалификацию всей команды в компании.

00:10:54.000 --> 00:11:03.488
Следующий pillar – это безопасность. Идея ее в том,
что нам необходимо обеспечить безопасность нашей

00:11:03.512 --> 00:11:13.000
инфраструктуры, систем, информации и так далее,
пока мы доставляем бизнес-ценность нашей компании.

00:11:13.000 --> 00:11:17.255
Выделяют несколько направлений.
Первое – это то, что нам

00:11:17.279 --> 00:11:22.000
необходимо защищать
конфиденциальность и целостность данных.

00:11:22.000 --> 00:11:29.382
Далее, нам необходимо понимать,
кто и что может делать в вашей

00:11:29.406 --> 00:11:38.000
инфраструктуре, т.е. это правильная 
работа с правами доступа в облаке.

00:11:38.000 --> 00:11:50.000
Далее, необходимо обеспечить защиту периметра наших
систем, т.е. это связано с шифрованием в том числе.

00:11:50.000 --> 00:12:00.277
Последнее четвертое – необходимо подготовить
и настроить некоторые автоматические события,

00:12:00.301 --> 00:12:10.000
которые триггерятся по возникновению
некоторых событий, связанных с безопасностью.

00:12:10.000 --> 00:12:20.108
То есть, под автоматическом режимом мы
можем понимать, что у нас в инфраструктуре

00:12:20.132 --> 00:12:31.000
что-то поломалось или был взлом хакерами,
либо была разрушена целостность периметра,

00:12:31.000 --> 00:12:40.000
и, соответственно, мошенники добрались
до наших данных, баз данных и так далее.

00:12:40.000 --> 00:12:45.000
Если это автоматически
вылавливается, то это очень хорошо.

00:12:45.000 --> 00:12:51.000
Давайте теперь подробнее
остановимся на принципах безопасности.

00:12:51.000 --> 00:13:01.488
Оно состоит из семи частей. Самое первое – это нам
необходимо регулировать кому какие права доступа

00:13:01.512 --> 00:13:12.000
мы выдаем, т.е. нужно следовать принципу Least
Privilege. Мы выдаем только те права, которые нужны.

00:13:12.000 --> 00:13:17.583
Более того, необходимо настроить
централизованное управление

00:13:17.607 --> 00:13:23.000
правами доступа, что облегчит
работу с правами доступа.

00:13:23.000 --> 00:13:29.955
Более того, если это возможно, либо сократить
время выдачи прав, либо совсем исключить

00:13:29.979 --> 00:13:38.000
возможность выдачи прав на определенные ресурсы,
части инфраструктуры на какой-то долгий период.

00:13:38.000 --> 00:13:46.608
Идея в том, что credential-ы
периодически должны обновляться, начиная

00:13:46.632 --> 00:13:56.000
от паролей в AWS Management Console,
заканчивая access и secret ключами.

00:13:56.000 --> 00:14:01.141
Следующее – это Enable Traceability.
Идея ее в том, что нам необходимо в

00:14:01.165 --> 00:14:06.888
режиме реального времени отслеживать
изменения инфраструктуры, интегрироваться

00:14:06.912 --> 00:14:11.944
с логами и метриками для того,
чтобы иметь возможность автоматически

00:14:11.968 --> 00:14:17.000
реагировать и принимать какие-то
действия по восстановлению системы.

00:14:17.000 --> 00:14:29.000
Далее, нам необходимо включить все механизмы
безопасности на всех уровнях нашей инфраструктуры.

00:14:29.000 --> 00:14:34.482
То есть, у нас есть определенные
возможности настроить

00:14:34.506 --> 00:14:39.988
более безопасные IT ресурсы
в VPC, у нас есть subnets,

00:14:40.012 --> 00:14:44.950
у нас есть Network ACL, Load
Balancer, даже на уровне

00:14:44.974 --> 00:14:51.000
операционной системы и
приложений это также можно настроить.

00:14:51.000 --> 00:14:59.509
Чем больше мы подготовим слоев безопасности,
которые не мешают эффективной работе

00:14:59.533 --> 00:15:09.000
самого приложения, тем сложнее будет
мошенникам, хакерам добраться до конечной их цели.

00:15:09.000 --> 00:15:14.533
Следующий принцип – это попытаться
максимально автоматизировать

00:15:14.557 --> 00:15:20.000
те процессы, которые позволяют
нам обеспечить безопасность.

00:15:20.000 --> 00:15:25.988
Если это автоматизировано, то, во-первых,
исключается человеческий фактор и работа

00:15:26.012 --> 00:15:32.000
проделывается автоматически, соответственно,
это может во много раз быть дешевле.

00:15:32.000 --> 00:15:38.037
Далее, необходимо при работе с
данными обеспечить защиту данных

00:15:38.061 --> 00:15:44.000
не только во время хранения,
но и во время передачи данных.

00:15:44.000 --> 00:15:50.253
Следующий принцип – это выдавать доступ
к данным только тем специалистам, которым

00:15:50.277 --> 00:15:57.000
нужен доступ по работе, далее, выдавать
права только в том объеме, которым они нужны,

00:15:57.000 --> 00:16:06.988
и, третье, если есть возможность предоставить
доступ таким образом, чтобы ограничить доступ

00:16:07.012 --> 00:16:17.000
к данным только к тем, которые нужны для
конкретного специалиста, то надо им воспользоваться.

00:16:17.000 --> 00:16:27.988
И самое последнее – это то, что необходимо настроить
 процессы управления инцидентами так, чтобы

00:16:28.012 --> 00:16:39.000
оперативнее на них реагировать и максимально в
сжатые сроки восстанавливать систему после сбоя.

00:16:39.000 --> 00:16:44.988
Следующий pillar – это reliability,
то есть надежность. Идея ее в том,

00:16:45.012 --> 00:16:51.000
что мы строим такие системы, которые
соответствуют требованиям бизнеса,

00:16:51.000 --> 00:16:56.488
они надежны и в случае возникновения
определенных проблем, ошибок система

00:16:56.512 --> 00:17:02.000
либо автоматически, либо с помощью
команды оперативно восстанавливается.

00:17:02.000 --> 00:17:11.000
Давайте рассмотрим 5 основных
принципов построения надежных систем.

00:17:11.000 --> 00:17:15.339
Первое – это то, что необходимо
по возможности автоматизировать

00:17:15.363 --> 00:17:19.000
процессы восстановления
при определенных падениях.

00:17:19.000 --> 00:17:21.820
Например, если мы знаем, что
часто у нас возникает подобного

00:17:21.844 --> 00:17:25.000
рода проблемы, попытаться решить
либо на уровне кода приложения,

00:17:25.000 --> 00:17:33.000
если это не связано с самим приложением, а на
уровне инфраструктуры, то необходимо ее исключить.

00:17:33.000 --> 00:17:40.000
Если же исключить не получается, то необходимо
настроить автоматическое восстановление при падении.

00:17:40.000 --> 00:17:52.000
Следующее – это отдавать предпочтение горизонтальному
масштабированию вместо вертикального масштабирования.

00:17:52.000 --> 00:17:57.988
Почему? Потому что если у вас один
мощный сервер, который обрабатывает запросы

00:17:58.012 --> 00:18:04.000
ваших пользователей, если он упадет, то
все приложения становятся недоступными.

00:18:04.000 --> 00:18:07.988
В случае, если у вас много
маленьких виртуальных серверов

00:18:08.012 --> 00:18:12.000
и каждый из них может
обрабатывать запросы пользователей,

00:18:12.000 --> 00:18:17.000
то при поломке одного из виртуальных
серверов его можно легко заменить.

00:18:17.000 --> 00:18:21.086
И даже если оно упадет, в момент,
когда оно отсутствует, большая

00:18:21.110 --> 00:18:25.000
часть запросов пользователей
будут успешно обрабатываться.

00:18:25.000 --> 00:18:33.000
Далее – необходимо периодически тестировать
все ваши процедуры, связанные с восстановлением.

00:18:33.000 --> 00:18:43.026
Необходимо настроить вашу инфраструктуру
таким образом, что она автоматически

00:18:43.050 --> 00:18:54.000
масштабируется, то есть уменьшается,
либо увеличивается в зависимости от нагрузки.

00:18:54.000 --> 00:19:03.000
Это позволяет вам запрашивать только те
ресурсы, которые нужны для вашей нагрузки.

00:19:03.000 --> 00:19:10.000
Таким образом, вы не оплачиваете впустую и
несете только те расходы, которые вы используете.

00:19:10.000 --> 00:19:22.000
Последнее – необходимо автоматизировать
процесс внесения изменений в вашу инфраструктуру.

00:19:22.000 --> 00:19:30.000
Это позволит исключить человеческий фактор, так
и легко откатываться в случае возникновения проблем.

00:19:30.000 --> 00:19:38.095
Следующий pillar – это Performance efficiency.
Идея ее в том, что мы работаем

00:19:38.119 --> 00:19:46.000
с теми ресурсами, и для каждого ресурса
мы подбираем правильные свойства.

00:19:46.000 --> 00:19:49.263
Когда мы говорим про инстанс
EC2, то нам необходимо,

00:19:49.287 --> 00:19:53.000
используя различные метрики,
собирая необходимые данные,

00:19:53.000 --> 00:20:00.000
понять, какой размер, какой тип инстансов
наиболее подходит нашим нагрузкам.

00:20:00.000 --> 00:20:06.000
Необходимо также настроить
мониторинг производительности.

00:20:06.000 --> 00:20:11.000
Это позволит собирать данные, на основе
этих данных принимать правильные решения.

00:20:11.000 --> 00:20:16.443
Давайте рассмотрим основные
принципы, best practices, которые

00:20:16.467 --> 00:20:23.000
позволяют строить IT инфраструктуру
с эффективной производительностью.

00:20:23.000 --> 00:20:29.000
Самое первое – рекомендуется
присматриваться к новым технологиям.

00:20:29.000 --> 00:20:36.000
И зачастую бывает такое, что новые технологии
позволяют значительно ускориться, увеличить

00:20:36.000 --> 00:20:42.000
эффективность, где-то исключить человеческий
фактор и автоматизировать ваши внутренние процессы.

00:20:42.000 --> 00:20:48.988
Далее, у вас есть возможность
присутствовать глобально,

00:20:49.012 --> 00:20:56.000
благодаря тому, что AWS
работает в различных регионах.

00:20:56.000 --> 00:21:01.152
То есть, подразумевается, что вы
можете построить инфраструктуру

00:21:01.176 --> 00:21:06.000
таким образом, которая
задеплоена на нескольких регионах.

00:21:06.000 --> 00:21:12.703
Здесь я бы хотел сделать небольшую
ремарку, а именно то, что вам всегда следует

00:21:12.727 --> 00:21:19.000
смотреть ваш конкретный случай, и
не всегда best practices вам подходит.

00:21:19.000 --> 00:21:23.988
Почему я это говорю прямо сейчас?
Потому что Go global in

00:21:24.012 --> 00:21:29.000
minutes – вынуждает вас
работать в нескольких регионах.

00:21:29.000 --> 00:21:37.000
Для большинства нагрузок компаний это не
всегда верно, так как достаточно быть в одном

00:21:37.000 --> 00:21:46.000
регионе и построить инфраструктуру,
которая задеплоена в несколько availability zone.

00:21:46.000 --> 00:21:55.000
Таким образом, компания не несет дополнительные
расходы, дублируя свою инфраструктуру на два региона.

00:21:55.000 --> 00:22:04.000
Это очень дорого, это затратно с точки зрения
сил и работы команды, и требует некоторое время.

00:22:04.000 --> 00:22:09.713
Соответственно, вам необходимо
всегда примерять для себя best practices, в

00:22:09.737 --> 00:22:16.000
случае, если оно подходит, то можно
двигаться и следовать этому best practices.

00:22:16.000 --> 00:22:22.000
Абсолютно то же самое я могу сказать про следующий
best practices – это use serverless architectures.

00:22:22.000 --> 00:22:28.000
То есть бессерверные архитектуры –
это несомненно новейшая технология,

00:22:28.000 --> 00:22:34.473
которая удачно подходит и
позволяет значительно сэкономить на IT

00:22:34.497 --> 00:22:42.000
архитектуре для начинающих стартапов,
у которых нагрузки непредсказуемы.

00:22:42.000 --> 00:22:51.000
Когда мы говорим про стабильные
нагрузки на вашу IT инфраструктуру,

00:22:51.000 --> 00:22:56.000
то бессерверные архитектуры не всегда
являются самым выгодным решением.

00:22:56.000 --> 00:23:02.000
Поэтому, еще раз повторюсь, вам необходимо
всегда примерять на себя любой best practices.

00:23:02.000 --> 00:23:06.000
И только в том случае, когда он вам
подходит, вы сделали холодный расчет,

00:23:06.000 --> 00:23:12.000
понимаете, что вы получите выгоду от этого,
то в этом случае, да, вы следуете best practices.

00:23:12.000 --> 00:23:16.988
В случае, если оно вам не
подходит, это всегда ваше решение –

00:23:17.012 --> 00:23:22.000
решение компании, соблюдать
или не соблюдать best practices.

00:23:22.000 --> 00:23:34.000
Самое последнее связано с первым пунктом – вам
необходимо максимально часто экспериментировать.

00:23:34.000 --> 00:23:38.554
Благодаря этому, у вас есть возможность
выстроить IT архитектуру таким

00:23:38.578 --> 00:23:43.000
образом, чтобы она максимально
удачно подходила под ваши нагрузки.

00:23:43.000 --> 00:23:51.000
Более того, нагрузки меняются со временем.
Требования бизнеса также меняются со временем.

00:23:51.000 --> 00:23:58.000
Соответственно, IT инфраструктура тоже должна
меняться и адаптироваться под новые реалии.

00:23:58.000 --> 00:24:08.000
Мы добрались до последнего pillar-а. Идея ее в
том, что мы должны избегать лишних расходов.

00:24:08.000 --> 00:24:16.000
Облачные технологии, само облако
позволяет вам отслеживать каждый ресурс.

00:24:16.000 --> 00:24:20.856
Но без необходимых дополнительных
тегов, информации об этом

00:24:20.880 --> 00:24:25.652
ресурсе, очень сложно понять,
кому из специалистов, либо

00:24:25.676 --> 00:24:30.826
какой из команд относится этот
ресурс, можно ли его удалять,

00:24:30.850 --> 00:24:36.000
он критичен или не критичен,
нужен или не нужен и так далее.

00:24:36.000 --> 00:24:44.000
Поэтому это такой процесс, который постоянный,
и вам необходимо проводить эту постоянную работу

00:24:44.000 --> 00:24:53.000
по анализу ваших расходов, чтобы понимать,
куда расходуются ваши деньги, деньги компании.

00:24:53.000 --> 00:24:58.167
Также вам необходимо периодически,
анализируя ваши расходы,

00:24:58.191 --> 00:25:03.000
понимать и подбирать оптимальный
тип ваших ресурсов. Это относится

00:25:03.000 --> 00:25:11.000
не только к типу, но также к количеству, и
благодаря этому не нести лишние расходы.

00:25:11.000 --> 00:25:20.000
Как я уже ранее говорил, работа с расходами
это некоторый продолжающийся процесс,

00:25:20.000 --> 00:25:27.000
который нужно периодически анализировать,
так как инфраструктура постоянно меняется,

00:25:27.000 --> 00:25:32.000
какие-то части инфраструктуры растут,
какая-то часть становится ненужной.

00:25:32.000 --> 00:25:39.000
И вот в процессе анализа ваших расходов вы
понимаете, что можно отключить, что можно

00:25:39.000 --> 00:25:45.000
переделать, что можно оставить так, как оно
есть, так как оно работает в самом оптимальном виде.

00:25:45.000 --> 00:25:54.488
Сюда же также относятся те
работы, которые требуют от вас

00:25:54.512 --> 00:26:04.000
анализа расходов при
масштабировании вашей инфраструктуры.

00:26:04.000 --> 00:26:14.000
Может быть так, что при масштабировании, например,
в 10 раз, та часть архитектуры, которая построена

00:26:14.000 --> 00:26:22.000
определенным образом, она не оптимальна,
вы несете лишние расходы и можно ее переделать.

00:26:22.000 --> 00:26:32.000
Поэтому специалисты, которые занимаются расходами,
постоянно тесно взаимодействуют с IT-архитекторами

00:26:32.000 --> 00:26:40.000
на предмет того, что можно ли некоторые места
переделать или нужно ли некоторые места переделать,

00:26:40.000 --> 00:26:43.000
так как это может сэкономить
определенную сумму денег.

00:26:43.000 --> 00:26:48.000
Далее уже IT-архитектор подключается, он
смотрит, что есть альтернативный вариант.

00:26:48.000 --> 00:26:57.000
И если оно также хорошо подходит для
выполнения бизнес требований, ее можно реализовать,

00:26:57.000 --> 00:27:02.000
то, соответственно, принимается
решение об изменении архитектуры.

00:27:02.000 --> 00:27:06.000
Давайте остановимся на
основных принципах cost optimization.

00:27:06.000 --> 00:27:15.000
Первое - для того, чтобы в компании работали
процессы по оптимизации расходов в облако,

00:27:15.000 --> 00:27:20.000
необходимо выделить либо одного
специалиста, либо небольшой отдел специалистов,

00:27:20.000 --> 00:27:26.000
которые на постоянной основе занимаются,
анализируют ваши расходы в облаке.

00:27:26.000 --> 00:27:34.488
Следующее это то, что необходимо
следить за тем, что вы платите в облаке

00:27:34.512 --> 00:27:43.000
только за те ресурсы, которые нужны.
Как понять ресурсы нужны и не нужны?

00:27:43.000 --> 00:27:58.000
Если ресурсы работают и были запрошены вами
для выполнения цели бизнеса, то эти ресурсы нужны.

00:27:58.000 --> 00:28:05.000
Если же эти ресурсы не выполняют никакой бизнес-
задачи, не преследуют какой-то определенную цель,

00:28:05.000 --> 00:28:12.000
то эти ресурсы избыточны, необходимо от них
избавляться, для того, чтобы не платить впустую.

00:28:12.000 --> 00:28:21.000
Следующий пункт говорит о том, что расходы
на облако могут расти, могут уменьшаться.

00:28:21.000 --> 00:28:29.000
И то, что ваши расходы выросли на 20%, не говорит
о том, что это плохо. Это неполноценная информация.

00:28:29.000 --> 00:28:38.000
Вам необходимо, наряду с вашими расходами,
также измерять эффективность вашей инфраструктуры.

00:28:38.000 --> 00:28:44.988
Возможно, это будут некоторые бизнес-метрики.
И может получиться так, что с увеличением на

00:28:45.012 --> 00:28:52.000
20% ваших расходов в облако, вы увеличили на
50% прибыль вашей компании за последний месяц.

00:28:52.000 --> 00:29:02.000
И вы видите, что даже если расходы на облако
выросли, они были увеличены эффективно так,

00:29:02.000 --> 00:29:10.000
что прирост дохода прибыли компании, он
был больше, чем рост вашей инфраструктуры.

00:29:10.000 --> 00:29:17.000
Поэтому необходимо максимально собирать больше
информации, для того, чтобы видеть общую картину.

00:29:17.000 --> 00:29:31.000
Следующий пункт говорит о том, что вам выгодно
сконцентрироваться на ваших бизнес-задачах.

00:29:31.000 --> 00:29:37.000
И все, что связано с железом, все, что связано
с управлением дата-центрами, передать AWS.

00:29:37.000 --> 00:29:46.000
Этот пункт, который рекомендует нам из
локального дата-центра переехать в облако.

00:29:46.000 --> 00:29:50.000
Опять же, все зависит от
бизнес-контекста, от текущей ситуации.

00:29:50.000 --> 00:29:55.672
Есть некоторые компании,
есть некоторые инфраструктуры,

00:29:55.696 --> 00:30:02.000
которые выгоднее и лучше
поднять на локальном дата-центре.

00:30:02.000 --> 00:30:08.000
Поэтому всегда смотрите свой
случай и анализируйте индивидуально.

00:30:08.000 --> 00:30:20.000
И самый последний пункт, это то, что
необходимо проводить процесс тегирования.

00:30:20.000 --> 00:30:31.000
И вот эту культуру тегирования ресурсов внутри облака
AWS прививать во всех командах внутри вашей компании.

00:30:31.000 --> 00:30:38.204
Благодаря тегированию вы сможете понимать
не только, что на конкретный сервис вся компания

00:30:38.228 --> 00:30:46.000
потратила, например, 2000 долларов за последний
месяц. Это достаточно неполноценная информация.

00:30:46.000 --> 00:30:54.000
Если бы, например, команды тегировали свои ресурсы
определенной меткой, с определенным ключом,

00:30:54.000 --> 00:31:02.068
вы бы понимали, что внутри расходов на
определенный сервис, если посмотреть на

00:31:02.092 --> 00:31:11.000
тег-платформу, вы увидите, что из 2000
долларов, 1000 долларов расходует команда А,

00:31:11.000 --> 00:31:17.000
500 долларов расходует команда В и оставшиеся
по 250 долларов третья и четвертая команда.

00:31:17.000 --> 00:31:21.280
В этом случае вы видите полноценную 
картину. Но для того, чтобы

00:31:21.304 --> 00:31:26.000
увидеть эту картину, каждая команда
должна следовать этим правилам.

00:31:26.000 --> 00:31:33.000
Процесс тегирования ресурсов должен
контролироваться централизованно.

00:31:33.000 --> 00:31:40.192
Должны быть определены набор ключей
тегов, которые учитываются в компании,

00:31:40.216 --> 00:31:48.000
которые обязательно следует заполнять.
Команды должны следовать этим правилам.

00:31:48.000 --> 00:31:54.000
Только в этом случае вы получите чистые данные,
на которых можно принимать определенные решения.

00:31:54.000 --> 00:32:00.000
На этом мы добрались до
конца первой части нашей лекции.

00:32:00.000 --> 00:32:04.000
Мы с вами подробнее разобрали,
что такое Well-Architected Framework.

00:32:04.000 --> 00:32:14.000
Если говорить вкратце, это документ, который
в пяти направлениях разбирает best practices.

00:32:14.000 --> 00:32:18.868
И в случае следования этим
best practices вы построите такую

00:32:18.892 --> 00:32:25.000
архитектуру, которая, во-первых, не
содержит в себе избыточных расходов.

00:32:25.000 --> 00:32:30.348
Она доступна, надежна, эффективна
с точки зрения производительности.

00:32:30.372 --> 00:32:36.780
Well-Architected Framework 
это best practices. И как я уже

00:32:36.804 --> 00:32:44.000
ранее говорил, best practices
это не всегда готовые инструкции.

00:32:44.000 --> 00:32:50.000
Вы заметили, что какая-то часть best
practices это достаточно очевидные вещи.

00:32:50.000 --> 00:32:56.000
И описывают в общих чертах, в
каком направлении нужно двигаться.

00:32:56.000 --> 00:33:03.000
Другой важный момент это то, что best
practices они не всегда применимы в вашем случае.

00:33:03.000 --> 00:33:09.000
Поэтому ваши случаи вы всегда
должны анализировать отдельно.

00:33:09.000 --> 00:33:14.620
И в случае, если следование
определенного best practices принесет

00:33:14.644 --> 00:33:20.000
свои выгоды, то рекомендуется
двигаться в этом направлении.

00:33:20.000 --> 00:33:28.000
Мы с вами добрались до второй
части нашей сегодняшней лекции.

00:33:28.000 --> 00:33:35.000
И мы познакомимся здесь с некоторыми
терминами, связанными с надежностью и доступностью.

00:33:35.000 --> 00:33:44.000
Как постоянно говорит технический директор компании
Amazon, Вернер Фогельс: "Все падает, все время".

00:33:44.000 --> 00:33:52.609
Это к тому, что не следует надеяться на железо,
оно всегда подводит, тем более с увеличением

00:33:52.633 --> 00:34:02.000
масштабов вашей инфраструктуры, вероятность
того, что где-то что-то пойдет не так, увеличивается.

00:34:02.000 --> 00:34:09.000
Соответственно ваша инфраструктура должна
ожидать, что в любом месте она может сломаться,

00:34:09.000 --> 00:34:14.000
и ваша система должна автоматически
реагировать на такие события,

00:34:14.000 --> 00:34:19.000
а также, в идеальном варианте,
автоматически восстанавливаться.

00:34:19.000 --> 00:34:28.000
Это приводит к тому, что ваша инфраструктура
становится максимально надежной и доступной.

00:34:28.000 --> 00:34:35.181
Итак, что же такое надежность? Надежность - это 
некоторая способность вашей системы

00:34:35.205 --> 00:34:43.000
предоставлять ту функциональность вашим
пользователям, которая была задумана изначально.

00:34:43.000 --> 00:34:49.000
Когда мы говорим про IT-системы, то
сюда входят все компоненты этой системы,

00:34:49.000 --> 00:34:54.000
начиная от железа, заканчивая настройками
приложения и вашими данными.

00:34:54.000 --> 00:35:01.000
Для того, чтобы лучше понять, что такое надежность,
давайте возьмем как пример системы машину.

00:35:01.000 --> 00:35:06.000
Машина - это такая же система, которая
состоит из нескольких различных компонентов.

00:35:06.000 --> 00:35:10.558
Как пример, это может быть система
охлаждения двигателя, это может

00:35:10.582 --> 00:35:15.000
быть система впрыска топлива
для того, чтобы машина завелась.

00:35:15.000 --> 00:35:24.000
Это может быть работа тормоза для того, чтобы иметь
 возможность останавливаться и безопасно ездить.

00:35:24.000 --> 00:35:32.000
Представим, что система впрыска не работает.
В этом случае машина недоступна.

00:35:32.000 --> 00:35:38.988
Если система впрыска не работает
какое-то продолжительное время, и

00:35:39.012 --> 00:35:46.000
мы повторяющееся количество
попыток не можем завести нашу машину,

00:35:46.000 --> 00:35:52.000
то мы говорим, что наша машина
ненадежная, эта система ненадежная.

00:35:52.000 --> 00:36:02.000
Для того, чтобы измерять надежность
IT-системы вводят некоторые формулы.

00:36:02.000 --> 00:36:07.488
Самым распространенным
вариантом является MTBF, то есть

00:36:07.512 --> 00:36:13.000
Mean Time Between Failures, это
среднее время между падениями.

00:36:13.000 --> 00:36:19.035
Как она рассчитывается: мы берем
общее время работы вашего сервиса

00:36:19.059 --> 00:36:25.000
и делим на количество падений.
Можно привести следующий пример.

00:36:25.000 --> 00:36:35.488
Если за 12 месяцев работы вашего
сервиса ваша система падала 12

00:36:35.512 --> 00:36:46.000
раз, то это говорит о том, что
ваша система не такая надежная.

00:36:46.000 --> 00:36:57.988
И разделив 12 месяцев на 12 падений, мы можем
измерить и сравнить себя в прошлом, в будущем

00:36:58.012 --> 00:37:10.000
и понимать, система стала надежнее или нет,
либо сравнить с другими эталонными IT-системами.

00:37:10.000 --> 00:37:14.000
Есть другой подход, как рассчитывать
надежность вашей системы.

00:37:14.000 --> 00:37:18.542
Представим, что у вас есть
система, которая работает

00:37:18.566 --> 00:37:24.000
стабильно с понедельника по
пятницу и в субботу она падает.

00:37:24.000 --> 00:37:28.000
В субботу и воскресенье вы занимаетесь
над восстановлением вашего сервиса.

00:37:28.000 --> 00:37:33.308
Далее восстанавливаете до понедельника
и на следующей неделе повторяется то

00:37:33.332 --> 00:37:39.000
же самое, каждую неделю. Таким образом,
5 дней в неделю ваша система работает.

00:37:39.000 --> 00:37:47.000
Это значит, с правой стороны слайда вы видите
System Brought Online, то есть система доступна,

00:37:47.000 --> 00:37:58.000
и стрелка до System Fails, то есть
среднее время до падения это 5 дней.

00:37:58.000 --> 00:38:05.000
Далее, у нас есть следующая стрелка в нижней части
от System Fails до System Repaired, то есть это то

00:38:05.000 --> 00:38:13.000
среднее время, которое нужно на восстановление
вашей системы. В нашем случае это 2 дня.

00:38:13.000 --> 00:38:25.480
И если мы говорим, что Mean Time Between
Failures равняется сумме этих двух, то среднее

00:38:25.504 --> 00:38:39.000
время между падениями это 5 дней плюс 2 дня,
то есть 7 дней - это наш показатель надежности.

00:38:39.000 --> 00:38:44.000
Давайте перейдем к следующему термину.
Это - Availability, то есть доступность.

00:38:44.000 --> 00:38:48.000
Оно тесно связано с
reliability, с надежностью.

00:38:48.000 --> 00:38:54.000
Если ваша система ненадежна, то какой-то
период времени ваша система не функционирует.

00:38:54.000 --> 00:39:01.000
Если ваша система не функционирует,
значит она недоступна для ваших пользователей.

00:39:01.000 --> 00:39:08.757
Как измеряется доступность? Стандартная
формула это количество времени, когда система

00:39:08.781 --> 00:39:17.000
функционировала корректно, поделенное на
общее время, общий период, который мы измеряем.

00:39:17.000 --> 00:39:25.000
Есть два варианта, как описывают доступность
вашей системы. Это количество девяток.

00:39:25.000 --> 00:39:34.988
Как пример, если говорят пять девяток
доступности, это значит в измеряемом промежутке в

00:39:35.012 --> 00:39:45.000
99.999% времени ваша система доступна.
Другой вариант, прямо прописывают этот процент.

00:39:45.000 --> 00:39:59.000
Например, мы говорим, наша система в
течение одного года доступна в 99.9% времени.

00:39:59.000 --> 00:40:09.000
Следующий термин, который связан с предыдущим,
это High availability, то есть высокая доступность.

00:40:09.000 --> 00:40:17.488
Этот термин применяется к инфраструктурам, которые,
несмотря на снижение производительности отдельных

00:40:17.512 --> 00:40:26.000
компонентов инфраструктуры, продолжают работать и
остаются доступными для ваших пользователей.

00:40:26.000 --> 00:40:35.488
Это те инфраструктуры, в которых восстановление
происходит максимально быстро, время, необходимое

00:40:35.512 --> 00:40:45.000
для проведения каких-либо административных работ
либо работ по обновлению системы, минимизировано.

00:40:45.000 --> 00:40:54.000
Также минимизировано вмешательство
человеческого фактора, либо совсем исключено.

00:40:54.000 --> 00:41:04.000
В этих инфраструктурах обычно для восстановления
после падения требуется меньше минуты.

00:41:04.000 --> 00:41:12.000
В этой таблице представлены
уровни доступности инфраструктуры.

00:41:12.000 --> 00:41:20.488
Когда мы говорим 99% доступности,
и если мы говорим о времени в один

00:41:20.512 --> 00:41:29.000
год, то 1% это 3 дня и 15 часов,
когда система может быть недоступна.

00:41:29.000 --> 00:41:40.099
В этом случае, если для проведения различных работ,
либо внезапных проблем с доступностью системы вам

00:41:40.123 --> 00:41:52.000
суммарно требуется не более 3 дней и 15 часов, тогда
мы говорим ваша инфраструктура доступна 99% времени.

00:41:52.000 --> 00:41:58.725
Если же мы добавляем еще одну
девятку, это 99,9, то здесь система

00:41:58.749 --> 00:42:06.000
может быть недоступна в течение
одного года лишь 8 часов и 45 минут.

00:42:06.000 --> 00:42:19.000
Итак, добавляя еще девятки, вы видите, мы
доходим до самого высокого уровня доступности.

00:42:19.000 --> 00:42:26.988
Когда говорим 5 девяток, это
99,999% доступности, то есть всего лишь

00:42:27.012 --> 00:42:35.000
5 минут инфраструктура может
быть недоступна в течение целого года.

00:42:35.000 --> 00:42:44.000
Давайте остановимся на факторах, которые
влияют на доступность вашей инфраструктуры.

00:42:44.000 --> 00:42:52.000
Самое первое – это отказоустойчивость. Здесь
подразумевается наличие встроенной избыточности,

00:42:52.000 --> 00:42:59.000
которая позволяет продолжать работать приложениям,
даже если какие-то компоненты выходят из строя.

00:42:59.000 --> 00:43:06.000
Проще говоря, наличие резервных ресурсов,
на которые система может переключиться

00:43:06.000 --> 00:43:17.000
при падении основных ресурсов. Если приводим
пример, то примером избыточности может быть

00:43:17.000 --> 00:43:24.000
одна read реплика вместе с
одной основной базой данных.

00:43:24.000 --> 00:43:29.000
В случае, когда что-то происходит с основной базой
данных, происходит автоматическое переключение,

00:43:29.000 --> 00:43:32.000
и ваша read реплика становится
основной базой данных.

00:43:32.000 --> 00:43:39.000
Двигаемся дальше. Следующий пункт – это
recoverability, то есть наличие в инфраструктуре

00:43:39.000 --> 00:43:45.000
определенно прописанной логики, которые
автоматически восстанавливается после падения.

00:43:45.000 --> 00:43:51.488
Здесь для того, чтобы это работало,
нужно, чтобы система могла правильно

00:43:51.512 --> 00:43:58.000
идентифицировать, если произошел
сбой, какой компонент перестал работать.

00:43:58.000 --> 00:44:05.242
Далее, для определенных видов
поломки у вас должны быть прописаны

00:44:05.266 --> 00:44:11.828
механизмы, которые соответствующе
реагируют либо изменяют

00:44:11.852 --> 00:44:18.414
инфраструктуру, или допрашивают
дополнительные ресурсы для

00:44:18.438 --> 00:44:25.000
того, чтобы заменить те
ресурсы, которые вышли из строя.

00:44:25.000 --> 00:44:31.000
Третий пункт – это scalability, то есть
возможность к автомасштабированию.

00:44:31.000 --> 00:44:42.000
Ваша система должна быть способна увеличиваться
в размерах в зависимости от нагрузки на ваш сервис.

00:44:42.000 --> 00:44:48.960
Здесь следует также отметить, что
невозможно бесконечно увеличивать

00:44:48.984 --> 00:44:57.000
доступность вашей инфраструктуры,
так как это несет дополнительные расходы.

00:44:57.000 --> 00:45:05.000
Поэтому доступность – это всегда
игра, баланс между теми расходами,

00:45:05.000 --> 00:45:13.000
которые вы можете понести на вашу
инфраструктуру, и процентом доступности.

00:45:13.000 --> 00:45:17.000
На этом мы добрались до
конца второй части нашей лекции.

00:45:17.000 --> 00:45:24.000
Мы познакомились с такими важными терминами,
как надежность, доступность, высокая доступность,

00:45:24.000 --> 00:45:31.000
и проговорили факторы, которые влияют
на доступность вашей инфраструктуры.

00:45:31.000 --> 00:45:38.026
Мы с вами добрались до последней части нашей
сегодняшней лекции и познакомимся с сервисом AWS

00:45:38.050 --> 00:45:45.000
Trusted Advisor. Это тот сервис, который в
режиме реального времени дает вам рекомендации.

00:45:45.000 --> 00:45:56.988
Эти рекомендации поделены на пять направлений
и сообщают о том, соответствует ли ваша

00:45:57.012 --> 00:46:09.000
инфраструктура тому или иному best practice
в рамках AWS Well-Architected Framework.

00:46:09.000 --> 00:46:13.733
Как вы видите, поделены рекомендации
на пять направлений. Это cost

00:46:13.757 --> 00:46:19.000
optimization, performance, security,
fault tolerance и service limits.

00:46:19.000 --> 00:46:24.000
Отображается количество best
practice, которые соблюдены, зеленым.

00:46:24.000 --> 00:46:29.765
Далее, оранжевым отображается
количество best practice, которые желательно

00:46:29.789 --> 00:46:35.000
исправить, чтобы ваша архитектура
соответствовала best practice.

00:46:35.000 --> 00:46:41.785
И красным отображаются те
кейсы, которые критически важны и

00:46:41.809 --> 00:46:50.000
настоятельно рекомендуется обратить
внимание и исправить эти пункты.

00:46:50.000 --> 00:46:57.000
Давайте рассмотрим несколько примеров,
какие рекомендации дает нам AWS Trusted Advisor.

00:46:57.000 --> 00:47:05.000
Первый, самый популярный пример, это
рекомендация включить MFA на Root аккаунте.

00:47:05.000 --> 00:47:15.596
Как происходит проверка? Срабатывает alert, если
MFA не включен для Root аккаунта и соответствующая

00:47:15.620 --> 00:47:26.000
рекомендация - включить MFA девайс, виртуальный,
либо hardware версию для вашего Root аккаунта.

00:47:26.000 --> 00:47:32.000
Другой вариант, это происходит
проверка на наличие Password policy.

00:47:32.000 --> 00:47:37.588
Если же не находится ни одно
policy для управления вашими

00:47:37.612 --> 00:47:44.000
паролями, то соответственно
приходит рекомендация это сделать.

00:47:44.000 --> 00:47:52.342
Следующий пример, это в
Security группах, если есть правило,

00:47:52.366 --> 00:48:00.000
которое предоставляет
доступ к портам 2580 либо 443,

00:48:00.000 --> 00:48:07.472
и при этом, как CIDR блок
указывается /0, то есть весь интернет, то

00:48:07.496 --> 00:48:15.988
срабатывает alert и как рекомендация
вам предлагается все эти рулы удалить

00:48:16.012 --> 00:48:23.544
и предоставлять доступ к соответствующим
портам только к конкретному

00:48:23.568 --> 00:48:32.000
компьютеру, то есть одному IP-адресу,
либо CIDR блоку корпоративной среды.

00:48:32.000 --> 00:48:38.027
Другой пример связан с EBS снапшотами.
Рекомендация приходит

00:48:38.051 --> 00:48:45.000
желтым, если у нас есть снапшоты,
возраст которых от 7 до 30 дней,

00:48:45.000 --> 00:48:49.694
если с красным уровнем, то у нас
есть снапшоты возрастом более 30

00:48:49.718 --> 00:48:55.000
дней, либо если для некоторых жестких
дисков снапшоты не были созданы.

00:48:55.000 --> 00:49:05.000
На этом мы добрались до конца последней части лекции
и познакомились с сервисом AWS Trusted advisor.

00:49:05.000 --> 00:49:11.416
Это тот сервис, который позволяет вам
в режиме реального времени проверить

00:49:11.440 --> 00:49:19.000
соответствует ли ваша IT-инфраструктура
best practice из Well-architected framework.

00:49:19.000 --> 00:49:23.738
На этом мы добрались до конца
нашей сегодняшней лекции. Мы

00:49:23.762 --> 00:49:29.000
подробнее разобрали, что же
такое Well-architected framework,

00:49:29.000 --> 00:49:34.157
зачем он нужен. Далее мы рассмотрели 
некоторые важные термины,

00:49:34.181 --> 00:49:39.000
такие как надежность и
доступность, как они измеряются.

00:49:39.000 --> 00:49:43.988
Ну и в конце мы познакомились с сервисом
Trusted advisor, который в автоматическом

00:49:44.012 --> 00:49:49.000
режиме проверяет соответствия нашей
инфраструктуры c Well-architected framework.

00:49:49.000 --> 00:49:53.683
Если вам нужна дополнительная информация,
вы можете воспользоваться следующими

00:49:53.707 --> 00:49:59.000
ссылками для более углубленного изучения
тем, пройденных на сегодняшней нашей лекции.

00:49:59.000 --> 00:50:09.000
Я очень надеюсь, что вы получили более полное
представление о пройденных сервисах и терминах.

00:50:09.000 --> 00:50:25.000
Спасибо за внимание. Увидимся с вами
на следующих наших активностях.
