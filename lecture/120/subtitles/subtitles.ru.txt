Добрый день, уважаемые студенты! Я рад вас всех видеть на очередной лекции. Тема сегодняшней лекции - это Cloud Architecture, то есть мы поговорим, как правильно строить IT-архитектуру в облаке AWS. Итак, давайте начнем. Сегодняшняя лекция состоит из трех частей. В первой части поговорим про AWS Well-Architected Framework. Это набор best practices от команды архитекторов AWS, как правильно строить IT-архитектуру в облаке. Далее, во второй части, мы познакомимся с некоторыми важными терминами, связанные с надежностью и доступностью вашей инфраструктуры. И третье, мы поговорим про сервис AWS Trusted Advisor, который помогает нам строить архитектуру с учетом best practices. Мы с вами начинаем первую часть сегодняшней нашей лекции AWS Well-Architected Framework. Перед тем, как мы подробнее про него поговорим, давайте остановимся на том, что такое архитектура. IT-архитектура - это в каком-то смысле искусство и наука по планированию и построению сложных структур. Построением этих сложных структур занимаются IT-архитекторы. В нашем случае Cloud Architects, то есть облачные архитекторы. Чем они занимаются? Это те люди, которые, первое, ведут переговоры с так называемыми лицами, принимающие решения, это может быть высший менеджмент либо владельцы бизнеса, чтобы понять, какие цели преследует бизнес. Второе, архитектор с учетом тех.требований, зная, какие IT-технологии на текущий момент есть в наличии, доступны, и понимая, какая команда есть в наличии, прикидывает, возможно ли эти бизнес-требования реализовать в адекватные сроки и с адекватными финансовыми затратами. Далее, третье, архитектор уже тесно взаимодействуя с командой разработки, эту архитектуру строит и постоянно мониторит, чтобы все важные моменты были корректно настроены. Почему это важно? Потому что правильно построенная IT-архитектура сильно увеличивает шансы того, что бизнеса ждет успех. На ежедневной основе специалисты AWS ведут переговоры, консультируют тысячи и десятки тысяч клиентов по всему миру. У каждого клиента есть определенная архитектура. Она может быть маленькой, большой, сложной, простой, либо быть стандартного плана, либо содержать в себе некоторые уникальные свойства. Таким образом, накапливается драгоценный опыт у специалистов AWS, и как результат этого опыта была разработана Well-Architected Framework. Это набор из пяти различных секций, которые позволяют вам строить архитектуру, которая безопасна, производительна, надежна и эффективна. Well-Architected Framework состоит из пяти частей, а именно Operational Excellence, Security, Reliability, Performance Efficiency и Cost Optimization. Мы на каждой из них остановимся на следующих слайдах. Самый первый pillar, то есть направление, это Operational Excellence. Идея этого направления в том, чтобы мониторить и запускать системы таким образом, чтобы они приносили бизнес-ценность, а также на постоянной основе улучшать процессы поддержки. В связи с этим есть три важных топика, это Automating Changes, то есть автоматизация изменений. Далее, это Responding to Events, то есть реагирование на различные события. Третье - введение стандартов для более эффективного управления ежедневными операционными задачами. Давайте рассмотрим основные пять принципов Operational Excellence. Самое первое – Perform Operations as Code. Идея в том, что там, где возможно, необходимо автоматизировать и исключать человеческий фактор. Самый наглядный пример, связанный с IT-инфраструктурой, это использование сервиса AWS CloudFormation либо его аналогов. Как мы с вами помним, это сервис, который позволяет нам на вход подать код нашей инфраструктуры, и AWS CloudFormation уже сам автоматически поднимает за нас инфраструктуру. Так как мы работаем с кодом, мы можем использовать различные системы контроля версии и работать всей командой совместно над одним кодом. Это намного легче, намного удобнее, все изменения сохраняются и удобно можно откатиться назад. Таким образом, вы не только исключаете человеческий фактор при настройке вашей инфраструктуры, но и ускоряетесь в каком-то смысле, так как совместная работа становится более эффективной. Более того, когда вы работаете как код, вы видите всю инфраструктуру как на ладони. Следующее, это то, что необходимо выпускать частые и маленькие изменения, т.е. чем выпускать большие обновления раз в месяц, лучше каждые несколько дней выпускать небольшие изменения, обновления приложения. Почему это важно? Потому что с маленькими изменениями вы легче локализуете вашу проблему и в следующие обновления они не будут накладываться сверху, а вы сразу исправляете эту ошибку и уже следующие изменения накладываются на правильный код. В случае, если что-то накладывается сверху, то изменить ее не всегда возможно, либо это потребует больше времени. Таким образом, мы экономим время, и, соответственно, финансовые средства. Когда мы говорим также про маленькие изменения, то эти изменения намного легче откатить назад. Поэтому необходимо строить процессы, инфраструктуру таким образом, чтобы была возможность чаще деплоить ваши изменения вашего приложения. Следующий принцип - необходимо периодически пересматривать ваши операционные процедуры. Это может быть некоторая документация, это могут быть некоторые прописанные процессы. Идея - когда вы постоянно ее пересматриваете, некоторые неактуальные части могут быть оперативно удалены, а те, которые существуют и есть, могут быть улучшены и автоматизированы. Это позволяет в целом быстрее двигаться команде поддержки, команде облачных инженеров, и справляться с IT-инфраструктурой становится легче. Далее, четвертое - это то, что мы должны предвидеть, ожидать проблемы, поломки нашей инфраструктуры. Что это значит? Необходимо на постоянной основе проводить анализ инфраструктуры, понимать узкие места, поломка какой из частей содержит в себе наибольшее влияние на работу приложения. И таким образом, периодически просматривая эти моменты, мы понимаем, где нам необходимо добавить дополнительную избыточность. Идея в том, что мы максимально модернизируем нашу инфраструктуру таким образом, чтобы инфраструктура всегда была доступна и была менее подвержена различным поломкам. Если эти поломки происходят, то тестирование тех процедур, которые должны быть выполнены для оперативного восстановления, их тоже нужно периодически пересматривать и симулировать, чтобы команда была в тонусе и готова к подобным событиям. Последний принцип - это то, что со всех событий, которые происходят в жизни вашей IT-инфраструктуры, будь то ошибки, поломки и так далее, необходимо извлекать какую-то пользу. Возможно стоит периодически встречаться и делать некоторое ревью, обзор того, что произошло, как оно было исправлено, где были недочеты, как можно улучшить этот процесс и так далее. Более того, хорошей практикой является организация внутренних конференций между IT-командами, для того чтобы команды делились своим опытом того, как они справлялись с различными проблемами. Например, если мы говорим про команду разработки, они могут поделиться некоторыми интересными новинками в сфере разработки. Если мы говорим про команду Cloud инженеров, то в этом случае можно рассмотреть, какие части инфраструктуры были удачно автоматизированы, результаты, какие плюсы, минусы и так далее, т.е. в целом увеличивать квалификацию всей команды в компании. Следующий pillar – это безопасность. Идея ее в том, что нам необходимо обеспечить безопасность нашей инфраструктуры, систем, информации и так далее, пока мы доставляем бизнес-ценность нашей компании. Выделяют несколько направлений. Первое – это то, что нам необходимо защищать конфиденциальность и целостность данных. Далее, нам необходимо понимать, кто и что может делать в вашей инфраструктуре, т.е. это правильная работа с правами доступа в облаке. Далее, необходимо обеспечить защиту периметра наших систем, т.е. это связано с шифрованием в том числе. Последнее четвертое – необходимо подготовить и настроить некоторые автоматические события, которые триггерятся по возникновению некоторых событий, связанных с безопасностью. То есть, под автоматическом режимом мы можем понимать, что у нас в инфраструктуре что-то поломалось или был взлом хакерами, либо была разрушена целостность периметра, и, соответственно, мошенники добрались до наших данных, баз данных и так далее. Если это автоматически вылавливается, то это очень хорошо. Давайте теперь подробнее остановимся на принципах безопасности. Оно состоит из семи частей. Самое первое – это нам необходимо регулировать кому какие права доступа мы выдаем, т.е. нужно следовать принципу Least Privilege. Мы выдаем только те права, которые нужны. Более того, необходимо настроить централизованное управление правами доступа, что облегчит работу с правами доступа. Более того, если это возможно, либо сократить время выдачи прав, либо совсем исключить возможность выдачи прав на определенные ресурсы, части инфраструктуры на какой-то долгий период. Идея в том, что credential-ы периодически должны обновляться, начиная от паролей в AWS Management Console, заканчивая access и secret ключами. Следующее – это Enable Traceability. Идея ее в том, что нам необходимо в режиме реального времени отслеживать изменения инфраструктуры, интегрироваться с логами и метриками для того, чтобы иметь возможность автоматически реагировать и принимать какие-то действия по восстановлению системы. Далее, нам необходимо включить все механизмы безопасности на всех уровнях нашей инфраструктуры. То есть, у нас есть определенные возможности настроить более безопасные IT ресурсы в VPC, у нас есть subnets, у нас есть Network ACL, Load Balancer, даже на уровне операционной системы и приложений это также можно настроить. Чем больше мы подготовим слоев безопасности, которые не мешают эффективной работе самого приложения, тем сложнее будет мошенникам, хакерам добраться до конечной их цели. Следующий принцип – это попытаться максимально автоматизировать те процессы, которые позволяют нам обеспечить безопасность. Если это автоматизировано, то, во-первых, исключается человеческий фактор и работа проделывается автоматически, соответственно, это может во много раз быть дешевле. Далее, необходимо при работе с данными обеспечить защиту данных не только во время хранения, но и во время передачи данных. Следующий принцип – это выдавать доступ к данным только тем специалистам, которым нужен доступ по работе, далее, выдавать права только в том объеме, которым они нужны, и, третье, если есть возможность предоставить доступ таким образом, чтобы ограничить доступ к данным только к тем, которые нужны для конкретного специалиста, то надо им воспользоваться. И самое последнее – это то, что необходимо настроить процессы управления инцидентами так, чтобы оперативнее на них реагировать и максимально в сжатые сроки восстанавливать систему после сбоя. Следующий pillar – это reliability, то есть надежность. Идея ее в том, что мы строим такие системы, которые соответствуют требованиям бизнеса, они надежны и в случае возникновения определенных проблем, ошибок система либо автоматически, либо с помощью команды оперативно восстанавливается. Давайте рассмотрим 5 основных принципов построения надежных систем. Первое – это то, что необходимо по возможности автоматизировать процессы восстановления при определенных падениях. Например, если мы знаем, что часто у нас возникает подобного рода проблемы, попытаться решить либо на уровне кода приложения, если это не связано с самим приложением, а на уровне инфраструктуры, то необходимо ее исключить. Если же исключить не получается, то необходимо настроить автоматическое восстановление при падении. Следующее – это отдавать предпочтение горизонтальному масштабированию вместо вертикального масштабирования. Почему? Потому что если у вас один мощный сервер, который обрабатывает запросы ваших пользователей, если он упадет, то все приложения становятся недоступными. В случае, если у вас много маленьких виртуальных серверов и каждый из них может обрабатывать запросы пользователей, то при поломке одного из виртуальных серверов его можно легко заменить. И даже если оно упадет, в момент, когда оно отсутствует, большая часть запросов пользователей будут успешно обрабатываться. Далее – необходимо периодически тестировать все ваши процедуры, связанные с восстановлением. Необходимо настроить вашу инфраструктуру таким образом, что она автоматически масштабируется, то есть уменьшается, либо увеличивается в зависимости от нагрузки. Это позволяет вам запрашивать только те ресурсы, которые нужны для вашей нагрузки. Таким образом, вы не оплачиваете впустую и несете только те расходы, которые вы используете. Последнее – необходимо автоматизировать процесс внесения изменений в вашу инфраструктуру. Это позволит исключить человеческий фактор, так и легко откатываться в случае возникновения проблем. Следующий pillar – это Performance efficiency. Идея ее в том, что мы работаем с теми ресурсами, и для каждого ресурса мы подбираем правильные свойства. Когда мы говорим про инстанс EC2, то нам необходимо, используя различные метрики, собирая необходимые данные, понять, какой размер, какой тип инстансов наиболее подходит нашим нагрузкам. Необходимо также настроить мониторинг производительности. Это позволит собирать данные, на основе этих данных принимать правильные решения. Давайте рассмотрим основные принципы, best practices, которые позволяют строить IT инфраструктуру с эффективной производительностью. Самое первое – рекомендуется присматриваться к новым технологиям. И зачастую бывает такое, что новые технологии позволяют значительно ускориться, увеличить эффективность, где-то исключить человеческий фактор и автоматизировать ваши внутренние процессы. Далее, у вас есть возможность присутствовать глобально, благодаря тому, что AWS работает в различных регионах. То есть, подразумевается, что вы можете построить инфраструктуру таким образом, которая задеплоена на нескольких регионах. Здесь я бы хотел сделать небольшую ремарку, а именно то, что вам всегда следует смотреть ваш конкретный случай, и не всегда best practices вам подходит. Почему я это говорю прямо сейчас? Потому что Go global in minutes – вынуждает вас работать в нескольких регионах. Для большинства нагрузок компаний это не всегда верно, так как достаточно быть в одном регионе и построить инфраструктуру, которая задеплоена в несколько availability zone. Таким образом, компания не несет дополнительные расходы, дублируя свою инфраструктуру на два региона. Это очень дорого, это затратно с точки зрения сил и работы команды, и требует некоторое время. Соответственно, вам необходимо всегда примерять для себя best practices, в случае, если оно подходит, то можно двигаться и следовать этому best practices. Абсолютно то же самое я могу сказать про следующий best practices – это use serverless architectures. То есть бессерверные архитектуры – это несомненно новейшая технология, которая удачно подходит и позволяет значительно сэкономить на IT архитектуре для начинающих стартапов, у которых нагрузки непредсказуемы. Когда мы говорим про стабильные нагрузки на вашу IT инфраструктуру, то бессерверные архитектуры не всегда являются самым выгодным решением. Поэтому, еще раз повторюсь, вам необходимо всегда примерять на себя любой best practices. И только в том случае, когда он вам подходит, вы сделали холодный расчет, понимаете, что вы получите выгоду от этого, то в этом случае, да, вы следуете best practices. В случае, если оно вам не подходит, это всегда ваше решение – решение компании, соблюдать или не соблюдать best practices. Самое последнее связано с первым пунктом – вам необходимо максимально часто экспериментировать. Благодаря этому, у вас есть возможность выстроить IT архитектуру таким образом, чтобы она максимально удачно подходила под ваши нагрузки. Более того, нагрузки меняются со временем. Требования бизнеса также меняются со временем. Соответственно, IT инфраструктура тоже должна меняться и адаптироваться под новые реалии. Мы добрались до последнего pillar-а. Идея ее в том, что мы должны избегать лишних расходов. Облачные технологии, само облако позволяет вам отслеживать каждый ресурс. Но без необходимых дополнительных тегов, информации об этом ресурсе, очень сложно понять, кому из специалистов, либо какой из команд относится этот ресурс, можно ли его удалять, он критичен или не критичен, нужен или не нужен и так далее. Поэтому это такой процесс, который постоянный, и вам необходимо проводить эту постоянную работу по анализу ваших расходов, чтобы понимать, куда расходуются ваши деньги, деньги компании. Также вам необходимо периодически, анализируя ваши расходы, понимать и подбирать оптимальный тип ваших ресурсов. Это относится не только к типу, но также к количеству, и благодаря этому не нести лишние расходы. Как я уже ранее говорил, работа с расходами это некоторый продолжающийся процесс, который нужно периодически анализировать, так как инфраструктура постоянно меняется, какие-то части инфраструктуры растут, какая-то часть становится ненужной. И вот в процессе анализа ваших расходов вы понимаете, что можно отключить, что можно переделать, что можно оставить так, как оно есть, так как оно работает в самом оптимальном виде. Сюда же также относятся те работы, которые требуют от вас анализа расходов при масштабировании вашей инфраструктуры. Может быть так, что при масштабировании, например, в 10 раз, та часть архитектуры, которая построена определенным образом, она не оптимальна, вы несете лишние расходы и можно ее переделать. Поэтому специалисты, которые занимаются расходами, постоянно тесно взаимодействуют с IT-архитекторами на предмет того, что можно ли некоторые места переделать или нужно ли некоторые места переделать, так как это может сэкономить определенную сумму денег. Далее уже IT-архитектор подключается, он смотрит, что есть альтернативный вариант. И если оно также хорошо подходит для выполнения бизнес требований, ее можно реализовать, то, соответственно, принимается решение об изменении архитектуры. Давайте остановимся на основных принципах cost optimization. Первое - для того, чтобы в компании работали процессы по оптимизации расходов в облако, необходимо выделить либо одного специалиста, либо небольшой отдел специалистов, которые на постоянной основе занимаются, анализируют ваши расходы в облаке. Следующее это то, что необходимо следить за тем, что вы платите в облаке только за те ресурсы, которые нужны. Как понять ресурсы нужны и не нужны? Если ресурсы работают и были запрошены вами для выполнения цели бизнеса, то эти ресурсы нужны. Если же эти ресурсы не выполняют никакой бизнес- задачи, не преследуют какой-то определенную цель, то эти ресурсы избыточны, необходимо от них избавляться, для того, чтобы не платить впустую. Следующий пункт говорит о том, что расходы на облако могут расти, могут уменьшаться. И то, что ваши расходы выросли на 20%, не говорит о том, что это плохо. Это неполноценная информация. Вам необходимо, наряду с вашими расходами, также измерять эффективность вашей инфраструктуры. Возможно, это будут некоторые бизнес-метрики. И может получиться так, что с увеличением на 20% ваших расходов в облако, вы увеличили на 50% прибыль вашей компании за последний месяц. И вы видите, что даже если расходы на облако выросли, они были увеличены эффективно так, что прирост дохода прибыли компании, он был больше, чем рост вашей инфраструктуры. Поэтому необходимо максимально собирать больше информации, для того, чтобы видеть общую картину. Следующий пункт говорит о том, что вам выгодно сконцентрироваться на ваших бизнес-задачах. И все, что связано с железом, все, что связано с управлением дата-центрами, передать AWS. Этот пункт, который рекомендует нам из локального дата-центра переехать в облако. Опять же, все зависит от бизнес-контекста, от текущей ситуации. Есть некоторые компании, есть некоторые инфраструктуры, которые выгоднее и лучше поднять на локальном дата-центре. Поэтому всегда смотрите свой случай и анализируйте индивидуально. И самый последний пункт, это то, что необходимо проводить процесс тегирования. И вот эту культуру тегирования ресурсов внутри облака AWS прививать во всех командах внутри вашей компании. Благодаря тегированию вы сможете понимать не только, что на конкретный сервис вся компания потратила, например, 2000 долларов за последний месяц. Это достаточно неполноценная информация. Если бы, например, команды тегировали свои ресурсы определенной меткой, с определенным ключом, вы бы понимали, что внутри расходов на определенный сервис, если посмотреть на тег-платформу, вы увидите, что из 2000 долларов, 1000 долларов расходует команда А, 500 долларов расходует команда В и оставшиеся по 250 долларов третья и четвертая команда. В этом случае вы видите полноценную картину. Но для того, чтобы увидеть эту картину, каждая команда должна следовать этим правилам. Процесс тегирования ресурсов должен контролироваться централизованно. Должны быть определены набор ключей тегов, которые учитываются в компании, которые обязательно следует заполнять. Команды должны следовать этим правилам. Только в этом случае вы получите чистые данные, на которых можно принимать определенные решения. На этом мы добрались до конца первой части нашей лекции. Мы с вами подробнее разобрали, что такое Well-Architected Framework. Если говорить вкратце, это документ, который в пяти направлениях разбирает best practices. И в случае следования этим best practices вы построите такую архитектуру, которая, во-первых, не содержит в себе избыточных расходов. Она доступна, надежна, эффективна с точки зрения производительности. Well-Architected Framework это best practices. И как я уже ранее говорил, best practices это не всегда готовые инструкции. Вы заметили, что какая-то часть best practices это достаточно очевидные вещи. И описывают в общих чертах, в каком направлении нужно двигаться. Другой важный момент это то, что best practices они не всегда применимы в вашем случае. Поэтому ваши случаи вы всегда должны анализировать отдельно. И в случае, если следование определенного best practices принесет свои выгоды, то рекомендуется двигаться в этом направлении. Мы с вами добрались до второй части нашей сегодняшней лекции. И мы познакомимся здесь с некоторыми терминами, связанными с надежностью и доступностью. Как постоянно говорит технический директор компании Amazon, Вернер Фогельс: "Все падает, все время". Это к тому, что не следует надеяться на железо, оно всегда подводит, тем более с увеличением масштабов вашей инфраструктуры, вероятность того, что где-то что-то пойдет не так, увеличивается. Соответственно ваша инфраструктура должна ожидать, что в любом месте она может сломаться, и ваша система должна автоматически реагировать на такие события, а также, в идеальном варианте, автоматически восстанавливаться. Это приводит к тому, что ваша инфраструктура становится максимально надежной и доступной. Итак, что же такое надежность? Надежность - это некоторая способность вашей системы предоставлять ту функциональность вашим пользователям, которая была задумана изначально. Когда мы говорим про IT-системы, то сюда входят все компоненты этой системы, начиная от железа, заканчивая настройками приложения и вашими данными. Для того, чтобы лучше понять, что такое надежность, давайте возьмем как пример системы машину. Машина - это такая же система, которая состоит из нескольких различных компонентов. Как пример, это может быть система охлаждения двигателя, это может быть система впрыска топлива для того, чтобы машина завелась. Это может быть работа тормоза для того, чтобы иметь возможность останавливаться и безопасно ездить. Представим, что система впрыска не работает. В этом случае машина недоступна. Если система впрыска не работает какое-то продолжительное время, и мы повторяющееся количество попыток не можем завести нашу машину, то мы говорим, что наша машина ненадежная, эта система ненадежная. Для того, чтобы измерять надежность IT-системы вводят некоторые формулы. Самым распространенным вариантом является MTBF, то есть Mean Time Between Failures, это среднее время между падениями. Как она рассчитывается: мы берем общее время работы вашего сервиса и делим на количество падений. Можно привести следующий пример. Если за 12 месяцев работы вашего сервиса ваша система падала 12 раз, то это говорит о том, что ваша система не такая надежная. И разделив 12 месяцев на 12 падений, мы можем измерить и сравнить себя в прошлом, в будущем и понимать, система стала надежнее или нет, либо сравнить с другими эталонными IT-системами. Есть другой подход, как рассчитывать надежность вашей системы. Представим, что у вас есть система, которая работает стабильно с понедельника по пятницу и в субботу она падает. В субботу и воскресенье вы занимаетесь над восстановлением вашего сервиса. Далее восстанавливаете до понедельника и на следующей неделе повторяется то же самое, каждую неделю. Таким образом, 5 дней в неделю ваша система работает. Это значит, с правой стороны слайда вы видите System Brought Online, то есть система доступна, и стрелка до System Fails, то есть среднее время до падения это 5 дней. Далее, у нас есть следующая стрелка в нижней части от System Fails до System Repaired, то есть это то среднее время, которое нужно на восстановление вашей системы. В нашем случае это 2 дня. И если мы говорим, что Mean Time Between Failures равняется сумме этих двух, то среднее время между падениями это 5 дней плюс 2 дня, то есть 7 дней - это наш показатель надежности. Давайте перейдем к следующему термину. Это - Availability, то есть доступность. Оно тесно связано с reliability, с надежностью. Если ваша система ненадежна, то какой-то период времени ваша система не функционирует. Если ваша система не функционирует, значит она недоступна для ваших пользователей. Как измеряется доступность? Стандартная формула это количество времени, когда система функционировала корректно, поделенное на общее время, общий период, который мы измеряем. Есть два варианта, как описывают доступность вашей системы. Это количество девяток. Как пример, если говорят пять девяток доступности, это значит в измеряемом промежутке в 99.999% времени ваша система доступна. Другой вариант, прямо прописывают этот процент. Например, мы говорим, наша система в течение одного года доступна в 99.9% времени. Следующий термин, который связан с предыдущим, это High availability, то есть высокая доступность. Этот термин применяется к инфраструктурам, которые, несмотря на снижение производительности отдельных компонентов инфраструктуры, продолжают работать и остаются доступными для ваших пользователей. Это те инфраструктуры, в которых восстановление происходит максимально быстро, время, необходимое для проведения каких-либо административных работ либо работ по обновлению системы, минимизировано. Также минимизировано вмешательство человеческого фактора, либо совсем исключено. В этих инфраструктурах обычно для восстановления после падения требуется меньше минуты. В этой таблице представлены уровни доступности инфраструктуры. Когда мы говорим 99% доступности, и если мы говорим о времени в один год, то 1% это 3 дня и 15 часов, когда система может быть недоступна. В этом случае, если для проведения различных работ, либо внезапных проблем с доступностью системы вам суммарно требуется не более 3 дней и 15 часов, тогда мы говорим ваша инфраструктура доступна 99% времени. Если же мы добавляем еще одну девятку, это 99,9, то здесь система может быть недоступна в течение одного года лишь 8 часов и 45 минут. Итак, добавляя еще девятки, вы видите, мы доходим до самого высокого уровня доступности. Когда говорим 5 девяток, это 99,999% доступности, то есть всего лишь 5 минут инфраструктура может быть недоступна в течение целого года. Давайте остановимся на факторах, которые влияют на доступность вашей инфраструктуры. Самое первое – это отказоустойчивость. Здесь подразумевается наличие встроенной избыточности, которая позволяет продолжать работать приложениям, даже если какие-то компоненты выходят из строя. Проще говоря, наличие резервных ресурсов, на которые система может переключиться при падении основных ресурсов. Если приводим пример, то примером избыточности может быть одна read реплика вместе с одной основной базой данных. В случае, когда что-то происходит с основной базой данных, происходит автоматическое переключение, и ваша read реплика становится основной базой данных. Двигаемся дальше. Следующий пункт – это recoverability, то есть наличие в инфраструктуре определенно прописанной логики, которые автоматически восстанавливается после падения. Здесь для того, чтобы это работало, нужно, чтобы система могла правильно идентифицировать, если произошел сбой, какой компонент перестал работать. Далее, для определенных видов поломки у вас должны быть прописаны механизмы, которые соответствующе реагируют либо изменяют инфраструктуру, или допрашивают дополнительные ресурсы для того, чтобы заменить те ресурсы, которые вышли из строя. Третий пункт – это scalability, то есть возможность к автомасштабированию. Ваша система должна быть способна увеличиваться в размерах в зависимости от нагрузки на ваш сервис. Здесь следует также отметить, что невозможно бесконечно увеличивать доступность вашей инфраструктуры, так как это несет дополнительные расходы. Поэтому доступность – это всегда игра, баланс между теми расходами, которые вы можете понести на вашу инфраструктуру, и процентом доступности. На этом мы добрались до конца второй части нашей лекции. Мы познакомились с такими важными терминами, как надежность, доступность, высокая доступность, и проговорили факторы, которые влияют на доступность вашей инфраструктуры. Мы с вами добрались до последней части нашей сегодняшней лекции и познакомимся с сервисом AWS Trusted Advisor. Это тот сервис, который в режиме реального времени дает вам рекомендации. Эти рекомендации поделены на пять направлений и сообщают о том, соответствует ли ваша инфраструктура тому или иному best practice в рамках AWS Well-Architected Framework. Как вы видите, поделены рекомендации на пять направлений. Это cost optimization, performance, security, fault tolerance и service limits. Отображается количество best practice, которые соблюдены, зеленым. Далее, оранжевым отображается количество best practice, которые желательно исправить, чтобы ваша архитектура соответствовала best practice. И красным отображаются те кейсы, которые критически важны и настоятельно рекомендуется обратить внимание и исправить эти пункты. Давайте рассмотрим несколько примеров, какие рекомендации дает нам AWS Trusted Advisor. Первый, самый популярный пример, это рекомендация включить MFA на Root аккаунте. Как происходит проверка? Срабатывает alert, если MFA не включен для Root аккаунта и соответствующая рекомендация - включить MFA девайс, виртуальный, либо hardware версию для вашего Root аккаунта. Другой вариант, это происходит проверка на наличие Password policy. Если же не находится ни одно policy для управления вашими паролями, то соответственно приходит рекомендация это сделать. Следующий пример, это в Security группах, если есть правило, которое предоставляет доступ к портам 2580 либо 443, и при этом, как CIDR блок указывается /0, то есть весь интернет, то срабатывает alert и как рекомендация вам предлагается все эти рулы удалить и предоставлять доступ к соответствующим портам только к конкретному компьютеру, то есть одному IP-адресу, либо CIDR блоку корпоративной среды. Другой пример связан с EBS снапшотами. Рекомендация приходит желтым, если у нас есть снапшоты, возраст которых от 7 до 30 дней, если с красным уровнем, то у нас есть снапшоты возрастом более 30 дней, либо если для некоторых жестких дисков снапшоты не были созданы. На этом мы добрались до конца последней части лекции и познакомились с сервисом AWS Trusted advisor. Это тот сервис, который позволяет вам в режиме реального времени проверить соответствует ли ваша IT-инфраструктура best practice из Well-architected framework. На этом мы добрались до конца нашей сегодняшней лекции. Мы подробнее разобрали, что же такое Well-architected framework, зачем он нужен. Далее мы рассмотрели некоторые важные термины, такие как надежность и доступность, как они измеряются. Ну и в конце мы познакомились с сервисом Trusted advisor, который в автоматическом режиме проверяет соответствия нашей инфраструктуры c Well-architected framework. Если вам нужна дополнительная информация, вы можете воспользоваться следующими ссылками для более углубленного изучения тем, пройденных на сегодняшней нашей лекции. Я очень надеюсь, что вы получили более полное представление о пройденных сервисах и терминах. Спасибо за внимание. Увидимся с вами на следующих наших активностях.