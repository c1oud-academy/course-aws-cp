Қайырлы күн, құрметті студенттер! Келесі дәрісте барлығыңызды көргеніме қуаныштымын. Бүгінгі дәрістің тақырыбы - Cloud Architecture. Сонымен, біз AWS бұлтында IT архитектурасын қалай дұрыс құру керектігі туралы сөйлесеміз. Ендеше, бастайық. Бүгінгі дәріс үш бөлімнен тұрады. Бірінші бөлімде AWS Well-Architected Framework туралы сөйлесетін боламыз. Бұл AWS архитекторлар тобының бұлтта IT архитектурасын қалай дұрыс құру керектігі туралы best practices жиынтығы. Әрі қарай, екінші бөлімде біз сіздің инфрақұрылымыңыздың сенімділігі мен қол жетімділігіне қатысты кейбір маңызды терминдерді енгіземіз. Үшіншіден, біз AWS Trusted Advisor сервисі туралы сөйлесеміз, ол бізге best practices-терге негізделген архитектура құруға көмектеседі. Біз AWS Well-Architected Framework дәрісінің бірінші бөлімін бастаймыз. Бұл туралы егжей-тегжейлі айтпас бұрын, архитектураның не екенін қарастырайық. IT-архитектура - бұл белгілі бір мағынада күрделі құрылымдарды жоспарлау және құру өнері мен ғылымы. Осы күрделі құрылымдарды құрумен IT-архитекторлар айналысады. Біздің жағдайда бұл Cloud Architects, яғни бұлтты архитекторлар. Олар немен айналысады? Бұл, біріншіден, шешім қабылдайтын, келіссөздер жүргізетін адамдар, олар бизнестің қандай мақсаттарға ұмтылатынын түсіну үшін топ-менеджмент немесе бизнес иелері болуы мүмкін. Екіншіден, архитектор техникалық талаптарды ескере отырып, қазіргі уақытта қандай IT-технологиялар бар және қол жетімді екенін біліп, қандай команда бар екенін түсініп, осы бизнес талаптарын тиісті уақытта және тиісті қаржылық шығындармен жүзеге асыруға болатындығын бағалайды. Содан кейін, үшіншіден, архитектор дамыту тобымен тығыз жұмыс істейді, осы архитектураны құрып, барлық маңызды сәттердің дұрыс бапталынуы үшін оны үнемі қадағалап отырады. Неліктен бұл маңызды? Себебі жақсы жобаланған IT архитектура бизнестің табысқа жету мүмкіндігін едәуір арттырады. Күн сайын AWS сарапшылары бүкіл әлем бойынша мыңдаған клиенттермен келіссөздер жүргізеді және кеңес береді. Әр клиенттің өзіндік нақты архитектурасы бар. Ол шағын, үлкен, күрделі, қарапайым немесе стандартты болуы мүмкін немесе кейбір ерекше мүмкіндіктерді қамтуы мүмкін. Осылайша, AWS сарапшылары құнды тәжірибе жинауда және осы тәжірибенің нәтижесінде Well-Architected Framework әзірленді. Бұл қауіпсіз, қуатты, сенімді және тиімді архитектураны құруға мүмкіндік беретін бес түрлі бөлімнің жиынтығы. Well-Architected Framework бес бөліктен тұрады, атап айтқанда Operational Excellence, Security, Reliability, Performance Efficiency және Cost Optimization. Біз олардың әрқайсысына келесі слайдтарда назар аударамыз. Ең бірінші pillar, яғни бағыт - бұл Operational Excellence. Бұл бағыттың идеясы жүйелерді бизнестің құндылығын қамтамасыз ететіндей етіп бақылау және іске қосу, сондай-ақ қолдау процестерін үздіксіз жетілдіру болып табылады. Осыған байланысты үш маңызды тақырып бар: Automating Changes, яғни өзгерістерді автоматтандыру. Әрі қарай, бұл Responding to Events, яғни әр түрлі оқиғаларға жауап беру. Үшінші - күнделікті жедел міндеттерді тиімдірек басқару стандарттарын енгізу. Operational Excellence-тің бес негізгі қағидасын қарастырайық. Біріншісі - Perform Operations as Code. Мүмкіндігінше, адам факторын автоматтандырып, жою қажет. IT-инфрақұрылымымен байланысты ең айқын мысалы - AWS CloudFormation сервисін немесе оның аналогтарын пайдалану. Бұл біздің инфрақұрылымымыздың коды арқылы кіруге мүмкіндік беретін сервис, ал AWS CloudFormation біз үшін инфрақұрылымды автоматты түрде орнатады. Біз кодпен жұмыс істейтіндіктен, біз әртүрлі нұсқаларды басқару жүйелерін қолдана аламыз және бүкіл командамен бірге бір кодта жұмыс істей аламыз. Бұл әлдеқайда оңай, әлдеқайда ыңғайлы, барлық өзгерістер сақталады және қажет кезде қайта оралуға болады. Осылайша, сіз өзіңіздің инфрақұрылымыңызды орнату кезінде адам факторын жойып қана қоймай, сонымен қатар ынтымақтастық тиімдірек болған сайын белгілі бір мағынада жеделдетілесіз. Сонымен қатар, сіз код ретінде жұмыс істегенде, бүкіл инфрақұрылымды алақаныңыздағыдай көре аласыз. Келесі - сіз жиі және кішігірім өзгерістерді босатуыңыз керек, яғни айына бір рет үлкен жаңартуларды шығарудың орнына, бірнеше күн сайын кішігірім өзгерістерді, қолданбаңыздың жаңартуларын шығарған дұрыс. Неліктен бұл маңызды? Кішкентай өзгерістер сіздің проблемаңызды локализациялауды жеңілдетеді және келесі жаңартуларда олар қабатталмайды және сіз бұл қатені бірден түзетесіз және келесі өзгерістер дұрыс кодқа қолданылады. Егер бір нәрсе үстінен қосылатын болса, оны өзгерту әрдайым мүмкін емес немесе көп уақыт кетеді. Осылайша, біз уақытты және, тиісінше, қаржымызды үнемдейміз. Кішкентай өзгерістер туралы айтатын болсақ, бұл өзгерістерді артқа айналдыру әлдеқайда оңай. Сондықтан процестер мен инфрақұрылымды сіздің қосымшаңызға өзгертулеріңізді жиі орналастыруға болатындай етіп құру қажет. Келесі қағида - операциялық процедураларды мезгіл-мезгіл тексеріп отыру керек. Бұл кейбір құжаттама не белгіленген процестер болуы мүмкін. Идея мынада: сіз оны үнемі қарап отырсаңыз, кейбір маңызды емес бөліктерді тез жоюға болады, ал өзекті бөліктерін жақсартуға және автоматтандыруға болады. Бұл қолдау тобына және бұлтты инженерлік топқа жалпы алғанда тезірек жұмыс істеуге мүмкіндік береді және IT-инфрақұрылымымен жұмыс істеу оңайырақ болады. Әрі қарай, төртінші - біз инфрақұрылымымыздағы проблемалар мен бұзылуларды алдын ала болжауымыз керек. Бұл нені білдіреді? Инфрақұрылымды тұрақты негізде талдау қажет, қандай түйіндер тар екенін және бұзылудың қай бөлігі қосымшаның жұмысына үлкен әсер ететінін түсіну керек. Осылайша, осы тармақтарды мезгіл-мезгіл қарап отырып, біз қосымша резервтеуді қайда қосу керектігін түсінеміз. Идеясы мынада: инфрақұрылым әрдайым қол жетімді және әртүрлі бұзылуларға аз ұшырауы үшін инфрақұрылымымызды мүмкіндігінше жаңартып отыруымыз керек. Егер бұл сәтсіздіктер орын алса, команда осындай оқиғаларға дайын болуы үшін және жылдам қалпына келтіру үшін орындалуы қажет сынақ процедуралары да мерзімді түрде қайта қаралуы керек. Соңғы қағида - сіздің IT инфрақұрылымыңызда болып жатқан барлық оқиғалардан қандай да бір пайда алу керек, қателіктер, бұзылулар және т.с.с. Мүмкін мезгіл-мезгіл кездесіп, кейбір шолулар жасап, не болғанын, қалай түзетілгенін, кемшіліктер қайда болғанын, бұл процесті қалай жақсартуға болатынын және т.б. Сонымен қатар, командалар әртүрлі мәселелерді шешуде өз тәжірибелерімен бөлісе алатындай IT-командалар арасында ішкі конференциялар ұйымдастыру өте жақсы тәжірибе. Мысалы, егер біз әзірлеушілер тобы туралы айтатын болсақ, олар даму саласындағы қызықты оқиғалармен бөлісе алады. Егер біз бұлтты инженерлер тобы туралы айтатын болсақ, онда инфрақұрылымның қай бөліктері сәтті автоматтандырылғанын, нәтижелерін, оң және теріс жақтарын және т.б. қарастыра аламыз, яғни жалпы компаниядағы бүкіл команданың біліктілігін арттыру. Келесі pillar - қауіпсіздік. Оның идеясы - біз компаниямызға іскерлік құндылықты жеткізе отырып, инфрақұрылымымыздың, жүйелеріміздің, ақпаратымыздың және т.б. қауіпсіздігін қамтамасыз етуіміз керек. Бірнеше бағыттары бар. Біріншісі - деректердің құпиялылығы мен тұтастығын қорғауымыз керек. Әрі қарай, біз сіздің инфрақұрылымыңызда кім не істей алатынын түсінуіміз керек, яғни бұл бұлттағы кіру құқығымен жұмыс істеудің дұрыс әдісі. Әрі қарай, біз шифрлауды қамтитын жүйелеріміздің периметрін қорғауымыз керек. Соңғы төртінші - қауіпсіздікке қатысты кейбір оқиғалар орын алған кезде іске қосылатын кейбір автоматты оқиғаларды дайындау және баптау. Яғни, автоматты режимде біздің инфрақұрылымымыздағы бір нәрсе бұзылды немесе периметрдің тұтастығы жойылды, сәйкесінше алаяқтар біздің деректерімізге, дерекқорларымызға жетті деген сөз. Егер ол автоматты түрде байқалатын болса, бұл өте жақсы. Енді қауіпсіздік принциптерін мұқият қарастырайық. Ол жеті бөліктен тұрады. Біріншіден, біз кімге қол жеткізу құқығын беретінімізді реттеуіміз керек, яғни Least Privilege принципін ұстануымыз керек. Біз сізге қажет құқықтарды ғана береміз. Сонымен қатар, қол жеткізу құқықтарымен жұмыс істеуді жеңілдететін орталықтандырылған қол жеткізу құқықтарын басқаруды баптау қажет. Сонымен қатар, мүмкін болса, құқықтарды беру уақытын қысқарту қажет немесе белгілі бір ресурстар мен инфрақұрылымның бөліктеріне ұзақ мерзімге құқық беру мүмкіндігін толығымен алып тастауға болады. Идеясы мынада: credential деректерін, AWS Management Console құпия сөздерін, access және secret keys-тарды мезгіл-мезгіл жаңартып отыру керек. Келесі - Enable Traceability. Оның идеясы - біз автоматты түрде жауап беру және жүйені қалпына келтіру үшін кейбір әрекеттерді орындау үшін нақты уақыт режимінде инфрақұрылымның өзгеруін бақылап, журналдармен және көрсеткіштермен біріктіруіміз керек. Кейін біз инфрақұрылымның барлық деңгейлерінде қауіпсіздіктің барлық тетіктерін қосуымыз керек. Яғни, бізде VPC-де қауіпсіз IT ресурстарын баптаудың белгілі бір нұсқалары бар, subnets бар, Network ACL, Load Balancer, тіпті операционды жүйеде және қосымша деңгейлерінде де оны баптауға болады. Қолданбаның тиімді жұмысына кедергі келтірмейтін қауіпсіздік қабаттарын неғұрлым көп дайындасақ, алаяқтар мен хакерлердің түпкі мақсатына жетуі соғұрлым қиын болады. Келесі принцип - қауіпсіздікті қамтамасыз етуге мүмкіндік беретін процестерді мүмкіндігінше автоматтандыруға тырысу. Егер бұл автоматтандырылған болса, онда, біріншіден, адам факторы алынып тасталады және жұмыс автоматты түрде жасалады, сондықтан ол бірнеше есе арзан болуы мүмкін. Әрі қарай, деректермен жұмыс істеу кезінде деректерді сақтау кезінде ғана емес, сонымен қатар деректерді тасымалдау кезінде де қорғау қажет. Келесі принцип - деректерге тек жұмысқа қолжетімділікті қажет ететін мамандарға ғана рұқсат беру, тек қажет көлемде ғана құқықтар беру, үшіншіден, егер деректерге қол жеткізуді шектейтіндей етіп, тек белгілі бір маманға қажет құқықтарды қамтамасыз ету мүмкін болса, оны пайдалану қажет. Ең соңғысы - оқиғаларды басқару процестерін оларға тезірек жауап беру және жүйені сәтсіздіктен кейін мүмкіндігінше тезірек қалпына келтіру үшін баптау қажет. Келесі pillar - reliability, яғни сенімділік. Оның идеясы - біз бизнес талаптарына сәйкес келетін жүйелерді құрамыз, олар сенімді және белгілі бір проблемалар мен қателер туындаған жағдайда жүйе автоматты түрде немесе команданың көмегімен тез қалпына келтіріледі. Сенімді жүйелерді құрудың 5 негізгі қағидасын қарастырайық. Біріншісі - белгілі бір апат кезінде мүмкіндігінше қалпына келтіру процестерін автоматтандыру қажет. Мысалы, егер бізде мұндай проблемалар жиі кездесетінін білсек, оны қосымшаның коды деңгейінде шешуге тырысыңыз, егер бұл қосымшаның өзімен байланысты емес, инфрақұрылым деңгейінде болса, онда біз оны жоюымыз керек. Егер сіз оны жоя алмасаңыз, құлдырау болған кезде автоматты түрде қалпына келтіруді орнатуыңыз керек. Келесі - тігінен масштабтаудан гөрі көлденеңінен масштабтауды таңдау. Неге? Егер сізде пайдаланушылардың сұрауларын өңдейтін бір қуатты сервер болса, ол бұзылса, барлық қосымшалар қол жетімсіз болады. Егер сізде көптеген шағын виртуалды серверлер болса және олардың әрқайсысы пайдаланушы сұрауларын өңдей алатын болса, онда виртуалды серверлердің бірі істен шықса, оны оңай ауыстыруға болады. Егер ол істен шықса да, ол қол жетімді болмаған кезде, пайдаланушылардың сұраныстарының көпшілігі сәтті өңделеді. Әрі қарай, сіз барлық қалпына келтіру процедураларын мезгіл-мезгіл тексеріп отыруыңыз керек. Инфрақұрылымды автоматты түрде масштабталатындай етіп баптау керек, яғни жүктемеге байланысты кішірею немесе кеңею. Бұл сізге жұмыс жүктемесі үшін қажет ресурстарды ғана сұрауға мүмкіндік береді. Сондықтан сіз ештеңеге артық төлемейсіз, тек пайдаланған ресурстар үшін қаржы жұмсайсыз. Соңғысы - өзіңіздің инфрақұрылымыңызға өзгерістер енгізу процесін автоматтандыруыңыз керек. Бұл адам факторын жояды және проблемалар туындаған жағдайда оңай оралуға мүмкіндік береді. Келесі pillar - Performance efficiency. Оның идеясы - біз ресурстармен жұмыс істейміз және әр ресурс үшін дұрыс қасиеттерді таңдаймыз. EC2 инстансы туралы айтқан кезде, біз әр түрлі көрсеткіштерді қолданып, жұмыс жүктемелерімізге қандай өлшемдер мен инстанс түрі қолайлы екенін түсіну үшін қажетті деректерді жинауымыз керек. Сондай-ақ өнімділік мониторингін орнату керек. Бұл бізге деректерді жинауға және осы деректер негізінде дұрыс шешім қабылдауға мүмкіндік береді. Тиімді өнімділікпен IT инфрақұрылымын құруға мүмкіндік беретін негізгі қағидалар мен best practices қарастырайық. Ең алдымен, жаңа технологияларға мұқият қарау ұсынылады. Көбінесе жаңа технологиялар айтарлықтай жеделдетуге, тиімділікті арттыруға, кейбір жерлерде адам факторын жоюға және ішкі процестеріңізді автоматтандыруға мүмкіндік береді. Әрі қарай, сізде жаһандық қатысу мүмкіндігі бар, өйткені AWS әртүрлі аймақтарда жұмыс істейді. Яғни, инфрақұрылымды бірнеше аймақта орналастырылатын жолмен құра аласыз дегенді білдіреді. Мен мұнда кішігірім ескерту жасағым келеді, атап айтқанда сіз әрқашан өзіңіздің нақты жағдайыңызға қарауыңыз керек, себебі best practice әрқашан сізге сәйкес келе бермейді. Неліктен мен мұны дәл қазір айтып отырмын? Себебі Go global in minutes сізді бірнеше аймақта жұмыс істеуге мәжбүрлейді. Бұл компанияның көптеген жүктемелері үшін әрдайым дұрыс бола бермейді, өйткені бір аймақта бола тұра, бірнеше availability zone-да орналасқан инфрақұрылымды құру жеткілікті. Осылайша, компания өз инфрақұрылымын екі аймаққа көшіру арқылы қосымша шығындарға ұшырамайды. Бұл өте қымбат, команданың күш-жігері мен жұмысы жағынан қымбат және біраз уақытты қажет етеді. Сондықтан, сіз әрқашан өзіңіз үшін best practices қолданып көруіңіз керек, егер ол сәйкес келсе, сіз осы best practices көмегімен жалғастыра аласыз. Келесі best practices туралы дәл осылай айта аламын - use serverless architectures. Басқаша айтқанда, серверсіз архитектуралар, сөзсіз, ең жақсы технология болып табылады және жұмыс жүктемесін болжау мүмкін емес стартаптар үшін IT архитектурасын айтарлықтай үнемдеуге мүмкіндік береді. Сіздің IT-инфрақұрылымыңыздағы тұрақты жүктемелер туралы айтатын болсақ, серверсіз архитектуралар әрқашан ең тиімді шешім бола бермейді. Сондықтан, тағы да қайталайын, сіз әрқашан кез-келген best practices-ті сынап көруіңіз керек. Сізге сәйкес келгенде ғана сіз суық есептеуді жасап, одан пайда көретіндігіңізді түсінесіз, содан кейін ғана сіз best practices-терді ұстанасыз. Егер ол сізге сәйкес келмесе, best practices ұстану немесе ұстанбау компанияның шешімі. Соңғы тармақ бірінші тармаққа байланысты - мүмкіндігінше жиі тәжірибе жасау керек. Осының арқасында сізде IT архитектураны сіздің жұмыс жүктемелеріңіз үшін ең қолайлы етіп құруға мүмкіндік бар. Сонымен қатар, жүктемелер уақыт өте келе өзгереді. Уақыт өте келе бизнеске қойылатын талаптар да өзгереді. Тиісінше, IT-инфрақұрылым да өзгеріп, жаңа шындыққа бейімделуі керек. Біз соңғы pillar-ге жеттік. Оның идеясы - қажетсіз шығындардан аулақ болуымыз керек. Бұлтты технологиялар, бұлттың өзі әр ресурсты бақылауға мүмкіндік береді. Бірақ осы ресурс туралы қажетті қосымша тегтер мен ақпаратсыз, бұл ресурстың қайсысы мамандарға немесе командаларға тиесілі екенін, оны жоюға болатынын, өзекті немесе маңызды емес екенін, қажет пе, жоқ па және т.б. түсіну өте қиын. Сондықтан, бұл үздіксіз процесс, және сіздің ақшаңыздың, компанияның ақшасының қайда жұмсалатынын түсіну үшін шығындарыңызды талдау үшін осы тұрақты жұмысты орындау қажет. Сондай-ақ, ресурстарыңыздың оңтайлы түрін таңдау үшін шығындарыңызды мезгіл-мезгіл талдау қажет. Бұл тек түрге ғана емес, сонымен қатар санына да қатысты және осылайша қосымша шығындарға ұшырамау. Жоғарыда айтқанымдай, шығындармен жұмыс істеу - бұл үнемі талдауды қажет ететін үздіксіз процесс, өйткені инфрақұрылым үнемі өзгеріп отырады, инфрақұрылымның кейбір бөліктері өсуде, ал кейбір бөліктері қажетсіз болып қалады. Сіздің шығындарыңызды талдау барысында сіз нені өшіре алатыныңызды, нені қайта жасай алатыныңызды, оны сол күйінде қалдыра алатыныңызды түсінесіз, яғни ол ең оңтайлы түрде жұмыс істеп жатыр. Бұған инфрақұрылымды масштабтау кезінде шығындарды талдауды талап ететін жұмыс орындары да кіреді. Мүмкін, мысалы, 10 есе масштабтау кезінде, белгілі бір жолмен салынған архитектураның бөлігі оңтайлы емес, сіз қосымша шығындарға ұшырайсыз және оны қайта жасай аласыз. Сондықтан шығындармен айналысатын мамандар IT-архитекторлармен үнемі тығыз жұмыс істейді, кейбір жерлерді қайта құруға бола ма, әлде кейбір жерлерді қайта құру керек пе, жоқ па, өйткені бұл белгілі бір қаражатты үнемдеуге мүмкіндік береді. Содан кейін IT-архитектор қосылады және ол балама нұсқа бар екенін көреді. Егер ол бизнес талаптарын қанағаттандыруға жақсы сәйкес келсе, оны жүзеге асыруға болады, содан кейін, сәйкесінше, архитектураны өзгерту туралы шешім қабылданады. Cost optimization-нің негізгі принциптеріне назар аударайық. Біріншіден, компания бұлтты шығындарды оңтайландыру процестерімен жұмыс істеуі үшін бұлттағы шығындарыңызды үнемі зерттеп, талдайтын бір маман немесе шағын мамандар бөлімін бөлу қажет. Келесі - бұлтта қажет ресурстар үшін ғана төлейтіндігіңізге көз жеткізу. Ресурстар қажет не қажет емес екенін қалай түсінуге болады? Егер ресурстар жұмыс істеп тұрса және сіздің бизнес мақсатыңызды орындау үшін сізден сұралса, онда бұл ресурстар қажет. Егер бұл ресурстар қандай да бір іскерлік тапсырманы орындамаса немесе белгілі бір мақсатқа ұмтылмаса, онда бұл ресурстар артық болып табылады және оларға төлемеу үшін мұндай ресурстардан құтылу қажет. Келесі тармақта бұлтты шығындар көбеюі немесе азаюы мүмкін дейді. Және сіздің шығындарыңыздың 20%-ға өскені бұл жаман нәрсе дегенді білдірмейді. Бұл ақпарат жеткіліксіз. Сіз шығындарыңыздан басқа, инфрақұрылымның тиімділігін де талдауыңыз керек. Бұл кейбір бизнес-метрикалар болуы мүмкін. Және бұлт шығындарыңыздың 20% өсуімен сіз соңғы айда компанияңыздың кірісін 50%-ға арттыруыңыз әбден мүмкін. Сіз бұлтты шығындар өссе де, компанияның кірісінің өсуі сіздің инфрақұрылымыңыздың өсуінен үлкен болу үшін тиімді түрде ұлғайтылғанын көре аласыз. Сондықтан жалпы көріністі көру үшін мүмкіндігінше көп ақпарат жинау керек. Келесі тармақ сіздің бизнес мақсаттарыңызға назар аудару тиімді екенін көрсетеді. Аппараттық құралға қатысты барлық нәрсе, деректер орталығын басқаруға қатысты барлық нәрсе AWS-ке берілуі керек. Бұл жергілікті деректер орталығынан бұлтқа көшуді ұсынатын тармақ. Сонда да, барлығы бизнес контекстіне, ағымдағы жағдайға байланысты. Жергілікті деректер орталығына орнату тиімдірек болатын кейбір компаниялар мен инфрақұрылымдар бар. Сондықтан әрқашан өзіңіздің жағдайыңызды қарап, оны жеке талдаңыз. Соңғы тармақ - тегтеу процесін жүргізу қажет. Бұл AWS бұлтындағы ресурстарды белгілеу мәдениеті сіздің компанияңыздағы барлық командаларға енгізілуі керек. Тегтеудің арқасында сіз бүкіл компанияның, мысалы, өткен айда белгілі бір сервиске 2000 доллар жұмсағанын түсініп қана қоймайсыз. Бұл ақпарат жеткіліксіз. Егер, мысалы, командалар өз ресурстарын белгілі бір тегпен, белгілі бір кілтпен белгілесе, сіз белгілі бір сервистің шығындары шегінде екенін түсінесіз, егер сіз тег платформасына қарасаңыз, онда сіз 2,000 доллардан А тобы 1000 доллар жұмсайтынын көресіз, В тобы 500 доллар жұмсайды, ал үшінші және төртінші командалар әрқайсысы 250 доллардан жұмсайды. Бұл жағдайда сіз толық көріністі көресіз. Бірақ ол үшін әр команда осы ережелерді сақтауы керек. Ресурстарды тегтеу процесі орталықтан басқарылуы керек. Компания ескеретін тег кілттерінің жиынтығы анықталуы керек және толтырылуы керек. Командалар осы ережелерді сақтауы керек. Сонда ғана сіз белгілі бір шешімдер қабылдауға болатын таза деректер аласыз. Осылайша біз дәрістің бірінші бөлімінің соңына жеттік. Біз Well-Architected Framework не екенін толығырақ талқыладық. Қысқаша айтқанда, бұл best practices-ті бес бағытта зерттейтін құжат. Егер сіз осы best practices ұстанатын болсаңыз, онда сіз, біріншіден, артық шығындарды қамтымайтын архитектура саласыз. Бұл қол жетімді, сенімді және өнімділік тұрғысынан тиімді. Well-Architected Framework - бұл best practices. Жоғарыда айтқанымдай, best practices әрқашан дайын нұсқаулар бола бермейді. Сіз best practices-тің кейбір бөлігі айқын екенін байқадыңыз. Және олар қай бағытта қозғалу керектігін жалпы сипаттайды. Тағы бір маңызды мәселе - best practices әрқашан сіздің ісіңізге қатысты бола бермейді. Сондықтан сіз әрқашан өз жағдайыңызды бөлек талдауыңыз керек. Егер белгілі бір best practices ұстану тиімді болса, осы бағытта жүру ұсынылады. Біз дәрістің екінші бөліміне жеттік. Сенімділік пен қол жетімділікке қатысты терминдерді енгіземіз. Amazon компаниясының бас техникалық директоры Вернер Фогельс: “Бәрі үнемі құлдырайды”, - деп айтады. Бұл дегеніміз, аппараттық құралға сүйенбеуіңіз керек, ол әрдайым сәтсіздікке ұшырайды, әсіресе сіздің инфрақұрылымыңыз ұлғайған сайын, бір жерде бірдеңе дұрыс болмай қалу ықтималдығы артады. Тиісінше, сіздің инфрақұрылымыңыз оның кез-келген жерде бұзылуын болжауы керек және сіздің жүйеңіз мұндай оқиғаларға автоматты түрде жауап беруі керек және ең дұрысы автоматты түрде қалпына келуі керек. Бұл сіздің инфрақұрылымыңыздың мүмкіндігінше сенімді және қолжетімді болуына әкеледі. Сонымен сенімділік дегеніміз не? Сенімділік - бұл сіздің жүйеңіздің пайдаланушыларға бастапқыда жасалған функционалдылықты қамтамасыз ету мүмкіндігінің бір бөлігі. IT-жүйелері туралы айтатын болсақ, бұл осы жүйенің барлық компоненттерін, аппараттық құралды, қосымша параметрлерін және сіздің деректеріңізді қамтиды. Сенімділікті жақсы түсіну үшін жүйенің мысалы ретінде машинаны алайық. Машина бірнеше түрлі компоненттерден тұратын жүйе болып табылады. Мысал ретінде, бұл қозғалтқышты салқындату жүйесі болуы мүмкін, не көлікті іске қосу үшін жанармай бүрку жүйесі болуы мүмкін. Бұл тежегіштің тоқтап, қауіпсіз жүру мүмкіндігі болуы мүмкін. Шашырату жүйесі жұмыс істемейтінін елестетіп көрейік. Бұл жағдайда машина қол жетімді емес. Егер шашырату жүйесі ұзақ уақыт жұмыс істемесе және біз көлігімізді бірнеше рет жүргізе алмасақ, біздің көлігіміз сенімді емес деп айтамыз, бұл жүйе сенімсіз. IT жүйесінің сенімділігін өлшеу үшін кейбір формулалар енгізіледі. Ең көп таралған нұсқа - MTBF, Mean Time Between Failures, бұл бұзылу арасындағы орташа уақыт. Ол қалай есептеледі: біз сіздің сервисіңіздің жалпы жұмыс уақытын аламыз да оны апаттар санына бөлеміз. Келесі мысал келтірейік. Егер сіздің сервисіңіз 12 айда 12 рет бұзылса, бұл сіздің жүйеңіз соншалықты сенімді емес екенін білдіреді. Ал 12 айды 12 апатқа бөлу арқылы біз өткен және болашақта өзімізді талдап, салыстыра аламыз және жүйенің сенімдірек бола ма, жоқ па екенін түсінеміз немесе оны басқа анықтамалық IT-жүйелермен салыстыра аламыз. Жүйеңіздің сенімділігін есептеудің тағы бір тәсілі бар. Сізде дүйсенбіден жұмаға дейін тұрақты және сенбіде апатқа ұшыраған жүйе бар делік. Сенбі және жексенбіде сіз өз сервисіңізді қалпына келтіру үшін жұмыс жасайсыз. Содан кейін сіз дүйсенбіге дейін қалпына келтіресіз, ал келесі аптада апта сайын дәл солай қайталанады. Осылайша, сіздің жүйеңіз аптасына 5 күн жұмыс істейді. Бұл дегеніміз, слайдтың оң жағында System Brought Online, яғни жүйе қол жетімді және System Fails-ке көрсеткіш, яғни апатқа дейінгі орташа уақыт - 5 күн. Әрі қарай, бізде төменгі жағында System Fails-тен System Repaired-ке дейінгі келесі көрсеткіш бар, бұл сіздің жүйеңізді қалпына келтіруге кететін орташа уақыт. Біздің жағдайда бұл 2 күн. Егер Mean Time Between Failures осы екеуінің қосындысы деп айтсақ, онда апат арасындағы орташа уақыт 5 күн плюс 2 күнді құрайды, сондықтан 7 күн - біздің сенімділік көрсеткішіміз. Келесі терминге көшейік. Бұл Availability, яғни қол жетімділік. Бұл reliability, яғни сенімділікпен тығыз байланысты. Егер сіздің жүйеңіз сенімді болмаса, жүйеңіз белгілі бір уақыт ішінде істен шығады. Егер сіздің жүйеңіз жұмыс істемесе, бұл сіздің пайдаланушыларыңыз үшін қол жетімді емес дегенді білдіреді. Қол жетімділік қалай өлшенеді? Стандартты формула - бұл жүйенің дұрыс жұмыс істеген уақытының жалпы уақытқа, біз өлшейтін жалпы кезеңге бөлінген мөлшері. Жүйенің қол жетімділігін сипаттайтын екі нұсқа бар. Бұл тоғыздар саны. Мысал ретінде, егер сіз қол жетімділіктің бес тоғызын айтсаңыз, бұл сіздің жүйеңіз 99,999% уақытында қол жетімді екенін білдіреді. Тағы бір нұсқа - бұл пайызды тікелей белгілеу. Мысалы, біздің жүйе бір жыл ішінде 99,9% қол жетімді деп айтамыз. Алдыңғы терминмен, яғни Availability, байланысты келесі термин, High availability болып табылады, яғни жоғары қол жетімділік. Бұл термин инфрақұрылымның жекелеген компоненттерінің өнімділігінің төмендеуіне қарамастан, жұмысын жалғастыратын және сіздің соңғы пайдаланушыларыңыз үшін қол жетімді болып қалатын инфрақұрылымдарға қатысты. Бұл қалпына келтіру мүмкіндігінше тез жүретін инфрақұрылымдар және кез-келген әкімшілік жұмысты орындау немесе жүйені жаңарту үшін қажетті уақыт барынша азайтылады. Адамның араласуы да азайтылады немесе толығымен алынып тасталды. Бұл инфрақұрылымдар әдетте апаттан қалпына келтіру үшін бір минуттан аз уақыт кетеді. Бұл кестеде инфрақұрылымның қолжетімділік деңгейлері көрсетілген. Біз 99% қол жетімділік туралы айтатын болсақ, және бір жыл туралы айтсақ, 1% жағдайда жүйе қол жетімсіз болуы мүмкін, ол 3 күн және 15 сағатты құрайды. Бұл жағдайда, егер сізге әртүрлі жұмыстарды немесе жүйенің қол жетімділігіне байланысты кенеттен туындаған проблемаларды шешу үшін барлығы 3 күн мен 15 сағаттан аспайтын уақыт қажет болса, онда сіздің инфрақұрылымыңыз уақыттың 99% қол жетімді деп айтамыз. Егер біз тағы бір тоғызды қоссақ, ол 99,9 болса, онда жүйе бір жыл ішінде 8 сағат 45 минут ішінде қол жетімсіз болуы мүмкін. Сонымен, тағы тоғыз қосу арқылы сіз біздің қол жетімділіктің ең жоғары деңгейіне жететінімізді көре аласыз. Біз 5 тоғыздық деп айтатын болсақ, бұл 99.999% қолжетімділік, яғни инфрақұрылым бір жыл ішінде 5 минут бойы қол жетімсіз болуы мүмкін. Сіздің инфрақұрылымыңыздың қол жетімділігіне әсер ететін факторларды қарастырайық. Ең бірінші фактор - төзімділік (бұзылуға тұрақтылық). Бұл кейбір компоненттер сәтсіз болса да, қосымшаңыздың жұмысын жалғастыруға мүмкіндік беретін кірістірілген резервтеуді білдіреді. Қарапайым тілмен айтқанда, жүйенің негізгі ресурстары құлаған кезде ауыса алатын резервтік ресурстардың болуы. Резервтеудің мысалы бір негізгі деректер базасымен бірге бір read реплика болады. Негізгі дерекқорға бірдеңе болған кезде автоматты ауысу орын алады және сіздің read реплика негізгі дерекқорға айналады. Әрі қарай жалғастырайық. Келесі фактор - recoverability, яғни апаттан кейін автоматты түрде қалпына келетін инфрақұрылымда нақты логиканың болуы. Мұнда, бұл жұмыс істеуі үшін, жүйе, егер сәтсіздік орын алса, қандай компонент жұмысын тоқтатқанын дұрыс анықтауы керек. Әрі қарай, бұзылулардың белгілі бір түрлері үшін сізде сәйкесінше жауап беретін механизмдер болуы керек, не инфрақұрылымды өзгертетін немесе сәтсіздікке ұшыраған компоненттерді ауыстыру үшін қосымша ресурстарды сұрау. Үшінші фактор - scalability, яғни автомасштабтау мүмкіндігі. Сіздің жүйеңіз сервисіңіздің жүктемесіне байланысты мөлшерде өсе алуы керек. Сондай-ақ, бұл жерде сіздің инфрақұрылымыңыздың қолжетімділігін шексіз арттыру мүмкін емес екенін атап өткен жөн, өйткені бұл қосымша шығындарға әкеледі. Сондықтан қол жетімділік әрқашан ойын секілді, сіздің инфрақұрылымыңызға кететін шығындар мен қол жетімділік пайызы арасындағы теңгерімді талдау болып табылады. Осылайша біз дәрістің екінші бөлімінің соңына жеттік. Біз сенімділік, қолжетімділік, жоғары қолжетімділік сияқты маңызды терминдермен таныстық және сіздің инфрақұрылымыңыздың қолжетімділігіне әсер ететін факторларды талқыладық. Біз бүгінгі дәрісіміздің соңғы бөліміне жеттік және сізді AWS Trusted Advisor сервисімен таныстырамыз. Бұл сізге нақты уақыттағы ұсыныстар беретін сервис. Бұл ұсыныстар бес бағытқа бөлінген және сіздің инфрақұрылымыңыз AWS Well-Architected Framework аясындаға белгілі бір best practice-ке сәйкес келетіндігін айтады. Көріп отырғаныңыздай, ұсыныстар бес бағытқа бөлінеді. Бұл cost optimization, performance, security, fault tolerance және service limits. Орындалған best practice саны жасыл түспен көрсетілген. Әрі қарай, қызғылт сары архитектураңызды best practice-ке сәйкес келтіру үшін түзету керек best practice санын көрсетеді. Қызыл түс өте маңызды жағдайларды көрсетеді және осы тармақтарға назар аудару және түзету ұсынылады. AWS Trusted Advisor ұсыныстардың мысалдарын қарастырайық. Бірінші және ең танымал мысал - бұл Root аккаунтында MFA қосу туралы ұсыныс. Тексеріс қалай өтейді? Root аккаунты үшін MFA қосылмаған болса, alert (ескерту) іске қосылады және сәйкес ұсыныс Root аккаунтыңыз үшін MFA құрылғысын, виртуалды немесе аппараттық құрал нұсқасын қосу болып табылады. Тағы бір нұсқа - Password policy тексеру. Егер сіздің парольдеріңізді басқару policy болмаса, онда оны жасау туралы ұсыныс сәйкесінше болады. Келесі мысал Security топтарында, егер 2580 немесе 443 порттарына кіруді қамтамасыз ететін ереже болса және сонымен бірге CIDR блогы /0, яғни бүкіл Интернетті көрсетсе, онда alert іске қосылады және ұсыныс ретінде сізден осы ережелердің барлығын жойып, тиісті порттарға тек белгілі бір компьютерге, яғни бір IP-мекенжайға немесе корпоративтік ортаның CIDR блогына қол жеткізуді сұрайды. Тағы бір мысал EBS снапшоттарын қамтиды. Ұсыныс сары түспен келеді, егер бізде 7-ден 30 күнге дейінгі снапшоттар болса, қызыл деңгей болса, бізде 30 күннен асқан снапшоттар немесе кейбір қатқыл дискілер үшін снапшоттар жасалмаған болса. Осымен біз дәрістің соңғы бөлімінің соңына жеттік және AWS Trusted advisor сервисімен таныстық. Бұл сіздің IT-инфрақұрылымыңыз Well-Architected Framework аясындағы best practice-ке сәйкес келетіндігін нақты уақыт режимінде тексеруге мүмкіндік беретін сервис. Осымен, біз дәрісіміздің соңына жеттік. Біз Well-Architected Framework не екенін, бізге не үшін керек екенін мұқият қарастырдық. Әрі қарай, біз сенімділік пен қол жетімділік сияқты кейбір маңызды терминдерді және олардың қалай өлшенетінін қарастырдық. Соңында біз инфрақұрылымымыздың Well-Architected Framework-пен сәйкестігін автоматты түрде тексеретін Trusted advisor сервисімен таныстық. Қосымша ақпарат алғыңыз келсе, бүгінгі дәрісте қарастырылған тақырыптар туралы көбірек білу үшін келесі сілтемелерді пайдалана аласыз. Сіз қарастырған сервистер мен терминдер туралы жақсы түсінікке ие болдыңыз деп үміттенемін. Назарларыңызға рахмет. Келесі белсенділіктерімізде көріскенше!