WEBVTT

00:00:00.000 --> 00:00:06.000
Добрый день, уважаемые студенты!
Я рад вас всех видеть на очередной лекции.

00:00:06.000 --> 00:00:11.000
Тема сегодняшней лекции это – Compute,
т.е. вычисления в облаке.

00:00:11.000 --> 00:00:16.000
Эта тема достаточно важная и хотелось бы ее
 максимально подробно с вами разобрать.

00:00:16.000 --> 00:00:22.000
Поэтому мы эту тему поделили на две
недели и сегодня у нас первая часть.

00:00:22.000 --> 00:00:29.000
Итак, давайте начнем.
Сегодняшняя сессия поделена на три части.

00:00:29.000 --> 00:00:38.000
В первой части мы с вами поговорим про
существующие сервисы AWS, которые предоставляют

00:00:38.000 --> 00:00:40.000
нам вычислительные ресурсы.
Далее вторая и третья часть.

00:00:40.000 --> 00:00:45.000
Она посвящена сервису Amazon EC2,
то есть Amazon Elastic Compute Cloud.

00:00:45.000 --> 00:00:49.527
Сервис Amazon EC2 является
одним из самых основных и важных

00:00:49.551 --> 00:00:54.000
для понимания с точки зрения
подготовки к экзамену AWS,

00:00:54.000 --> 00:01:00.488
а также к вашей будущей работе,
так как очень большая вероятность того, что вы

00:01:00.512 --> 00:01:07.000
будете использовать этот сервис при
построении своей IT-инфраструктуры в облаке.

00:01:09.000 --> 00:01:14.000
Первая секция.
Обзор существующих сервисов вычислений.

00:01:14.000 --> 00:01:22.000
На этом слайде вы видите основной список сервисов,
предоставляющих нам вычислительные ресурсы,

00:01:22.000 --> 00:01:25.988
и выделены те сервисы,
которые мы более-менее, что-то более

00:01:26.012 --> 00:01:30.000
подробно, что-то менее подробно,
рассмотрим на нашем курсе.

00:01:30.000 --> 00:01:33.000
Самый первый и основной – 
это Amazon EC2.

00:01:33.000 --> 00:01:37.000
Это тот сервис, который предоставляет 
нам виртуальные машины.

00:01:37.000 --> 00:01:40.000
Далее есть так называемый
 Amazon EC2 Auto Scaling.

00:01:40.000 --> 00:01:47.000
Это тот сервис, который помогает настроить
автоскейлинг для наших Amazon EC2 инстансов.

00:01:47.000 --> 00:01:55.000
Следующие три – это Amazon Elastic Container
Registry, далее Amazon Elastic Container Service,

00:01:55.000 --> 00:02:04.000
и третий – это Amazon Elastic Kubernetes Service,
аббревиатуры Amazon ECR, Amazon ECS и Amazon EKS.

00:02:04.000 --> 00:02:14.000
Чем они между собой отличаются? Первый – Amazon
ECR – это хранилище Docker images, т.е. образов.

00:02:14.000 --> 00:02:20.000
Далее, Amazon ECS – это сервис,
который нам помогает работать с Docker-образами.

00:02:20.000 --> 00:02:27.000
Следующий – это Amazon EKS,
который позволяет нам работать с Kubernetes.

00:02:27.000 --> 00:02:39.000
Kubernetes – это абстрактное приложение поверх для
более удобной продвинутой оркестрации Docker images,

00:02:39.000 --> 00:02:48.033
т.е. если вы используете Docker и в какой-то момент
количество этих образов, с которыми вам приходится

00:02:48.057 --> 00:02:57.000
работать, растет или достаточно большое, то обычно
переходят на использование Kubernetes, т.е. K8S.

00:02:57.000 --> 00:03:02.532
И также связанный сервис – это 
AWS Fargate, тоже сервис, который

00:03:02.556 --> 00:03:08.000
работает с контейнерами и
который является managed сервисом.

00:03:08.000 --> 00:03:18.000
Идея в том, что большую часть административной
работы AWS берет на себя, при этом основные моменты,

00:03:18.000 --> 00:03:25.491
определенные входные данные для работы с
контейнерами предоставляем мы как владельцы

00:03:25.515 --> 00:03:34.000
IT-инфраструктуры в облаке. Следующие сервисы
– это AWS Elastic Beanstalk и Amazon LightSail.

00:03:34.000 --> 00:03:38.650
Они в каком-то смысле также похожи,
я специально рассказываю сервисы в

00:03:38.674 --> 00:03:44.000
сгруппированном виде для того,
чтобы у вас структурированнее это запомнилось.

00:03:44.000 --> 00:03:48.982
AWS Elastic Beanstalk – идея в том,
что вы загружаете в

00:03:49.006 --> 00:03:53.988
этот сервис ваш код,
код веб-приложения, и этот сервис за

00:03:54.012 --> 00:03:58.994
вас поднимает инфраструктуру в
 облаке AWS, таким образом

00:03:59.018 --> 00:04:04.000
забирает на себя большую
часть административной работы.

00:04:04.000 --> 00:04:08.736
То же самое относится к Amazon LightSail,
в этом случае мы говорим,

00:04:08.760 --> 00:04:14.000
что это сервис, который помогает
нам строить приложения либо веб-сайты.

00:04:18.000 --> 00:04:24.000
Следующий сервис – это AWS Lambda,
про него мы уже несколько раз проговаривали.

00:04:24.000 --> 00:04:29.000
Теперь на этих лекциях 
разберем более подробно.

00:04:29.000 --> 00:04:36.579
Это Serverless Compute Service, идея в том,
что вы пишете код, все остальное с точки

00:04:36.603 --> 00:04:44.000
зрения администрирования и обслуживания этого кода,
происходит на стороне AWS.

00:04:44.000 --> 00:04:49.234
Идеальный сервис для разработчиков,
так как максимально уменьшает

00:04:49.258 --> 00:04:54.000
все то, что связано с 
администрированием инфраструктуры.

00:04:54.000 --> 00:05:02.488
Также хотелось бы отметить AWS Batch,
это тот сервис, который помогает нам

00:05:02.512 --> 00:05:11.000
проводить batch jobs, то есть некие 
работы в больших объемах или группами.

00:05:11.000 --> 00:05:19.503
И еще один сервис, который также хотелось
бы отметить, это AWS Outposts, это тот

00:05:19.527 --> 00:05:29.000
сервис, который позволяет нам управлять
локальной инфраструктурой через интерфейс AWS.

00:05:29.000 --> 00:05:36.488
Таким образом мы взаимодействуем 
как будто с AWS, но под капотом

00:05:36.512 --> 00:05:46.000
используются вычислительные ресурсы,
которые у нас в дата-центре.

00:05:47.000 --> 00:05:52.000
Мы можем поделить определенную часть
сервисов вычисления на четыре группы.

00:05:52.000 --> 00:06:00.000
Первая группа - это сервисы по модели IaaS,
infrastructure as a service, Amazon EC2.

00:06:03.000 --> 00:06:06.676
Атомарной единицей в рамках 
этого сервиса, то есть ресурсом,

00:06:06.700 --> 00:06:10.000
с которым мы работаем,
является виртуальная машина.

00:06:10.000 --> 00:06:14.132
Так как этот сервис предоставляется
по модели infrastructure as a service,

00:06:14.156 --> 00:06:19.000
у нас абсолютно полный контроль
над этими виртуальными машинами.

00:06:19.000 --> 00:06:23.000
Мы можем устанавливать любую 
операционную систему, любые приложения.

00:06:23.000 --> 00:06:26.000
Единственный момент, нужны специалисты, 
которые все это проделывают.

00:06:26.000 --> 00:06:29.599
Если есть специалисты и
есть определенные уникальные

00:06:29.623 --> 00:06:34.000
требования к IT-инфраструктуре,
то Amazon EC2 это наш выбор.

00:06:34.000 --> 00:06:43.000
Следующий вариант - это Serverless ресурсы,
яркий представитель - AWS Lambda.

00:06:43.000 --> 00:06:48.488
Когда мы пишем код, этот код 
загружаем в облако и все то, что связано с

00:06:48.512 --> 00:06:54.000
администрированием, обслуживанием 
этого кода происходит на стороне AWS.

00:06:54.000 --> 00:06:58.006
Это идеальный выбор в случае,
когда есть недостаток

00:06:58.030 --> 00:07:03.000
специалистов, которые будут 
обслуживать вашу инфраструктуру.

00:07:06.000 --> 00:07:11.000
Третья группа - это сервисы, 
которые связаны с контейнерами.

00:07:11.000 --> 00:07:15.000
Мы чуть подробнее далее поговорим, 
что такое контейнеры.

00:07:15.000 --> 00:07:19.000
Здесь есть четыре сервиса, 
которые работают с контейнерами.

00:07:19.000 --> 00:07:23.000
Это Amazon ECS, Amazon EKS, 
Amazon ECR и AWS Fargate.

00:07:24.000 --> 00:07:32.027
Четвертая группа - это сервис, который
предоставляется по модели Platform as a Service,

00:07:32.051 --> 00:07:41.000
атомарной единицой, ресурсом в этом случае 
является один web application и называется

00:07:41.000 --> 00:07:45.000
сервис AWS Elastic Beanstalk. Идея в том,
что мы пишем код, этот код загружаем в облако.

00:07:45.000 --> 00:07:50.000
Дальше AWS Elastic Beanstalk самостоятельно
разворачивает необходимую инфраструктуру.

00:07:50.000 --> 00:07:55.102
Естественно, мы передаем дополнительные
 параметры, которые прописывают

00:07:55.126 --> 00:08:00.228
некоторые ограничения, условия либо 
мощность этой инфраструктуры,

00:08:00.252 --> 00:08:05.651
но всю работу по поднятию и поддержке
осуществляет этот сервис AWS Elastic

00:08:05.675 --> 00:08:12.000
Beanstalk, так как оно предоставляется
по модели Platform as a Service.

00:08:13.000 --> 00:08:20.988
Вы видите, что когда мы говорим про вычислительные
ресурсы, то AWS предоставляет несколько

00:08:21.012 --> 00:08:29.000
вариантов сервисов, которые в зависимости от
вашей бизнес задачи могут вам идеально подойти.

00:08:29.000 --> 00:08:34.175
Здесь единственный момент,
который я бы хотел отметить, это

00:08:34.199 --> 00:08:40.000
то, что компания всегда находится
в различных стадиях развития.

00:08:40.000 --> 00:08:46.000
Таким образом, в начале представим, что вы 
маленький стартап, у вас небольшие нагрузки.

00:08:46.000 --> 00:08:53.000
В этом случае, возможно, вам идеально подойдут
сервисы, которые serverless, например, AWS Lambda.

00:08:53.000 --> 00:09:01.988
Когда у вас нет штата, штатного системного
администратора, который этим всем занимается,

00:09:02.012 --> 00:09:06.494
более того, у вас нет больших 
или постоянных нагрузок на ваш

00:09:06.518 --> 00:09:11.000
IT-продукт, в этом случае 
достаточно использовать AWS Lambda.

00:09:11.000 --> 00:09:19.559
Когда у вас растут нагрузки, у вас растет штат,
далее у вас появляются некоторые уникальные

00:09:19.583 --> 00:09:29.000
требования к IT-инфраструктуре, то вам нужно
больше контроля над вашими IT-ресурсами в облаке.

00:09:29.000 --> 00:09:36.913
В этом случае вы постепенно будете перебираться 
от моделей, когда вам предоставляется

00:09:36.937 --> 00:09:44.000
сервис, когда вы лишь малую часть 
выполняете, а большую часть делает AWS,

00:09:44.000 --> 00:09:51.281
к сервисам, которые дают вам полный
контроль над IT-ресурсами, самый

00:09:51.305 --> 00:10:00.000
максимальный случай, который возможен,
это IaaS и, в нашем случае, Amazon EC2.

00:10:00.000 --> 00:10:06.632
Мы с вами добрались до второй части нашей 
сессии, с этого момента мы начнем подробное

00:10:06.656 --> 00:10:14.000
знакомство с сервисом Amazon EC2. Amazon EC2
расшифруется как Amazon Elastic Compute Cloud.

00:10:14.000 --> 00:10:18.732
Этот сервис, который предоставляет 
нам виртуальные машины.

00:10:18.756 --> 00:10:23.488
Эта виртуальная машина ничем не
отличается от выделенного сервера,

00:10:23.512 --> 00:10:28.244
который мы заказываем от
локального hosting провайдера, либо

00:10:28.268 --> 00:10:33.000
который мы настраиваем и
заказываем на локальном дата-центре.

00:10:33.000 --> 00:10:40.786
Отличие лишь в том, что предоставляются все 
преимущества облачных технологий по сравнению

00:10:40.810 --> 00:10:45.178
с локальным развёртыванием.
А именно, это то, что вы можете за

00:10:45.202 --> 00:10:50.000
минуты запросить необходимое
количество вычислительных мощностей,

00:10:50.000 --> 00:10:53.982
в любой момент, когда вам эти
 вычислительные мощности не

00:10:54.006 --> 00:10:57.988
нужны, вы можете их отозвать и вернуть
обратно и оплата будет производиться

00:10:58.012 --> 00:11:06.000
только за то время и за то количество инстансов,
типов инстансов, которые вы использовали.

00:11:06.000 --> 00:11:14.800
Вы сразу можете видеть, что по сравнению с
локальной и облачной инфраструктурой,

00:11:14.824 --> 00:11:23.000
абсолютно такой же с использованием Amazon
EC2 сервиса, мы уже получаем некоторые выгоды.

00:11:23.000 --> 00:11:31.988
Для нас это выгодно, так как у большинста IT-проектов
 нагрузка на IT-инфраструктуру динамическая.

00:11:32.012 --> 00:11:41.000
Например, если это веб-сайт по продаже одежды,
то обычно люди занимаются покупками либо в выходные,

00:11:41.000 --> 00:11:50.988
либо в так называемые prime hours, то есть часы,
когда идет пиковая нагрузка. Это время либо

00:11:51.012 --> 00:12:01.000
утром до 9, либо это обеденное время, или это
время после 6-7 часов вечера до 10 часов вечера,

00:12:01.000 --> 00:12:08.488
когда люди свободны от работы и у них появляется
время делать покупки. В этом случае, когда у вас

00:12:08.512 --> 00:12:16.000
есть серверы на локальном дата-центре, то для того,
чтобы обслужить все нагрузки, которые приходят,

00:12:16.000 --> 00:12:23.488
максимальное время, чтобы не потерять клиента,
у вас должен быть какой-то запас серверов, которые

00:12:23.512 --> 00:12:31.000
постоянно там находятся. Потому как быстро в течение
минуты получить новый сервер – это нереальная задача,

00:12:31.000 --> 00:12:36.051
когда вы хоститесь локально. Обычно заказ 
сервера занимает несколько дней, а более

00:12:36.075 --> 00:12:42.000
реалистичный вариант – это несколько недель.
Таким образом, у вас должен быть какой-то запас.

00:12:42.000 --> 00:12:49.988
Другой момент – это то, что те серверы, которые вы
уже заказали, вы не можете использовать временно или

00:12:50.012 --> 00:12:58.000
быстро вернуть обратно. Поэтому, раз вы купили, вы
уже понесли основные ваши расходы в большом объеме.

00:12:58.000 --> 00:13:05.488
И в случае, когда у вас нет нагрузки, например,
в 4 часа утра, никто не использует ваш веб-сайт,

00:13:05.512 --> 00:13:13.000
в этом случае все ваши вычислительные мощности
простаивают. Фактически, вы теряете ваши деньги.

00:13:13.000 --> 00:13:20.379
Когда мы работаем с облачными сервисами,
мы можем настроить скейлинг, автоскейлинг, когда, в

00:13:20.403 --> 00:13:29.000
зависимости от нагрузки на нашу инфраструктуру, мы
получаем необходимое количество Amazon EC2 инстансов.

00:13:29.000 --> 00:13:34.000
Это уже позволяет нам экономить,
потому как в те часы, когда нагрузки

00:13:34.024 --> 00:13:38.730
небольшие, мы отдаем большую часть 
серверов обратно Amazon и за

00:13:38.754 --> 00:13:43.563
эти часы не оплачиваем.
И сохраняем только минимальное количество

00:13:43.587 --> 00:13:49.000
инстансов для того, чтобы обслуживать 
клиентов в эти непопулярные часы.

00:13:49.000 --> 00:13:54.732
В тот момент, когда у нас происходят 
часы пика, то есть когда люди

00:13:54.756 --> 00:14:00.488
в большом количестве посещают ваш сайт,
в этом случае, необходимое

00:14:00.512 --> 00:14:06.415
количество инстансов  запрашивается
у облачного провайдера и в течение

00:14:06.439 --> 00:14:12.000
нескольких минут она доступна и
на него можно направлять трафик.

00:14:12.000 --> 00:14:18.232
Все происходит автоматически,
так как это некий живой организм в облаке.

00:14:18.256 --> 00:14:24.488
И это позволяет, даже если нагрузки
у вас внезапно в 10 раз увеличатся, то

00:14:24.512 --> 00:14:30.397
все те новые пользователи,
которые к вам пришли поверх, будут успешно

00:14:30.421 --> 00:14:37.000
обслужены, потому как вы всего-навсего
запросите в 10 раз больше инстансов.

00:14:37.000 --> 00:14:45.728
Естественно, вы что-то заработаете, это будет для
вас очень выгодно и в тот момент, когда пиковые часы

00:14:45.752 --> 00:14:55.000
пройдут, вы вернете обратно эти инстанcы и у вас не
будет случаев, когда ваша инфраструктура простаивает.

00:14:55.000 --> 00:15:03.322
Примерами использования Amazon EC2 инстансов
могут быть примеры, которые могут быть развернуты в

00:15:03.346 --> 00:15:11.667
локальном сервере, а именно это может быть сервер, 
обслуживающий приложение, веб-сайт, базы данных,

00:15:11.691 --> 00:15:19.783
может быть сервер игры, который обслуживает
игру по сети, или это может быть почтовый сервер,

00:15:19.807 --> 00:15:24.391
медиа-сервер, когда вы раздаете 
картинки, может быть аудио

00:15:24.415 --> 00:15:29.000
либо видео материалы, например,
стримите какое-то видео.

00:15:29.000 --> 00:15:35.540
И другой вариант – это файл-сервер, когда вы 
загружаете туда файлы и даете возможность

00:15:35.564 --> 00:15:42.104
скачивать и работать с этими файлами, как,
например, Dropbox, это может быть какой-то

00:15:42.128 --> 00:15:49.052
proxy-сервер и все те примеры, которые применимы 
на локальный сервер, т.е. сервер, который

00:15:49.076 --> 00:15:56.000
хостится в локальном дата-центре, они также
применимы для Amazon EC2 инстансов в облаке.

00:15:56.000 --> 00:16:01.488
Резюмируя, мы говорим, что Amazon EC2 – 
это сервис, который предоставляет нам

00:16:01.512 --> 00:16:07.000
виртуальные машины, эти виртуальные
машины называются Amazon EC2 инстансами.

00:16:07.000 --> 00:16:11.000
EC2 расшифруется как 
Elastic Compute Cloud.

00:16:11.000 --> 00:16:17.190
Также хотелось бы отметить, что Amazon EC2
поддерживает все популярные операционные

00:16:17.214 --> 00:16:22.647
системы Windows, Linux, а именно 
Windows версии 8, 12, 16, 19, Red Hat,

00:16:22.671 --> 00:16:28.901
SUSE, Ubuntu и есть такая операционная
система Amazon Linux, которая была создана,

00:16:28.925 --> 00:16:35.000
поддерживается и постоянно улучшается
cамим Amazon-ом называется Amazon Linux.

00:16:35.000 --> 00:16:40.396
На сегодняшний день существует 
две версии, т.е. Amazon Linux первая

00:16:40.420 --> 00:16:45.488
версия и Amazon Linux вторая версия.
Рекомендуется переходить

00:16:45.512 --> 00:16:50.868
на следующую версию, так как за 
ту же цену вы получаете еще больше

00:16:50.892 --> 00:16:56.000
возможностей и преимуществ по
сравнению с предыдущей версией.

00:16:56.000 --> 00:17:03.694
В целом также рекомендуется использовать 
операционную систему от Amazon, потому как она

00:17:03.718 --> 00:17:08.361
максимально интегрирована с AWS,
а также все те новинки, которые

00:17:08.385 --> 00:17:13.028
выходят, они могут выходить только
для этой операционной системы,

00:17:13.052 --> 00:17:17.294
либо если появляется некое
обновление для всех операционных

00:17:17.318 --> 00:17:22.000
систем, то в первую очередь она
появляется внутри Amazon Linux.

00:17:22.000 --> 00:17:27.729
Давайте пройдемся по процессу
создания Amazon EC2 инстанса.

00:17:27.753 --> 00:17:32.988
Оно состоит из 9 различных шагов.
Самый первый – это выбор AMI.

00:17:33.012 --> 00:17:44.000
AMI – это Amazon Machine Instance, либо простыми
словами, это слепок либо шаблон Amazon EC2 инстанса.

00:17:44.000 --> 00:17:49.488
В этот шаблон входит операционная система,
все возможные настройки, установленные

00:17:49.512 --> 00:17:55.000
приложения и все то, что вы можете
проделать в рамках этого Amazon EC2 инстанса.

00:17:55.000 --> 00:18:02.602
Вы как будто замораживаете в определенном состоянии
этот Amazon EC2 инстанс со всеми необходимыми,

00:18:02.626 --> 00:18:10.000
правильно проделанными настройками и это состояние
можете наложить на новый Amazon EC2 инстанс.

00:18:10.000 --> 00:18:16.482
Таким образом, вы экономите свое же время,
исключаете человеческий

00:18:16.506 --> 00:18:21.988
фактор и все те новые инстансы,
которые создаются, они

00:18:22.012 --> 00:18:27.689
создаются намного быстрее,
нежели вам пришлось бы все эти

00:18:27.713 --> 00:18:34.000
настройки проделывать с нуля
для каждого Amazon EC2 инстанса.

00:18:34.000 --> 00:18:45.488
Существуют три источника AMI. Первый – это делать
самостоятельно, второй – это AWS Marketplace.

00:18:45.512 --> 00:18:51.244
Это то место, где компания подготавливает
 от своего имени AMI

00:18:51.268 --> 00:18:57.000
со специфическими настройками,
вы можете эти AMI там покупать.

00:18:57.000 --> 00:19:04.988
И третий вариант – это Community AMI,
это то место, где специалисты со всего

00:19:05.012 --> 00:19:13.000
мира подготавливают самостоятельные
AMI и бесплатно публикуют в общем доступе.

00:19:13.000 --> 00:19:21.093
Так как AWS не проверяет содержимое этих AMI,
то использование AMI с Community

00:19:21.117 --> 00:19:29.000
AMI полностью под вашей личной 
ответственности, т.е. на ваш страх и риск.

00:19:29.000 --> 00:19:33.528
Я со своей стороны не
рекомендую использовать AMI с

00:19:33.552 --> 00:19:39.079
Community AMI, в некоторых случаях это 
является оправданным, если покупать AMI

00:19:39.103 --> 00:19:49.000
внутри AWS Marketplace, но самым лучшим
вариантом является подготовка AMI самостоятельно.

00:19:49.000 --> 00:19:58.920
Здесь вы можете видеть на диаграмме процесс
создания нового AMI, т.е. вы можете импортировать

00:19:58.944 --> 00:20:08.000
состояние уже существующей виртуальной машины,
либо можете начать с самого начала.

00:20:08.000 --> 00:20:13.035
Следующим шагом вы получаете
немодифицированный инстанс, далее вы

00:20:13.059 --> 00:20:18.725
производите все необходимые настройки,
апгрейды, обновления приложения,

00:20:18.749 --> 00:20:23.862
патчи безопасности и так далее,
и получаете уже модифицированный

00:20:23.886 --> 00:20:29.000
инстанс, который в таком же
состоянии сохраняете как новый AMI.

00:20:29.000 --> 00:20:35.059
Следует помнить, что AMI создается 
в рамках определенного региона,

00:20:35.083 --> 00:20:40.581
если ваша инфраструктура
развернута в нескольких регионах,

00:20:40.605 --> 00:20:46.291
то вам необходимо будет
скопировать AMI с одного региона на

00:20:46.315 --> 00:20:52.000
второй, для того чтобы он был 
доступен уже в другом регионе.

00:20:52.000 --> 00:20:59.934
Его ID будет отличаться, но содержимое
будет такое же. Следующий пункт – это выбор типа

00:20:59.958 --> 00:21:09.000
инстанса. Когда мы говорим про тип инстанса,
имеется в виду мощность этого виртуального сервера.

00:21:09.000 --> 00:21:18.988
Мощность определяется количеством оперативной 
памяти, количеством ядер процессора,

00:21:19.012 --> 00:21:23.994
информация о возможности подключения
жестких дисков и объем этих жестких дисков,

00:21:24.018 --> 00:21:29.000
а также информация по
каналу передачи данных по сети.

00:21:29.000 --> 00:21:35.937
На этом слайде представлена информация
по характеристикам серверов в зависимости от

00:21:35.961 --> 00:21:44.000
изменения его размера. Самый маленький размер
внутри AWS это nano, дальше micro, small и т.д.

00:21:44.000 --> 00:21:51.591
Также в названии инстанса вы видите 
как префикс идет, буквы, в нашем случае

00:21:51.615 --> 00:21:59.000
T и цифра 3. Буква – это семейство инстансов,
а цифра – это поколение.

00:21:59.000 --> 00:22:06.603
Про семейство мы подробнее поговорим на следующем
слайде. Когда мы говорим про поколение, это цифра,

00:22:06.627 --> 00:22:14.000
которая с каждым годом увеличивается, на текущий
момент последними поколениями являются 5 и 6.

00:22:14.000 --> 00:22:22.678
Когда мы говорим про размеры в таблице,
вы видите, что с увеличением размера инстанса

00:22:22.702 --> 00:22:32.000
логично увеличивается количество ядер процессора,
а также количество оперативной памяти.

00:22:32.000 --> 00:22:41.063
Здесь вы видите информацию по существующим семействам
типов инстансов. Не нужно запоминать каждую

00:22:41.087 --> 00:22:51.000
букву, достаточно запомнить самые основные, которые
потенциально могут прийти на реальном экзамене AWS.

00:22:51.000 --> 00:22:57.732
Когда мы говорим про семейство
общего назначения General Purpose,

00:22:57.756 --> 00:23:04.488
черное, это семейство a, m и t.
Необходимо запомнить t. Дальше идет

00:23:04.512 --> 00:23:10.884
Compute optimized, т.е.
для того же размера, например, large,

00:23:10.908 --> 00:23:18.000
 у compute optimized инстанcа будет
большее количество ядер процессоров

00:23:18.000 --> 00:23:26.154
по сравнению с large инстанcом
семейства general purpose, т.е. какой-нибудь

00:23:26.178 --> 00:23:34.000
t3 large и c3 large. Здесь необходимо 
запомнить, что это семейство c.

00:23:34.000 --> 00:23:43.488
Дальше идет у нас Memory optimized, это r и x. Также
есть z, но чаще всего и самым популярным является

00:23:43.512 --> 00:23:53.000
семейство r. Здесь также по сравнению с general
purpose тот же, например, t3 large и тот же r3 large,

00:23:53.000 --> 00:23:59.488
в этом случае у r3 large будет как минимум
в два раза больше оперативной памяти по

00:23:59.512 --> 00:24:06.000
сравнению с тем же t3 large, при этом 
количество ядер процессора будет таким же.

00:24:06.000 --> 00:24:15.032
Следующие достаточно редко используемы в зависимости
от вашей бизнес-задачи, есть Accelerated computing,

00:24:15.056 --> 00:24:24.000
когда вы тренируете модели машинного
обучения, искусственный интеллект в этом направлении.

00:24:24.000 --> 00:24:33.056
Есть также типы инстансов, которые позволяют 
вам развернуть distributed file systems,

00:24:33.080 --> 00:24:43.000
т.е. распределенные файловые системы, Hadoop 
и т.д. В этом случае есть семейство d, h и i.

00:24:43.000 --> 00:24:50.101
Я вам рекомендую остановить это видео,
перейти на страницу Pricing сервиса Amazon EC2.

00:24:50.125 --> 00:24:57.226
Там вы увидите, какие на текущий
момент есть семейства типов инстансов, какие

00:24:57.250 --> 00:25:04.346
есть размерности, сколько они стоят,
а также какое количество оперативной памяти,

00:25:04.370 --> 00:25:12.000
ядер процессора предоставляется, какие
есть возможности в плане storage и networking,

00:25:12.000 --> 00:25:20.349
вы можете сравнить несколько разных семейств,
чтобы получить полное представление.

00:25:20.373 --> 00:25:28.000
Когда мы говорим про networking,
когда учитывать возможности networking.

00:25:28.000 --> 00:25:33.003
В случае, если у вас передается 
небольшое количество данных

00:25:33.027 --> 00:25:37.685
внутри вашей инфраструктуры,
будь то между Amazon EC2

00:25:37.709 --> 00:25:42.842
инстансами, либо между вашими 
Amazon EC2 инстансами и базой

00:25:42.866 --> 00:25:48.000
данных, в этом случае не так 
критично информация по сети,

00:25:48.000 --> 00:25:54.059
она будет вам предоставлена. В случае, когда 
вы работаете с большим объемом информации,

00:25:54.083 --> 00:26:00.000
данные передаются по сети, в этом случае
этот момент может быть для вас критичным,

00:26:00.000 --> 00:26:07.437
поэтому обратите на это внимание. И следует
также учитывать, что есть специальные выделенные

00:26:07.461 --> 00:26:14.570
семейства типов инстансов, которые 
оптимизированы для работы по сети, т.е. у них может

00:26:14.594 --> 00:26:21.785
быть не такое большое количество оперативной 
памяти, либо ядер процессора, но канал для

00:26:21.809 --> 00:26:29.000
передачи данных по сети, он предоставляется
больше по сравнению с другими семействами.

00:26:29.000 --> 00:26:33.105
Следующий пункт, третий,
это – Network settings, в котором мы

00:26:33.129 --> 00:26:37.988
указываем всю информацию, где будет 
расположен наш Amazon EC2 инстанс.

00:26:38.012 --> 00:26:42.494
А именно мы указываем информацию,
в каком VPC, в какой availability

00:26:42.518 --> 00:26:47.000
зоне и в каком subnet-e будет
находиться новый Amazon EC2 инстанс.

00:26:47.000 --> 00:26:52.683
Я здесь не говорю касательно региона,
потому что до того, как вы нажмете

00:26:52.707 --> 00:26:57.988
в самом начале кнопку Create
Instance или Launch Instance, нужный

00:26:58.012 --> 00:27:03.494
регион уже должен быть выбран,
потому как внутри Launch Wizard вы не

00:27:03.518 --> 00:27:09.000
сможете поменять регион.
Это тот момент, который следует учитывать.

00:27:09.000 --> 00:27:15.182
В случае, когда вы делаете эту 
программу, то скорее всего команда

00:27:15.206 --> 00:27:21.000
не сработает, если вы не 
укажете какой-нибудь из регионов.

00:27:21.000 --> 00:27:25.514
Еще один момент, который следует 
учитывать, это то, что все

00:27:25.538 --> 00:27:30.676
инстансы, которые создаются в 
дефолтовом VPC, они получают Public

00:27:30.700 --> 00:27:35.478
IP-адрес. Мы с вами помним, что это 
динамический IP-адрес, но

00:27:35.502 --> 00:27:41.000
благодаря этому адресу ваш инстанс
может быть доступен из интернета.

00:27:41.000 --> 00:27:49.238
В случае, когда мы говорим не 
дефолтовый VPC, то флажок выставлять,

00:27:49.262 --> 00:27:59.000
выдавать публичные IP-адреса будет
убрано и публичные IP-адреса не выдаются.

00:27:59.000 --> 00:28:03.488
Если вам нужно выдать публичный 
IP-адрес, то вы должны явно

00:28:03.512 --> 00:28:08.000
это указать в настройках
создания вашего VPC либо subnet.

00:28:08.000 --> 00:28:12.982
Следующий четвертый шаг – это
привязка IAM role к Amazon EC2

00:28:13.006 --> 00:28:17.988
инстансу, и этот шаг является 
опциональным. Идея ее в том, что

00:28:18.012 --> 00:28:22.744
представим, что ваш инстанс,
в нем крутится некоторый код,

00:28:22.768 --> 00:28:28.000
логика, которая использует и
обращается к другим AWS сервисам.

00:28:28.000 --> 00:28:34.813
В этом случае ему необходимо выдать
соответствующие доступы, права. AWS

00:28:34.837 --> 00:28:41.000
предоставляет удобную и безопасную возможность 
это сделать, а именно создается IAM role, дальше

00:28:41.000 --> 00:28:53.017
создается instance profile с этой role. В случае,
когда вы делаете это через AWS Management Console,

00:28:53.041 --> 00:28:58.994
то в момент привязки IAM role 
к инстансу, прозрачно для вас

00:28:59.018 --> 00:29:06.000
создается instance profile с 
таким же названием, как ваша IAM role.

00:29:06.000 --> 00:29:14.009
Фактически instance profile это некий контейнер,
который содержит в себе эту role, а instance

00:29:14.033 --> 00:29:23.000
profile вы можете привязать к инстансу для того,
чтобы предоставить ему доступ к другим AWS сервисам.

00:29:23.000 --> 00:29:28.684
В случае, когда вы создаете role и
пытаетесь привязать к Amazon EC2 инстансу

00:29:28.708 --> 00:29:35.000
программным путем, то помните, что вам 
необходимо также создать instance profile.

00:29:35.000 --> 00:29:41.301
На слайде проиллюстрирован пример, когда у
нас есть role. Role предоставляет доступ к Amazon

00:29:41.325 --> 00:29:47.626
S3 bucket, и в тот момент, когда мы привязываем
эту role к инстансу через instance profile,

00:29:47.650 --> 00:29:53.392
у инстанса, точнее у кода, который работает
внутри инстанса, появляется возможность

00:29:53.416 --> 00:30:00.000
обратиться к Amazon S3 bucket-ам и как-то
взаимодействовать с данными, которые там находятся.

00:30:00.000 --> 00:30:11.000
Аналогично будет происходить процесс выдачи
прав к инстансу к любому другому сервису AWS.

00:30:11.000 --> 00:30:15.199
Пятый шаг – это User data script,
и этот шаг является опциональным.

00:30:15.223 --> 00:30:22.099
Идея ее в том, что вместе с созданием
вашего инстанса вы можете передать некий

00:30:22.123 --> 00:30:29.000
набор команд, и эти команды запустятся
в самый первый запуск вашего инстанса.

00:30:29.000 --> 00:30:39.138
Зачастую вы здесь передаете список команд, которые
могут быть выполнены только после создания инстанса.

00:30:39.162 --> 00:30:44.288
Возможно, это команды, которые 
обновляют существующие приложения,

00:30:44.312 --> 00:30:50.000
может быть, это команды, которые 
привязаны к metadata вашего инстанса.

00:30:50.000 --> 00:30:59.000
Как metadata мы можем сказать, что есть private
IP-адрес, public IP-адрес и другая информация.

00:30:59.000 --> 00:31:03.901
Здесь у вас может возникнуть вопрос,
почему нам нужно использовать User data,

00:31:03.925 --> 00:31:11.445
если есть уже готовый AMI, в котором 
мы предварительно установим все

00:31:11.469 --> 00:31:20.000
необходимые программы, запустим 
необходимые команды и уже все будет готово.

00:31:20.000 --> 00:31:26.277
Да, это абсолютно правильный ход 
мыслей, и так и нужно поступать,

00:31:26.301 --> 00:31:34.847
т.е. все то, что вы можете обернуть и сохранить
в шаблоне AMI, это нужно сделать. Все то,

00:31:34.871 --> 00:31:44.000
что не получится по тем или иным причинам
положить внутрь AMI, вы можете сделать в User data.

00:31:44.000 --> 00:31:48.296
User Data доступно не только
для Linux операционных систем,

00:31:48.320 --> 00:31:52.467
так же для Windows.
Следует только учесть, что когда вы

00:31:52.491 --> 00:31:57.234
запускаете в Windows, набор команд 
должен быть совместимым либо

00:31:57.258 --> 00:32:02.000
с Windows Command Prompt, т.е.
CMD, либо с Windows PowerShell.

00:32:02.000 --> 00:32:09.733
Другой немаловажный момент, это то, что все 
команды, которые вы запускаете, будь то Windows,

00:32:09.757 --> 00:32:18.000
будь то Linux операционная система, они запускаются
под admin правами, либо root пользователем.

00:32:18.000 --> 00:32:25.205
Следующий шаг, шестой, Specify storage, т.е.
мы указываем информацию по нашим жестким дискам.

00:32:25.229 --> 00:32:33.000
Здесь указываем основной жесткий диск, т.е. root
volume, в котором устанавливаем операционную систему.

00:32:33.000 --> 00:32:40.036
Так же можем указать дополнительные жесткие 
диски, в которых будем хранить наши данные. 

00:32:40.060 --> 00:32:48.000
Если вы уже настроили ваши жесткие
диски внутри AMI, то этот шаг пропускается.

00:32:48.000 --> 00:32:55.036
Когда мы говорим про жесткие диски,
мы говорим про три момента: первый – это ее

00:32:55.060 --> 00:33:03.000
размер, дальше – это тип, и третий – это
информация по шифрованию этих жестких дисков.

00:33:03.000 --> 00:33:10.488
Когда мы говорим про хранилища для Amazon EC2
инстанса, то упоминают четыре возможных варианта:

00:33:10.512 --> 00:33:14.307
первые два – это Amazon Elastic Block Store, 
т.е. Amazon EBS,

00:33:14.331 --> 00:33:18.000
и Amazon EC2 Instance Store.
Это фича сервиса Amazon EC2.

00:33:18.000 --> 00:33:25.707
Оба эти варианты являются блочным хранилищем,
таким образом, что первый и второй вариант подходят

00:33:25.731 --> 00:33:34.000
для установки операционной системы и соответственно
полноценного запуска нашего виртуального сервера.

00:33:34.000 --> 00:33:39.479
Есть некоторые отличия,
когда-то давно, когда не было сервиса

00:33:39.503 --> 00:33:45.713
Amazon EBS, использовался вариант
только Amazon EC2 Instance Store.

00:33:45.737 --> 00:33:51.623
Это те жесткие диски, которые в 
дата-центре физически привязаны,

00:33:51.647 --> 00:33:58.000
точнее подключены к нашей
оперативной памяти и к нашему процессору,

00:33:58.000 --> 00:34:01.833
т.е. это одно целое, один сервер.
Таким образом, когда

00:34:01.857 --> 00:34:06.197
что-то происходит не так, ломается,
поломка и автоматически

00:34:06.221 --> 00:34:10.599
заменяется ваш инстанс,
то все то, что находится в жестких

00:34:10.623 --> 00:34:15.000
дисках с этим инстансом,
оно для вас становится недоступным.

00:34:15.000 --> 00:34:19.604
Так как есть такое неудобство,
был создан альтернативный

00:34:19.628 --> 00:34:24.988
вариант, это сервис Amazon Elastic 
Block Store. Идея в том, что

00:34:25.012 --> 00:34:29.994
жесткие диски, они больше 
не привязаны к инстансам, т.е. к

00:34:30.018 --> 00:34:35.000
вычислительным мощностям и
являются чем-то отдельно стоящим.

00:34:35.000 --> 00:34:41.816
Таким образом, вы через Amazon EBS создаете 
ресурсы, т.е. жесткие диски, которые привязываете

00:34:41.840 --> 00:34:47.988
к вашему инстансу. В случае, когда происходит 
какая-то поломка либо с процессором,

00:34:48.012 --> 00:34:54.645
либо с оперативной памятью в целом, с этим 
инстансом физически, то вы можете ваши жесткие

00:34:54.669 --> 00:35:01.000
диски, которые к нему не относятся, 
приаттачить, т.е. привязать к другому инстансу,

00:35:01.000 --> 00:35:07.092
и все будет работать, вы никакие данные не 
потеряете. В этом и есть отличие Amazon EBS

00:35:07.116 --> 00:35:13.207
от Amazon EC2 Instance Store. Поэтому общая
рекомендация как best practice, использовать

00:35:13.231 --> 00:35:19.604
Amazon EBS там, где это возможно. В некоторых
случаях оправданно использование Amazon EC2

00:35:19.628 --> 00:35:26.000
Instance Store, это все зависит от вашей
бизнес-задачи и нужно детально это рассматривать.

00:35:26.000 --> 00:35:33.123
Следующий вариант – это Amazon Elastic File System.
Опять же, это файловая система,

00:35:33.147 --> 00:35:40.706
блочное хранилище. Отличие лишь в том,
что вы не можете на нем установить операционную

00:35:40.730 --> 00:35:47.454
систему, но она отличается тем,
и используются в тех случаях, когда вам нужен

00:35:47.478 --> 00:35:55.000
отдельно стоящий жесткий диск, который доступен 
для нескольких Amazon EC2 инстансов,

00:35:55.000 --> 00:35:58.100
и является некоторым общим
 жестким диском. Опять же, в

00:35:58.124 --> 00:36:01.988
зависимости от вашей бизнес-задачи
вам может понадобиться хранить

00:36:02.012 --> 00:36:05.494
в одном месте некоторые данные,
для того, чтобы ваши инстансы

00:36:05.518 --> 00:36:09.000
могли туда добираться и
совместно с этими данными работать.

00:36:09.000 --> 00:36:16.050
Также другой вариант для совместной работы с
несколькими инстансами, уже знакомый нам сервис,

00:36:16.074 --> 00:36:23.124
Amazon S3, т.е. Amazon Simple Storage Service.
Этот сервис предоставляет не блочное, но объектное

00:36:23.148 --> 00:36:30.562
хранилище. В случае, когда мы работаем с объектами,
мы также можем воспользоваться сервисом Amazon S3

00:36:30.586 --> 00:36:38.000
для того, чтобы совместно с несколькими инстансами
обращаться и работать с одними и теми же данными.

00:36:38.000 --> 00:36:46.568
Здесь представлен наглядный пример инстанса,
который использует Amazon EBS как root volume, а

00:36:46.592 --> 00:36:56.000
также инстанс второй, который использует как root
volume наш Ephemeral volume, т.е. instance store.

00:36:56.000 --> 00:37:00.214
Давайте пройдемся по отличию
либо схожести этих двух вариантов в

00:37:00.238 --> 00:37:04.988
зависимости от действий или состояния,
которое происходит с инстансом.

00:37:05.012 --> 00:37:09.528
Первое – это перезагрузка, в случае,
когда мы перезагружаем инстанс,

00:37:09.552 --> 00:37:14.000
для обоих вариантов данные у 
нас сохраняются, ничего не теряется.

00:37:14.000 --> 00:37:18.232
Когда мы говорим про остановку,
 т.е. stop инстанса, мы можем инстанс,

00:37:18.256 --> 00:37:24.021
который работает с Amazon EBS остановить,
остановленный инстанс мы не

00:37:24.045 --> 00:37:31.000
оплачиваем, мы оплачиваем только за наши 
данные, которые лежат внутри Amazon EBS,

00:37:31.000 --> 00:37:40.988
а за Amazon EC2, который является намного дороже,
мы не оплачиваем. Это может быть удобно, если

00:37:41.012 --> 00:37:51.000
некоторые серверы простаивают и проще их
приостановить, терминейтнуть, и не терять деньги.

00:37:51.000 --> 00:37:54.804
Когда мы говорим про instance store,
то функционал остановить инстанс

00:37:54.828 --> 00:38:01.138
недоступен, вы не можете его остановить.
Таким образом, есть вариант либо

00:38:01.162 --> 00:38:08.000
перезагрузить, либо третий вариант это 
терминейтнуть, т.е. уничтожить сервер.

00:38:08.000 --> 00:38:15.988
Когда мы терминейтим инстанс с Amazon
EBS жесткими дисками, то терминейтится

00:38:16.012 --> 00:38:24.000
сам инстанс, а жесткие диски они
сохраняются и остаются для нас доступными.

00:38:24.000 --> 00:38:28.982
При удалении мы также можем указать,
есть определенная опция

00:38:29.006 --> 00:38:33.988
с флажком, если мы выставляем 
этот флажок, то наши жесткие

00:38:34.012 --> 00:38:39.077
диски совместно с Amazon EC2 
инстансом удалятся, либо мы можем

00:38:39.101 --> 00:38:44.000
не выставлять этот флажок и
наши жесткие диски сохранятся.

00:38:44.000 --> 00:38:49.488
И эти жесткие диски мы после можем
привязать к другому инстансу, другого типа и все

00:38:49.512 --> 00:38:55.000
данные, которые были, они в таком же
состоянии останутся доступными в таком же виде.

00:38:55.000 --> 00:39:00.936
Когда мы терминейтим инстанс,
который работает с Amazon EC2 Instance Store,

00:39:00.960 --> 00:39:06.897
то данные, которые находятся в Ephemeral
volume полностью удаляются, включая

00:39:06.921 --> 00:39:13.007
операционную систему. Поэтому хранить
некоторые данные, которые вы не сможете

00:39:13.031 --> 00:39:20.000
восстановить, либо важные данные не
рекомендуется хранить в Amazon EC2 Instance Store.

00:39:20.000 --> 00:39:25.023
Там вы можете хранить какие-то данные
для кэширования, либо любые другие

00:39:25.047 --> 00:39:30.000
данные, которые временные или вы
в любой момент можете восстановить.

00:39:30.000 --> 00:39:39.988
Следующий шаг – это возможность добавить теги.
Хотелось бы отметить, что теги – это функционал,

00:39:40.012 --> 00:39:44.994
который доступен для любого 
ресурса, любого AWS сервиса,

00:39:45.018 --> 00:39:50.000
поэтому оно не привязано
конкретно к Amazon EC2 инстансам.

00:39:50.000 --> 00:39:56.000
Что такое теги? Теги – это некий 
набор пар, ключ и значения.

00:39:56.000 --> 00:40:00.779
Приведу примеры ключей.
Самый популярный – это name, и когда

00:40:00.803 --> 00:40:05.338
вы заполняете неким значением,
то это значение зачастую

00:40:05.362 --> 00:40:10.253
отображается внутри AWS
Management Console вместе с ID этого

00:40:10.277 --> 00:40:16.000
ресурса. Это в большинстве случаев
помогает идентифицировать ресурс.

00:40:16.000 --> 00:40:22.541
Другие варианты ключей – это 
environment, т.е. среда. Оно может

00:40:22.565 --> 00:40:29.000
быть тестовой средой для 
разработчиков, либо боевой средой.

00:40:29.000 --> 00:40:34.488
Соответственно, для ключа 
key environment будут значения внутри

00:40:34.512 --> 00:40:40.000
value поля, либо dev, либо test,
либо prod, либо любые другие.

00:40:40.000 --> 00:40:46.684
Другой вариант ключа тега это owner, т.е.
владелец. И как значение может указываться либо

00:40:46.708 --> 00:40:54.000
определенный человек, специалист, либо некоторый
департамент управления внутри вашей компании.

00:40:54.000 --> 00:40:59.808
Идея тегов это в том, чтобы идентифицировать
однозначно этот ресурс и в случае

00:40:59.832 --> 00:41:05.488
чего получить ответы, если не получить
 ответы, то по крайней мере получить

00:41:05.512 --> 00:41:11.282
некоторую информацию, которая поможет
найти нужных людей, нужную группу людей,

00:41:11.306 --> 00:41:17.000
нужный отдел, структуру вашей организации,
которая отвечает за этот ресурс.

00:41:17.000 --> 00:41:25.488
Причины подобных вопросов или поиска
людей могут быть разными. Может быть такое,

00:41:25.512 --> 00:41:34.000
что этот ресурс работает долгое время и
ежемесячно потребляет очень много денег,

00:41:34.000 --> 00:41:38.202
уходит, например, тысячу долларов 
только на один Amazon EC2 инстанс,

00:41:38.226 --> 00:41:42.051
он большой. И люди, которые 
занимаются оптимизацией расходов

00:41:42.075 --> 00:41:45.736
внутри AWS, нашли этот ресурс и
 уже хотят получить ответы,

00:41:45.760 --> 00:41:50.000
почему он крутится, работает,
не работает, нужно, не нужно и т.д.

00:41:50.000 --> 00:41:53.797
Другой вариант может быть такой,
что есть некоторые сервисы,

00:41:53.821 --> 00:41:57.488
под сервисом, естественно,
у нас разный набор ресурсов и

00:41:57.512 --> 00:42:01.084
что-то пошло не так,
что-то сломалось, никто восстановить

00:42:01.108 --> 00:42:05.000
не может, не может найти специалиста,
кому можно обратиться.

00:42:05.000 --> 00:42:10.050
И в этом случае нам могут помочь теги для того,
чтобы понять, куда задавать

00:42:10.074 --> 00:42:14.783
вопросы, чтобы уточнить,
этот сервис кому-то нужен, что-то серьезное

00:42:14.807 --> 00:42:20.031
сломалось, либо нет, нужно восстанавливать
или не нужно терять на это время,

00:42:20.055 --> 00:42:25.000
потому что потраченное время
специалисту это тоже деньги для компании.

00:42:25.000 --> 00:42:29.982
Все теги, что ключ, что значение,
они являются case sensitive, это

00:42:30.006 --> 00:42:34.988
значит, что они чувствительны к регистру.
Простыми словами вы можете

00:42:35.012 --> 00:42:40.032
создать ключ Name с большой буквой,
заглавной буквой, а также такой

00:42:40.056 --> 00:42:45.000
же ключ name, только все буквы с 
прописными, маленькими буквами.

00:42:45.000 --> 00:42:50.081
И никакой ошибки в этом случае 
не будет, потому как

00:42:50.105 --> 00:42:56.000
внутри в системе эти ключи
воспринимаются как отдельные.

00:42:56.000 --> 00:43:00.721
Восьмой шаг – это настройка
 Security group. Мы можем привязать

00:43:00.745 --> 00:43:05.000
одну либо несколько security
group к нашему инстансу.

00:43:05.000 --> 00:43:10.988
Что такое security группа,
мы с вами ранее проговаривали. Вкратце, это –

00:43:11.012 --> 00:43:17.000
некий виртуальный firewall,
который фильтрует трафик до нашего инстанса.

00:43:17.000 --> 00:43:21.988
Мы указываем в security группе 
набор рулов, т.е. правил,

00:43:22.012 --> 00:43:27.000
которые разрешают либо входящий,
либо исходящий трафик.

00:43:27.000 --> 00:43:32.219
Вы можете видеть на слайде пример
предоставления доступа по SSH, т.е.

00:43:32.243 --> 00:43:38.000
это протокол TCP, порт 22 и как Source
источник вы выбираете пункт My IP.

00:43:38.000 --> 00:43:45.000
Когда вы его выбираете, то копируется ваш
текущий адрес и вставляется в соответствующее поле.

00:43:45.000 --> 00:43:49.988
После чего у вас появляется
возможность по SSH подключиться ко

00:43:50.012 --> 00:43:55.000
всем инстансам, к которым 
привязана конкретная security группа.

00:43:55.000 --> 00:44:03.000
Чтобы успешно подключиться к инстансу,
дополнительно нужны соответствующие SSH ключи.

00:44:03.000 --> 00:44:11.000
Самый последний шаг во время создания Amazon EC2
инстанса – это выбрать либо создать новый key pair.

00:44:11.000 --> 00:44:17.000
Key pair – это связка public key и private key, т.е.
публичный ключ и приватный ключ.

00:44:17.000 --> 00:44:25.000
Публичный ключ сохраняется внутри Amazon EC2
инстанса, а private key вы загружаете для локального

00:44:25.000 --> 00:44:29.665
хранения. В момент подключения 
по SSH вы предоставляете ваш

00:44:29.689 --> 00:44:35.000
private key, и после чего происходит 
криптографическая операция,

00:44:35.000 --> 00:44:39.725
которая сверяется, действительно ли 
ваш private key относится

00:44:39.749 --> 00:44:44.000
к public key, хранящийся внутри 
Amazon EC2 инстанса.

00:44:44.000 --> 00:44:49.000
Если все совпадает,
то доступ по SSH вам предоставляется.

00:44:49.000 --> 00:44:59.000
Здесь можете видеть пример списка инстансов внутри
вашего AWS аккаунта, т.е. это сервис Amazon EC2.

00:44:59.000 --> 00:45:08.000
В левом навигационном меню открыта вкладка 
Instances, и на основной странице указывается список

00:45:08.000 --> 00:45:14.000
всех инстансов. Мы видим, что у нас
отфильтрован определенный инстанс, он и выбран.

00:45:14.000 --> 00:45:19.274
В нижней части страницы вы видите 
несколько вкладок, таких как Description,

00:45:19.298 --> 00:45:24.000
Status check, Monitoring Tags и,
возможно, любые другие вкладки.

00:45:24.000 --> 00:45:30.000
В этих вкладках предоставляется
информация о конкретном выбранном инстансе.

00:45:30.000 --> 00:45:34.488
Мы также с вами можем создавать
 инстансы, либо проделывать

00:45:34.512 --> 00:45:39.000
любые другие действия внутри
облака AWS программным путем.

00:45:39.000 --> 00:45:44.488
Для этого существует AWS CLI, т.е.
Command Line Interface, и

00:45:44.512 --> 00:45:50.000
второй вариант – это AWS Software 
Development Kit, т.е. SDK.

00:45:50.000 --> 00:45:57.000
Здесь мы видим пример AWS CLI команды,
которая создает Amazon EC2 инстанс.

00:45:57.000 --> 00:46:00.000
Обратите внимание, что она
 состоит из нескольких частей.

00:46:00.000 --> 00:46:05.000
Самое первое – это AWS, говорит о том,
что мы обращаемся к AWS CLI.

00:46:05.000 --> 00:46:13.000
Далее название сервиса – это Amazon EC2, и внутри мы
указываем, какую операцию необходимо произвести.

00:46:13.000 --> 00:46:20.224
В нашем случае это операция run instances.
После чего в той же строке мы указываем параметры,

00:46:20.248 --> 00:46:27.000
которые относятся к этой операции.
Здесь мы видим, что указан Image ID, т.е. наш AMI.

00:46:27.000 --> 00:46:33.000
Далее указываем количество 
инстансов для создания, тип инстансов.

00:46:33.000 --> 00:46:39.488
Key name – это название 
публичного SSH ключа, security группы,

00:46:39.512 --> 00:46:46.000
а также информацию об AWS регионе,
где создаются наши инстансы.

00:46:46.000 --> 00:46:53.000
Как только запускаем эту команду, мы получаем 
ответ. Ответ может быть успешен либо не успешен.

00:46:53.000 --> 00:46:58.236
В случае ошибки предоставляется
информация о коде ошибки, а также ошибка в

00:46:58.260 --> 00:47:04.000
текстовом формате для того, чтобы получить 
представление, что же пошло не так.

00:47:04.000 --> 00:47:11.232
В случае, если мы получаем успешный ответ,
то в нем как минимум будет указан ID Amazon

00:47:11.256 --> 00:47:19.000
EC2 инстанса, а также другая информация,
которая существует и доступна для этой операции.

00:47:19.000 --> 00:47:26.000
На этом слайде представлена информация по
жизненному циклу любого Amazon EC2 инстанса.

00:47:26.000 --> 00:47:32.488
В квадратных фигурах указано состояние 
инстанса, а название стрелок – это

00:47:32.512 --> 00:47:39.000
то действие, которое мы производим.
Начнем с самого начала. Есть у нас AMI.

00:47:39.000 --> 00:47:44.000
Когда мы запускаем instance, то инстанс 
переходит от AMI в состояние в pending.

00:47:44.000 --> 00:47:50.000
Pending состояние означает, что AMI 
устанавливается на железо внутри дата-центра.

00:47:50.000 --> 00:47:58.258
Как только все настройки произведены и instance
готов, т.е. может начать принимать трафик, вы

00:47:58.282 --> 00:48:02.703
можете подключаться по SSH,
и в целом он доступен для работы,

00:48:02.727 --> 00:48:07.000
то он переходит от состояния
pending в состояние running.

00:48:07.000 --> 00:48:16.544
Мы с вами помним, что операционная система, т.е.
root volume Amazon EC2 инстанса может

00:48:16.568 --> 00:48:26.000
быть Amazon EBS, back-up, т.е. жесткие диски, 
созданные внутри сервиса Amazon EBS,

00:48:26.000 --> 00:48:33.126
либо используется опция Amazon EC2 
instance store, когда мы работаем с

00:48:33.150 --> 00:48:41.000
жесткими дисками, напрямую привязанные
к нашему железу внутри дата-центра.

00:48:41.000 --> 00:48:49.032
И для обоих вариантов у нас доступен вариант 
reboot, т.е. перезагрузить сервер, в этом случае

00:48:49.056 --> 00:48:57.000
сервер перезагружается, и данные, которые
там находятся в обоих случаях, они сохраняются.

00:48:57.000 --> 00:49:07.488
Теперь в случае, когда мы работаем с Amazon EBS
жесткими дисками, то у нас есть вариант остановить

00:49:07.512 --> 00:49:12.394
наш instance, она от состояния running,
как только мы стартовали

00:49:12.418 --> 00:49:18.000
действие stop, переходит в состояние
stopped через состояние stopping.

00:49:18.000 --> 00:49:21.988
В состоянии stopped мы не 
оплачиваем за инстансы, она в

00:49:22.012 --> 00:49:26.000
состоянии гибернации,
мы оплачиваем только за Amazon EBS.

00:49:26.000 --> 00:49:32.049
Здесь я напомню, что основная часть 
оплаты, она не за жесткие диски, а

00:49:32.073 --> 00:49:39.000
именно за инстансы, таким образом 
остановив инстанс, мы экономим наши деньги.

00:49:39.000 --> 00:49:46.274
В тот момент, когда нам необходимо наш инстанс 
стартовать еще раз, то мы можем из состояния stopped

00:49:46.298 --> 00:49:50.241
его запустить, он переходит 
в состояние pending, и обратно

00:49:50.265 --> 00:49:54.000
возвращается в состояние
 running, т.е. готов к бою.

00:49:54.000 --> 00:50:00.309
Далее, мы можем terminate, т.е.
уничтожить, либо высвободить

00:50:00.333 --> 00:50:06.000
ресурсы, высвободить железо,
и более не оплачивать.

00:50:06.000 --> 00:50:09.712
Таким образом происходит
переход от состояния running в

00:50:09.736 --> 00:50:14.000
состояние terminated,
промежуточное состояние shutting down.

00:50:14.000 --> 00:50:20.256
Как только сервер у нас остановлен,
то какое-то время у нас в списке инстансов наш

00:50:20.280 --> 00:50:27.000
остановленный, т.е. отключенный инстанс
будет отображаться и статус будет terminated.

00:50:27.000 --> 00:50:34.488
Как только удаление,
высвобождение этого инстанса полностью

00:50:34.512 --> 00:50:42.000
заканчивается, то из списка
 этот инстанс полностью пропадает.

00:50:42.000 --> 00:50:47.000
Мы с вами поговорили подробнее про
жизненный цикл Amazon EC2 инстанса.

00:50:47.000 --> 00:50:54.000
Также в зависимости от состояния EC2 инстанса есть
некоторые нюансы работы с публичными IP-адресами.

00:50:54.000 --> 00:50:59.588
У нас есть два варианта публичного адреса,
это public IP адрес, который

00:50:59.612 --> 00:51:06.000
выдаётся временно для наших инстансов,
и эти инстансы доступны через интернет.

00:51:06.000 --> 00:51:11.556
Второй вариант – это вариант static IP адрес, 
т.е. постоянный IP адрес через сервис

00:51:11.580 --> 00:51:17.000
Elastic IP адрес, вы можете отдельно его 
заказать, если вам нужна такая опция.

00:51:17.000 --> 00:51:25.988
Так вот, когда мы говорим про public IP адрес,
публичный IP адрес это некоторый pool, т.е. некоторый

00:51:26.012 --> 00:51:30.609
набор IP адресов, не привязанных 
конкретно к вашему аккаунту,

00:51:30.633 --> 00:51:35.000
это общий набор IP адресов,
которые доступны для Amazon.

00:51:35.000 --> 00:51:40.512
В зависимости от занятости того
 или иного IP адреса, вам во

00:51:40.536 --> 00:51:47.000
временное пользование вашим
инстансам выдаётся некоторое значение.

00:51:47.000 --> 00:51:53.488
И здесь важный момент, когда мы терминейтим
инстанс и создаём новый инстанс, здесь

00:51:53.512 --> 00:52:00.000
понятно, мы получаем случайный публичный
 IP адрес, и никак не влияем на её значение.

00:52:00.000 --> 00:52:08.988
В случае, когда мы останавливаем инстанс, также
следует запомнить, что публичный IP адрес обратно

00:52:09.012 --> 00:52:18.000
возвращается AWS, чтобы оно могло назначиться
Amazon EC2 инстансу в другом AWS аккаунте.

00:52:18.000 --> 00:52:27.531
Поэтому, учитывайте этот момент, и знайте, что 
когда сервер у нас останавливается и запускается

00:52:27.555 --> 00:52:38.000
снова, для него выдаётся новый публичный IP адрес,
который доступен на тот момент, на момент запуска.

00:52:38.000 --> 00:52:42.708
Если возвращаясь к статическому 
IP адресу, то это Elastic IP

00:52:42.732 --> 00:52:48.000
адрес, выделенный сервис,
который вам даёт статический IP адрес.

00:52:48.000 --> 00:52:53.488
По умолчанию, внутри AWS аккаунта
вам доступны пять IP адресов, если

00:52:53.512 --> 00:52:59.000
же вам нужно больше, то вы можете
 сделать соответствующий запрос.

00:52:59.000 --> 00:53:03.603
Этот лимит он soft limit,
поэтому может быть увеличен

00:53:03.627 --> 00:53:09.000
в зависимости от вашей необходимости
через обращение в support.

00:53:09.000 --> 00:53:14.000
Как только ваш инстанс запущен,
то у этого инстанса появляются некие метаданные.

00:53:14.000 --> 00:53:20.613
Как метаданные выступают публичный и приватный IP
 адрес, информация о том, на каком регионе запущен

00:53:20.637 --> 00:53:27.000
этот инстанс, к какой availability zone относится,
какие security группы привязаны к этому инстансу,

00:53:27.000 --> 00:53:32.723
т.е. вся возможная информация об
 этом инстансе, она доступна в AWS

00:53:32.747 --> 00:53:39.000
AWS Management Console в соответствующих
вкладках в сгруппированном виде. А также эта

00:53:39.000 --> 00:53:53.000
же информация доступна из самого инстанса,
если обратиться по IP адресу 169.254.169.254.

00:53:53.000 --> 00:53:59.000
Если мы идем по пути latest meta-data, то выходим
 на метаданные по этому конкретному инстансу.

00:53:59.000 --> 00:54:03.488
Если мы идем по пути latest user-data,
то мы открываем список

00:54:03.512 --> 00:54:08.000
команд, которые запускаются
при первом запуске этого инстанса.

00:54:08.000 --> 00:54:12.000
Вы можете использовать эти данные,
эта ссылка она постоянная.

00:54:12.000 --> 00:54:18.988
И в случае, если вам нужна какая-то
информация либо с user-data, либо с meta-data

00:54:19.012 --> 00:54:26.000
конкретного инстанса, то вы можете во
время настройки обращаться по этому пути,

00:54:26.000 --> 00:54:30.000
это JSON документ, в котором
 соответствующие ключи,

00:54:30.000 --> 00:54:33.988
этот путь внутри JSON файла тоже 
постоянный, и вы можете эти

00:54:34.012 --> 00:54:38.000
данные использовать для
финальной настройки вашего инстанса.

00:54:38.000 --> 00:54:48.000
Также я рекомендую запомнить оба URL адреса,
так как они приходят на реальном АWS экзамене.

00:54:51.000 --> 00:54:57.000
Когда мы говорим про мониторинг Amazon EC2 инстанса,
то подразумевается сервис Amazon CloudWatch,

00:54:57.000 --> 00:55:02.640
это тот сервис, который сохраняет
 метрики, и вы в графическом виде

00:55:02.664 --> 00:55:09.000
можете отобразить изменения ваших
метрик и предпринимать некоторые шаги

00:55:09.000 --> 00:55:15.000
вручную, либо опять же настроить автоматическое
реагирование на соответствующее значение метрик.

00:55:17.000 --> 00:55:25.164
Как метрики могут выступать: нагруженность ваших
ядер процессора, нагрузка на ваши жесткие диски, т.е.

00:55:25.188 --> 00:55:34.000
операция записи, операция чтения, также
информация по загрузке канала сети, т.е. Network.

00:55:34.000 --> 00:55:42.000
Здесь важно отметить, что метрика RAM, т.е. загрузка
 оперативной памяти по умолчанию недоступна.

00:55:42.000 --> 00:55:46.613
Для того, чтобы эти метрики тоже передавать,
необходимо выполнить некоторые

00:55:46.637 --> 00:55:51.000
дополнительные действия,
и эти метрики также будут для вас доступны.

00:55:51.000 --> 00:55:58.000
Более того, в рамках CloudWatch есть два варианта
мониторинга: Basic Monitoring и Detailed Monitoring.

00:55:58.000 --> 00:56:03.988
При варианте Basic Monitoring
метрики передаются каждые

00:56:04.012 --> 00:56:10.000
5 минут, и эта опция бесплатная,
доступная по умолчанию.

00:56:10.000 --> 00:56:18.000
Вторая опция, если ваши метрики нужно передавать
чаще, либо вам нужно видеть большую детализацию.

00:56:18.000 --> 00:56:22.610
В этом случае Detailed Monitoring
позволяет вам передавать

00:56:22.634 --> 00:56:27.000
и хранить метрики по каждой 
минуте, т.е. ежеминутно.

00:56:29.000 --> 00:56:34.180
Следует отметить, что Detailed Monitoring,
она оплачивается отдельно, и информацию

00:56:34.204 --> 00:56:39.000
по оплате, по стоимости вы можете
посмотреть на соответствующей странице.

00:56:39.000 --> 00:56:43.251
Мы с вами добрались до конца
второй части нашей лекции.

00:56:43.275 --> 00:56:48.000
Давайте резюмируем и пройдемся
по самым основным моментам.

00:56:49.000 --> 00:56:55.000
Во время создания Amazon EC2 инстанса, можем выбрать
операционную систему как Linux, так и Windows.

00:56:56.000 --> 00:57:01.207
Мы создаем Amazon EC2 инстансы 
от некоторого AMI. AMI – это Amazon

00:57:01.231 --> 00:57:07.000
Machine Instance, который в себя 
включает помимо операционной системы,

00:57:07.000 --> 00:57:11.988
также дополнительные настройки,
установку неких программ и запуск

00:57:12.012 --> 00:57:17.000
определенных команд, т.е.
выступает как снапшот другого инстанса.

00:57:18.000 --> 00:57:23.000
Также во время создания Amazon EC2 инстанса, 
мы должны указать в каком VPC он будет создан.

00:57:23.000 --> 00:57:29.691
С точки зрения безопасности и
best practices security рекомендуется

00:57:29.715 --> 00:57:36.000
не использовать дефолтный VPC,
а создать собственный, новый.

00:57:37.000 --> 00:57:43.000
Для вашего выбора доступны различные типы инстансов,
а также есть целые семейства типов инстансов,

00:57:43.000 --> 00:57:49.488
чтобы подобрать максимально подходящую
конфигурацию с точки зрения количества

00:57:49.512 --> 00:57:56.000
ядер процессора, размера оперативной памяти,
возможности хранилищ и сетей.

00:57:58.000 --> 00:58:03.000
Для того чтобы контролировать доступ к вашим
инстансам, вы можете использовать security группы.

00:58:04.000 --> 00:58:09.000
Security группы работают на уровне инстансов
и выступают в роли виртуального firewall.

00:58:09.000 --> 00:58:17.000
Вы можете во время создания инстанса передать
список команд, который называется user-data,

00:58:17.000 --> 00:58:22.238
для того, чтобы финализировать
настройку и запустить те команды,

00:58:22.262 --> 00:58:28.000
которые могут быть успешно
выполнены только после запуска инстанса.

00:58:28.000 --> 00:58:34.971
Операционная система инстанса
может быть установлена на

00:58:34.995 --> 00:58:43.000
жесткие диски от Amazon EBS,
либо Amazon EC2 Instance Store.

00:58:45.000 --> 00:58:49.000
Те инстансы, которые использует Amazon
EC2 Instance Store не могут быть остановлены.

00:58:50.000 --> 00:58:55.000
Инстансы, которые используют жесткие
диски от Amazon EBS могут быть остановлены.

00:58:55.000 --> 00:58:59.529
Более того, в остановленном 
состоянии оплата за инстансы

00:58:59.553 --> 00:59:04.000
не производится, таким образом,
вы экономите деньги.

00:59:06.000 --> 00:59:10.488
Для того, чтобы мониторить ваши инстансы,
вы можете воспользоваться

00:59:10.512 --> 00:59:15.000
сервисом Amazon CloudWatch и
передавать туда соответствующие метрики.

00:59:18.000 --> 00:59:22.000
На этом мы завершаем вторую
часть и переходим к следующей части.

00:59:22.000 --> 00:59:26.000
Мы с вами добрались до третьей
части сегодняшней нашей лекции.

00:59:27.000 --> 00:59:36.000
Здесь мы с вами подробнее поговорим про вопросы
оплаты и оптимизации оплаты за сервис Amazon EC2.

00:59:38.000 --> 00:59:43.000
Давайте с вами подробнее разберем, какие модели 
оплаты существуют за сервис Amazon EC2.

00:59:44.000 --> 00:59:51.000
Самые первые – on-demand instances. Это вариант,
когда мы оплачиваем ровно за то, что мы используем.

00:59:52.000 --> 00:59:56.988
Представим, что мы заказали 
10 серверов на 2 часа для того, чтобы

00:59:57.012 --> 01:00:02.000
произвести некоторые расчеты,
после чего эти серверы нам не нужны.

01:00:03.000 --> 01:00:07.000
Это пример расчетов нагрузки, 
которые непостоянные или разовые.

01:00:07.000 --> 01:00:13.723
Таким образом on-demand позволит нам уже в
конце месяца получить счет на оплату, где будет

01:00:13.747 --> 01:00:21.000
сидеть 2 часа, умноженное на 10 инстансов,
на 20 часов определенного типа инстансов, не более.

01:00:22.000 --> 01:00:25.000
Таким образом мы оплатили 
ровно за то, что мы использовали.

01:00:25.000 --> 01:00:34.254
Здесь еще важный момент – это то, что в случае,
если мы работаем с операционной системой

01:00:34.278 --> 01:00:43.000
Amazon Linux или Ubuntu, то для нас
становится доступны посекундные тарификации.

01:00:44.000 --> 01:00:48.488
Таким образом, если мы запустили 
инстанс на 1 минуту и

01:00:48.512 --> 01:00:53.000
57 секунд, то ровно за это 
время мы произведем оплату.

01:00:53.000 --> 01:01:00.000
Следующая модель оплаты за
Amazon EC2 – это Reserved Instances.

01:01:01.000 --> 01:01:06.000
Эта модель оплаты идеально подходит для тех 
нагрузок, которые постоянны 24 на 7.

01:01:07.000 --> 01:01:13.162
В этом случае мы можем некоторую
часть вычислительных мощностей заказать

01:01:13.186 --> 01:01:19.000
через Reserved Instances и мы
получим определенные скидки от AWS.

01:01:19.000 --> 01:01:24.244
Как это работает?
Мы говорим, что мы готовы приобрести

01:01:24.268 --> 01:01:31.000
определенный объем вычислительных
мощностей на год либо на 3 года.

01:01:32.000 --> 01:01:40.000
Как только заключается договор, эти инстансы со 
скидкой нам передаются в использование.

01:01:40.000 --> 01:01:49.000
Есть некоторые нюансы касательно оплаты, а именно 
3 варианта, от этого зависит размер скидки.

01:01:50.000 --> 01:01:53.488
Самую наименьшую скидку мы 
получаем в случае, когда договор

01:01:53.512 --> 01:01:57.000
мы заключаем, при этом мы 
продолжаем оплачивать ежемесячно.

01:01:58.000 --> 01:02:04.000
Этот вариант называется NURI, т.е. No-upfront
Reserved Instances, наперед ничего не оплачиваем.

01:02:04.000 --> 01:02:08.259
Далее следующий вариант,
когда мы 50% периода, год либо

01:02:08.283 --> 01:02:13.000
3 года оплачиваем сразу,
оставшиеся 50% оплачиваем ежемесячно.

01:02:14.000 --> 01:02:18.000
Это называется Partial Upfront
Reserved Instances либо PURI.

01:02:19.000 --> 01:02:22.988
И третий вариант, когда мы 
получаем максимальную скидку в рамках

01:02:23.012 --> 01:02:27.000
Reserved Instances, это AURI, т.е.
All Upfront Reserved Instances.

01:02:27.000 --> 01:02:34.000
И как вы догадались, мы оплачиваем сразу
год либо 3 года работы наших инстансов наперед.

01:02:35.000 --> 01:02:39.000
Таким образом, ежемесячно нам 
производить оплату не нужно.

01:02:41.000 --> 01:02:45.988
Этот вариант идеально подходит 
для тех случаев, когда вы как бизнес

01:02:46.012 --> 01:02:51.000
выросли, у вас есть определенный 
объем нагрузки, постоянный 24 на 7.

01:02:51.000 --> 01:02:55.988
В этом случае, зная момент,
что у вас есть эти постоянные нагрузки, мы

01:02:56.012 --> 01:03:01.000
можем получить хорошую скидку от
AWS через модель Reserved Instances.

01:03:03.000 --> 01:03:10.000
Следующая модель оплаты за Amazon EC2 –
Spot Instances. Это достаточно интересная модель.

01:03:10.000 --> 01:03:14.892
Следует запомнить,
что Spot Instances дает максимальную

01:03:14.916 --> 01:03:20.624
возможную прибыль и скидка может 
достигать до 90%. Это говорит

01:03:20.648 --> 01:03:25.858
о том, что цены за Spot Instances 
за единицу времени может

01:03:25.882 --> 01:03:31.000
быть в 10 раз меньше,
чем цены за On-Demand Instances.

01:03:32.000 --> 01:03:38.000
Это очень интересное предложение,
которым следует воспользоваться.

01:03:38.000 --> 01:03:43.000
Но есть здесь определенные нюансы.
Spot Instances, откуда это все появилось?

01:03:44.000 --> 01:03:48.526
Так как дата-центры AWS достаточно 
большие помещения,

01:03:48.550 --> 01:03:54.000
в которых есть достаточно большой
объем вычислительных мощностей,

01:03:55.000 --> 01:03:58.000
частенько бывает, что какая-то 
часть серверов, она не нагружена,

01:03:58.000 --> 01:04:07.000
т.е. она не затребована никаким клиентом,
пользователем AWS, поэтому зря простаивают.

01:04:08.000 --> 01:04:12.000
Здесь AWS не растерялся и
предложил следующую модель.

01:04:13.000 --> 01:04:15.988
Он готов делать большие скидки 
за инстансы, которые не

01:04:16.012 --> 01:04:19.000
затребованы, не требуются 
для других моделей оплаты,

01:04:20.000 --> 01:04:26.000
для того чтобы он что-то мог зарабатывать,
пусть и меньше, но при этом зря деньги не терял.

01:04:26.000 --> 01:04:33.000
Это хорошо и клиентам, так как дает возможность еще
больше сэкономить, используя абсолютно то же железо.

01:04:34.000 --> 01:04:39.000
Момент такой, что Spot Instances
по сравнению с On-Demand Instances,

01:04:40.000 --> 01:04:45.000
они даются во владение,
которое контролируется и решается не нами.

01:04:46.000 --> 01:04:49.000
В случае с On-Demand Instances
мы заказываем инстансы,

01:04:49.000 --> 01:04:57.000
эти инстансы будут доступны для нас ровно до того
момента, пока мы сами не решим от них освободиться,

01:04:58.000 --> 01:05:03.000
т.е. terminated для того, чтобы освободить и
вернуть AWS, и больше за них не оплачивать.

01:05:04.000 --> 01:05:09.488
В случае со Spot Instances мы
используем до того момента,

01:05:09.512 --> 01:05:15.000
пока эти инстансы не затребуются
другой моделью оплаты.

01:05:15.000 --> 01:05:21.526
В этом случае приходит уведомление о том,
что этот Spot Instances не может быть дальше

01:05:21.550 --> 01:05:28.000
обслуживаться по этой модели и через
какое-то время отключается, есть такой нюанс.

01:05:29.000 --> 01:05:34.000
Таким образом, если у вас постоянные нагрузки,
полностью на Spot Instances она существовать

01:05:35.000 --> 01:05:41.000
не может. Spot Instances идеально подходят
для тех нагрузок, которые являются асинхронными.

01:05:41.000 --> 01:05:46.000
Представим, что у вас есть какие-то расчеты,
эти расчеты могут быть сделаны сейчас,

01:05:47.000 --> 01:05:52.000
могут быть сделаны в 2 часа ночи, могут быть в
любой момент прерваны и продолжены с того места,

01:05:53.000 --> 01:05:56.000
потому что у вас где-то каким-то
образом сохраняется состояние.

01:05:57.000 --> 01:06:00.000
Для подобных нагрузок Spot
Instances идеальный вариант.

01:06:01.000 --> 01:06:08.000
Есть еще вариант такой, когда вы скейлите,
через автоскейлинг настраиваете несколько групп.

01:06:08.000 --> 01:06:12.000
Часть группы это On-Demand Instances,
а часть инстансов это Spot Instances.

01:06:13.000 --> 01:06:17.000
В тот момент, когда Spot Instances доступны,
вы работаете со Spot Instances.

01:06:18.000 --> 01:06:24.000
Если получается так, что Spot Instances недоступны,
то AWS соответственно все Spot Instances забирает

01:06:25.000 --> 01:06:30.000
себе и автоматически автоскейлинг
срабатывает и поднимает уже On-Demand Instances.

01:06:30.000 --> 01:06:33.988
По цене, естественно, дороже,
но как минимум благодаря этой

01:06:34.012 --> 01:06:38.000
архитектуре есть возможность
значительные суммы экономить

01:06:39.000 --> 01:06:43.000
путем переброски вычислительных
мощностей на Spot Instances.

01:06:44.000 --> 01:06:48.488
Это требует дополнительной 
настройки, нужен специалист

01:06:48.512 --> 01:06:53.000
и нужно подходить к задаче
с соответствующим расчетом.

01:06:53.000 --> 01:06:59.000
Если выходит так, что выгоднее это настроить,
то бизнесу это нужно предложить и это сделать.

01:07:00.000 --> 01:07:05.000
Если же выгода от этого небольшая, то 
рекомендуется оставаться на On-Demand Instances.

01:07:07.000 --> 01:07:11.000
Как происходит
ценообразование в Spot Instances?

01:07:14.000 --> 01:07:21.000
Оно организовано неким аукционом, т.е.
вы предлагаете свою цену, другой пользователь AWS

01:07:21.000 --> 01:07:25.488
также в рамках Spot Instances
предлагает свою цену и AWS,

01:07:25.512 --> 01:07:30.000
естественно, выбирает тот вариант,
который максимальный

01:07:31.000 --> 01:07:33.988
для того, чтобы свою прибыль увеличить,
но при этом эта цена

01:07:34.012 --> 01:07:37.000
может быть в несколько раз меньше,
чем On-Demand Instances.

01:07:39.000 --> 01:07:45.000
Таким образом, все зависит от региона,
например, для региона North Virginia,

01:07:45.000 --> 01:07:51.000
который является самым популярным,
самым насыщенным AWS регионом.

01:07:52.000 --> 01:07:57.000
В нем маловероятно, что будет возможность 
использовать Spot Instances,

01:07:58.000 --> 01:08:03.000
а, например, для регионов, которые менее популярны,
Spot Instances может быть отличным вариантом,

01:08:04.000 --> 01:08:09.000
который ввиду того, что очень мало 
пользователей сидят в этом регионе,

01:08:09.000 --> 01:08:13.570
может получится так, что ваши 
постоянные нагрузки большую

01:08:13.594 --> 01:08:20.000
часть времени отрабатывают по модели Spot 
Instances, при этом получаете максимальные скидки.

01:08:23.000 --> 01:08:28.000
Следующие две модели оплаты
привязаны к железу Amazon EC2 инстанса,

01:08:29.000 --> 01:08:31.000
называются Dedicated Hosts 
и Dedicated Instances.

01:08:31.000 --> 01:08:35.988
Чем отличаются? Dedicated Hosts позволяет 
привязаться к некоторым

01:08:36.012 --> 01:08:41.000
характеристикам этого железа,
для того, чтобы применить лицензии.

01:08:42.000 --> 01:08:48.000
Например, лицензии баз данных Oracle привязываются
к количеству ядер на определенном железе.

01:08:49.000 --> 01:08:52.000
В этом случае, чтобы применить эту лицензию,
вы можете использовать Dedicated Hosts.

01:08:52.000 --> 01:09:02.000
Dedicated Instances – это тот кейс, когда в
облаке вам выделяется отдельный сервер железа,

01:09:03.000 --> 01:09:10.000
в котором нагрузки к других
пользователей AWS не допускаются.

01:09:11.000 --> 01:09:13.988
Таким образом, вы являетесь 
владельцем, арендуете это

01:09:14.012 --> 01:09:17.000
железо полностью под себя,
и никто другой там не будет.

01:09:17.000 --> 01:09:25.000
Эти инстансы бывают нужны для
некоторых регуляторных требований.

01:09:26.000 --> 01:09:32.035
Например, требуется, чтобы эти нагрузки,
ввиду некоторой специфики

01:09:32.059 --> 01:09:38.000
данных, либо обработки,
должны запускаться на отдельном железе.

01:09:39.000 --> 01:09:41.000
В этом случае вам необходимо
использовать Dedicated Instances.

01:09:41.000 --> 01:09:47.000
Dedicated Instances, ввиду своей специфики,
являются одними из самых дорогих,

01:09:48.000 --> 01:09:54.000
потому что под вас персонально выделяется конкретное
железо, и это достаточно дорогостоящая услуга.

01:09:55.000 --> 01:09:58.244
Но также следует отметить,
что Dedicated Instances достаточно

01:09:58.268 --> 01:10:02.000
редко требуются, опять же,
ввиду некоторых регуляторных требований.

01:10:02.000 --> 01:10:10.000
Во всех других нормальных случаях
Оn-demand instances будет более чем достаточно.

01:10:11.000 --> 01:10:15.000
И последний вариант оплаты –
это Scheduled Reserved Instances.

01:10:16.000 --> 01:10:21.000
Здесь следует сразу отметить, что Scheduled
Reserved Instances на текущий момент недоступны.

01:10:21.000 --> 01:10:32.000
Ввиду того, что вопросы внутри реального экзамена
AWS обновляются, либо могут обновляться нечасто,

01:10:33.000 --> 01:10:39.000
то вопросы, связанные с Scheduled Reserved Instances
в рамках сервиса Amazon EC2, могут еще приходить.

01:10:40.000 --> 01:10:44.488
Поэтому мы этот момент сейчас 
разберем, но при этом вы

01:10:44.512 --> 01:10:49.000
для себя имейте в виду,
внутри AWS на текущий момент

01:10:49.000 --> 01:10:54.000
этой опции на сегодняшний момент не существует.
Что же такое Scheduled Reserved Instances?

01:10:55.000 --> 01:11:04.000
Это опция, которая позволяет вам каждый день либо
определенный день недели, еженедельно, ежемесячно,

01:11:05.000 --> 01:11:15.000
по какому-то расписанию определенные
часы резервировать под себя на один год.

01:11:15.000 --> 01:11:17.988
Таким образом, вы производите 
оплату на один год, указываете

01:11:18.012 --> 01:11:21.000
какое время, какие инстансы
 должны быть для вас доступны.

01:11:22.000 --> 01:11:24.000
И в этом случае они в
этот момент запускаются.

01:11:25.000 --> 01:11:31.000
И вы, опять же, так же как и Reserved Instances, по
некоторой скидке производите оплату за эти инстансы.

01:11:36.000 --> 01:11:42.000
На следующих двух слайдах резюмируем все, что было 
сказано по моделям оплаты за сервисы Amazon EC2.

01:11:42.000 --> 01:11:47.000
Если мы говорим On-demand instances,
это тот вариант, который максимально гибкий.

01:11:48.000 --> 01:11:53.000
Spot instances это тот вариант,
который удачно подходит для асинхронных нагрузок.

01:11:54.000 --> 01:12:04.000
Reserved instances – это хороший вариант модели
оплаты, когда у нас есть постоянные нагрузки 24 на 7.

01:12:04.000 --> 01:12:10.488
И мы используем Dedicated hosts в том случае,
когда по некоторым регуляторным

01:12:10.512 --> 01:12:17.000
требованиям нам необходимо использовать
только самим одно определенное железо.

01:12:18.000 --> 01:12:23.488
Если мы говорим про use cases,
On-demand instances используются для

01:12:23.512 --> 01:12:29.000
кратковременных динамических нагрузок,
которые сложно предугадать.

01:12:30.000 --> 01:12:31.000
В этом случае On-demand
подходят идеально.

01:12:31.000 --> 01:12:39.000
Другой вариант – это мы используем On-demand
instances для среды разработки либо тестирования,

01:12:40.000 --> 01:12:44.000
т.е. разработка происходит не всегда постоянно,
тестирование тоже происходит не всегда постоянно.

01:12:45.000 --> 01:12:49.629
Поэтому после того, как мы 
провели этап разработки и тестирования, и эти

01:12:49.653 --> 01:12:55.000
инстансы зря простаивают, мы можем их
отключить и при этом не терять зря деньги.

01:12:55.000 --> 01:13:00.488
Spot instances – это тот кейс,
когда у нас асинхронные нагрузки, мы можем

01:13:00.512 --> 01:13:06.000
наши расчеты, нагрузки в любой момент
остановить и продолжить с того места.

01:13:07.000 --> 01:13:11.000
Оно может отрабатывать ночью,
утром, не имеет значения.

01:13:12.000 --> 01:13:17.488
И также один из примеров,
это когда нам необходимо запустить

01:13:17.512 --> 01:13:23.000
некоторые расчеты на больших
объемах вычислительных мощностей.

01:13:23.000 --> 01:13:28.000
В этом случае Spot instances
даст некоторую выгоду от объемов.

01:13:31.000 --> 01:13:36.000
Следующий вариант – это Reserved instances,
когда у нас есть постоянные нагрузки 24 на 7.

01:13:37.000 --> 01:13:42.191
Один из вариантов использования –
это если компания большая, у нее есть

01:13:42.215 --> 01:13:48.000
возможность оплатить наперед,
при этом знать, что он получит хорошие скидки.

01:13:49.000 --> 01:13:51.000
В этом случае можно
использовать Reserved instances.

01:13:51.000 --> 01:13:54.000
Другой вариант – это когда мы
настраиваем Disaster recovery,

01:13:55.000 --> 01:13:58.092
т.е. Disaster recovery это когда
 наша инфраструктура

01:13:58.116 --> 01:14:02.000
развернута на двух регионах и 
один основной, другой резервный.

01:14:03.000 --> 01:14:08.000
В случае когда происходит какая-то проблема с
целым AWS регионом, что происходит очень редко.

01:14:09.000 --> 01:14:16.000
Но мы говорим, что наши нагрузки, инфраструктура
должна быть 100% всегда доступна для клиентов,

01:14:16.000 --> 01:14:24.000
потому как потеря клиентов ввиду недоступности на
некоторое время может обанкротить всю компанию.

01:14:25.000 --> 01:14:27.000
Поэтому это достаточно 
критичные нагрузки.

01:14:28.000 --> 01:14:36.000
В этом случае компания разрабатывает
и поддерживает DR, т.е. disaster recovery.

01:14:36.000 --> 01:14:42.712
И если компании нужно гарантировать,
что в основном либо резервном регионе

01:14:42.736 --> 01:14:50.000
должен быть гарантированный объем
вычислительных мощностей, наперед это зная,

01:14:51.000 --> 01:14:57.000
в этом случае мы можем через reserved instances
эти вычислительные мощности забронировать,

01:14:58.000 --> 01:15:00.000
и как только они понадобятся их запускать.

01:15:00.000 --> 01:15:05.000
Либо держать в постоянно запущенном состоянии,
зная, что мы с какой-то скидкой получили,

01:15:06.000 --> 01:15:10.988
при этом мы 100% уверены,
что в момент переключения эти инстансы для

01:15:11.012 --> 01:15:16.000
нас будут доступны, и мы сможем 
обработать все запросы наших клиентов.

01:15:17.000 --> 01:15:19.000
Последний вариант
– это Dedicated Hosts.

01:15:19.000 --> 01:15:25.488
Один из примеров использования, если у нас
есть уже купленная лицензия, мы можем опять

01:15:25.512 --> 01:15:32.000
же в зависимости от ситуации использовать
свои лицензии, при этом сэкономить на этом.

01:15:34.000 --> 01:15:39.000
Другой use case – это когда нам необходимо
следовать некоторым регуляторным требованиям.

01:15:39.000 --> 01:15:52.000
В этом случае работаем на определенном железе,
на который не допускаются другие чужие нагрузки.

01:15:53.000 --> 01:15:57.567
Давайте резюмируем все то,
что было сказано на нашей лекции

01:15:57.591 --> 01:16:02.000
касательно оптимизации
расходов на сервисе Amazon EC2.

01:16:02.000 --> 01:16:06.488
Оно состоит из четырех направлений,
это Right size, Increase elasticity,

01:16:06.512 --> 01:16:11.000
 Optimal pricing model и 
Optimize storage choices.

01:16:12.000 --> 01:16:18.000
Давайте подробнее остановимся на каждой из этих
направлений. Первое направление – это Right size.

01:16:19.000 --> 01:16:25.000
Идея - нам необходимо подобрать тип инстанса,
который максимально подходит под наши нагрузки.

01:16:25.000 --> 01:16:29.736
Amazon предоставляет более 60
различных типов инстансов и размеров,

01:16:29.760 --> 01:16:35.000
поэтому определенно мы сможем найти
 тот вариант, который устраивает нас.

01:16:36.000 --> 01:16:40.488
Понятно, что этот процесс не одноразовый,
вы не можете угадать либо

01:16:40.512 --> 01:16:45.000
по каким-либо факторам определить
какой вариант определенно ваш,

01:16:46.000 --> 01:16:48.000
до того как ваши
нагрузки начнутся в облаке.

01:16:48.000 --> 01:16:53.488
Происходит это следующим образом,
вы выбираете тот вариант типа инстанса, который

01:16:53.512 --> 01:16:59.000
максимально дешевый и который будет
обслуживать ваши нагрузки, с этим вы начинаете.

01:17:00.000 --> 01:17:03.988
Далее со временем вы периодически
проверяете ваши метрики,

01:17:04.012 --> 01:17:08.000
т.е. вы передаете ваши 
метрики в сервис Amazon CloudWatch

01:17:09.000 --> 01:17:13.021
и видите какая идет нагрузка на процессор,
какая идет нагрузка

01:17:13.045 --> 01:17:19.000
на оперативную память, хранилище и сеть,
и делаете выводы. Приведу простой пример.

01:17:20.000 --> 01:17:24.988
Представьте, что у вас есть
 instance type, у которого CPU

01:17:25.012 --> 01:17:30.000
нагружена на 70%,
а оперативная память нагружена на 10%.

01:17:31.000 --> 01:17:35.210
Здесь мы видим явно,
что наше приложение больше использует

01:17:35.234 --> 01:17:39.000
процессорные мощности,
нежели оперативную память.

01:17:39.000 --> 01:17:44.510
Таким образом,
мы можем выбрать тип инстанса, который

01:17:44.534 --> 01:17:51.000
меньше, но при этом из семейства, 
который CPU, т.е. Type-C.

01:17:52.000 --> 01:17:55.763
В этом случае мы можем сэкономить
на размере инстанса, потому что он

01:17:55.787 --> 01:18:00.000
будет меньше, но при этом у него
оперативной памяти будет гораздо меньше.

01:18:00.000 --> 01:18:08.000
Исходя из того, что нагрузки не требует оперативной
памяти, этот вариант тип инстанса больше подходит.

01:18:09.000 --> 01:18:14.132
Он справляется полностью с
нагрузками нашими текущими, при этом мы

01:18:14.156 --> 01:18:20.000
оплачиваем меньше, нежели мы оплачивали с 
предыдущим вариантом инстанса.

01:18:21.000 --> 01:18:24.000
Второе направление – Increase elasticity.

01:18:24.000 --> 01:18:29.000
Здесь говорится про то, что мы должны
 правильно настроить наш автоскейлинг.

01:18:30.000 --> 01:18:35.488
Автоскейлинг – это когда наша инфраструктура, это
некий живой абстрактный организм, когда

01:18:35.512 --> 01:18:38.011
в зависимости от нагрузки 
количество инстансов, которые

01:18:38.035 --> 01:18:41.000
обрабатывает ваш трафик,
либо увеличивается, либо уменьшается.

01:18:42.000 --> 01:18:45.113
Представим, что вы какой-то 
интернет-магазин и ваши

01:18:45.137 --> 01:18:49.000
нагрузки в основном после 6
часов вечера до 10 часов вечера.

01:18:49.000 --> 01:18:53.094
В этом случае, система,
наблюдая за метриками на ваших инстансах,

01:18:53.118 --> 01:18:57.020
определяет, что сейчас нагрузка растет,
нагрузка на сервера

01:18:57.044 --> 01:19:00.745
растет, поэтому нам необходимо 
после определенного порога

01:19:00.769 --> 01:19:05.000
запустить дополнительные сервера,
чтобы это все работало верно.

01:19:05.000 --> 01:19:12.186
В случае, когда мы опускаемся ниже какого-то
другого второго порога, например, если нагрузка

01:19:12.210 --> 01:19:19.000
на наши сервера меньше 10%, то в этом
случае мы видим, что нагрузки как таковой нет.

01:19:20.000 --> 01:19:27.000
Поэтому мы можем лишние инстансы терминейтнуть
и вернуть обратно AWS, чтобы за них не платить.

01:19:27.000 --> 01:19:38.000
Таким образом, размер инфраструктуры уменьшается
и увеличивается в зависимости от нагрузки.

01:19:39.000 --> 01:19:44.000
Таким образом, вы оплачиваете 
только за те реальные нагрузки

01:19:44.000 --> 01:19:49.988
и у вас нет состояния, когда 
некоторые ваши ресурсы, инстансы просто так

01:19:50.012 --> 01:19:56.000
простаивают, и вы фактически впустую
оплачиваете за его использование.

01:19:58.000 --> 01:20:01.000
Третье направление – это Оptimal pricing model.

01:20:02.000 --> 01:20:07.000
Мы с вами ранее проговорили, какие модели
оплаты существуют для сервиса Amazon EC2.

01:20:07.000 --> 01:20:11.988
Таким образом, в зависимости от 
ваших нагрузок, вы можете подобрать ту

01:20:12.012 --> 01:20:17.000
модель оплаты, которая будет для вас
максимально удобной и эффективной.

01:20:18.000 --> 01:20:21.000
При этом вы несете минимальные
расходы на содержание этой инфраструктуры.

01:20:24.000 --> 01:20:33.000
Следующий вариант – это оптимизация нашего storage,
т.е. хранилища. Здесь подразумевается три момента.

01:20:33.000 --> 01:20:39.000
Первый момент – это то, что нам необходимо
подбирать размер жестких дисков оптимальными,

01:20:40.000 --> 01:20:45.988
т.е. для инстанса, для которого
требуется 20 ГБ на основном жестком диске,

01:20:46.012 --> 01:20:52.000
нет необходимости делать большой
запас и создавать жесткий диск в 500 ГБ.

01:20:53.000 --> 01:20:56.488
Вы можете создать с небольшим запасом,
также вы вспомните, что

01:20:56.512 --> 01:21:00.000
у вас есть сервис CloudWatch,
куда вы пересылаете ваши метрики,

01:21:00.000 --> 01:21:05.000
и вы видите нагруженность ваших жестких дисков.
В тот момент, когда достигается некий порог,

01:21:06.000 --> 01:21:10.141
например, 90% жесткого диска заполнено,
вы можете произвести какое-то

01:21:10.165 --> 01:21:14.000
действие, чтобы автоматически 
увеличить размер жестких дисков.

01:21:15.000 --> 01:21:19.988
Либо сообщить по любым каналам,
будь то e-mail либо SMS, о том, что

01:21:20.012 --> 01:21:25.000
жесткий диск переполнен,
необходимо предпринять какое-то действие.

01:21:25.000 --> 01:21:29.078
В этом случае, вы можете самостоятельно 
подключиться, либо увеличить,

01:21:29.102 --> 01:21:33.000
либо посмотреть, почему такое произошло,
если это не ожидалось.

01:21:34.000 --> 01:21:38.000
Второй пункт – это тип EBS volume.

01:21:39.000 --> 01:21:42.488
На следующих лекциях мы с вами пройдем,
какие типы EBS volume

01:21:42.512 --> 01:21:46.000
бывают и в каких случаях какой
из типов правильнее выбрать.

01:21:46.000 --> 01:21:54.000
И третий вариант – это то, что у вас есть некоторые
снапшоты, т.е. бэкапы ваших жестких дисков.

01:21:55.000 --> 01:22:04.000
Это требуется для того, чтобы в случае возникновения
каких-то проблем вы могли легко восстановиться.

01:22:05.000 --> 01:22:06.000
Это нормальная практика – 
делать бэкапы.

01:22:07.000 --> 01:22:10.000
Но при этом хранить бэкапы пятилетней
давности не всегда рационально.

01:22:10.000 --> 01:22:14.051
Достаточно хранить бэкапы, опять же,
в зависимости от ваших бизнес

01:22:14.075 --> 01:22:19.000
требований, недельной давности,
месячной давности, может быть, года давности,

01:22:20.000 --> 01:22:24.988
но при этом с некоторыми сдвигами по времени, т.е.
вы храните один бэкап, который год назад

01:22:25.012 --> 01:22:30.000
был создан, один бэкап, который был создан
месяц назад, чтобы туда можно было откатиться,

01:22:31.000 --> 01:22:37.000
и семь бэкапов на последние семь дней. Это 
максимально оптимальный вариант хранения бэкапов.

01:22:37.000 --> 01:22:43.000
Все остальные бэкапы должны быть удалены, потому
что за бесполезные бэкапы вы также оплачиваете,

01:22:44.000 --> 01:22:45.000
так как это отдельно
созданный ресурс внутри AWS.

01:22:46.000 --> 01:22:49.000
Чем меньше лишних ресурсов,
тем меньше вы, соответственно, оплачиваете.

01:22:54.000 --> 01:23:00.000
Следует отметить, что процесс оптимизации
расходов в облаке – это не разовый процесс.

01:23:00.000 --> 01:23:03.988
Это не связано, опять же, напрямую 
с облаком. Облако лишь

01:23:04.012 --> 01:23:08.000
дает возможность видеть все
ваши ресурсы как на ладони.

01:23:09.000 --> 01:23:16.000
Но при этом проблема того, что нагрузки 
меняются, новые ресурсы создаются,

01:23:17.000 --> 01:23:21.000
она существуют как в облаке, так и 
на локальном дата-центре.

01:23:21.000 --> 01:23:30.000
Поэтому идея в том, чтобы, имея в наличии
максимальную видимость на стороне облака,

01:23:31.000 --> 01:23:39.000
у вас есть возможность все измерить, периодически
мониторить и делать некоторые шаги по улучшению.

01:23:40.000 --> 01:23:47.000
После того, как вы проделали это улучшение,
все эти шаги циклически повторять,

01:23:47.000 --> 01:23:53.000
потому как инфраструктура постоянно меняется,
команд у вас разработки может быть много,

01:23:54.000 --> 01:23:59.000
и вся эта инфраструктура, это как живой организм,
она постоянно в динамике, что-то с ней происходит.

01:24:00.000 --> 01:24:03.488
Поэтому правильно измерять,
мониторить, отслеживать изменения,

01:24:03.512 --> 01:24:07.000
видеть текущее состояние и
предпринимать какие-то действия,

01:24:08.000 --> 01:24:10.661
при этом все эти шаги
периодически повторять – это

01:24:10.685 --> 01:24:14.000
правильный процесс работы по
оптимизации расходов в облаке.

01:24:14.000 --> 01:24:19.000
Все необходимые ресурсы,
возможности облако для нас предоставляет.

01:24:20.000 --> 01:24:23.000
Одним из моментов,
которые следует отметить – это тегирование.

01:24:24.000 --> 01:24:27.649
Благодаря тегированию вы
сможете ваши ресурсы логически

01:24:27.673 --> 01:24:32.000
подразделять для того,
чтобы работать уже с меньшими группами,

01:24:33.000 --> 01:24:35.000
так как с меньшими
группами работать легче.

01:24:36.000 --> 01:24:42.000
Приведу пример, если вы будете тегировать
все ваши ресурсы с ID вашего департамента,

01:24:42.000 --> 01:24:50.000
то вы будете знать, какому департаменту
относятся те или иные проблемные ресурсы.

01:24:51.000 --> 01:24:55.000
Вы знаете, куда адресно обратиться для того,
чтобы эту проблему устранить.

01:24:56.000 --> 01:24:59.717
Более того, помимо тегинга есть 
ряд интересных сервисов,

01:24:59.741 --> 01:25:04.000
которые позволяют вам управлять,
оптимизировать ваши расходы.

01:25:04.000 --> 01:25:11.000
Вы всегда можете одним запросом Google найти эти
ресурсы, почитать про них и начать их использовать.

01:25:14.000 --> 01:25:20.000
Мы с вами добрались до конца нашей третьей части,
а также нашей сегодняшней лекционной сессии.

01:25:21.000 --> 01:25:23.000
Давайте пройдемся по
самым основным моментам.

01:25:24.000 --> 01:25:28.000
Мы разобрали, какие модели оплаты
существуют для сервиса Amazon EC2.

01:25:29.000 --> 01:25:34.109
Это On-Demand Instances, Reserved Instances,
Spot Instances, Dedicated Instances и

01:25:34.133 --> 01:25:40.000
Dedicated Host, а также Scheduled Reserved Instances,
которые на текущий момент недоступны.

01:25:41.000 --> 01:25:45.169
Мы также с вами узнали,
что spot instances является наиболее

01:25:45.193 --> 01:25:50.000
выгодным вариантом в случае,
если у нас определенный тип нагрузок.

01:25:51.000 --> 01:25:56.688
Spot instances могут быть прерваны
с двухминутной нотификацией, т.е.

01:25:56.712 --> 01:26:02.400
уведомлением о том, что через 
2 минуты этот инстанс будет отключен.

01:26:03.400 --> 01:26:06.192
Соответственно, вам нужно 
строить архитектуру таким

01:26:06.216 --> 01:26:09.400
образом, чтобы адекватно 
реагировать на эти отключения.

01:26:10.400 --> 01:26:14.400
При этом вы можете получить до 90% скидки,
используя Spot Instances.

01:26:15.400 --> 01:26:23.400
Далее мы разобрали четыре направления, которые
следует рассмотреть для оптимизации ваших затрат

01:26:23.400 --> 01:26:31.084
в облаке, связанных с сервисом Amazon EC2. Это
Right Sizing, дальше это Increasing Elasticity, т.е.

01:26:31.108 --> 01:26:38.400
правильное использование автоскейлинга.
Далее Optimal Pricing Model, т.е. выбрать ту модель,

01:26:39.400 --> 01:26:42.719
которая оптимально подходит 
под наши нагрузки. И четвертое –

01:26:42.743 --> 01:26:46.400
это оптимизация хранилища, т.е.
есть некоторые нюансы по работе

01:26:46.400 --> 01:26:55.400
с нашими хранилищами. Про сервисы хранения
storage мы разберем и подробно поговорим с вами

01:26:56.400 --> 01:27:02.400
на следующих наших лекционных занятиях. На этом
мы подошли к концу сегодняшнего лекционного занятия.

01:27:03.400 --> 01:27:10.400
Мы подробнее разобрали сервис Amazon EC2, а именно
посмотрели, какие шаги нужно предпринять, чтобы

01:27:10.400 --> 01:27:14.423
создать новый Amazon EC2 инстанс.
Далее рассмотрели, какие

01:27:14.447 --> 01:27:18.400
модели оплаты существуют,
а также познакомились с теми

01:27:19.400 --> 01:27:25.400
направлениями работ, которые позволяют нам
оптимизировать наши расходы на сервис Amazon EC2.

01:27:25.400 --> 01:27:31.699
На этом мы завершаем нашу сегодняшнюю сессию.
Спасибо за внимание.

01:27:31.723 --> 01:27:39.400
 До встречи!
Увидимся с вами на следующих наших лекциях!