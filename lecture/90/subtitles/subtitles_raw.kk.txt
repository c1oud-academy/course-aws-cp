Қайырлы күн, құрметті студенттер! Сізді келесі дәрісте көруге қуаныштымын. Біз алдыңғы тақырыпты жалғастырамыз, атап айтқанда есептеу. Бүгін бізде екінші бөлім бар. Сонымен, бастайық.
Төртінші бөлімде контейнерлік қызметтер, яғни Контейнерлік қызметтер туралы сөйлесеміз. Әрі қарай, бесінші бөлімде біз AWS Lambda туралы сөйлесеміз. Ал соңғы, алтыншы бөлім, AWS Elastic Beanstalk туралы.
Төртінші бөлім — Контейнерлермен байланысты қызметтер. Контейнерлерге жетпес бұрын, есіңізде болсын. Бізде физикалық сервер бар. AWS деректер орталықтарында ең қуатты физикалық серверлер физикалық түрде белгілі бір сайтта орналасқан. Содан кейін, виртуалдандырудың арқасында бұл физикалық виртуалды сервер тәуелсіз Amazon EC2 виртуалды даналарына бөлінеді. Осылайша, Amazon EC2 процессорлық ядролардың санында, сондай-ақ жедел жадтың мөлшерінде ерекшеленетін 50-ден астам түрлі түрлерді сұрай алады.
Енді одан әрі қарай жүріп, амалдық жүйе деңгейінде виртуалдандырудың тағы бір нұсқасы бар, онда біз амалдық жүйені орнатып, амалдық жүйенің үстіне оқшауланған контейнерді іске қосамыз, ол жерде сіз операциялық жүйені құру кезінде белгілі бір амалдық жүйені көрсетесіз. Контейнер туралы сөйлескен кезде контейнер белгілі бір амалдық жүйеге байланады және сол операциялық жүйенің астында жұмыс істейді. Бірақ қалғанының бәрі, атап айтқанда кітапханалар, барлық конфигурациялар, код, жұмыс уақыты, сіздің бағдарламаңыздың іске қосылу ортасы оқшауланған және өзін-өзі қамтамасыз етеді. Осылайша, біз контейнер қайталанатын нәрсе деп айтамыз, яғни. ол оңай портативті, яғни. сіз дайын контейнерді алып, оны көшіріп, оны басқа жерде, басқа ортада іске қосасыз және ол дәл осылай жұмыс істейді, өйткені ол сізге қажет нәрсенің бәрін қамтиды. Тағы бір маңызды мәселе - виртуалды машиналар контейнерлерге қарағанда әлдеқайда баяу басталады.
Енді жалғастырайық. Контейнерлерді құру және олармен жұмыс істеу үшін бізге нақты бағдарлама қажет. Контейнерлерді жасауға мүмкіндік беретін ең танымал бағдарлама - Docker, яғни Docker контейнері. Docker контейнері - бұл сіздің бағдарламаңызды іске қосу және дұрыс жұмыс істеуі үшін қажет нәрсенің бәрін қамтитын ұйым, атап айтқанда кітапханалар, жүйелік құралдар, код және сіздің бағдарламаңыз үшін іске қосу ортасы.
Біз контейнердің қарапайым терминдерде қандай екендігі туралы әңгімелестік. Енді сәл тереңірек қазып алайық. Виртуалды машиналар туралы сөйлескен кезде, оң жағында сіз әртүрлі кітапханалармен жұмыс істейтін үш түрлі қосымшаны орналастырудың мысалын көресіз. Олар әр түрлі түстермен арнайы ерекшеленеді, яғни 1-қосымша, 2-қосымша, 3-қосымша. Олардың әрқайсысы Amazon EC2 данасында жұмыс істейді. Сонымен бірге, сіз амалдық жүйенің бір-бірінен оқшауланғанын көре аласыз, яғни VM1, Virtual Machine 1, өзінің операциялық жүйесі бар, ол мүмкін немесе мүмкін емес. Бұл қосымшаның өзіне байланысты, яғни. виртуалды машина гипервизордың үстінде жұмыс істейді.
Енді виртуалдандырудың келесі деңгейі - гипервизордан жоғары контейнерлер, және бізде Amazon EC2 данасының операциялық жүйе деңгейі бар. Сонымен, бір Amazon EC2 данасында, сол жағында, сіз үш түрлі контейнерді іске қосқанымызды көре аласыз. Әр контейнерде тек бағдарлама ғана емес, сонымен қатар әр қосымшаның дұрыс жұмыс істеуі үшін қажет барлық нәрсе бар. Сонымен бірге, сіз қосымшалар бір-бірімен байланысты емес әр түрлі кітапханалармен жұмыс істейтінін көре аласыз. Ең бастысы - дұрыс амалдық жүйе болуы. Бұл жерде контейнерлер әртүрлі операциялық жүйелерде жұмыс істеуге жеткілікті икемді екенін атап өткен жөн. Негізгі талап - бәрі жүзеге асырылуы, барлық қажетті мүмкіндіктер және белгілі бір контейнер үшін қажет функционалдылық. Бізде Linux амалдық жүйесінің әртүрлі нұсқалары бар. Біздің контейнерге Linux амалдық жүйесінің екі түрлі нұсқасы бар функционалдылық қажет болған жағдайда, біз бұл контейнерді операциялық жүйенің екі нұсқасында да сәтті іске қосуға болады деп айтамыз. Осылайша, сіз контейнерді басқа амалдық жүйедегі кез-келген басқа компьютерде жұмыс істей аласыз. Бұл контейнерлермен жұмыс істеу кезінде икемділік береді.
Тағы бір мәселе, біз бір EC2 данасында өте кішкентай контейнерлерді іске қоса аламыз, ал бір EC2 данасы бір уақытта жүздеген түрлі контейнерлерді ұстай алады. Әр контейнер белгілі бір қосымшаға қызмет етеді.
Енді AWS-ке көшу, сіз контейнерлермен жұмыс істеу үшін Amazon EC2 данасын іске қосып, докер қосымшаларын орнатып, контейнерлермен жұмыс істей аласыз деп жоспарлаған боларсыз. Ия, бұл бұлттағы контейнерлермен жұмыс істеудің дұрыс әдісі, бірақ бұл жақсы емес. Ең жақсы нұсқа, яғни Amazon Elastic Container Service, қысқартылған ECS нұсқасында жиі кездеседі және контейнерлермен ыңғайлы түрде жұмыс істеуге мүмкіндік береді. Сонымен, сіз осы қызметті пайдаланып бірнеше секунд ішінде 10,000-ға дейін контейнерлерді іске қоса аласыз. Сондай-ақ, контейнерлерді іске қосу және басқару үшін әртүрлі әрекеттер мен кестелерді ыңғайлы түрде бақылауға, басқаруға, тіпті теңшеуге болады. Сондай-ақ, мұнда ECS тек сұраныс бойынша EC2 даналарын ғана емес, сонымен қатар Spot даналары мен сақталған даналарын да қолдайтынын атап өткен жөн.
Мысалды қарастырайық. Бізде тапсырма анықтамасы бар. Тапсырма анықтамасы - бұл сіздің контейнеріңіздің сипаттамасы. Онда сіздің қосымшаңыз туралы ақпарат бар, сіз қандай порттарды қолданасыз және сіз қолданбаның жұмыс істеуі үшін қосымша параметрлерді орнатуыңыз мүмкін. Осы мысалда біз тапсырма анықтамасын жасадық деп елестетіп көрейік, екі контейнер А және Контейнер В сипатталған Енді біздің инфрақұрылымның бөлігі ретінде бізге үш контейнер А даналары және екі контейнер B даналары қажет. Сондықтан біз былайша айтқанда, тапсырманы, немесе контейнер данасын істеп жатырмыз. Сонымен, біз контейнерлеріміз Amazon ECS-ке тапсырма арқылы отыратын осы кішкентай жағдайларды тапсырамыз. Және біз үшін бұл қызмет, ECS қызметіне қосымша кіруімізге байланысты, бұл контейнерлерді орналастырады және оларды біздің ECS кластерімізде басқарады. Кластерлік ECS - бұл топ ретінде іске қосылатын Amazon EC2 даналарының жиынтығы. Осылайша, Amazon ECS әрбір Amazon EC2 данасында агент орнатады. Бұл агент контейнерлеріңізді осы Amazon EC2 даналарына орналастыруға көмектеседі.
ECS кластері туралы сөйлескен кезде бізге үш нұсқа қол жетімді. Бірінші нұсқа - біз контейнерлерімізді жасап, осы контейнердің қаншалықты үлкен болуы керектігін, осы контейнерлердің қаншасын құратынымызды, сондай-ақ желіні конфигурациялау үшін қажетті параметрлерді және осы контейнерлердің бір-бірімен өзара әрекеттесуін сипаттайтын кезде, яғни Желіге қатысты параметрлер. Бұл жағдайда біз оң жақтағы жағдай туралы айтып отырмыз және Amazon ECS және AWS Fargate комбинациясының арқасында біз тек контейнерлерімізге назар аудара аламыз. Қалғанның бәрі, яғни операциялық жүйені басқару, докер агентін басқару және біздің контейнерлер іске қосылатын және іске қосылатын докер қосымшасы AWS-ке ауыстырылады. Егер сізде ресурстар немесе мамандар болмаса немесе сіздің контейнерлеріңізді басқаратын Amazon EC2 даналарын дәл баптауды қажет етпейтін болса, бұл жағдай.
Егер сізге жетілдірілген дәл баптау қажет болса, бұл әрқашан қажет емес. Алайда, бұл жағдайда сіз сол жақтағы басқа опцияны қолдана аласыз, онда сіз ECS кластеріндегі даналарды толық басқара аласыз және сізге қажет барлық жұқа параметрлерді көрсетіңіз. Бұл жағдайда екі нұсқа бар. Сіздің ECS кластеріңіз Linux немесе Windows EC2 даналарынан тұрады. Кез келген жағдайда, бірінші опцияда не істегеніңізге қосымша, сізге бір Amazon EC2 данасын жасау үшін қажет барлық параметрлерді енгізу қажет. Осы үлгіні енгізу деректеріңіз үшін пайдаланып, ECS кластері жасалады.
Келесі жағдайды енгізейік. Сіз қосымшаны әзірлейтін және оны жасау үшін докер контейнерлерін қолданатын компаниясыз. Компания өсіп келеді, біраз уақыттан кейін сізде бар контейнерлер саны артады. Сізге тиімді оркестрлеуге көмектесетін нәрсе керек, яғни контейнерлердің осы үлкен көлемін басқарыңыз. Осы мақсатта ашық бастапқы бағдарламалық жасақтама Kubernetes деп аталатын контейнерлік оркестрлеу үшін арнайы жасалған немесе сіз оны K8S ретінде жиі көре аласыз. Kubernetes дегеніміз не екенін түсіну үшін, біз докер туралы сөйлескен кезде, біз сол қонақтық операциялық жүйеде жұмыс істейміз деп айтамыз. Kubernetes туралы сөйлескен кезде, біз қазірдің өзінде деңгейге көтеріліп, бірнеше Docker хосттарымен жұмыс істеп жатырмыз. Kubernetes бізге масштабтау, контейнерлерді қамтамасыз ету, яғни контейнерлерді іске қосу, желілік мәселелер және жүктемені теңдестіру міндеттерін жеңілдетуге мүмкіндік береді, бұл бізге осы көптеген гетерогенді контейнерлермен тиімді күресуге көмектесетін шешім.
Кубернетес туралы сөйлескен кезде кейбір танымал терминдер де бар. Kubernetes кластерді басқарады. Кластер - бұл бірнеше виртуалды машиналардың жиынтығы. Кластердегі әрбір виртуалды машина түйін деп аталады. Бір виртуалды машинада бірнеше жүз контейнерді іске қосуға болатыны бәріміздің есімізде. Сонымен, біздің жағдайда, Кубернетес жағдайында, шұңқырлар контейнер ретінде әрекет етеді. Осылайша, біздің кластеріміз түйіндерден тұрады және әр түйін көптеген шұңқырларды, яғни контейнерлерді басқара алады.
Біз алға жылжып жатырмыз. Енді келесі қызмет туралы сөйлесейік. Сіз дәл қазір Kubernetes кластерін келесі жолмен көтере аласыз деп ойлаған шығарсыз. Сіз бірнеше Amazon EC2 даналарын іске қосасыз, докер қосымшасын орнатасыз, үстіне Kubernetes қосымшасын орнатасыз және сізде жұмыс істей алатын Kubernetes-Cluster бар. Ия, рас, бұл бір нұсқа, бірақ біз AWS-пен жұмыс істеген кезде бізде жақсы нұсқа бар, атап айтқанда Amazon Elastic Kubernetes қызметі, оны сіз Amazon EKS ретінде жиі көресіз. Бұл Басқарылатын Kubernetes Service бізге ұсынатын қызмет, бұл Kubernetes қосымшасымен толық үйлесімді қызмет болып табылады және қызмет пайдаланушыларға, біздің AWS бұлтты провайдерінің клиенттеріне кластердің көп бөлігін жүктеуге және аударуға мүмкіндік береді AWS-ке және бизнес тапсырмаларына көбірек көңіл бөледі. Бұл қызметтің Kubernetes қолданбасымен үйлесімді болуы жергілікті деректер орталығында жұмыс істеп тұрған Kubernetes жұмыс жүктемелерін AWS-ке, әсіресе Amazon Elastic Kubernetes қызметіне оңай жібере алатынымызды білдіреді.
Сіз “Amazon ECS пен Amazon EKS арасындағы айырмашылық неде?” Деген сұрақ туындауы мүмкін. Шын мәнінде, екі нұсқа да, екі қызмет те, біздің Docker контейнер кластерін орнатуға көмектеседі. Жалғыз айырмашылық - бірінші жағдайда біз Docker контейнерлерімен тікелей жұмыс істейміз және AWS арқылы кластерімізді басқарамыз. EKS туралы сөйлескен кезде, кластер енді AWS шешімімен емес, Kubernetes ашық бастапқы бағдарламасымен реттеледі, бірақ ол бізді кейбір операциялық мәселелерден босататын қызметке оралады. Олар сіз орнатқан нәрсеге, инфрақұрылымыңыздың қалай көтерілгеніне, оның қалай жұмыс істейтініне немесе қазіргі уақытта пайдаланбайтын болсаңыз, кем дегенде AWS тұтынушыларында осы опциялардың біреуін таңдау мүмкіндігі бар.
Мен сізге айтқым келетін келесі қызмет - Amazon Elastic Container Registry, оны сіз Amazon ECR ретінде жиі көресіз. Бұл сіздің барлық Docker суреттеріңізді сақтайтын қызмет түрі. Сонымен, кластеріңізді жасаған кезде, Amazon ECS немесе Amazon EKS көмегімен контейнерді, сол контейнердің кескінін көрсетуіңіз керек. Бұл жағдайда сіз Amazon ECR пайдалануыңыз керек. Аналогия ретінде, сіз және мен Amazon EC2 данасын жасаған кезде, біз сіздің болашақ данаңыздың бейнесі болып табылатын AMI көрсетеміз. Бұл жағдайда AMI Docker кескіні ретінде әрекет етеді. Сіздің барлық AMI-ді сақтау контейнерлер жағдайында Amazon ECR болып табылады.
Сіз және мен оны төртінші бөлімнің соңына дейін жасадық. Ең маңызды тармақтардан өтейік. Контейнерлер - бұл сіздің қолданбаңызды сәтті іске қосу үшін қажет нәрсенің бәрін ұстай алатын нәрсе. Бұған кітапханалар, жүйелік параметрлер, код және т.б. Docker - бұл контейнерлер жасауға мүмкіндік беретін бағдарлама. Бұл үшін ең танымал бағдарламалардың бірі. Бір бағдарлама бір-біріне қосылған бірнеше контейнерлерде жұмыс істей алады. Docker контейнерлерімен бірге жұмыс істеуге мүмкіндік беретін Amazon серпімді контейнер қызметі немесе ECS бар. Келесі танымал бағдарлама мен бағдарлама - Кубернетес. Бұл сіздің контейнерлеріңізді орнатуға мүмкіндік беретін ашық бастапқы шешім. Кубернеттер үшін арнайы Amazon серпімді Кубернетес қызметі құрылды. Ол Kubernetes-пен үйлесімді және Docker контейнер кластерін Kubernetes арқылы басқару кезінде уақытты жұмыстан шығаруға мүмкіндік береді. Үшінші қызмет - Amazon серпімді контейнер тізілімі. Бұл сіздің барлық Docker контейнерлеріңізді сақтайтын қызмет.
Біз оны бес бөлімге айналдырдық және мұнда AWS Lambda туралы сөйлесеміз. Бұл менің барлық AWS қызметтеріндегі сүйікті қызметім, енді сіз неге екенін білесіз. Біз бұған дейін бізде әртүрлі IT-ресурстарды ұсынатын түрлі қызметтер бар екенін айтқан болатынбыз. Compute туралы сөйлескен кезде, Amazon EC2 бізге виртуалды машиналармен қамтамасыз етеді. Amazon ECS және Amazon EKS бізге контейнерлермен жұмыс істеуге көмектеседі. Сонымен, келесі деңгей - AWS Lambda, Serverless Computing, бұл сіз үшін барлық операциялық тапсырмаларды жоятын қызмет және сізге қажет барлық кодты осы қызметке жүктеу. Бұл қызметті іске қосу, оны қолдау, мониторинг орнату және т.б. байланысты барлық нәрселерді AWS өңдейді және қабылдайды. Осылайша, әзірлеуші ретінде шешім құру кезінде жүйелік әкімшінің қажеттілігін жоя аламын. Сонымен, IT университеттері жүйелік әкімшілерге қарағанда көбірек әзірлеушілер шығаратындықтан, сіз бұл қызметті өзіңіздің шешімдеріңізді, өзіңіздің стартап-жобаларыңызды іске қосу үшін пайдалана аласыз, мұнда AWS бүкіл адамға, маманға, яғни жүйелік әкімші қажеттілігін жояды. Бұл сізге кейбір шығындарды қысқартуға және стартапты сәтті іске қосу мүмкіндігін арттыруға көмектеседі.
Төлемге қатысты бұл да өте маңызды мәселе. Сіз AWS Lambda іске қосылды уақыт сомасына төлейсіз. Егер сіздің кодыңыз іске қосылмаса, сіз мүлдем ештеңе төлейсіз. Бұл сонымен қатар стартаптар үшін немесе тұрақты емес жұмыс жүктемелері үшін тамаша төлем үлгісі. Сіз стартап екеніңізді елестетіп көріңіз, сіздің жұмыс жүктемелеріңіз төмен, себебі сіз клиенттік базаны құрмадыңыз, сіз бұл танымал емессіз, сондықтан сіздің кодыңыз тек сіздің қолданбаңыз қолданылған кезде ғана іске қосылады. Егер сіздің қолданбаңызды ешкім пайдаланбаса, сіз сәйкесінше ештеңе үшін төлем жасамайсыз.
AWS Lambda артықшылықтарын жақынырақ қарастырайық. AWS Lambda көмегімен сізге жаңа бағдарламалау тілдерін үйренудің қажеті жоқ. Ол қазірдің өзінде ең танымал бағдарламалау тілдерін қолдайды, соның ішінде Python, JavaScript, Node.js, Ruby, C# және т.б., Сіз өзіңіздің Lambda-ны іске қосқан кезде AWS әкімшіліктің көп бөлігін өз мойнына алатынын түсіндіңіз, бәрі істеу керек - кодты жүктеу. AWS сонымен қатар кіріктірілген апаттан қорғауға ие. Бұл нені білдіреді? Бұл сіздің кодыңыз жұмыс істейтін микроконтейнерлер аймақтағы бірнеше қол жетімділік аймақтарында орналасқанын білдіреді. Сондықтан егер қол жетімділік аймағында бірдеңе болса, сіздің контейнеріңіз басқа қол жетімділік аймағында жұмыс істейді. Сіз тіпті оны байқамайсыз, сезінесіз, оны танымайсыз, ол AWS Lambda-ға салынған. Осылайша, сіздің барлық AWS Lambda сұрауларыңыз сәтті өңделеді. Бірнеше AWS Lambda іске қосу қажет болған кезде кейбір жұмыс жүктемелері бар, бұл күрделі логика және бір ламбда басқа ламбданы іске қоса алады немесе бір ламбданың нәтижелеріне байланысты, кейбір қосымша жағдайларда сіз басқа ламбдаларды іске қосуыңыз мүмкін немесе мүмкін емес. Бұл күрделі логиканы құру немесе бірнеше ламбда функцияларын орнату үшін AWS қадамдық функцияларын пайдалануға болады. AWS қадамдық функциялары осы логиканы сипаттайды және логикаға байланысты ол бір немесе басқа ламбданы шақырады. Бірақ лямбданы бөлек, дербес, тәуелсіз, тәуелсіз функцияны, сұранысқа байланысты дайын жауапты қайтарады. Мысалы, сізде веб-сайт бар және сіз өнім туралы ақпарат сұрайсыз. Осылайша, сұраныс сіздің лямбдаға келгенде, ламбда кіріс деректерін пайдаланып, сіздің өнімдеріңіз туралы ақпаратты сақтауға барады және қажетті ақпаратты шығарып алады, содан кейін оны қоңырау шалушыға қайтарады. Нысанды сақтауды AWS S3 қызметі ретінде қалай сақтауға болады. Егер сізде SQL дерекқоры болса, бұл AWS RDS; егер сізде NoSQL дерекқоры болса, бізде AWS DynamoDB бар, сондықтан AWS Lambda-ны басқа қызметтермен біріктірудің көптеген нұсқалары бар. Тағы бір маңызды артықшылығы - пайдалану үшін ақы төлеу бағасы, яғни сіз өзіңіздің ламбда іске қосылған уақытқа ғана төлейсіз. Бұл сіздің жұмыс жүктемелеріңіз тұрақты болмаса, шығындарыңызды айтарлықтай үнемдеуге мүмкіндік береді.
AWS Lambda-мен бірге жұмыс істейтін ең танымал қызметтер туралы сөйлесейік. Нысанды сақтау туралы сөйлескен кезде, Amazon S3 - ең танымал нұсқа. Ол осы қызметпен үйлеседі және ешқандай проблемалар жоқ. Тағы бір нұсқа, біз кейбір деректерді құрылымсыз түрде сақтауымыз керек деп айтқан кезде, біз NoSQL дерекқорларын пайдалануымыз керек. Бұл жағдайда Amazon DynamoDB - бұл. Amazon DynamoDB сонымен қатар серверсіз NoSQL дерекқорының шешімі болып табылады. Осылайша, ол сонымен қатар AWS Lambda-мен біріктірілген.
Әрі қарай, бізде екі Amazon SNS қызметтері, сондай-ақ Amazon SQS бар. Amazon SNS - белгілі бір жағдайларға байланысты push хабарландыруларын жібере аламыз. Amazon SQS деп айтқан кезде, бұл кезекпен және Pull жүктемесімен жұмыс істейді, яғни. жағдайда Amazon SNS, біз хабарлама жібереміз және ол дереу жіберіледі және алушыларға итеріледі. Amazon SQS деп айтқан кезде, бұл тартқыш, яғни Amazon SQS кезекте хабарлардың белгілі бір санын сақтайды және біз тарту режимінде тұрмыз, демек, біз қажет болған кезде өңдеуге қажетті хабарламалардың санын тартамыз. Бұл бұлтта архитектураның екі нұсқасы, және екі нұсқа да AWS Lambda-мен біріктірілген.
Біз API немесе қолданбалы бағдарлама интерфейсін құруымыз керек деп айтқан кезде, біз AWS Lambda-ны Amazon API шлюзімен біріктіре аламыз. Бұл ең танымал AWS Lambda байламдарының бірі.
Тағы бір қолданыстағы, бірақ аз танымал қызмет опциясы - бұл қосымшаны жүктеу теңдестірушісі. Мысалы, сізде EC2 кластері бар деп елестетіп көріңіз, ол басталады және кейбір жүктемелерді жасайды, бірақ сіз кешкі 8-ден кейін EC2 даналарыңыздың 50% -ын қауіпсіз түрде өшіре аласыз, себебі жүктеме күрт төмендейді. Бұл жағдайда сіз өзіңіздің лямбдаңызды кешкі сағат 8-де іске қосатын оқиғаны орната аласыз, содан кейін AWS Lambda Amazon EC2 даналарының санын азайтатын Application Load Balancer-ге сұрау жібереді.
Енді Lambda функциясын іске қосу үшін қандай параметрлер жасау керектігі туралы толығырақ сөйлесейік. Біріншіден, бізге жұмыс істейтін бағдарлама коды қажет. Әрі қарай, біз Lambda функциясы үшін IAM рөлін конфигурациялауымыз керек. Егер сіз AWS басқару консолінде Lambda функциясын жасасаңыз, онда сіз үшін минималды артықшылықтармен, атап айтқанда, AWS CloudWatch үшін артықшылықтармен, функция оның даму журналдарын жаза алады. Егер сізге басқа AWS қызметтерімен жұмыс істеу үшін Lambda функциясы қажет болса, сізге тиісті саясатты, құқықтарды және осы рөлге қол жетімділікті қосу керек. Сондай-ақ, біз көрсету керек Іске қосу уақыты, яғни сіздің кодты іске қосу үшін қандай ортада немесе Python, Node.js, C# және т.б.
AWS Lambda кодының өзінен басқа, біз басқа тәуелділіктерді де қолдана аламыз. Бұл сіздің кодты іске қосу үшін қажет қосымша реттелетін кітапханалар болуы мүмкін. Бұл жағдайда сізге мұрағат жасау және оны AWS Lambda қызметтеріне жүктеу қажет. Қосымша кітапханаларды пайдаланбаған кезде кітапханалар сирек пайдаланылады, ал Python жағдайында Python стандартты кітапханалары көптеген тапсырмалар үшін жеткілікті. Бұл жағдайда бізде тек бағдарлама коды бар және сіз AWS Lambda Console бағдарламасында жұмыс істей аласыз және кодты сол бетте көшіріп, қойыңыз және сақтай аласыз, бұл өте ыңғайлы.
Іске қосу уақытына қатысты функция максимум 15 минут, яғни 900 секунд жұмыс істей алады. Ол енді жүгіре алмайды. Егер сізге көбірек уақыт қажет болса, бір ламбда келесі ламбда жұмыс істейтін қадам функцияларын пайдалануды қарастыруыңыз керек, сондықтан сіз қосымша 15 минуттық іске қосу уақытын аласыз. Егер бұл сіз үшін жұмыс істемесе, контейнерлерге немесе EC2 даналарына қарай аласыз. Сіздің бизнес мақсатыңызға байланысты, бір немесе басқа нұсқа сізге жақын немесе тиімдірек болуы мүмкін.
Біздің функциямыздың күші туралы сөйлескен кезде, біз оған бөле алатын жедел жадтың мөлшерін басқарамыз. Біз бұл мүмкіндік үшін кем дегенде 128 МБ немесе 10 ГБ оперативті жадымен қамтамасыз ете аламыз. Өзектер саны қошқардың өсуіне пропорционалды түрде артады. Біз оны қошқардан бөлек орната алмаймыз.
AWS Lambda пайдалану мысалын қарастырайық, өте танымал мысал. Бізде EC2 даналарының жиынтығы бар және біздің жұмыс жүктемелерімізге байланысты біз барлық даналарымызды кешкі сағат 10-да өшіре алатынымызды түсінеміз және біз өз даналарымызды таңғы 5-те іске қосуымыз керек, оның бәрін жасау үшін архитектураны қалай теңшей аламыз. Біз екі оқиғаны жасаймыз. Бұл оқиғалар AWS CloudWatch бағдарламасында жасалған. Кешкі 10-дағы алғашқы жоспарланған іс-шара бірінші ламбданы тудырады. Бұл ламбда бұл оқиғаны кіріс ретінде қабылдайды. Сондай-ақ, осы ламбда немесе оқиғада біз ажыратуға арналған даналар тізімін тіркей аламыз және бұл іске қосылған кезде, ол тиісті рөлге ие, бұл рөл осы данадан ажыратуға құқылы. Ол тиісті командаларды іске қосады және біздің даналарымыз офлайн режимінде жүреді.
Екінші жоспарланған оқиға таңғы 5-те тағы бір екінші ламбданы іске қосады, бұл ламбда тиісті рөлге немесе шындықты іске қосуға құқығы бар басқа рөлге ие. Сондықтан AWS CloudWatch оқиғасы біздің Lambda функциясын іске қосқан кезде, ол оның кодын орындайды және даналар тізімінен кіріс деректеріне байланысты ол осы даналарды бастайды.
Енді екінші мысалды қарастырайық. Бізде фотосуреттер бар қосымша бар деп елестетіп көрейік. Біздің қолданба пайдаланушысы бірнеше фотосуретті жүктейді. Біз бұл фотосуретті Amazon S3 шелегіне сақтаймыз. Содан кейін, біз файлды Amazon S3 шелегіне жүктегеннен кейін, біздің ламбданы іске қосатын оқиға басталады. Біздің лямбда іске қосылды, іс-шарада кіріс деректері, соның ішінде осы суретке сілтеме бар ақпарат бар. Біз қандай сурет жүктелгенін түсінеміз. Содан кейін лямбда өз рөлін пайдаланады және тиісті құқықтарға ие. Ол бұл кескінді жүктейді, өңдейді және әртүрлі ажыратымдылықта бірдей кескінді жасайды. Оның ішінде нобай деп аталатын сурет. Бұл суреттің шағын нұсқасы, оның салмағы өте аз, бірақ ол тізімдегі суреттерімізді көргенде де көрсетіледі. Содан кейін, оны жасағаннан кейін, барлық қажетті суреттерді дайындағаннан кейін, ол бұл суреттерді басқа Amazon S3 шелегіне жүктейді. Егер сіз бұл туралы одан әрі ойласаңыз, қолданба басқа пайдаланушыларға осы фотосуреттердің тізімін әртүрлі ажыратымдылықта көрсете алады, сонымен қатар біздің барлық суреттеріміздің тізімін қарау кезінде мини нұсқасын көрсету үшін нобайды қолдана алады.
ның негізгі AWS Lambda қызмет лимиттер жақынырақ қарастырайық. Мұнда мен көптеген шектеулер жұмсақ және AWS қолдау қызметіне хабарласу арқылы көбейтілуі мүмкін екенін атап өткім келеді. Сіз бір аймақта параллельде 1000-ға дейін ламбда жазасын қоса аласыз. Сізде белгілі бір функция бар деп елестетіп көрейік, ол өнім туралы ақпаратты тасымалдайды, егер кенеттен 1000 пайдаланушы белгілі бір өнім туралы ақпарат сұраса және 1000 ламбданы параллель іске қосу керек болса, AWS автоматты түрде 1000-ға дейін ламбда жұмыс істейтін микроконтейнерлер жасайды және осы ламбдалардың барлығын сәтті іске қосады. Әрі қарай, егер сұраныстар саны күрт азаятын болса, барлық жұмыс істеп тұрған микроконтейнерлер AWS ішкі логикасына сәйкес біртіндеп жойылады. Егер сіз көбірек сұраулар алсаңыз, қайта қарау логикасын реттей аласыз және сұрауыңыз біраз уақыттан кейін қайтадан жіберіледі. Сол кезде аз ламбдалар іске қосылуы мүмкін болғандықтан, бұл сұраулар да сәтті өңделеді.
біз коды, соның ішінде біздің функциясы мөлшері, және біз іске қосу үшін қажет барлық кітапханалар туралы айтып жатсаңыз, ол мұрағаттан тыс күйде мөлшері дейін 250 мегабайт болуы мүмкін. Егер біз Ламбданың күші туралы айтатын болсақ, біз ең аз дегенде 128 мегабайт жедел жады мен ең көбі 10 гигабайт жедел жады бөле аламыз. Айта кету керек, процессорлық ядролардың саны бөлінген жедел жадтың мегабайттарының санына параллель бөлінеді. Егер біз бір функцияның максималды іске қосу уақыты туралы айтатын болсақ, ол 900 секунд немесе 15 минут.
Сіз және мен оны бесінші бөлімнің соңына дейін жасадық. Ең маңызды тармақтардан өтейік. AWS Lambda - бұл бізге серверсіз қуат беретін қызмет. Идея мынада, біз өз серверлерімізді басқармаймыз, тек біздің кодты жүктеп аламыз. Бұл кодты іске қосу туралы барлық нәрсе AWS жағында жасалады. AWS Lambda сонымен қатар автоматты масштабтауды қамтиды, яғни егер біздің лямбдаға сұраныстардың кенеттен өсуі болса, барлық осы сұраулар параллельде өңделеді. AWS Lambda біздің функцияларымыздың бірі үшін 10 гигабайтқа дейін жедел жады бөле алатын жеткілікті қуатты болуы мүмкін. Сонымен қатар, біздің әр лямбда максимум 15 минут жүгіре алады. Бұл көптеген тапсырмаларды орындау үшін жеткілікті уақыт. Бұл жерде біз AWS Lambda қызметінің маңызды аспектілеріне назар аудардық. Бұл қызметті болашақта стартаптарды құру кезінде пайдалы деп сенемін. Бұл бұлтта кез-келген нәрсені іске қосу үшін тамаша таңдау. Сондай-ақ, сіз ламбдаға тым қосыла алмайтыныңызды ешқашан ұмытпаңыз. Тұрақты болған жүктемелеріңізді басқа мүмкіндіктерге ауыстыру қажет болған жағдайлар бар. Бірақ біз ештеңе анық болмаған кезде, ештеңе белгісіз, содан кейін барлық серверсіз қызметтер, ламбдадан бастап осы ламбдамен бірге жұмыс істейтін басқа қызметтерге дейін тамаша шешім болып табылады.
Міне, біз алты бөлімге жеттік. Бүгінгі біздің дәрістің соңғы бөлімі. Біз AWS Elastic Beanstalk туралы көбірек сөйлесеміз. AWS Elastic Beanstalk - бұл PaaS түрінде ұсынылатын Compute қызметінің тағы бір мысалы немесе Платформа Қызмет ретінде. Идея сіз өзіңіздің веб-бағдарламаңызға арналған кодты жүктейсіз, AWS Elastic Beanstalk сол веб-қосымшаны іске қосу үшін қажетті барлық инфрақұрылымды көтереді. Инфрақұрылымды көтеру арқылы сіз өзіңіздің веб-бағдарламаңызды іс жүзінде орналастыру, жүктемені теңдестіруді және автоматты масштабтауды орнату және веб-қосымшаны бақылау және тіркеу үшін қажет барлық нәрсе. Айта кету керек, бұл қызметті пайдалану тегін, яғни сіз бұл қызмет үшін доллар төлемейсіз. Алайда, AWS Elastic Beanstalk бөлігі ретінде көтерілген барлық ресурстар стандартты тарифтер бойынша алынады. Мысалы, егер сіз кейбір кіріс параметрлерін AWS Elastic Beanstalk-ке ауыстырған болсаңыз және инфрақұрылымыңызды екі Amazon EC2 данасымен жаңартсаңыз, сіз осы екі Amazon EC2 даналарын стандартты Amazon EC2 ставкасы бойынша төлейсіз. Бұл AWS Elastic Beanstalk өзара әрекеттесетін барлық басқа IT-ресурстарға және басқа AWS қызметтеріне қатысты, сондықтан сіз бірдей екі Amazon EC2 данасын қолмен көтерсеңіз, бірдей ақша төлейтін едіңіз. Жалғыз айырмашылық - инфрақұрылым сіз үшін автоматты түрде AWS Elastic Beanstalk арқылы жаңартылды. Шын мәнінде, сіз бірдей соманы төлейсіз, сонымен қатар уақытты үнемдейсіз және инфрақұрылымды автоматты түрде жаңартасыз.
Мұнда сіз AWS Elastic Beanstalk арқылы қанша жұмыс істейтінін көре аласыз, яғни сіз басқаратын нәрсе сіздің кодыңыз және AWS Elastic Beanstalk параметрлеріңіз. Қалғанның бәрін AWS басқарады, яғни HTTP сервері, қосымшалар сервері, тіл аудармашысы, яғни сіздің кодты іске қосу ортасы, операциялық жүйе және тіпті хост. AWS Elastic Beanstalk-ті AWS басқару консоліндегідей пайдалануға болады немесе AWS Elastic Beanstalk көмегімен инфрақұрылымды іске қосу үшін AWS CLI пайдалануға болады. Платформаны қолдау туралы сөйлескен кезде, Docker, Go, Java, NET, Node.js, PHP, Python және Ruby, басқа платформалар арасында қолдау көрсетіледі. Егер біз қолдау көрсетілетін веб-серверлер туралы айтатын болсақ, Apache Tomcat Java қосымшаларына қолдау көрсетіледі, ал Apache HTTP Server PHP және Python қосымшаларына қолдау көрсетіледі. Егер біз Node.js қосымшалары туралы айтатын болсақ, олар үшін NGINX және Apache HTTP сервері қол жетімді. Егер Ruby қосымшасы болса, бұл Жолаушы және Пума. Егер біз NET қосымшалары туралы айтатын болсақ, Java және Docker бірге Go, Microsoft Internet Information Services, яғни IIS, қолдау көрсетіледі.
AWS Elastic Beanstalk-тің негізгі артықшылықтарын қарастырайық. Біріншісі - сіз өте тез және оңай бастай аласыз, яғни веб-қосымшаңызды іске қосыңыз, барлық қажетті инфрақұрылым көтеріледі және сіз мұның бәріне аз уақыт жұмсайсыз. Тағы бір мәселе - сіздің мамандарыңыз, сіздің әзірлеушілеріңіз операциялардан босатылады және бизнес тапсырмаларына шоғырлануы мүмкін. Осылайша, сіздің әзірлеушілеріңіздің тиімділігі артады. Тағы бір мәселе - AWS Elastic Beanstalk көптеген веб-қосымшаларға жарамды. Осылайша, AWS Elastic Beanstalk веб-қосымшасының мүмкіндіктері өте сирек кездеседі. Және көп уақыт, сіз AWS Elastic Beanstalk-пен қозғаласыз және бәрі жеткілікті болады. Тағы бір мәселе - AWS Elastic Beanstalk сіздің ресурстарыңызды икемді түрде реттеуге мүмкіндік береді. Мысал ретінде, сіз Elastic Beanstalk сіз үшін көтере алатын Amazon EC2 ішіндегі нақты дананың түрін көрсете аласыз.
Бұл бізді алты бөлімнің соңына дейін жеткізеді. Негізгі ойларға назар аударайық. Егер сізде веб-бағдарлама болса, сіз AWS Elastic Beanstalk-ті міндетті түрде қарастыруыңыз керек, өйткені бұл сіздің IT-инфрақұрылымыңызды бұлтта орналастыру процесін оңтайландыруға көмектеседі. AWS Elastic Beanstalk Java, NET, PHP, Node.js, Python, Ruby, Go, Docker және басқаларын қоса алғанда, платформалардың кең спектрін қолдайды. Төлем туралы айтатын болсақ, бұл қызмет AWS клиенттері үшін толығымен тегін және сіз бұл қызметті пайдаланғаныңыз үшін төлем жасамайсыз. Бірақ сіз оның ресурстарын жасау қызметтер үшін стандартты тарифтерді төлеу қажет. Мысалы, егер AWS Elastic Beanstalk Amazon EC2 даналарын жаңартса, иә, сіз сол Amazon EC2 даналарын стандартты пайдалану жылдамдығымен төлейсіз.
Бұл бізді сессияның соңына дейін жеткізеді. Ең маңызды сәттерге назар аударайық. Осы екі дәрісте біз AWS-те қандай есептеу қызметтері қол жетімді екенін көрдік. Біз Amazon EC2-ге жақынырақ қарадық. Әрі қарай, біз контейнерлермен жұмыс істеген кезде қандай қызметтер бар екенін қарастырдық. Бұл Amazon EKS, Amazon ECS және Amazon ECR. Содан кейін біз серверсіз шешіммен таныстық. Бұл AWS лямбда. Біз қандай артықшылықтар мен кемшіліктер бар екенін қарастырдық. Соңында біз веб-қосымшаны жылдам орналастыру қызметімен таныстық. Бұл AWS серпімді бұршақ. Сіз AWS қызметтердің кең спектрін ұсынатындығын көре аласыз және сіздің бизнес қажеттіліктеріңізге байланысты сіз қолданатын опциялардың біреуі немесе бірнешеуі сізге сәйкес келуі мүмкін. Бұл сіз үшін мүмкіндігінше тиімді және мүмкіндігінше тиімді болады.
Егер сізге белгілі бір қызмет туралы қосымша ақпарат қажет болса, мұнда сіз үшін пайдалы болуы мүмкін қосымша сілтемелерді таба аласыз.
Бұл біздің дәрістік сессиямызды аяқтайды. Сіз жаңа нәрсе білдіңіз деп үміттенемін. Сізді келесі іс-шараларымызда көреміз.