WEBVTT

00:00:00.000 --> 00:00:05.640
Қайырлы күн, құрметті студенттер! Сіздерді 
бүгінгі дәрісте көргеніме қуаныштымын.

00:00:05.640 --> 00:00:10.680
Біз алдыңғы тақырыпты жалғастырамыз, нақты айтар
болсақ, бүгін Compute тақырыбының екінші бөлігі.

00:00:10.680 --> 00:00:18.880
Сонымен, бастайық. Төртінші бөлімде 
контейнерлік сервистер туралы сөйлесеміз.

00:00:18.880 --> 00:00:24.080
Әрі қарай бесінші бөлімде 
AWS Lambda сервисін талдаймыз.

00:00:24.080 --> 00:00:29.000
Ал соңғы, алтыншы бөлімде, AWS Elastic 
Beanstalk туралы айтатын боламыз.

00:00:29.000 --> 00:00:36.920
Төртінші бөлім – контейнерлермен 
байланысты сервистер.

00:00:36.920 --> 00:00:47.360
Контейнерлер туралы сөз қозғамас бұрын, есімізге
түсіріп алайық. Бізде физикалық сервер бар. 

00:00:47.360 --> 00:00:53.920
AWS дата-центрінің ішінде 
физикалық тұрғыдан белгілі бір 

00:00:53.920 --> 00:00:58.560
аумақта ең қуатты физикалық 
серверлер орналасқан.

00:00:58.560 --> 00:01:05.320
Содан кейін, виртуалдандырудың арқасында 
бұл физикалық виртуалды сервер 

00:01:05.320 --> 00:01:11.800
бір-біріне тәуелсіз Amazon EC2 
виртуалды инстанстарына бөлінеді.

00:01:11.800 --> 00:01:19.320
Осылайша, Amazon EC2 сервисі аясында 
процессор ядроларының саны 

00:01:19.340 --> 00:01:28.700
мен жедел жадының мөлшері өзгеше 50-ден 
астам әртүрлі түрлерін сұрай аламыз.

00:01:28.700 --> 00:01:40.280
Енді әрі қарай, операциялық жүйе деңгейінде 
виртуалдандырудың тағы бір нұсқасы бар.

00:01:40.280 --> 00:01:46.600
Онда біз операциялық жүйені орнатып, операциялық
жүйенің үстіне оқшауланған контейнерді

00:01:46.600 --> 00:01:51.480
іске қосамыз, яғни Amazon EC2 
инстанстарына байланысты айтатын болсақ, 

00:01:51.480 --> 00:01:54.520
ол жерде сіз құру кезінде белгілі бір 
операциялық жүйені көрсетесіз.

00:01:54.520 --> 00:01:58.200
Ал контейнерге байланысты айтқан кезде, 
контейнер белгілі бір операциялық

00:01:58.200 --> 00:02:02.280
жүйеге байланады және сол операциялық 
жүйенің аясында іске қосылады.

00:02:02.280 --> 00:02:08.120
Бірақ қалғанының бәрі: кітапханалар, барлық 
конфигурациялар, код, run time, сіздің 

00:02:08.120 --> 00:02:14.880
бағдарламаңыздың іске қосылу ортасы - барлығы 
оқшау болады және өзін-өзі қамтамасыз етеді.

00:02:14.880 --> 00:02:24.400
Осылайша, біз контейнерді repeatable деп 
айтамыз, яғни ол оңай көшіріледі, 

00:02:24.400 --> 00:02:31.640
сіз дайын контейнерді алып, оны көшіріп, оны 
басқа жерде, басқа environment-те іске қосасыз

00:02:31.640 --> 00:02:39.280
және ол дәл осылай жұмыс істейді, өйткені 
ол сізге қажет нәрсенің бәрін қамтиды.

00:02:39.280 --> 00:02:44.840
Тағы бір маңызды мәселе - виртуалды 
машиналар контейнерлерге қарағанда

00:02:44.840 --> 00:02:51.120
әлдеқайда баяу іске қосылады.
Әрі қарай жалғастырайық. 

00:02:51.120 --> 00:02:56.320
Контейнерлерді құру және олармен жұмыс 
істеу үшін бізге нақты бағдарлама қажет.

00:02:56.320 --> 00:03:02.640
Контейнерлерді жасауға мүмкіндік беретін 
ең танымал бағдарлама – Docker-контейнер.

00:03:02.640 --> 00:03:10.760
Docker-контейнер – бұл сіздің бағдарламаңызды 
іске қосу және дұрыс жұмыс істеуі

00:03:10.760 --> 00:03:15.520
үшін қажет нәрсенің бәрін қамтитын 
ұйым, атап айтқанда кітапханалар, 

00:03:15.520 --> 00:03:22.760
жүйелік құралдар, код және сіздің 
бағдарламаңыз үшін іске қосу ортасы.

00:03:22.760 --> 00:03:27.880
Біз контейнердің қандай 
екендігін қарапайым сөзбен айттық.

00:03:27.880 --> 00:03:36.000
Енді сәл тереңірек талдайық. Виртуалды 
машиналар жайлы айтқан кезде, оң жақта

00:03:36.000 --> 00:03:43.400
сіз әртүрлі кітапханалармен жұмыс істейтін үш 
түрлі қосымша deployment-інің мысалын көресіз.

00:03:43.400 --> 00:03:48.800
Олар әр түрлі түстермен арнайы ерекшеленеді, 
яғни Application 1, Application 2, Application 3.

00:03:48.800 --> 00:03:56.200
Олардың әрқайсысы Amazon EC2 инстансында іске 
қосылған. Әрі олардың бір-бірінен оқшауланған 

00:03:56.200 --> 00:04:01.760
операциялық жүйесін көре аласыз, 
яғни VM1, Virtual Machine 1, басқаларға

00:04:01.760 --> 00:04:07.320
ұқсас не мүлде ұқсамайтын өзінің операциялық 
жүйесі болады. Бұл қосымшаның өзіне байланысты,

00:04:07.320 --> 00:04:16.680
яғни виртуалды машина hypervisor-дің үстінен 
жұмыс істейді. Енді виртуалдандырудың келесі 

00:04:16.680 --> 00:04:28.720
деңгейі – hypervisor-ден жоғары тұратын 
контейнерлер, яғни Amazon EC2 инстанстарының 

00:04:28.720 --> 00:04:33.840
операциялық жүйесі. Сонымен, бір Amazon EC2 
инстансы аясында, экранның сол жағында, 

00:04:33.840 --> 00:04:38.720
сіз үш түрлі контейнерді іске қосқанымызды 
көре аласыз. Әр контейнерде тек

00:04:38.720 --> 00:04:45.400
қосымша ғана емес, сонымен қатар әр қосымшаның
дұрыс жұмыс істеуі үшін қажет барлық нәрсе бар. 

00:04:45.400 --> 00:04:52.000
Сонымен бірге, сіз қосымшалар бір-бірімен 
байланысты емес әр түрлі кітапханалармен жұмыс 

00:04:52.000 --> 00:04:56.600
істейтінін көре аласыз. Ең бастысы – 
дұрыс операциялық жүйенің болуы. 

00:04:56.600 --> 00:05:01.320
Бұл жерде контейнерлер әртүрлі 
операциялық жүйелерде жұмыс

00:05:01.320 --> 00:05:06.920
істеуге жеткілікті түрде 
икемді екенін атап өткен жөн.

00:05:06.920 --> 00:05:11.440
Негізгі талап – барлық қажетті 
мүмкіндіктер және белгілі бір 

00:05:11.440 --> 00:05:18.080
контейнер үшін қажет функционалдылықтың 
барлығы жүзеге асырылуы керек.

00:05:18.080 --> 00:05:21.880
Бізде Linux операциялық жүйесінің 
әртүрлі нұсқалары бар.

00:05:21.880 --> 00:05:29.560
Біздің контейнерге Linux операциялық жүйесінің 
екі түрлі нұсқасында бар функционалдылық

00:05:29.560 --> 00:05:36.360
қажет болған жағдайда, біз бұл 
контейнерді операциялық жүйенің екі

00:05:36.360 --> 00:05:44.800
нұсқасында да сәтті іске 
қосуға болады деп айтамыз.

00:05:44.800 --> 00:05:52.880
Осылайша, сіз контейнерді басқа операциялық 
жүйедегі кез-келген компьютерде іске қоса аласыз.

00:05:52.880 --> 00:06:00.360
Бұл контейнерлермен жұмыс істеу 
кезінде біршама қолайлы болмақ.

00:06:00.360 --> 00:06:11.960
Тағы бір мәселе, біз бір EC2 инстансы аясында 
өте кішкентай контейнерлерді іске қоса аламыз,

00:06:11.960 --> 00:06:19.280
ал бір EC2 инстансында бір уақытта 
жүздеген түрлі контейнерлер бола алады.

00:06:19.280 --> 00:06:25.960
Әр контейнер белгілі бір 
қосымшаға қызмет етеді.

00:06:25.960 --> 00:06:34.160
Енді AWS-ке қарай жүрейік, 
сіз контейнерлермен жұмыс істеу үшін 

00:06:34.160 --> 00:06:39.400
Amazon EC2 инстансын іске қосып, 
docker қосымшаларын орнатып, 

00:06:39.400 --> 00:06:45.520
контейнерлермен жұмыс істей 
аласыз деп жоспарлаған боларсыз.

00:06:45.520 --> 00:06:54.840
Иә, бұл бұлттағы контейнерлермен жұмыс 
істеудің дұрыс әдісі, бірақ ең тиімдісі емес.

00:06:54.840 --> 00:07:01.560
Ең жақсы нұсқа – арнайы құрылған сервис 
Amazon Elastic Container Service, 

00:07:01.560 --> 00:07:11.480
қысқаша ECS деп жиі кездеседі, контейнерлермен 
ыңғайлы түрде жұмыс істеуге мүмкіндік береді.

00:07:11.480 --> 00:07:21.080
Осылайша, сіз осы сервисті пайдаланып бірнеше 
секунд ішінде 10 мыңға дейін контейнерлерді іске 

00:07:21.080 --> 00:07:25.680
қоса аласыз. Сондай-ақ, контейнерлерді 
іске қосу және басқару үшін әртүрлі

00:07:25.680 --> 00:07:31.800
әрекеттер мен кестелерді ыңғайлы түрде 
бақылауға, басқаруға, тіпті теңшеуге болады. 

00:07:31.800 --> 00:07:38.280
Мұнда ECS тек On-demand EC2 
инстанстарын ғана емес, сонымен қатар

00:07:38.280 --> 00:07:46.360
Spot Instances пен Reserved Instances-ті 
де қолдайтынын атап өткен жөн.

00:07:46.360 --> 00:07:50.640
Бір мысалды қарастырайық. 
Бізде task definition бар.

00:07:50.640 --> 00:07:58.480
Тask definition – бұл сіздің контейнеріңіздің 
сипаттамасы. Онда сіздің қосымшаңыз туралы

00:07:58.480 --> 00:08:05.280
ақпарат бар, қандай порттарды қолданасыз және
қосымшаның жұмыс істеуі үшін қосымша 

00:08:05.280 --> 00:08:10.520
параметрлерді орнатуыңыз мүмкін. Осы мысалда біз 
task definition жасадық деп елестетіп көрейік,
 
00:08:10.520 --> 00:08:16.840
екі контейнер Container A және Container B 
сипатталған. Енді біздің инфрақұрылымның аясында

00:08:16.840 --> 00:08:24.840
бізге үш Container A инстанстары және 
екі Container B инстанстары қажет.

00:08:24.840 --> 00:08:35.440
Осылайша біз task немесе контейнер 
инстансын істеп жатырмыз.

00:08:35.440 --> 00:08:40.560
Сонымен біз контейнерлеріміз бар кішкентай 
инстанстарды task арқылы Amazon ECS сервисіне 

00:08:40.560 --> 00:08:50.640
жібереміз. Біз үшін бұл ECS сервисі 
қосымша кіріс деректерімізге байланысты

00:08:50.640 --> 00:08:59.600
осы контейнерлерді орналастырады және оларды 
біздің ECS кластерімізде іске қосады.

00:08:59.600 --> 00:09:06.440
Cluster ECS – бұл топ ретінде іске қосылатын
Amazon EC2 инстанстарының жиынтығы. 

00:09:06.440 --> 00:09:13.240
Осылайша, Amazon ECS әрбір Amazon 
EC2 инстансында агент орнатады. 

00:09:13.240 --> 00:09:19.560
Бұл агент контейнерлеріңізді осы Amazon EC2 
инстанстарына орналастыруға көмектеседі.

00:09:19.560 --> 00:09:27.200
ECS кластері туралы айтқан 
кезде бізге үш нұсқа қолжетімді.

00:09:27.200 --> 00:09:35.020
Бірінші нұсқа – біз контейнерлерімізді жасап, 
осы контейнердің қаншалықты қуатты болуы 

00:09:35.020 --> 00:09:43.520
керектігін, осы контейнерлердің қаншасын 
құратынымызды, сондай-ақ желіні конфигурациялау

00:09:43.520 --> 00:09:51.120
үшін қажетті параметрлерді және осы 
контейнерлердің бір-бірімен өзара әрекеттесуін

00:09:51.120 --> 00:09:59.440
сипаттайтын кезде қолданылатын Networking 
Related Settings. Бұл жағдайда біз оң жақтағы 

00:09:59.440 --> 00:10:07.480
туралы айтып отырмыз және Amazon ECS және AWS 
Fargate сервистерінің комбинациясының арқасында

00:10:07.480 --> 00:10:10.440
біз тек контейнерлерімізге 
назар аудара аламыз. 

00:10:10.440 --> 00:10:17.080
Қалғанының бәрі, яғни операциялық жүйені 
басқару, docker-агентін басқару және біздің 

00:10:17.240 --> 00:10:24.400
контейнерлер іске қосылып жұмыс істейтін 
docker-қосымшасы AWS-ке ауысады. 

00:10:24.400 --> 00:10:33.480
Бұл – сізде ресурстар не мамандар болмаса 
немесе сіздің контейнерлеріңізді 

00:10:33.500 --> 00:10:38.680
басқаратын Amazon EC2 инстанстарын дәл 
баптауды қажет етпейтін болғандағы жағдай.

00:10:38.680 --> 00:10:47.360
Ал егер сізге кеңейтілген баптау қажет болса,
алайда ол сізге әрдайым қажет емес,

00:10:47.360 --> 00:10:54.560
сонда да бұл жағдайда сіз сол жақтағы басқа
опцияны қолдана аласыз, онда сіз ECS 

00:10:54.560 --> 00:11:01.760
кластеріндегі инстанстарды толық басқарып, сізге 
қажет барлық параметрлерді нақты көрсете аласыз.

00:11:01.760 --> 00:11:03.240
Бұл жағдайда екі 
нұсқаны қарастыра аламыз.

00:11:03.240 --> 00:11:10.960
Сіздің ECS кластеріңіз не Linux не 
Windows EC2 инстанстарынан тұратын болады.

00:11:10.960 --> 00:11:18.520
Кез келген жағдайда, бірінші опцияда 
жасалынған әрекеттерімізбен қоса, сізге бір 

00:11:18.520 --> 00:11:25.840
Amazon EC2 инстансын жасау үшін қажет 
барлық параметрлерді енгізу қажет.

00:11:25.840 --> 00:11:35.400
Осы енгізу деректеріңіздің үлгісін 
пайдаланып, ECS кластері жасалады.

00:11:35.400 --> 00:11:44.640
Келесі кейсті қарастырайық. Сіз – қосымшаны 
әзірлейтін және оны жасау үшін docker 

00:11:44.640 --> 00:11:50.240
контейнерлерін қолданатын компаниясыз. Компания 
өсіп келеді, біраз уақыттан кейін сізде бар 

00:11:50.240 --> 00:11:55.760
контейнерлер саны артады. Сізге 
тиімді оркестрлеуге көмектесетін,

00:11:55.760 --> 00:11:58.880
яғни контейнерлердің осы үлкен 
көлемін басқаратын нәрсе керек.

00:11:58.880 --> 00:12:05.560
Осы мақсатта container orchestration-ге 
арнайы жасалған open sourse software бар,

00:12:05.560 --> 00:12:10.360
ол Kubernetes деп аталады, 
сіз оны K8S ретінде жиі кездестіресіз.

00:12:10.360 --> 00:12:18.480
Kubernetes дегеніміз не екенін 
түсіну үшін, біз docker-ге байланысты

00:12:18.540 --> 00:12:24.580
бір қонақ операциялық жүйеде 
жұмыс істейміз деп айтамыз.

00:12:24.680 --> 00:12:28.760
Kubernetes-ке байланысты айтқанымызда, 
біз жоғарырақ деңгейге көтеріліп,

00:12:28.860 --> 00:12:31.480
бірнеше Docker host-тарымен 
жұмыс істей аламыз. 

00:12:31.480 --> 00:12:41.000
Kubernetes бізге масштабтау, container 
provisioning, яғни контейнерлерді іске қосу, 

00:12:41.000 --> 00:12:50.560
networking мәселелері мен жүктемені теңдестіру 
міндеттерін жеңілдетуге мүмкіндік береді,

00:12:50.560 --> 00:12:59.440
бұл бізге осы көптеген түрлі контейнерлермен 
тиімді жұмыс істеуге көмектесетін шешім.

00:12:59.440 --> 00:13:05.200
Kubernetes туралы айтқанда кейбір
танымал терминдерді айта кеткен жөн.

00:13:05.200 --> 00:13:14.360
Kubernetes кластерді басқарады. Cluster – бұл 
бірнеше виртуалды машиналардың жиынтығы.

00:13:14.360 --> 00:13:19.920
Кластердегі әрбір виртуалды 
машина нода деп аталады.

00:13:19.920 --> 00:13:27.920
Бір виртуалды машинада бірнеше жүз 
контейнер іске қосыла алатыны есімізде. 

00:13:27.920 --> 00:13:36.000
Сонымен, біздің жағдайда, Kubernetes жағдайында,
подтар контейнер ретінде әрекет етеді.

00:13:36.000 --> 00:13:39.800
Осылайша, біздің кластеріміз 
нодалардан тұрады және әр нодада 

00:13:39.800 --> 00:13:47.840
көптеген подтар, яғни контейнерлер 
іске қосыла алады.

00:13:47.840 --> 00:13:53.880
Әрі қарай жылжыйық. Енді келесі 
сервис туралы сөйлесейік.

00:13:53.880 --> 00:13:59.520
Сіз дәл қазір Kubernetes кластерін келесі 
жолмен баптай аласыз деп ойлаған шығарсыз:

00:13:59.520 --> 00:14:03.920
бірнеше Amazon EC2 инстанстарын іске қосып, 
docker-қосымшасын орнатамын, оның үстіне

00:14:03.920 --> 00:14:09.600
Kubernetes қосымшасын орнатсам менде жұмыс
істейтін Kubernetes-Cluster пайда болады. 

00:14:09.600 --> 00:14:17.520
Иә, рас, бұл да бір нұсқа, бірақ біз AWS-пен 
жұмыс істеген кезде бізде одан да жақсы нұсқа 

00:14:17.520 --> 00:14:24.000
атап айтқанда Amazon Elastic Kubernetes сервисі,
оны сіз Amazon EKS ретінде жиі кездестіресіз. 

00:14:24.000 --> 00:14:32.400
Бұл Managed Kubernetes Service ұсынатын сервис, 
бұл Kubernetes қосымшасымен толық үйлесімдегі

00:14:32.400 --> 00:14:45.780
сервис және сервис пайдаланушыларға, біздің AWS
бұлтты провайдерінің клиенттеріне кластердің көп

00:14:45.780 --> 00:14:55.800
бөлігін AWS-ке жүктеуге мүмкіндік беріп,
өзініңіз бизнес тапсырмаларыңызға көбірек көңіл 

00:14:55.800 --> 00:15:01.840
бөлуге жағдай жасайды. Бұл сервистің 
Kubernetes қосымшасымен үйлесімді болуы 

00:15:01.840 --> 00:15:09.240
жергілікті дата-центрлермен жұмыс істеп 
тұрған Kubernetes жұмыс жүктемелерін

00:15:09.240 --> 00:15:18.160
AWS-ке, әсіресе Amazon Elastic Kubernetes 
сервисіне оңай жібере алатынымызды білдіреді.

00:15:18.160 --> 00:15:26.880
Сізде “Amazon ECS пен Amazon EKS арасындағы 
айырмашылық қандай?” деген сұрақ туындауы мүмкін.

00:15:26.880 --> 00:15:33.920
Шын мәнінде, екі сервис те Docker-контейнер 
кластерін оркестрлеуге көмектеседі.

00:15:33.920 --> 00:15:38.300
Жалғыз айырмашылық – бірінші жағдайда 
біз Docker-контейнерлерімен 

00:15:38.300 --> 00:15:47.400
тікелей жұмыс істейміз және 
кластерімізді AWS арқылы басқарамыз.

00:15:47.400 --> 00:16:00.480
Amazon EKS-те кластер енді AWS шешімімен емес,
Kubernetes open sourсe бағдарламасымен реттеледі,

00:16:00.480 --> 00:16:06.840
бірақ ол бізді кейбір операциялық 
мәселелерден босататын сервиске оралған.

00:16:06.840 --> 00:16:12.400
Олар сіз орнатқан қосымашаға, 
инфрақұрылымыңыздың қалай бапталғанына, 

00:16:12.400 --> 00:16:20.040
оның қалай жұмыс істейтініне байланысты немесе
бұл нұсқаларды пайдаланбайтын болсаңыз,

00:16:20.320 --> 00:16:27.880
кем дегенде AWS тұтынушыларында осы 
опциялардың біреуін таңдау мүмкіндігі бар.

00:16:27.880 --> 00:16:33.560
Мен сізге айтқым келетін келесі 
сервис – Amazon Elastic Container Registry, 

00:16:33.560 --> 00:16:36.280
оны сіз Amazon ECR 
ретінде жиі кездестіресіз. 

00:16:36.280 --> 00:16:41.540
Бұл сіздің барлық Docker-кескіндеріңізді 
сақтайтын сервис түрі.

00:16:41.540 --> 00:16:51.200
Осылайша, кластерді құру кезінде, мейлі 
Amazon ECS не Amazon EKS  сервисі көмегімен 

00:16:51.200 --> 00:16:58.240
болсын, сіз контейнерді, сол контейнердің 
кескінін көрсетуіңіз керек.

00:16:58.240 --> 00:17:02.560
Бұл жағдайда сіз Amazon ECR 
сервисін пайдаланасыз.

00:17:02.560 --> 00:17:05.800
Аналогия ретінде, Amazon EC2 
инстансын жасаған кезде,

00:17:05.800 --> 00:17:12.360
біз болашақ инстансыңыздың бейнесі 
болып табылатын AMI көрсетеміз.

00:17:12.360 --> 00:17:19.800
Бұл жағдайда AMI Docker-кескіні 
ретінде әрекет етеді. Сіздің контейнерлерге

00:17:19.800 --> 00:17:29.400
байланысты барлық AMI-лар сақталынатын 
қоймаңыз – Amazon ECR болып табылады.

00:17:29.400 --> 00:17:34.720
Осымен дәрісіміздің төртінші бөлімінің соңына 
келдік. Маңызды тармақтарды еске түсіріп өтейік.

00:17:34.720 --> 00:17:41.520
Контейнерлер – бұл қосымшаңызды сәтті іске қосу
үшін қажет нәрсенің бәрін ұстай алатын қойма.

00:17:41.520 --> 00:17:48.800
Бұған кітапханалар, жүйелік 
параметрлер, код және т.б. жатады.

00:17:48.800 --> 00:17:56.040
Docker – бұл контейнерлерді құруға мүмкіндік 
беретін ең танымал бағдарламалардың бірі.

00:17:56.040 --> 00:18:04.800
Бір қосымша бір-бірімен байланысқан бірнеше
контейнерлерде іске қосыла алады. 

00:18:04.800 --> 00:18:15.680
Docker-контейнерлерін оркестрлеуге мүмкіндік 
беретін Amazon Elastic Container Service немесе 

00:18:15.740 --> 00:18:25.880
қысқаша ECS деген сервис бар. Келесі 
танымал қосымша, бағдарлама – Kubernetes.

00:18:25.880 --> 00:18:31.640
Бұл сіздің контейнерлеріңізді оркестрлеуге 
мүмкіндік беретін open source шешім.

00:18:31.640 --> 00:18:36.920
Kubernetes үшін арнайы Amazon Elastic 
Kubernetes Service сервисі құрылды.

00:18:36.920 --> 00:18:44.640
Ол Kubernetes-пен үйлесімді және 
Docker-контейнер кластерін Kubernetes арқылы

00:18:44.740 --> 00:18:52.640
басқару кезінде операциялық жұмыстан 
қолыңызды босатуға мүмкіндік береді.

00:18:52.640 --> 00:18:56.680
Үшінші сервис – Amazon 
Elastic Container Registry.

00:18:56.680 --> 00:19:04.440
Бұл сіздің барлық Docker-контейнерлеріңізді 
сақтайтын сервис.

00:19:04.440 --> 00:19:09.280
Енді дәрісіміздің бесінші бөліміне де жеттік 
және мұнда AWS Lambda сервисі туралы сөйлесеміз.

00:19:09.280 --> 00:19:17.360
Бұл менің барлық AWS сервистерінің ішіндегі ең 
сүйікті сервисім, неге екенін қазір білесіз.

00:19:17.360 --> 00:19:27.040
Біз бұған дейін бізде әртүрлі IT-ресурстарды 
ұсынатын түрлі сервистер бар екенін айтқанбыз.

00:19:27.040 --> 00:19:34.200
Compute туралы айтқанда, Amazon EC2 сервисі 
бізге виртуалды машиналарды ұсынады дедік.

00:19:34.200 --> 00:19:38.320
Ал Amazon ECS және Amazon EKS сервистері бізге 
контейнерлермен жұмыс істеуге көмектеседі. 

00:19:38.320 --> 00:19:42.640
Сонымен, келесі деңгей – AWS Lambda, 
Serverless Computing, 

00:19:42.640 --> 00:19:54.020
бұл сізді барлық операциялық тапсырмалардан 
босататын сервис және сізге тек кодты енгізу 

00:19:54.020 --> 00:20:02.720
ғана жеткілікті. Ал сервисті іске қосу, 
оны қолдау, мониторинг орнату және т.б. 

00:20:02.720 --> 00:20:08.040
байланысты барлық нәрселерді AWS 
өзі өңдейді және қабылдайды. 

00:20:08.040 --> 00:20:15.040
Осылайша, мен әзірлеуші ретінде 
белгілі бір шешім құру 

00:20:15.040 --> 00:20:19.820
кезінде жүйелік әкімшінің 
қажеттілігінен босата аламын.

00:20:19.820 --> 00:20:27.640
Және де сіз, IT университеттері 
жүйелік әкімшілерге қарағанда

00:20:27.640 --> 00:20:33.040
көбірек әзірлеушілерді дайындайтындықтан, 
бұл сервисті өзіңіздің шешімдеріңізді, 

00:20:33.040 --> 00:20:40.760
өзіңіздің стартап-жобаларыңызды 
іске қосу үшін пайдалана аласыз,

00:20:40.840 --> 00:20:45.120
мұнда AWS-тің арқасында жүйелік 
әкімшінің қажеттілігі болмайды.

00:20:45.120 --> 00:20:54.800
Бұл шығындарды қысқартуға және стартапты сәтті 
бастау мүмкіндігін арттыруға көмектеседі.

00:20:54.800 --> 00:20:58.760
Төлем жайлы тағы бір 
маңызды мәселе бар.

00:20:58.760 --> 00:21:03.700
Сіз AWS Lambda іске қосылған 
уақыт мөлшеріне ғана төлейсіз.

00:21:03.700 --> 00:21:09.720
Егер сіздің кодыңыз іске қосылмаса, 
сіз мүлдем ештеңе төлейсіз.

00:21:09.720 --> 00:21:19.680
Бұл сонымен қатар стартаптар үшін немесе тұрақты
емес жұмыс жүктемелері үшін тамаша төлем үлгісі. 

00:21:19.680 --> 00:21:24.080
Сіз стартап екеніңізді елестетіп көріңіз, 
сіздің жұмыс жүктемелеріңіз төмен, 

00:21:24.080 --> 00:21:29.280
себебі сіз клиенттік базаны әлі 
құрмадыңыз, сіз танымал болмағандықтан,

00:21:29.280 --> 00:21:35.360
сіздің кодыңыз тек қосымшаңыз 
қолданылған кезде ғана іске қосылады.

00:21:35.360 --> 00:21:42.320
Егер сіздің қосымшаңызды ешкім пайдаланбаса, 
сіз сәйкесінше төлем жасамайсыз.

00:21:42.320 --> 00:21:47.960
AWS Lambda сервисінің артықшылықтарын 
егжей-тегжейлі қарастырайық.

00:21:47.960 --> 00:21:51.400
AWS Lambda көмегімен сізге жаңа 
бағдарламалау тілдерін үйренудің қажеті жоқ. 

00:21:51.400 --> 00:21:54.520
Ол қазірдің өзінде ең танымал 
бағдарламалау тілдерін қолдайды,

00:21:54.520 --> 00:22:03.440
соның ішінде Python, JavaScript, 
Node.js, Ruby, C# және т.б.

00:22:03.440 --> 00:22:10.000
Сіз өзіңіздің Lambda-ны іске 
қосқан кезде AWS әкімшіліктің көп

00:22:10.000 --> 00:22:17.400
бөлігін ол өз мойнына алатынын түсіндіңіз 
ғой, сізге тек кодты жүктеу керек.

00:22:17.400 --> 00:22:24.080
AWS сонымен қатар кіріктірілген апаттың 
алдын алады. Бұл нені білдіреді? 

00:22:24.080 --> 00:22:28.800
Бұл сіздің кодыңыз жұмыс 
істейтін микроконтейнерлер

00:22:28.800 --> 00:22:33.800
аймақтағы бірнеше availability 
zone-да орналасқанын білдіреді.

00:22:33.800 --> 00:22:37.040
Сондықтан егер бір availability 
zone-да бірдеңе болса,

00:22:37.040 --> 00:22:40.280
сіздің контейнеріңіз басқа 
availability zone-да жұмыс істей береді.

00:22:40.280 --> 00:22:47.080
Ол AWS Lambda-ға кіріктірілгендіктен сіз 
оны тіпті байқамайсыз да, білмейсіз де. 

00:22:47.080 --> 00:22:56.440
Осылайша, сіздің барлық AWS Lambda 
сұрауларыңыз сәтті өңделеді. 

00:22:56.440 --> 00:23:03.960
Бірнеше AWS Lambda-ны іске қосу қажет болғанда 
кейбір жүктемелер болады, бұл күрделі логиканың 

00:23:03.960 --> 00:23:09.880
бір түрі және бір лямбда басқа лямбданы іске 
қоса алады немесе бір лямбданы орындау 

00:23:09.880 --> 00:23:15.080
нәтижелеріне байланысты кейбір қосымша шарттарда
басқа лямбдаларды іске қосу не қоспауға болады.

00:23:15.080 --> 00:23:20.160
Бұл күрделі логиканы құру немесе бірнеше 
лямбда-функцияларын оркестрлеу

00:23:20.160 --> 00:23:25.360
үшін AWS Step Functions 
сервисін пайдалануға болады.

00:23:25.360 --> 00:23:28.840
AWS Step Functions сәйкесінше 
осы логиканы сипаттайды және

00:23:28.840 --> 00:23:32.080
логикаға байланысты ол белгілі бір 
лямбданы шақырады. Бірақ лямбда

00:23:32.080 --> 00:23:40.720
бөлек, дербес, тәуелсіз функцияны қолданып, 
сұранысқа байланысты дайын жауапты қайтарады.

00:23:40.720 --> 00:23:45.400
Мысалы, сізде веб-сайт бар және сіз 
бір өнім туралы ақпарат сұрайсыз. 

00:23:45.400 --> 00:23:56.320
Осылайша, сұраныс сіздің лямбдаға келгенде, 
лямбда кіріс деректерін пайдаланып, сіздің

00:23:56.320 --> 00:23:59.720
өнімдеріңіз туралы ақпаратты 
сақтайтын қоймаға барады және

00:23:59.720 --> 00:24:03.640
қажетті ақпаратты шығарып, 
жауап ретінде қайтарады.

00:24:03.640 --> 00:24:10.920
Қойма ретінде AWS S3 сервисінің 
объектілі сақтау қоймасы пайдаланылады.

00:24:10.920 --> 00:24:18.160
Егер сізде SQL дерекқоры болса, 
бұл AWS RDS сервисі;

00:24:18.160 --> 00:24:22.720
егер сізде NoSQL дерекқоры болса, 
бізде AWS DynamoDB сервисі бар,

00:24:22.720 --> 00:24:30.240
яғни AWS Lambda-ны басқа сервистермен 
біріктірудің көптеген нұсқалары бар. 

00:24:30.240 --> 00:24:34.960
Тағы бір маңызды артықшылығы – 
pay-per-use pricing, 

00:24:34.960 --> 00:24:39.240
яғни сіз өзіңіздің лямбда іске қосылған 
уақытқа ғана төлейсіз. Бұл сіздің жұмыс

00:24:39.240 --> 00:24:48.000
жүктемелеріңіз тұрақты болмаса, шығындарыңызды 
айтарлықтай үнемдеуге мүмкіндік береді.

00:24:48.000 --> 00:24:56.400
AWS Lambda-мен бірге жұмыс істейтін 
ең танымал сервистер туралы сөйлесейік.

00:24:56.400 --> 00:25:02.880
Объектілік сақтау туралы айтқанда, 
Amazon S3 сервисі – ең танымал нұсқа. 

00:25:02.880 --> 00:25:07.640
Ол осы сервиспен үйлесіп, 
ешқандай мәселе туындатпайды.

00:25:07.640 --> 00:25:13.460
Тағы бір нұсқа, біз кейбір деректерді құрылымсыз
түрде сақтауымыз керек десек, біз NoSQL

00:25:13.460 --> 00:25:19.880
дерекқорларын пайдалануымыз керек. Бұл 
жағдайда Amazon DynamoDB сервисін қолданамыз. 

00:25:19.880 --> 00:25:26.760
Amazon DynamoDB сонымен қатар serverless 
NoSQL дерекқорының шешімі болып табылады.

00:25:26.760 --> 00:25:33.000
Осылайша, ол AWS Lambda-мен 
біріктірілген.

00:25:33.000 --> 00:25:40.640
Әрі қарай, бізде екі Amazon SNS 
пен Amazon SQS сервистері бар. 

00:25:40.640 --> 00:25:53.760
Amazon SNS – белгілі бір жағдайларға байланысты 
Push форматында хабарландыру жібере аламыз.

00:25:53.760 --> 00:26:03.240
Amazon SQS – бұл кезекпен жұмыс және Pull 
форматындағы жүктемелер, яғни Amazon SNS

00:26:03.240 --> 00:26:12.640
жағдайында біз хабарламаның қандай да бір түрін
жібереміз және ол дереу алушыларға жіберіледі.

00:26:12.640 --> 00:26:17.960
Amazon SQS сервисінде бұл Pull, яғни Amazon 
SQS сервисінде хабарламалардың белгілі бір

00:26:17.960 --> 00:26:21.360
саны кезекте жиналады және біз Pull 
режимінде тұрамыз, яғни біз қажет

00:26:21.360 --> 00:26:26.840
болған кезде өңдеуге қажетті 
хабарламалардың санын тартамыз. 

00:26:26.840 --> 00:26:34.880
Бұл бұлтта архитектура құрудың екі нұсқасы, 
және екі нұсқа да AWS Lambda-мен біріктірілген.

00:26:34.880 --> 00:26:40.720
Біз API, яғни Application Program Interface 
құруымыз керек деп айтқан кезде, 

00:26:40.720 --> 00:26:45.360
біз AWS Lambda-ны Amazon API 
Gateway-мен біріктіре аламыз.

00:26:45.360 --> 00:26:51.240
Бұл ең танымал AWS Lambda 
байламдарының бірі.

00:26:51.240 --> 00:26:58.800
Тағы бір қолданыстағы, бірақ аз танымал сервис
опциясы – бұл Application Load Balancer.

00:26:58.800 --> 00:27:07.080
Мысалы, сізде EC2 кластері бар деп елестетіп 
көріңіз, ол іске қосылып, кейбір

00:27:07.080 --> 00:27:11.480
жүктемелерді жасады, бірақ сіз 
кешкі 8-ден кейін EC2 инстанстарыңыздың 

00:27:11.480 --> 00:27:23.240
50%-ын өшіру керектігін білесіз, 
себебі жүктеме күрт төмендейді.

00:27:23.240 --> 00:27:29.000
Бұл жағдайда сіз өзіңіздің лямбдаңызды 
кешкі сағат 8-де іске қосатын

00:27:29.000 --> 00:27:35.120
event орната аласыз, содан 
кейін AWS Lambda Amazon EC2

00:27:35.120 --> 00:27:46.720
инстанстарының санын азайтатын Application 
Load Balancer-ге сұрау жібереді.

00:27:46.720 --> 00:27:54.680
Енді лямбда-функциясын іске қосу үшін қандай 
параметрлер жасау керектігі туралы сөйлесейік.

00:27:54.680 --> 00:27:59.600
Біріншіден, бізге жұмыс істейтін 
бағдарлама коды қажет.

00:27:59.600 --> 00:28:06.000
Әрі қарай, біз лямбда-функциясы 
үшін IAM role-ін баптауымыз керек.

00:28:06.000 --> 00:28:10.460
Егер сіз лямбда-функциясын 
AWS Management Console-де жасасаңыз,

00:28:10.460 --> 00:28:15.240
онда функция өңдеу журналдарын сол 
жерде жаза алатындай етіп, ең аз құқықтары

00:28:15.240 --> 00:28:20.560
бар рөл, атап айтқанда AWS CloudWatch 
сервисінің құқықтарымен жасалады.

00:28:20.560 --> 00:28:25.520
Егер лямбда-функциясы басқа AWS 
сервистерімен жұмыс істеу үшін қажет болса,

00:28:25.520 --> 00:28:31.280
сізге тиісті policy, құқықтарды және 
қолжетімділікті осы role-ге қосу керек.

00:28:31.280 --> 00:28:40.560
Сондай-ақ, Run time-ді, яғни 
сіздің кодыңызды қандай ортада,

00:28:40.560 --> 00:28:45.360
яғни Python, Node.js, C# және т.б. 
іске қосылуын көрсету керекпіз.

00:28:45.360 --> 00:28:54.080
AWS Lambda кодының өзінен басқа, біз басқа 
байланысты тәуелділіктерді қолдана аламыз.

00:28:54.080 --> 00:29:02.800
Бұл сіздің кодты іске қосу үшін қажет 
қосымша кастомды кітапханалар болуы мүмкін.

00:29:02.800 --> 00:29:14.120
Бұл жағдайда сізге мұрағат жасап, 
оны AWS Lambda сервисіне жүктеу қажет.

00:29:14.120 --> 00:29:20.600
Қосымша кітапханаларды пайдаланбаған кезде, 
кітапханалар сирек пайдаланылады, ал Python

00:29:20.600 --> 00:29:26.420
жағдайында оның стандартты кітапханалары 
көптеген тапсырмалар үшін жеткілікті. 

00:29:26.420 --> 00:29:38.040
Бұл жағдайда бізде тек бағдарлама коды бар және
сіз AWS Lambda-ның Console-інде жұмыс істей

00:29:38.040 --> 00:29:43.720
аласыз, яғни кодты сол парақшада көшіріп, 
қойып, сақтай аласыз, бұл өте ыңғайлы.

00:29:43.720 --> 00:29:54.520
Іске қосу уақытына қатысты мәселе, функция 
максимум 15 минут, яғни 900 секунд жұмыс істейді.

00:29:54.520 --> 00:30:01.280
Одан артық іске қосыла алмайды. Егер 
сізге көбірек уақыт қажет болса, 

00:30:01.280 --> 00:30:07.800
бір лямбда келесі лямбданы іске 
қосатын Step Functions-ті пайдалануды

00:30:07.800 --> 00:30:14.160
қарастыруыңыз керек, сол кезде сіз 
қосымша 15 минут уақытын аласыз. 

00:30:14.160 --> 00:30:22.080
Егер бұл нұсқа сәйкес келмесе, контейнерлерді 
немесе EC2 инстанстарын қарастырып көріңіз.

00:30:22.080 --> 00:30:33.240
Сіздің бизнес мақсатыңызға байланысты, бір 
нұсқасы сізге тиімдірек болуы мүмкін.

00:30:33.240 --> 00:30:41.720
Функциямыздың қуаты туралы айтатын болсақ, біз
оған бөлінетін жедел жад көлемін басқара аламыз.

00:30:41.720 --> 00:30:52.960
Бұл функция үшін кемінде 128 МБ немесе 
ең көп 10 ГБ дейін жедел жад шығара аламыз.

00:30:52.960 --> 00:31:01.720
Ядро саны жедел жад көлемінің ұлғаюына 
пропорционалды түрде артады. 

00:31:01.720 --> 00:31:10.160
Біз оны жедел жадтан 
бөлек орната алмаймыз.

00:31:10.160 --> 00:31:16.320
AWS Lambda сервисін пайдалану мысалын 
қарастырайық, өте танымал мысал.

00:31:16.320 --> 00:31:24.320
Бізде EC2 инстанстарының жиынтығы бар және 
біздің жұмыс жүктемелерімізге байланысты біз

00:31:24.320 --> 00:31:33.680
барлық инстанстарымызды кешкі сағат 10-да өшіре 
аламыз, ал таңғы 5-те іске қосуымыз керек.

00:31:33.680 --> 00:31:39.800
Оының бәрі дұрыс істеуі үшін 
архитектураны қалай теңшей аламыз.

00:31:39.800 --> 00:31:45.760
Біз екі event жасаймыз. Бұл event-тер 
AWS CloudWatch сервисінде жасалады.

00:31:45.760 --> 00:31:52.720
Бірінші event кесте бойынша кешкі 
10-да бірінші лямбданы іске қосады.

00:31:52.720 --> 00:31:58.200
Бұл лямбда бұл event-ті кіріс ретінде 
қабылдайды. Сондай-ақ, осы лямбдада немесе 

00:31:58.200 --> 00:32:04.680
event-те біз өшірілетін инстанстар тізімін 
тіркей аламыз және бұл іске қосылған кезде,

00:32:04.680 --> 00:32:09.120
ол тиісті rоle-ге ие, бұл rоle 
осы инстансты өшіруге құқылы.

00:32:09.120 --> 00:32:13.640
Ол тиісті командаларды іске қосады 
және біздің инстанстарымыз тоқтатылады.

00:32:13.640 --> 00:32:23.000
Екінші event кесте бойынша таңғы 5-те 
басқа екінші лямбданы іске қосады, 

00:32:23.000 --> 00:32:30.440
бұл лямбда тиісті инстансты іске қосуға 
құқығы бар rоle-ге ие. Сондықтан

00:32:30.440 --> 00:32:40.040
AWS CloudWatch event-і біздің лямбда-функциясын
іске қосқан кезде, ол оның кодын орындайды

00:32:40.040 --> 00:32:48.880
және инстанстар тізімінен кіріс деректеріне 
байланысты ол осы инстанстарды іске қосады.

00:32:48.880 --> 00:32:54.920
Енді екінші мысалды қарастырайық. Бізде 
фотосуреттері бар қосымша бар деп елестетіп 

00:32:54.920 --> 00:33:02.440
көрейік. Біздің қосымша пайдаланушысы 
бір фотосуретті жүктейді.

00:33:02.440 --> 00:33:06.200
Бұл фотосурет Amazon S3 bucket-те 
сақталынады. Содан кейін,

00:33:06.200 --> 00:33:13.160
файл Amazon S3 bucket-іне жүктелгеннен кейін,
біздің лямбданы іске қосатын event қосылады.

00:33:13.160 --> 00:33:19.600
Біздің лямбда іске қосылды, event-те кіріс 
деректер жазылды, соның ішінде осы суретке
 
00:33:19.600 --> 00:33:27.720
сілтемесі бар ақпарат. Біз қандай 
сурет жүктелгенін білеміз.

00:33:27.720 --> 00:33:32.520
Содан кейін лямбда өз rоle-ін пайдаланады 
және тиісті құқықтарға ие болады. 

00:33:32.520 --> 00:33:39.800
Ол бұл суретті жүктейді, өңдейді және 
әртүрлі ажыратылымдықта жасайды.

00:33:39.800 --> 00:33:47.800
Оның ішінде thumbnail деп аталатын суретті де 
құрады. Бұл – суреттің шағын нұсқасы, оның

00:33:47.800 --> 00:33:54.080
салмағы өте аз, бірақ ол тізімдегі 
суреттерімізді көргенде көрсетіледі.

00:33:54.080 --> 00:34:06.520
Барлық қажетті суреттерді дайындағаннан кейін,
басқа Amazon S3 bucket-іне жүктейді.

00:34:06.520 --> 00:34:15.240
Сонда қосымша басқа пайдаланушыларға осы 
фотосуреттердің тізімін әртүрлі ажыратымдылықта

00:34:15.240 --> 00:34:23.840
көрсете алады, сонымен қатар біздің 
барлық суреттеріміздің тізімін қарау

00:34:23.840 --> 00:34:30.320
кезінде шағын нұсқасын көрсету 
үшін thumbnail-ды қолдана алады.

00:34:30.320 --> 00:34:35.560
AWS Lambda сервисінің негізгі 
лимиттерімен жақынырақ танысайық.

00:34:35.560 --> 00:34:42.160
Мұнда мен көптеген лимиттер soft және AWS 
Support-ке хабарласу арқылы кеңейтілуі мүмкін 

00:34:42.160 --> 00:34:48.240
екенін атап өткім келеді. Сіз бір аймақтың 
аясында бір уақытта 1000-ға дейін Lambda 

00:34:48.240 --> 00:34:54.560
execution-дарын іске қоса аласыз. Сізде 
белгілі бір функция бар деп елестетіп көрейік, 

00:34:54.560 --> 00:34:58.360
ол қандай да бір өнім туралы 
ақпаратты тасымалдайды,

00:34:58.360 --> 00:35:05.760
және егер кенеттен 1000 пайдаланушы сол өнім
туралы ақпарат сұраса және 1000 лямбданы 

00:35:05.760 --> 00:35:14.880
бір уақытта іске қосу керек болса, AWS 
автоматты түрде 1000-ға дейін лямбда жұмыс 

00:35:14.880 --> 00:35:21.960
істейтін микроконтейнерлер жасайды және осы 
лямбдалардың барлығын сәтті іске қосады.

00:35:21.960 --> 00:35:27.760
Әрі қарай, егер сұраныстар саны күрт 
азаятын болса, барлық жұмыс істеп

00:35:27.760 --> 00:35:34.240
тұрған микроконтейнерлер AWS ішкі 
логикасына сәйкес біртіндеп жойылады.

00:35:34.240 --> 00:35:39.920
Егер сіз көбірек сұраулар алсаңыз, 
retry логикасын реттей аласыз 

00:35:39.920 --> 00:35:44.640
және сұрауыңыз біраз уақыттан 
кейін қайтадан жіберіледі.

00:35:44.640 --> 00:35:55.120
Сол кезде аз лямбдалар іске қосылып 
тұрғандықтан, бұл сұраулар да сәтті өңделеді.

00:35:55.120 --> 00:36:04.280
Егер біз функциямыздың өлшемі, соның ішінде 
код, сондай-ақ іске қосу үшін барлық қажетті 

00:36:04.280 --> 00:36:12.520
кітапханалар туралы айтсақ, ол мұрағатталмаған
күйде өлшемі 250 МБ дейін болуы мүмкін.

00:36:12.520 --> 00:36:19.600
Егер біз Lambda қуаты туралы айтатын болсақ,
онда біздің функцияларымыздың біреуі үшін кем 

00:36:19.600 --> 00:36:28.800
дегенде 128 мегабайт жедел жады және ең 
көбі 10 гигабайт жедел жады бөлуге болады.

00:36:28.800 --> 00:36:34.360
Бұл жерде процессордың ядро саны жедел 
жадыдан бөлінген мегабайт санына

00:36:34.360 --> 00:36:42.320
параллель бөлінетінін атап өткен жөн. Егер 
біз бір функцияны іске қосудың максималды  

00:36:42.320 --> 00:36:51.920
ұзақтығы туралы айтатын болсақ, 
онда бұл 900 секунд немесе 15 минут.

00:36:51.920 --> 00:36:57.640
Сонымен біз бесінші бөлімнің соңына келдік. 
Ең маңызды тармақтарға тоқталып өтейік.

00:36:57.640 --> 00:37:04.560
AWS Lambda – бұл бізді серверсіз 
қуатпен қамтамасыз ететін сервер.

00:37:04.560 --> 00:37:10.120
Мұндағы идея біз өз серверлерімізді 
басқармаймыз, тек біздің кодты енгіземіз.

00:37:10.120 --> 00:37:16.760
Бұл кодты іске қосу туралы барлық 
әрекет AWS жағында жасалады. 

00:37:16.760 --> 00:37:24.640
Сонымен қатар, AWS Lambda автоматты 
масштабтауды қамтиды, яғни егер біздің 

00:37:24.640 --> 00:37:31.280
лямбдаға сұраныстар кенеттен өссе, барлық 
сұраулар қатарынан өңделіп отырады.

00:37:31.280 --> 00:37:37.440
AWS Lambda біздің функцияларымыздың 
бірі үшін 10 гигабайтқа дейін

00:37:37.440 --> 00:37:42.520
жедел жады бөле алатындай 
жеткілікті қуатты болуы мүмкін.

00:37:42.520 --> 00:37:48.000
Сонымен қатар, біздің әр лямбда 
максимум 15 минут іске қосыла алады.

00:37:48.000 --> 00:37:51.960
Бұл көптеген тапсырмаларды 
орындау үшін жеткілікті уақыт.

00:37:51.960 --> 00:38:01.040
Сонымен біз AWS Lambda сервисінің маңызды 
деген аспектілеріне тоқталып өттік.

00:38:01.040 --> 00:38:07.800
Бұл сервис сізге болашақта стартаптарды құру
кезінде пайдалы болады деп үміттенемін. 

00:38:07.800 --> 00:38:12.560
Бұл бұлтта кез-келген нәрсені 
іске қосу үшін тамаша таңдау. 

00:38:12.560 --> 00:38:19.560
Дегенмен, AWS Lambda-ға тым 
байланып та қалмаңыз.

00:38:19.560 --> 00:38:28.280
Тұрақты болған жүктемелеріңізді басқа қуатты 
сервистерге ауыстыру қажет болатын жағдайлар 

00:38:28.280 --> 00:38:33.080
болады. Бірақ біз бастапқы жағдай 
туралы айтатын болсақ, ештеңе анық емес

00:38:33.080 --> 00:38:39.920
әрі белгісіз болса, онда AWS Lambda-дан 
бастап осы лямбдамен бірге жұмыс істейтін

00:38:39.920 --> 00:38:45.520
басқа сервистерге дейінгі барлық serverless 
сервистер мінсіз шешім болып табылады.

00:38:45.520 --> 00:38:54.560
Міне, біз алтыншы бөлімге де жеттік. 
Бүгінгі біздің дәрістің соңғы бөлімі. 

00:38:54.560 --> 00:39:01.600
Біз бұл бөлімде AWS Elastic Beanstalk 
сервисіне толығырақ тоқталамыз.

00:39:01.600 --> 00:39:05.960
AWS Elastic Beanstalk – бұл PaaS, 
яғни Platform as a Service

00:39:05.960 --> 00:39:09.680
түрінде ұсынылатын Compute 
сервистерінің тағы бір мысалы.

00:39:09.680 --> 00:39:14.080
Мұндағы идея сіз өзіңіздің веб-қосымшаңызға 
арналған кодты жүктейсіз, AWS Elastic Beanstalk

00:39:14.080 --> 00:39:20.080
сол веб-қосымшаны іске қосу үшін 
қажетті барлық инфрақұрылымды баптайды. 

00:39:20.080 --> 00:39:28.720
Инфрақұрылымды баптау дегеніміз – 
веб-қосымшаны орнату, 

00:39:28.720 --> 00:39:33.280
жүктемені теңестіруді баптау, сонымен 
қатар автоматты масштабтау және

00:39:33.280 --> 00:39:40.160
веб-қосымшаны бақылау және тіркеуге қатысты 
барлық операциялар. Бұл жерде айта кету керек,

00:39:40.160 --> 00:39:49.320
бұл сервисті пайдалану тегін, яғни сіз 
бұл сервис үшін бір доллар да төлемейсіз.

00:39:49.320 --> 00:39:57.320
Бірақ AWS Elastic Beanstalk 
сервисінің аясында қолданылып,

00:39:57.320 --> 00:40:00.840
бапталған барлық ресурстар 
стандартты тарифтер бойынша төленеді.

00:40:00.840 --> 00:40:09.280
Мысалы, кейбір енгізу параметрлерін AWS Elastic 
Beanstalk сервисіне жіберсеңіз және сіз үшін екі

00:40:09.280 --> 00:40:16.840
Amazon EC2 инстансы бар инфрақұрылым бапталса, 
осы сервистің стандартты тарифі бойынша төлейсіз. 

00:40:16.840 --> 00:40:25.800
Бұл AWS Elastic Beanstalk өзара әрекеттесетін 
барлық басқа IT-ресурстарға және басқа AWS

00:40:25.800 --> 00:40:33.720
сервистеріне қатысты, яғни сіз сол екі Amazon 
EC2 инстансын өзіңіз баптасаңыз да дәл сондай 

00:40:33.720 --> 00:40:39.800
ақша төлейтін едіңіз. Жалғыз айырмашылық – 
инфрақұрылым AWS Elastic Beanstalk

00:40:39.800 --> 00:40:45.600
сервисі арқылы сіз үшін 
автоматты түрде бапталынды.

00:40:45.600 --> 00:40:50.600
Шын мәнінде, сіз сол ақшаны 
төлейсіз, сонымен қатар өз 

00:40:50.600 --> 00:40:55.760
уақытыңызды үнемдейсіз және инфрақұрылымды 
автоматты түрде баптайсыз.

00:40:55.760 --> 00:41:04.480
Мұнда сіз AWS жұмысының қанша бөлігін AWS 
Elastic Beanstalk сервисі арқылы алатынын анық 

00:41:04.480 --> 00:41:11.120
көре аласыз, яғни сіз кодыңыз және AWS Elastic 
Beanstalk сервисінің параметрлерін басқарасыз.

00:41:11.120 --> 00:41:17.560
Қалғанының барлығын AWS басқарады, 
яғни HTTP-сервері, application server, 

00:41:17.560 --> 00:41:22.000
language interpreter, яғни кодтың орындалу 
ортасы, операциялық жүйе және тіпті host.

00:41:22.000 --> 00:41:29.120
AWS Elastic Beanstalk-ті AWS Management 
Console-інде пайдалануға болады немесе

00:41:29.120 --> 00:41:36.720
AWS Elastic Beanstalk көмегімен инфрақұрылымды 
іске қосу үшін AWS CLI пайдалануға болады. 

00:41:36.720 --> 00:41:40.160
Платформаны қолдау туралы айтқанда, 
Docker, Go, Java, NET, Node.js,

00:41:40.160 --> 00:41:48.000
PHP, Python,Ruby және тағы басқа 
платформаларға қолдау көрсетіледі.

00:41:48.000 --> 00:41:52.640
Егер біз қолдау көрсетілетін веб-серверлер 
туралы айтатын болсақ, Java қосымшалары үшін

00:41:52.640 --> 00:42:00.680
Apache Tomcat қолдау көрсетеді, ал PHP, Python 
қосымшаларына Apache HTTP Server қолдау көрсетеді. 

00:42:00.680 --> 00:42:07.840
Node.js қосымшалары үшін NGINX 
және Apache HTTP Server қолжетімді.

00:42:07.840 --> 00:42:15.640
Ruby қосымшасы - Passenger және Puma. .NET 
қосымшалары туралы айтатын болсақ, Java және

00:42:15.640 --> 00:42:25.960
Docker-мен бірге Go, Microsoft Internet 
Information Services, яғни IIS, қолдау көрсетеді.

00:42:25.960 --> 00:42:31.120
AWS Elastic Beanstalk сервисінің 
негізгі артықшылықтарын қарастырайық. 

00:42:31.120 --> 00:42:37.200
Біріншісі – сіз өте тез және оңай бастай аласыз,
яғни веб-қосымшаңызды іске қосасыз, барлық

00:42:37.200 --> 00:42:44.000
қажетті инфрақұрылым бапталады және 
сіз мұның бәріне аз уақыт жұмсайсыз.

00:42:44.000 --> 00:42:47.760
Тағы бір мәселе – сіздің мамандарыңыз, 
әзірлеушілеріңіз операциялық  

00:42:47.760 --> 00:42:55.120
жұмыстардан босатылып, өз бизнес 
мәселелеріне көбірек назар аударса болады. 

00:42:55.120 --> 00:42:59.280
Осылайша, әзірлеушілеріңіздің 
жұмысының тиімділігі артады.

00:42:59.280 --> 00:43:04.400
Басқа мәселе – AWS Elastic Beanstalk 
көптеген веб-қосымшаларға үйлесімді.

00:43:04.400 --> 00:43:14.960
Осылайша, AWS Elastic Beanstalk сервисінің 
мүмкіндіктері веб-қосымшаңызға жеткіліксіз болуы 

00:43:14.960 --> 00:43:22.480
сирек кездеседі. Көп жағдайда AWS Elastic 
Beanstalk-пен жұмыс істегенде бәрі жеткілікті.

00:43:22.480 --> 00:43:35.920
AWS Elastic Beanstalk сіздің ресурстарыңызды 
икемді түрде реттеуге мүмкіндік береді.

00:43:35.920 --> 00:43:40.240
Мысал ретінде, сіз Elastic 
Beanstalk сіз үшін көтере алатын

00:43:40.240 --> 00:43:44.920
Amazon EC2 аясында нақты 
instance type көрсете аласыз.

00:43:44.920 --> 00:43:53.000
Сонымен біз алтыншы бөлімнің соңына жеттік. 
Негізгі ойларға назар аударайық.

00:43:53.000 --> 00:44:02.480
Егер сізде веб-қосымша болса, сіз AWS Elastic 
Beanstalk сервисін міндетті түрде қарастыруыңыз

00:44:02.480 --> 00:44:08.200
керек, өйткені бұл IT-инфрақұрылымыңызды бұлтта 
орнату процесін оңтайландыруға көмектеседі.

00:44:08.200 --> 00:44:11.520
AWS Elastic Beanstalk Java, NET, PHP, 
Node.js, Python, Ruby, Go, Docker

00:44:11.520 --> 00:44:18.480
және басқаларын қоса алғанда, 
платформалардың кең спектрін қолдайды.

00:44:18.480 --> 00:44:21.280
Төлем туралы айтатын болсақ, 
бұл сервис AWS клиенттері үшін

00:44:21.280 --> 00:44:28.400
толығымен тегін және сіз бұл сервисті 
пайдаланғаныңыз үшін төлем жасамайсыз.

00:44:28.400 --> 00:44:35.840
Бірақ сіз оның ресурстарын қолданатын 
сервистеріне стандартты тарифі бойынша төлем 

00:44:35.840 --> 00:44:39.000
жасауыңыз қажет. Мысалы, егер AWS Elastic 
Beanstalk сервисі Amazon EC2 инстанстарын 

00:44:39.000 --> 00:44:47.640
баптаса, сіз сол Amazon EC2 инстанстарына 
стандартты тарифтерінің бөлігі ретінде төлейсіз.

00:44:47.640 --> 00:44:53.040
Сонымен, біз бүгінгі сессиямыздың соңына 
келдік. Ең маңызды сәттерге назар аударайық.

00:44:53.040 --> 00:45:00.360
Осы екі дәрісте біз AWS-те қандай есептеу 
сервистері қолжетімді екенін көрдік.

00:45:00.360 --> 00:45:03.680
Біз Amazon EC2 сервисімен 
тереңірек таныстық.

00:45:03.680 --> 00:45:09.680
Әрі қарай, біз контейнерлермен жұмыс істеген 
кезде қандай сервистер бар екенін қарастырдық.

00:45:09.680 --> 00:45:20.600
Бұл Amazon EKS, Amazon ECS және Amazon ECR. 
Содан кейін біз serverless шешіммен таныстық.

00:45:20.600 --> 00:45:25.120
Бұл AWS Lambda, қандай артықшылықтары 
мен кемшіліктері бар екенін талқыладық.

00:45:25.120 --> 00:45:31.800
Соңында біз веб-қосымшаны жылдам баптау
үшін қолданылатын сервиспен таныстық. 

00:45:31.800 --> 00:45:38.080
Бұл AWS Elastic Beanstalk. AWS 
сервистерінің кең ауқымын ұсынатындығын және

00:45:38.080 --> 00:45:45.240
сіздің бизнес қажеттіліктеріңізге байланысты сіз
қолданатын опциялардың біреуі немесе бірнешеуі 

00:45:45.240 --> 00:45:53.920
сізге сәйкес келуі мүмкін екенін көре аласыз. 
Бұл сіз үшін ең қолайлы және ең тиімді болады.

00:45:53.920 --> 00:46:00.480
Егер сізге белгілі бір сервис 
туралы қосымша ақпарат қажет болса, 

00:46:00.480 --> 00:46:07.640
мұнда сіз үшін пайдалы болуы мүмкін 
қосымша сілтемелерді таба аласыз.

00:46:07.740 --> 00:46:11.880
Бүгінгі дәріс осымен аяқталады. Сіз 
жаңа ақпарат білдіңіз деп ойлаймын. 

00:46:11.880 --> 00:46:14.640
Келесі дәрістерде кездескенше. 
Сау болыңыздар!