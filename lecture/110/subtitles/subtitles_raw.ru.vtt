WEBVTT

00:00:00.000 --> 00:00:06.000
Добрый день уважаемые студенты, я рад вас всех видеть на очередной лекции.

00:00:06.000 --> 00:00:13.000
Тема сегодняшней лекции это база данных. Мы поговорим про сервисы AWS, так или иначе связанные с базами данных.

00:00:13.000 --> 00:00:15.000
Окей, давайте начнем.

00:00:17.000 --> 00:00:20.000
Наша сегодняшняя лекция состоит из четырех частей.

00:00:20.000 --> 00:00:27.000
Мы с вами в самом начале поговорим про сервис Amazon Relational Database Service, вкратце Amazon RDS.

00:00:27.000 --> 00:00:33.000
Далее NoSQL решение Amazon DynamoDB. После этого Amazon Redshift.

00:00:33.000 --> 00:00:41.000
И в самом последнем поговорим про in-house решение от AWS.

00:00:41.000 --> 00:00:44.000
Это база данных Amazon Aurora.

00:00:47.000 --> 00:00:54.000
Начинаем мы с самого популярного сервиса баз данных Amazon Relational Database Service.

00:00:54.000 --> 00:00:57.000
Чаще вы его будете встречать как Amazon RDS.

00:00:57.000 --> 00:01:05.000
Это сервис, который предоставляет вам менеджер решения реализационную базу данных.

00:01:05.000 --> 00:01:12.000
Таким образом большинство задач по администрированию базы данных, она передается AWS.

00:01:12.000 --> 00:01:20.000
Вам нет необходимости заниматься этим, а есть возможность фокусироваться на основных бизнес задачах.

00:01:20.000 --> 00:01:23.000
Что же такое менеджер и аменеджер?

00:01:23.000 --> 00:01:36.000
Давайте попробуем разобрать на примере сервиса S3, а именно фича внутри S3, которая позволяет нам настроить static website hosting.

00:01:36.000 --> 00:01:42.000
Представим, что с одной стороны у нас есть локальный провайдер.

00:01:42.000 --> 00:01:46.000
Вы там покупаете базу данных один сервер.

00:01:46.000 --> 00:01:58.000
На сервере настраиваете веб-сервер, закидываете туда ваш контент вашего сайта и начинаете этот сайт хостить там.

00:01:58.000 --> 00:02:12.000
Параллельно настраиванию вашего веб-сайта в этой виртуальной машине вам необходимо много различных аспектов пройти.

00:02:12.000 --> 00:02:27.000
Начиная от балансировки нагрузки, начиная от настройки самого веб-сервера и заканчивая продвинутыми опциями как автомасштабирование.

00:02:27.000 --> 00:02:30.000
То есть в случае увеличения нагрузки, что происходит?

00:02:30.000 --> 00:02:36.000
Вы как-то отсекаете ваших пользователей либо все-таки обслуживаете всех ваших пользователей.

00:02:36.000 --> 00:02:45.000
Это говорит о том, что вам нужно больше мощностей и происходит автоматическое увеличение количества виртуальных инстанцев.

00:02:45.000 --> 00:02:48.000
И вот эти моменты вам нужно самостоятельно решать.

00:02:48.000 --> 00:02:59.000
Когда мы говорим managed, то есть все это время мы говорили пример хостинга статического веб-сайта в unmanaged виде.

00:02:59.000 --> 00:03:02.000
То есть все вы делаете самостоятельно.

00:03:02.000 --> 00:03:09.000
Если мы говорим про managed решение, как пример можем сказать Amazon S3, а именно feature static website hosting.

00:03:09.000 --> 00:03:20.000
Когда вы делаете минимальные настройки, загружаете в S3 bucket ваши объекты, то есть контент вашего веб-сайта и все, ваш веб-сайт уже настроен, доступен.

00:03:20.000 --> 00:03:29.000
Вам нет необходимости поднимать веб-сервер на инстанции, вам нет необходимости заниматься вопросами автомасштабирования, потому что оно все внутри сидит.

00:03:29.000 --> 00:03:41.000
Также вам нет необходимости разбираться и настраивать дополнительные инструменты для большей доступности.

00:03:41.000 --> 00:03:54.000
То есть Amazon S3 гарантирует, что она всегда доступна, она менее подвержена ошибкам, она автомасштабируется и за это, соответственно, берет некоторую плату.

00:03:54.000 --> 00:04:05.000
Но бывает такое, что это решение в зависимости от вашего сайта, от нагрузки на ваш сайт, оно может быть выгоднее либо невыгодное.

00:04:05.000 --> 00:04:09.000
Это нужно смотреть уже на конкретном примере.

00:04:09.000 --> 00:04:21.000
Но уже тот факт, что вы не потеряли время на настройку вот этого всего веб-сайта вашего, уже сэкономило какое-то количество человеко-часов.

00:04:21.000 --> 00:04:27.000
И на старте вы видите, что Managed решение изначально выгодное.

00:04:27.000 --> 00:04:36.000
Если мы возвращаемся обратно к сервису Amazon RDS, то оно выступает как Managed решение.

00:04:36.000 --> 00:04:40.000
А как Unmanaged выступает настройка базы данных на EC2 инстанции.

00:04:40.000 --> 00:04:45.000
В этом случае вы проходите самостоятельно все этапы настройки этой базы данных.

00:04:45.000 --> 00:04:55.000
Самостоятельно отвечаете за ее масштабирование, за реагирование на падение и, соответственно, доступность.

00:04:55.000 --> 00:05:04.000
Давайте немного подробнее посмотрим, какие сложности возникают при самостоятельной настройке релиционных баз данных.

00:05:04.000 --> 00:05:08.000
Начинается все с того, что вся поддержка, она ложится на вас.

00:05:08.000 --> 00:05:20.000
Далее настройка и установка всех программ, патчей, также патчи безопасности, это все тоже относится к вам.

00:05:20.000 --> 00:05:29.000
Третье это настройка бэкапов, настройка процесса восстановления базы данных.

00:05:29.000 --> 00:05:41.000
Если мы говорим про масштабирование, то с облачным провайдером CWS есть возможность практически неограниченно масштабироваться.

00:05:41.000 --> 00:05:47.000
Так как мы можем запросить необходимое количество копий, реплик баз данных, сколько нам нужно.

00:05:47.000 --> 00:05:53.000
Мы также можем масштабироваться вертикально, то есть увеличивать мощность наших баз данных.

00:05:53.000 --> 00:06:01.000
И это происходит намного быстрее по сравнению с локальным дата центром.

00:06:01.000 --> 00:06:12.000
Так как вам достаточно поменять тип баз данных, перезапустить его и у вас запускается вся та же ваша база данных, но уже на новом более мощном инстансе.

00:06:12.000 --> 00:06:31.000
Вопросы безопасности не только сервера, но и безопасность данных, а также выбор, настройка, установка операционной системы и патчи безопасности, патчи операционной системы.

00:06:31.000 --> 00:06:43.000
Это все те процессы большими блоками, которые вы должны будете делать самостоятельно.

00:06:43.000 --> 00:07:00.000
На этом слайде вы видите три различных варианта хостинга баз данных, начиная от локального дата центра, далее хостинг на виртуальном сервере EC2 и заканчивая менеджер-решением Amazon RDS.

00:07:00.000 --> 00:07:13.000
Вы видите, что список работ он такой же на всех трех вариантах и синим выделены те работы, которые передаются AWS.

00:07:13.000 --> 00:07:25.000
Когда мы говорим про традиционный хостинг, традиционный дата центр, в этом случае все работы по администрированной базе данных передаются вам.

00:07:25.000 --> 00:07:33.000
Скорее всего будет выделен отдельный человек, специалист по базам данных, который каждый этот пункт будет проделывать самостоятельно.

00:07:33.000 --> 00:07:45.000
Когда мы говорим про следующий вариант, это хостинг на виртуальном сервере EC2, то последние два варианта, две опции мы передаем AWS.

00:07:45.000 --> 00:07:50.000
Почему? Потому что эти две опции связаны с работой с железом.

00:07:50.000 --> 00:08:02.000
Так как AWS никого не подпускает в свои дата центры в целях безопасности, он самостоятельно автоматизировал и настроил так, чтобы это все максимально эффективно работало.

00:08:02.000 --> 00:08:10.000
И все, что связано с железом AWS собирает на себя от своих клиентов, клиентов обычного провайдера.

00:08:10.000 --> 00:08:23.000
Все, что не связано с железом, оно остается также у вас и вам самостоятельно нужно настраивать операционную систему на этот виртуальный сервер, настраивать базу данных, настраивать дополнительные приложения и так далее.

00:08:23.000 --> 00:08:34.000
Когда мы говорим про третью опцию, вы видите, что большинство работ, связанные с администрированием базы данных, они передаются AWS.

00:08:34.000 --> 00:08:58.000
Остается лишь application optimization, это то, что вы будете проделывать самостоятельно, а все, что ниже вы можете передать при настройке вашего инстенса базы данных, как входные данные, и они учтутся при автоматизации всех работ, которые есть на стороне AWS.

00:08:58.000 --> 00:09:06.000
IT ресурсом в случае Amazon RDS является instance базы данных.

00:09:06.000 --> 00:09:11.000
Базы данных определяются его классом и сториджем.

00:09:11.000 --> 00:09:26.000
Когда мы говорим про класс, мы дополнительно указываем, какое количество CPU, какое количество оперативной памяти и какой канал сети нам необходим.

00:09:26.000 --> 00:09:45.000
Когда мы говорим про сторидж, мы в том числе указываем, какой тип носителя, либо это SSD, либо это HDD, жесткий диск, и также указываем, сколько гигабайтов памяти нужно на этих жестких дисках.

00:09:45.000 --> 00:10:01.000
Если мы говорим про движки, которые поддерживаются, то это список справа, MySQL, Amazon Aurora, Microsoft SQL, Postgres, MariaDB и Oracle.

00:10:01.000 --> 00:10:10.000
Давайте теперь остановимся на опции, которые доступны внутри Amazon RDS. Это read-реплики.

00:10:10.000 --> 00:10:18.000
Read-реплика – это когда поднимается полноценная копия instance базы данных, но при этом там доступны только операции чтения.

00:10:18.000 --> 00:10:33.000
Когда у вас на основной базе происходит операция записи, то все изменения фиксируются и передаются всем read-репликам в асинхронном режиме и там применяются.

00:10:33.000 --> 00:10:43.000
Таким образом, через какой-то короткий промежуток времени ваши read-реплики становятся идентичными вашей основной базе данных.

00:10:43.000 --> 00:10:54.000
Эта опция доступна для баз данных MySQL, MariaDB, Postgres, а также Amazon Aurora.

00:10:54.000 --> 00:11:09.000
Каждая из ваших read-реплик может быть повышена до уровня основной базы данных по запросу, либо в случае, когда что-то происходит с основной базой данных и она становится недоступной.

00:11:09.000 --> 00:11:31.000
Эта опция используется очень часто при настройке disaster recovery, когда ваша инфраструктура настроена на двух регионах, когда что-то происходит с основным регионом, то весь ваш трафик на ваше приложение передается на другой регион, чтобы продолжать обслуживать ваших пользователей.

00:11:31.000 --> 00:11:52.000
Так как регион падает достаточно редко, но такое тоже бывает, то DR могут позволить себе очень большие компании, но настроив один раз disaster recovery, они максимально гарантируют себе, что приложение всегда будет доступно.

00:11:52.000 --> 00:12:02.000
И здесь тот момент, который следует упомянуть, read-реплики могут быть настроены на другом регионе.

00:12:02.000 --> 00:12:12.000
Таким образом, на основном регионе у вас основной инстанс баз данных, а на запасном регионе вы поднимаете read-реплику.

00:12:12.000 --> 00:12:38.000
В случае, когда падает весь регион, сервис Amazon RTS также падает, ваш основной инстанс баз данных становится недоступным. В этом случае, автоматически read-реплика на втором регионе повышается до уровня основной баз данных и операции записи там становятся доступными.

00:12:38.000 --> 00:12:48.000
Теперь у вас возникнет, скорее всего, вопрос, когда нам необходимо использовать read-реплики. Название говорит за себя.

00:12:48.000 --> 00:13:06.000
Если у вас есть база данных, на котором в основном запускаются операции чтения, то настроив read-реплику, вы можете ваши нагрузки чтения распределить по нескольким инстансам баз данных.

00:13:06.000 --> 00:13:23.000
Это помогает разгрузить базу данных, и если вы все операции чтения раскидаете по read-репликам и освободите базу данных основную, то она полноценно может быть доступной для операции записи.

00:13:23.000 --> 00:13:48.000
Другой пример, это когда у вас есть некоторые тяжелые запросы, которые по тем или иным причинам запускаются. Это может быть, например, когда пользователь приложения запускает некоторые функции, и эта функция достаточно дорогостоящая и запускает сложные запросы внутри баз данных.

00:13:48.000 --> 00:14:02.000
Другой пример, у вас настроены на ежедневной основе раз в день, может быть, несколько раз в день запуск тяжелых запросов для сбора данных для отчета руководству.

00:14:02.000 --> 00:14:11.000
То есть, агрегируется, собирается вся информация, агрегируется и в виде отчетов компонуется и передается дальше.

00:14:11.000 --> 00:14:27.000
Так как любые тяжелые запросы, они дают нагрузку на базу данных, базы данных у вас одна, это один цельный инстанс, то эти тяжелые запросы, они дают эффект на более простые запросы.

00:14:27.000 --> 00:14:33.000
Таким образом, простые запросы, они также продолжат запускаться, но будут отрабатывать медленнее.

00:14:33.000 --> 00:14:54.000
Поэтому, бестпракцией является перенести по большей части ваши read нагрузки на read реплику и операции записи оставить на основной базе данных, где операции записи доступны.

00:14:54.000 --> 00:15:06.000
При этом всегда помните, что процесс репликации, он асинхронный, таким образом, не все read операции могут быть перенесены на read реплику.

00:15:06.000 --> 00:15:24.000
Как первый шаг, всегда рассматривайте увеличение мощности инстанца базы данных, в тот момент, когда вы видите, что какую-то часть read записи можно перенести на read реплику, в этом случае рекомендуется рассматривать.

00:15:24.000 --> 00:15:44.000
Почему read реплика это вторая либо третья опция, не самая первая, потому что дополнительная read реплика без острой необходимости увеличивает почти в два раза ваши расходы на сервис Amazon Ardes, потому что у вас два полноценных одинаковых инстанца.

00:15:44.000 --> 00:15:54.000
В этом случае нужно, взвесив все минусы и плюсы, начинать использовать read реплики.

00:15:54.000 --> 00:16:05.000
Давайте рассмотрим попунктно, в каких случаях следует использовать Amazon Ardes и в каких случаях не следует.

00:16:05.000 --> 00:16:19.000
Когда мы говорим не следует использовать Amazon Ardes, есть несколько разных вариантов, начиная от хостинга баз данных на EC2 инстанции, либо использовать другой более подходящий сервис AWS.

00:16:19.000 --> 00:16:37.000
Начнем мы с пунктов, когда нам следует использовать Amazon Ardes, это когда у нас достаточно сложные запросы, у нас есть транзакции, под сложными запросами подразумевается запросы, в которых несколько join, то есть вы работаете одновременно с несколькими таблицами.

00:16:37.000 --> 00:16:49.000
Далее, если у вас до 30 тысяч IOPs, то есть операция записи и чтения в секунду в эту базу данных.

00:16:49.000 --> 00:17:18.000
Далее, если вам нужна высокая надежность и в случае, когда вам достаточно одного инстанца базы данных, в некоторых случаях, когда у вас очень большой объем данных, то Ardes не совсем подходит, так как ваши данные переходят в разряд Big Data или не структурированных данных.

00:17:18.000 --> 00:17:26.000
Когда рекомендуется и правильнее будет использовать другие более подходящие сервисы.

00:17:26.000 --> 00:17:51.000
Когда мы говорим про пункты, когда не следует использовать Amazon Ardes, это когда у вас достаточно большой объем IOPs, операции записи и чтения, например 150 тысяч операций записи в секунду или больше, в этом случае у вас действительно большие нагрузки.

00:17:51.000 --> 00:18:00.000
Следует посмотреть в сторону Amazon Redshift либо настройки Data Lake в S3.

00:18:00.000 --> 00:18:23.000
Другой пункт это когда данные могут быть поделены на shard, это так называемые независимые куски данных между собой, которые независимо могут работать, независимо могут использоваться, но объем данных настолько большой, что вы вынуждены делить эти данные на shard.

00:18:23.000 --> 00:18:44.000
Другой пункт это когда вам нет необходимости использовать сложные запросы с использованием языка SQL, это простые операции GET и PUT, в этом случае следует посмотреть в сторону noSQLBase данных, как вариант это сервис DynamoDB.

00:18:44.000 --> 00:19:09.000
И последний пункт это когда вам нужна некоторая тонкая настройка вашей базы данных, в этом случае эта опция недоступна для Amazon Ardes, может быть недоступна и остается вариант либо самостоятельно хостить, либо смотреть в сторону других сервисов AWS.

00:19:09.000 --> 00:19:17.000
Давайте теперь рассмотрим те факторы, которые влияют на итоговую стоимость использования сервиса Amazon Ardes.

00:19:17.000 --> 00:19:29.000
Первое это то количество времени, когда база данных запущена, в том случае когда вы останавливаете базу данных, в этом случае оплата она не начисляется.

00:19:29.000 --> 00:19:43.000
Представим, что мы настроили, подняли базу данных, она была запущена 4 часа, через 4 часа вы остановили ее до конца месяца, в этом случае в конце месяца придет счет на оплату этих 4 часов.

00:19:43.000 --> 00:19:55.000
Другой пункт это то, что чем больше, чем мощнее ваш инстанс баз данных, тем дороже будет стоить каждый час ее работы.

00:19:55.000 --> 00:20:13.000
Есть два варианта опции покупки баз данных, это on demand, когда мы запускаем нашу базу данных на то количество времени, какое нам нужно.

00:20:13.000 --> 00:20:16.000
В тот момент, когда мы останавливаем, оплата не начисляется.

00:20:16.000 --> 00:20:39.000
Когда мы говорим второй вариант, это Reserved Instances, мы можем сказать, что мы определенный тип баз данных будем использовать в течении года, либо 3, и соответственно AWS на эту информацию, в зависимости от того, какую часть мы предоплатим, предоставит нам определенные скидки.

00:20:39.000 --> 00:20:49.000
Reserved Instances, как ранее мы говорили, это тот вариант, когда у вас есть постоянные нагрузки 24 часа в сутки, 7 дней в неделю.

00:20:49.000 --> 00:20:59.000
В случае, когда этого нет, рекомендуется оставаться на типе on demand.

00:20:59.000 --> 00:21:11.000
Другой вариант, фактор, который также влияет на стоимость сервиса Amazon RDS, это так называемый deployment type, то есть, грубо говоря, какое количество инстансов базы данных запущено.

00:21:11.000 --> 00:21:16.000
Когда мы деплоим нашу базу данных на одной availability зоне, то это один инстанс.

00:21:16.000 --> 00:21:25.000
Когда мы включаем опцию multiple AZ, то на нескольких availability зонах у нас поднимаются по одному инстанцу баз данных.

00:21:25.000 --> 00:21:29.000
В этом случае происходит оплата за каждый этот инстанс.

00:21:29.000 --> 00:21:37.000
Представим, что мы подняли вашу базу данных на двух availability зонах.

00:21:37.000 --> 00:21:44.000
Таким образом, стоимость будет, соответственно, в два раза дольше, чем бы она была запущена на одной availability зоне.

00:21:44.000 --> 00:21:47.000
Сюда также относится и опция read-replic.

00:21:47.000 --> 00:21:58.000
То есть, read-replica – это тот же инстанс базы данных, единственные операции записи запрещены, но при этом это полноценный инстанс с точки зрения железа.

00:21:58.000 --> 00:22:05.000
И оплата идет согласно тарифу, согласно характеристикам этого конкретного инстанца.

00:22:05.000 --> 00:22:25.000
И последнее, которое также нужно учитывать, это то, что за transfer данных, в случае если это происходит внутри одного региона, в этом случае оплата не происходит.

00:22:25.000 --> 00:22:39.000
В случае, когда у нас идет outbound data transfer, то есть в другой регион, то либо мы запрашиваем эти данные из AWS локально,

00:22:39.000 --> 00:22:45.000
в этом случае идет за outbound data transfer, идет соответствующая оплата согласно тарифу.

00:22:45.000 --> 00:22:53.000
На этом мы добрались до конца первой секции, просмотрели сервис Amazon RDS.

00:22:53.000 --> 00:22:56.000
Давайте остановимся на самых основных моментах.

00:22:56.000 --> 00:22:58.000
Первое – это то, что managed service.

00:22:58.000 --> 00:23:05.000
Таким образом большинство административных задач переходят на AWS, и мы можем сконцентрироваться на наших бизнес-задачах.

00:23:05.000 --> 00:23:15.000
Для того, чтобы работать с RDS, мы можем использовать AWS Management Console, AWS CLI, либо SDK.

00:23:15.000 --> 00:23:26.000
Так как это management, это managed решение, то вопросы скейлинга, availability, они также переходят на сторону AWS.

00:23:26.000 --> 00:23:34.000
Нам лишь необходимо ввести некоторые входные данные, которые полноценно настраивают нашу базу данных согласно требованиям бизнеса.

00:23:34.000 --> 00:23:40.000
Если мы говорим про движки, которые поддерживаются, то это Amazon Aurora, in-house решение от AWS.

00:23:40.000 --> 00:23:48.000
И далее это Postgres, MySQL, MariaDB, Oracle и Microsoft SQL Server.

00:23:48.000 --> 00:23:58.000
Мы добрались до второй части нашей сегодняшней лекции, и здесь поговорим подробнее про NoSQL решение Amazon DynamoDB.

00:23:58.000 --> 00:24:08.000
Перед тем, как мы перейдем к разбору этого сервиса, давайте остановимся на том, чем отличается релиционная база данных от нерелиционной.

00:24:08.000 --> 00:24:11.000
То есть NoSQL баз данных.

00:24:11.000 --> 00:24:23.000
Если мы говорим про единицы хранения, то в этом случае, в случае relational database, у нас есть таблицы, в таблицах есть записи, в каждой записи есть колонка.

00:24:23.000 --> 00:24:30.000
Она фиксирована, то есть схема, структура этой таблицы, она фиксирована.

00:24:30.000 --> 00:24:38.000
Если вы добавляете новую колонку, в этом случае она добавляется для всех записей.

00:24:38.000 --> 00:24:48.000
Когда мы говорим про NoSQL баз данных, в этом случае мы работаем с некоторой структурой ключ значения.

00:24:48.000 --> 00:24:51.000
В этом случае у нас структура динамическая.

00:24:51.000 --> 00:24:58.000
Например, у нас может быть одна запись, в которой определенный набор ключей соответствующими значениями,

00:24:58.000 --> 00:25:08.000
а следующая запись, она может содержать совершенно другой, не совпадающий список ключей и соответственно значения.

00:25:08.000 --> 00:25:11.000
Таким образом, структура динамическая.

00:25:11.000 --> 00:25:21.000
Когда мы говорим про то, как мы запрашиваем и как работаем с данными, в случае с релационной баз данных, мы используем язык SQL.

00:25:21.000 --> 00:25:27.000
Когда мы говорим про non-relational баз данных, то мы используем операции get и put.

00:25:27.000 --> 00:25:35.000
То есть, какие-то сложные операции, сложные запросы, в случае с NoSQL базами данных мы делать, к сожалению, не можем.

00:25:35.000 --> 00:25:49.000
Если мы говорим про масштабирование релационной базы данных, это одна сущность, одна база данных и масштабирование производится вертикально.

00:25:49.000 --> 00:25:56.000
То есть, увеличивается мощность этой конкретной базы данных, то есть сервера, на котором хостится база данных.

00:25:56.000 --> 00:26:08.000
Когда мы говорим про NoSQL решение, в этом случае особенность NoSQL баз данных такая, что данных может быть очень много и соответственно масштабируется это все горизонтально.

00:26:08.000 --> 00:26:16.000
Мы можем работать с шардами, то есть кусками данных, которые не зависят от других шардов.

00:26:16.000 --> 00:26:28.000
Таким образом, размеры NoSQL баз данных может десятки, сотни, тысячи раз превышать размеры релационных баз данных.

00:26:28.000 --> 00:26:36.000
И сами по себе данные, которые находятся внутри релационных баз данных, это достаточно структурированные, четкие данные.

00:26:36.000 --> 00:26:41.000
Когда мы говорим про NoSQL баз данных, данные они динамические, нет определенной структуры.

00:26:41.000 --> 00:26:45.000
Соответственно, мы работаем с полуструктурированными данными.

00:26:45.000 --> 00:26:53.000
Когда мы говорим про релационные базы данных, это Amazon RDS.

00:26:53.000 --> 00:26:59.000
В случае, когда мы говорим про NoSQL баз данных, это Amazon DynamoDB.

00:26:59.000 --> 00:27:08.000
То есть это то решение, которое предоставляет Managed и Serverless Service для работы с NoSQL базами данных.

00:27:08.000 --> 00:27:12.000
� азмеры этой базы данных фактически не ограничены.

00:27:12.000 --> 00:27:19.000
Мы работаем с айтомами, то есть это аналог строки в релационные баз данных и может содержать различные атрибуты.

00:27:19.000 --> 00:27:24.000
Они могут динамически быть изменены на уровне каждой строки.

00:27:24.000 --> 00:27:35.000
Все запросы, которые происходят в DynamoDB, они Single Digit Millisecond, то есть отрабатывают в течение нескольких миллисекунд.

00:27:35.000 --> 00:27:44.000
В DynamoDB есть несколько основных компонентов. Это таблицы, айтомы и атрибуты.

00:27:44.000 --> 00:27:46.000
Таблицы – это набор айтомов.

00:27:46.000 --> 00:27:52.000
Айтом – это некоторый JSON документ, который состоит из набора ключ и значения.

00:27:52.000 --> 00:28:02.000
Таким образом, атрибутом выступает как раз таки ключ внутри этого документа.

00:28:02.000 --> 00:28:13.000
У нас есть два варианта, как мы можем запросить данные из таблицы DynamoDB.

00:28:13.000 --> 00:28:22.000
Первое – мы можем обратиться по его primary key, то есть уникальному ключу, и напрямую излечь нужные нам документы.

00:28:22.000 --> 00:28:27.000
Это самый дешевый вариант и самый быстрый вариант излечения данных.

00:28:27.000 --> 00:28:34.000
Второй вариант – это использование scan, то есть сканирование всех айтомов, всех документов на предмет совпадения,

00:28:34.000 --> 00:28:42.000
и, соответственно, все айтомы, которые совпали, возвращаются к пользователю.

00:28:42.000 --> 00:28:45.000
В этом случае у нас больше возможностей.

00:28:45.000 --> 00:28:51.000
Мы можем наложить дополнительные условия на атрибуты, другие не основные атрибуты.

00:28:51.000 --> 00:28:58.000
Но следует отметить, что операция scan достаточно дорогостоящая с точки зрения использования айти ресурсов,

00:28:58.000 --> 00:29:04.000
и, соответственно, в денежном выражении это также выходит дороже.

00:29:04.000 --> 00:29:11.000
Таким образом, рекомендация построить структуру таблицы DynamoDB таким образом,

00:29:11.000 --> 00:29:16.000
чтобы большинство ваших запросов происходило через primary key.

00:29:16.000 --> 00:29:27.000
Это максимально удешевит стоимость сервиса DynamoDB, при этом все ваши запросы будут отрабатывать максимально быстро.

00:29:30.000 --> 00:29:34.000
Давайте теперь рассмотрим, какие виды primary key у нас бывают.

00:29:34.000 --> 00:29:36.000
Выделяю два вида – single key и compound key.

00:29:36.000 --> 00:29:42.000
Single key – это когда уникальным ключом выступает один атрибут.

00:29:42.000 --> 00:29:47.000
То есть мы говорим, у нас есть атрибут pk, так мы его назовем,

00:29:47.000 --> 00:29:55.000
и значением каждой строчки выступает некоторое уникальное значение.

00:29:55.000 --> 00:30:05.000
Если мы говорим, что мы храним в нашей таблице DynamoDB информацию о наших товарах на веб-сайте,

00:30:05.000 --> 00:30:13.000
то в этот атрибут мы положим уникальный ID каждого товара.

00:30:13.000 --> 00:30:27.000
Другой вариант праймерики – это compound key, когда уникальным должны быть связка partition key и sort key.

00:30:27.000 --> 00:30:31.000
В этом случае partition key может быть не уникальным сам по себе,

00:30:31.000 --> 00:30:36.000
sort key также может быть не уникальным сам по себе, но связка должна быть уникальной.

00:30:40.000 --> 00:30:43.000
На этом мы добрались до конца второй секции.

00:30:43.000 --> 00:30:47.000
Мы подробно рассмотрели сервис Amazon DynamoDB.

00:30:47.000 --> 00:30:50.000
И давайте остановимся на самых основных моментах.

00:30:50.000 --> 00:30:57.000
Это сервис managed и serverless сервис, который предоставляет noSQL базы данных.

00:30:57.000 --> 00:31:05.000
NoSQL базы данных – это таблица, в которой мы работаем с JSON объектами.

00:31:05.000 --> 00:31:10.000
Эти JSON объекты, они динамически по своей структуре,

00:31:10.000 --> 00:31:15.000
и, соответственно, если мы работаем с неструктурированными данными,

00:31:15.000 --> 00:31:19.000
то DynamoDB больше нам подходит.

00:31:19.000 --> 00:31:22.000
В случае, когда мы работаем с структурированными данными,

00:31:22.000 --> 00:31:27.000
в этом случае больше нам может подойти Amazon RDS.

00:31:29.000 --> 00:31:33.000
Мы с вами добрались до третьей части нашей лекции,

00:31:33.000 --> 00:31:36.000
и подробнее поговорим про сервис Amazon Redshift.

00:31:36.000 --> 00:31:43.000
Amazon Redshift – это managed сервис, который предоставляет нам data warehouse.

00:31:43.000 --> 00:31:51.000
То есть это база данных, в которой мы проводим некоторые аналитические запросы на всех наших данных.

00:31:51.000 --> 00:31:57.000
Это та база данных, которая может агрегировать данные из нескольких источников.

00:31:57.000 --> 00:32:04.000
Если проводить аналогию с релационной баз данных Amazon RDS,

00:32:04.000 --> 00:32:07.000
то там мы работаем с транзакционными данными.

00:32:07.000 --> 00:32:11.000
То есть там мало сложных запросов.

00:32:11.000 --> 00:32:18.000
В основном мы вводим некоторые данные по нашим пользователям,

00:32:18.000 --> 00:32:24.000
например, и считываем наши данные для того, чтобы наш веб-сервис корректно работал.

00:32:24.000 --> 00:32:28.000
В случае, когда нам необходимо провести некоторый анализ,

00:32:28.000 --> 00:32:33.000
собрать данные с различных источников и передать эти агрегированные данные

00:32:33.000 --> 00:32:36.000
руководству для принятия некоторых бизнес-решений,

00:32:36.000 --> 00:32:40.000
то в этом случае Amazon Redshift лучше подходит.

00:32:40.000 --> 00:32:50.000
Redshift – это тот сервис, который может обращаться к различным другим сервисам хранения

00:32:50.000 --> 00:32:56.000
и получать оттуда данные, отрабатывать на этих данных сложнейшие SQL-запросы

00:32:56.000 --> 00:33:02.000
для того, чтобы агрегировать и получать различную перспективу на этих данных.

00:33:02.000 --> 00:33:07.000
Как примерами источников, может выступать S3, DynamoDB, RDS.

00:33:07.000 --> 00:33:14.000
Как вы видите, все основные сервисы в работе с данными могут быть интегрированы с Redshift.

00:33:14.000 --> 00:33:19.000
Если говорить про внутреннюю кухню сервиса Amazon Redshift,

00:33:19.000 --> 00:33:21.000
то она состоит из двух частей.

00:33:21.000 --> 00:33:26.000
Первая – это одна-единственная лидернода, то есть это та нода,

00:33:26.000 --> 00:33:31.000
которая передает команды нижним нодам,

00:33:31.000 --> 00:33:36.000
а эти нижние ноды фактически отрабатывают эти SQL-запросы на данных

00:33:36.000 --> 00:33:41.000
и передают уже конечный результат лидерноде.

00:33:41.000 --> 00:33:50.000
Таким образом происходит такая оптимизация работы с этими данными.

00:33:50.000 --> 00:33:54.000
Это все прозрачно для пользователей сервиса,

00:33:54.000 --> 00:34:01.000
и мы в итоге получаем достаточно мощный движок для работы с большими объемами данных.

00:34:01.000 --> 00:34:08.000
Давайте рассмотрим основные юсткейсы использования сервиса Amazon Redshift.

00:34:08.000 --> 00:34:13.000
Самый первый и самый популярный – это миграция локального DWH,

00:34:13.000 --> 00:34:17.000
то есть Data Warehouse, на облачное решение, то есть Amazon Redshift.

00:34:17.000 --> 00:34:21.000
Второе – это Big Data, то есть есть компании,

00:34:21.000 --> 00:34:25.000
которые накапливают большой объем структурированной либо неструктурированной информации

00:34:25.000 --> 00:34:28.000
и в какой-то момент решают проанализировать эти данные

00:34:28.000 --> 00:34:33.000
для того, чтобы извлечь некоторую бизнес важную информацию.

00:34:33.000 --> 00:34:43.000
В этом случае эти данные переносятся в облако, а именно переносятся в Amazon Redshift,

00:34:43.000 --> 00:34:48.000
и там эти данные анализируются с использованием стандартного SQL.

00:34:48.000 --> 00:34:51.000
И третья опция – это использование Amazon Redshift

00:34:51.000 --> 00:34:57.000
для предоставления некоторых сервиса расчетов, то есть Software as a Service.

00:34:57.000 --> 00:34:59.000
Представьте, что у вас есть некоторый веб-сайт,

00:34:59.000 --> 00:35:03.000
он производит некоторые расчеты, анализы на основе некоторых данных.

00:35:03.000 --> 00:35:10.000
Примером может быть анализ, например, страховых данных для принятия определенного решения.

00:35:10.000 --> 00:35:14.000
В этом случае страховые компании загружают эти данные на ваш веб-сайт,

00:35:14.000 --> 00:35:17.000
через этот веб-сайт попадает ваш Redshift,

00:35:17.000 --> 00:35:21.000
и производится некоторый стандартный анализ

00:35:21.000 --> 00:35:26.000
и возвращается некоторый результат уже этим страховым компаниям, вашим клиентам.

00:35:26.000 --> 00:35:33.000
Мы добрались до конца третьей части нашей сегодняшней лекции,

00:35:33.000 --> 00:35:36.000
подробнее поговорили про сервис Amazon Redshift.

00:35:36.000 --> 00:35:38.000
Давайте остановимся на самых основных моментах.

00:35:38.000 --> 00:35:46.000
Amazon Redshift – это сервис, менеджер, решение, которое предоставляет вам Data Warehouse,

00:35:46.000 --> 00:35:49.000
DWH, склад данных либо витрина данных.

00:35:49.000 --> 00:35:55.000
Это некоторая база данных, которая может содержать в себе структурированные, не структурированные информацию,

00:35:55.000 --> 00:36:03.000
также может обращаться к внешним источникам данных для того, чтобы подтягивать данные,

00:36:03.000 --> 00:36:11.000
запускать на них сложные SQL-запросы, тяжелые, и получать какую-то важную бизнес-информацию.

00:36:11.000 --> 00:36:23.000
Amazon Redshift нативно интегрируется с основными сервисами охранения, это S3, RDS, DynamoDB.

00:36:23.000 --> 00:36:28.000
А мы с вами добрались до последней части нашей сегодняшней лекции,

00:36:28.000 --> 00:36:31.000
подробно поговорим про сервис Amazon Aurora.

00:36:31.000 --> 00:36:39.000
Amazon Aurora – это сервис, который предоставляет реализационную базу данных,

00:36:39.000 --> 00:36:49.000
in-house решение, то есть внутренняя разработка AWS, базирующаяся на двух движках реализационных баз данных.

00:36:49.000 --> 00:36:52.000
Это MySQL и Postgres.

00:36:52.000 --> 00:37:05.000
Это решение, оно обладает рядом преимуществ по сравнению с любыми другими движками Amazon RDS.

00:37:05.000 --> 00:37:15.000
По ценам оно по большей части дешевле по сравнению с RDS.

00:37:15.000 --> 00:37:23.000
Более того, так как это внутреннее нативное решение самого AWS,

00:37:23.000 --> 00:37:34.000
то еще большая часть задач по администрированию вашей базы данных переносится на сторону AWS и вас еще больше разгружает.

00:37:34.000 --> 00:37:43.000
От себя хотел бы отметить, что даже если Amazon Aurora базируется на MySQL и Postgres,

00:37:43.000 --> 00:37:55.000
тем не менее в нем содержится ряд дополнительного функционала, который не существует на MySQL и Postgres.

00:37:55.000 --> 00:38:04.000
И в будущем, если вы захотите переехать от Avror на другую базу данных, это может быть очень дорого и сложно,

00:38:04.000 --> 00:38:16.000
ввиду того, что она не стопроцентно переносится на двигатель MySQL и Postgres.

00:38:16.000 --> 00:38:25.000
Перед тем, как вы начнете использование Avror в будущем, я рекомендую взвесить все за и против.

00:38:25.000 --> 00:38:39.000
В том случае, когда вы стопроцентно знаете и решили, что вы будете двигаться с AWS, не будете рассматривать сторонние облачные провайдеры,

00:38:39.000 --> 00:38:44.000
у вас никогда не будет задачи переехать на другого облачного провайдера.

00:38:44.000 --> 00:38:58.000
Также, если вы хотите получить все те преимущества, которые важны для вашего бизнеса, которых нет на стандартных движках RDS, MySQL, Postgres, либо других,

00:38:58.000 --> 00:39:07.000
то в этом случае вы можете продолжать с Avror, вы получите все преимущества, это будет решение дешевле.

00:39:07.000 --> 00:39:16.000
В том случае, если есть некоторый риск смены облачного провайдера, либо смены движка,

00:39:16.000 --> 00:39:21.000
то в этом случае настоятельно рекомендую задуматься перед тем, как начинать работу с Avror,

00:39:21.000 --> 00:39:32.000
потому как начать всегда легко, в том случае, когда вам понадобится перенос, очень много ресурсов, сил и денег может быть потрачено

00:39:32.000 --> 00:39:37.000
только на процесс миграции с Avror на любую другую базу данных.

00:39:40.000 --> 00:39:44.000
На этом слайде представлены основные преимущества сервиса Amazon Aurora,

00:39:44.000 --> 00:39:53.000
это то, что этот сервис является менеджед сервисом, оно является достаточно простым в настройке, так как это нативное решение,

00:39:53.000 --> 00:39:57.000
и то, что мы оплачиваем только за то, что мы используем.

00:39:57.000 --> 00:40:04.000
Если говорить про доступность, Amazon Aurora изначально построена высокодоступным,

00:40:04.000 --> 00:40:14.000
так как ваши данные реплицируются в 3 availability зоны, более того, бэкапы сохраняются в Amazon S3.

00:40:17.000 --> 00:40:25.000
Amazon Aurora может поднять до 15 read replic, и это минимизирует риск того, что данные будут потеряны.

00:40:25.000 --> 00:40:30.000
И в тот момент, когда возникают проблемы с основной базой данных,

00:40:30.000 --> 00:40:36.000
то одна из read replic автоматически повышается до уровня основной базы данных.

00:40:39.000 --> 00:40:46.000
На этом мы завершаем четвертую секцию, давайте остановимся на самых основных моментах.

00:40:46.000 --> 00:40:53.000
Amazon Aurora это внутреннее решение AWS, которое предоставляет вам реализационные базы данных.

00:40:53.000 --> 00:40:59.000
Оно имеет ряд преимуществ по сравнению с решением Amazon RDS,

00:40:59.000 --> 00:41:06.000
оно дешевле по сравнению с другими движками сторони Amazon RDS,

00:41:06.000 --> 00:41:16.000
и также есть в наличии ряд удобных доработок движка.

00:41:16.000 --> 00:41:20.000
Как движок может выступать? Движок MySQL либо Postgres.

00:41:20.000 --> 00:41:28.000
Единственный момент, который нужно обязательно учитывать, это то, что это внутреннее решение.

00:41:28.000 --> 00:41:34.000
Как только вы начинаете использовать Amazon Aurora, то вы привязываетесь к AWS,

00:41:34.000 --> 00:41:37.000
вы привязываетесь к конкретно этому сервису.

00:41:37.000 --> 00:41:45.000
И в случае, если вы не собираетесь в будущем мигрировать к другому облачному провайдеру,

00:41:45.000 --> 00:41:52.000
либо на другой движок, например, тот же Amazon RDS, на том же движке MySQL,

00:41:52.000 --> 00:41:59.000
то в будущем это может стоить дорого, потребовать достаточно большие ресурсы.

00:41:59.000 --> 00:42:06.000
В случае, когда такого риска нет, и вы знаете, что вы до конца будете использовать AWS

00:42:06.000 --> 00:42:14.000
и сервис Amazon Aurora как реализационный баз данных, в этом случае это очень хорошее решение.

00:42:14.000 --> 00:42:18.000
Хорошая опция и рекомендую ее использовать.

00:42:22.000 --> 00:42:25.000
На этом мы завершили все наши секции.

00:42:25.000 --> 00:42:30.000
Давайте посмотрим на этот слайд, который резюмирует все то, что мы разобрали.

00:42:30.000 --> 00:42:39.000
Если нам нужна реализационная база данных, то тот сервис, который максимально нам подходит, это Amazon RDS.

00:42:39.000 --> 00:42:44.000
Если же нам нужна NoSQL база данных, которая может бесконечно масштабироваться,

00:42:44.000 --> 00:42:47.000
то мы выбираем Amazon DynamoDB.

00:42:47.000 --> 00:43:02.000
В случае, если нам нужна база данных, где мы можем производить любые кастомизации движка,

00:43:02.000 --> 00:43:07.000
нам нужен доступ к операционной системе, где запущена база данных,

00:43:07.000 --> 00:43:14.000
в этом случае рекомендуется поднять самостоятельно базу данных на инстансе EC2.

00:43:14.000 --> 00:43:21.000
В случае, если нам нужно специфичное решение, например, для машин ленинга,

00:43:21.000 --> 00:43:29.000
для склада данных, для витрины данных, либо для работы с графами,

00:43:29.000 --> 00:43:39.000
то в этом случае есть специально созданные для этого отдельные сервисы по работе с данными на стороне AWS.

00:43:39.000 --> 00:43:45.000
На этом мы завершаем нашу лекцию.

00:43:45.000 --> 00:43:55.000
Буквально резюмируя, что мы прошли, мы познакомились с четырьмя самыми основными сервисами баз данных внутри AWS.

00:43:55.000 --> 00:44:04.000
Это RDS Relational Database Service, это DynamoDB, далее Amazon Redshift и Amazon Aurora.

00:44:04.000 --> 00:44:15.000
На этом слайде представлены ссылки, которые вам могут понадобиться для дополнительного углубленного изучения пройденных сервисов.

00:44:15.000 --> 00:44:20.000
На этом мы завершаем нашу сессию.

00:44:20.000 --> 00:44:27.000
Я надеюсь, вы получили более полное представление о пройденных сервисах.

00:44:27.000 --> 00:44:50.000
Спасибо за внимание. Увидимся с вами на следующих наших активностях.