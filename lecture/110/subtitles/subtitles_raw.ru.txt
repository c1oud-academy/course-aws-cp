 Добрый день уважаемые студенты, я рад вас всех видеть на очередной лекции. Тема сегодняшней лекции это база данных. Мы поговорим про сервисы AWS, так или иначе связанные с базами данных. Окей, давайте начнем. Наша сегодняшняя лекция состоит из четырех частей. Мы с вами в самом начале поговорим про сервис Amazon Relational Database Service, вкратце Amazon RDS. Далее NoSQL решение Amazon DynamoDB. После этого Amazon Redshift. И в самом последнем поговорим про in-house решение от AWS. Это база данных Amazon Aurora. Начинаем мы с самого популярного сервиса баз данных Amazon Relational Database Service. Чаще вы его будете встречать как Amazon RDS. Это сервис, который предоставляет вам менеджер решения реализационную базу данных. Таким образом большинство задач по администрированию базы данных, она передается AWS. Вам нет необходимости заниматься этим, а есть возможность фокусироваться на основных бизнес задачах. Что же такое менеджер и аменеджер? Давайте попробуем разобрать на примере сервиса S3, а именно фича внутри S3, которая позволяет нам настроить static website hosting. Представим, что с одной стороны у нас есть локальный провайдер. Вы там покупаете базу данных один сервер. На сервере настраиваете веб-сервер, закидываете туда ваш контент вашего сайта и начинаете этот сайт хостить там. Параллельно настраиванию вашего веб-сайта в этой виртуальной машине вам необходимо много различных аспектов пройти. Начиная от балансировки нагрузки, начиная от настройки самого веб-сервера и заканчивая продвинутыми опциями как автомасштабирование. То есть в случае увеличения нагрузки, что происходит? Вы как-то отсекаете ваших пользователей либо все-таки обслуживаете всех ваших пользователей. Это говорит о том, что вам нужно больше мощностей и происходит автоматическое увеличение количества виртуальных инстанцев. И вот эти моменты вам нужно самостоятельно решать. Когда мы говорим managed, то есть все это время мы говорили пример хостинга статического веб-сайта в unmanaged виде. То есть все вы делаете самостоятельно. Если мы говорим про managed решение, как пример можем сказать Amazon S3, а именно feature static website hosting. Когда вы делаете минимальные настройки, загружаете в S3 bucket ваши объекты, то есть контент вашего веб-сайта и все, ваш веб-сайт уже настроен, доступен. Вам нет необходимости поднимать веб-сервер на инстанции, вам нет необходимости заниматься вопросами автомасштабирования, потому что оно все внутри сидит. Также вам нет необходимости разбираться и настраивать дополнительные инструменты для большей доступности. То есть Amazon S3 гарантирует, что она всегда доступна, она менее подвержена ошибкам, она автомасштабируется и за это, соответственно, берет некоторую плату. Но бывает такое, что это решение в зависимости от вашего сайта, от нагрузки на ваш сайт, оно может быть выгоднее либо невыгодное. Это нужно смотреть уже на конкретном примере. Но уже тот факт, что вы не потеряли время на настройку вот этого всего веб-сайта вашего, уже сэкономило какое-то количество человеко-часов. И на старте вы видите, что Managed решение изначально выгодное. Если мы возвращаемся обратно к сервису Amazon RDS, то оно выступает как Managed решение. А как Unmanaged выступает настройка базы данных на EC2 инстанции. В этом случае вы проходите самостоятельно все этапы настройки этой базы данных. Самостоятельно отвечаете за ее масштабирование, за реагирование на падение и, соответственно, доступность. Давайте немного подробнее посмотрим, какие сложности возникают при самостоятельной настройке релиционных баз данных. Начинается все с того, что вся поддержка, она ложится на вас. Далее настройка и установка всех программ, патчей, также патчи безопасности, это все тоже относится к вам. Третье это настройка бэкапов, настройка процесса восстановления базы данных. Если мы говорим про масштабирование, то с облачным провайдером CWS есть возможность практически неограниченно масштабироваться. Так как мы можем запросить необходимое количество копий, реплик баз данных, сколько нам нужно. Мы также можем масштабироваться вертикально, то есть увеличивать мощность наших баз данных. И это происходит намного быстрее по сравнению с локальным дата центром. Так как вам достаточно поменять тип баз данных, перезапустить его и у вас запускается вся та же ваша база данных, но уже на новом более мощном инстансе. Вопросы безопасности не только сервера, но и безопасность данных, а также выбор, настройка, установка операционной системы и патчи безопасности, патчи операционной системы. Это все те процессы большими блоками, которые вы должны будете делать самостоятельно. На этом слайде вы видите три различных варианта хостинга баз данных, начиная от локального дата центра, далее хостинг на виртуальном сервере EC2 и заканчивая менеджер-решением Amazon RDS. Вы видите, что список работ он такой же на всех трех вариантах и синим выделены те работы, которые передаются AWS. Когда мы говорим про традиционный хостинг, традиционный дата центр, в этом случае все работы по администрированной базе данных передаются вам. Скорее всего будет выделен отдельный человек, специалист по базам данных, который каждый этот пункт будет проделывать самостоятельно. Когда мы говорим про следующий вариант, это хостинг на виртуальном сервере EC2, то последние два варианта, две опции мы передаем AWS. Почему? Потому что эти две опции связаны с работой с железом. Так как AWS никого не подпускает в свои дата центры в целях безопасности, он самостоятельно автоматизировал и настроил так, чтобы это все максимально эффективно работало. И все, что связано с железом AWS собирает на себя от своих клиентов, клиентов обычного провайдера. Все, что не связано с железом, оно остается также у вас и вам самостоятельно нужно настраивать операционную систему на этот виртуальный сервер, настраивать базу данных, настраивать дополнительные приложения и так далее. Когда мы говорим про третью опцию, вы видите, что большинство работ, связанные с администрированием базы данных, они передаются AWS. Остается лишь application optimization, это то, что вы будете проделывать самостоятельно, а все, что ниже вы можете передать при настройке вашего инстенса базы данных, как входные данные, и они учтутся при автоматизации всех работ, которые есть на стороне AWS. IT ресурсом в случае Amazon RDS является instance базы данных. Базы данных определяются его классом и сториджем. Когда мы говорим про класс, мы дополнительно указываем, какое количество CPU, какое количество оперативной памяти и какой канал сети нам необходим. Когда мы говорим про сторидж, мы в том числе указываем, какой тип носителя, либо это SSD, либо это HDD, жесткий диск, и также указываем, сколько гигабайтов памяти нужно на этих жестких дисках. Если мы говорим про движки, которые поддерживаются, то это список справа, MySQL, Amazon Aurora, Microsoft SQL, Postgres, MariaDB и Oracle. Давайте теперь остановимся на опции, которые доступны внутри Amazon RDS. Это read-реплики. Read-реплика – это когда поднимается полноценная копия instance базы данных, но при этом там доступны только операции чтения. Когда у вас на основной базе происходит операция записи, то все изменения фиксируются и передаются всем read-репликам в асинхронном режиме и там применяются. Таким образом, через какой-то короткий промежуток времени ваши read-реплики становятся идентичными вашей основной базе данных. Эта опция доступна для баз данных MySQL, MariaDB, Postgres, а также Amazon Aurora. Каждая из ваших read-реплик может быть повышена до уровня основной базы данных по запросу, либо в случае, когда что-то происходит с основной базой данных и она становится недоступной. Эта опция используется очень часто при настройке disaster recovery, когда ваша инфраструктура настроена на двух регионах, когда что-то происходит с основным регионом, то весь ваш трафик на ваше приложение передается на другой регион, чтобы продолжать обслуживать ваших пользователей. Так как регион падает достаточно редко, но такое тоже бывает, то DR могут позволить себе очень большие компании, но настроив один раз disaster recovery, они максимально гарантируют себе, что приложение всегда будет доступно. И здесь тот момент, который следует упомянуть, read-реплики могут быть настроены на другом регионе. Таким образом, на основном регионе у вас основной инстанс баз данных, а на запасном регионе вы поднимаете read-реплику. В случае, когда падает весь регион, сервис Amazon RTS также падает, ваш основной инстанс баз данных становится недоступным. В этом случае, автоматически read-реплика на втором регионе повышается до уровня основной баз данных и операции записи там становятся доступными. Теперь у вас возникнет, скорее всего, вопрос, когда нам необходимо использовать read-реплики. Название говорит за себя. Если у вас есть база данных, на котором в основном запускаются операции чтения, то настроив read-реплику, вы можете ваши нагрузки чтения распределить по нескольким инстансам баз данных. Это помогает разгрузить базу данных, и если вы все операции чтения раскидаете по read-репликам и освободите базу данных основную, то она полноценно может быть доступной для операции записи. Другой пример, это когда у вас есть некоторые тяжелые запросы, которые по тем или иным причинам запускаются. Это может быть, например, когда пользователь приложения запускает некоторые функции, и эта функция достаточно дорогостоящая и запускает сложные запросы внутри баз данных. Другой пример, у вас настроены на ежедневной основе раз в день, может быть, несколько раз в день запуск тяжелых запросов для сбора данных для отчета руководству. То есть, агрегируется, собирается вся информация, агрегируется и в виде отчетов компонуется и передается дальше. Так как любые тяжелые запросы, они дают нагрузку на базу данных, базы данных у вас одна, это один цельный инстанс, то эти тяжелые запросы, они дают эффект на более простые запросы. Таким образом, простые запросы, они также продолжат запускаться, но будут отрабатывать медленнее. Поэтому, бестпракцией является перенести по большей части ваши read нагрузки на read реплику и операции записи оставить на основной базе данных, где операции записи доступны. При этом всегда помните, что процесс репликации, он асинхронный, таким образом, не все read операции могут быть перенесены на read реплику. Как первый шаг, всегда рассматривайте увеличение мощности инстанца базы данных, в тот момент, когда вы видите, что какую-то часть read записи можно перенести на read реплику, в этом случае рекомендуется рассматривать. Почему read реплика это вторая либо третья опция, не самая первая, потому что дополнительная read реплика без острой необходимости увеличивает почти в два раза ваши расходы на сервис Amazon Ardes, потому что у вас два полноценных одинаковых инстанца. В этом случае нужно, взвесив все минусы и плюсы, начинать использовать read реплики. Давайте рассмотрим попунктно, в каких случаях следует использовать Amazon Ardes и в каких случаях не следует. Когда мы говорим не следует использовать Amazon Ardes, есть несколько разных вариантов, начиная от хостинга баз данных на EC2 инстанции, либо использовать другой более подходящий сервис AWS. Начнем мы с пунктов, когда нам следует использовать Amazon Ardes, это когда у нас достаточно сложные запросы, у нас есть транзакции, под сложными запросами подразумевается запросы, в которых несколько join, то есть вы работаете одновременно с несколькими таблицами. Далее, если у вас до 30 тысяч IOPs, то есть операция записи и чтения в секунду в эту базу данных. Далее, если вам нужна высокая надежность и в случае, когда вам достаточно одного инстанца базы данных, в некоторых случаях, когда у вас очень большой объем данных, то Ardes не совсем подходит, так как ваши данные переходят в разряд Big Data или не структурированных данных. Когда рекомендуется и правильнее будет использовать другие более подходящие сервисы. Когда мы говорим про пункты, когда не следует использовать Amazon Ardes, это когда у вас достаточно большой объем IOPs, операции записи и чтения, например 150 тысяч операций записи в секунду или больше, в этом случае у вас действительно большие нагрузки. Следует посмотреть в сторону Amazon Redshift либо настройки Data Lake в S3. Другой пункт это когда данные могут быть поделены на shard, это так называемые независимые куски данных между собой, которые независимо могут работать, независимо могут использоваться, но объем данных настолько большой, что вы вынуждены делить эти данные на shard. Другой пункт это когда вам нет необходимости использовать сложные запросы с использованием языка SQL, это простые операции GET и PUT, в этом случае следует посмотреть в сторону noSQLBase данных, как вариант это сервис DynamoDB. И последний пункт это когда вам нужна некоторая тонкая настройка вашей базы данных, в этом случае эта опция недоступна для Amazon Ardes, может быть недоступна и остается вариант либо самостоятельно хостить, либо смотреть в сторону других сервисов AWS. Давайте теперь рассмотрим те факторы, которые влияют на итоговую стоимость использования сервиса Amazon Ardes. Первое это то количество времени, когда база данных запущена, в том случае когда вы останавливаете базу данных, в этом случае оплата она не начисляется. Представим, что мы настроили, подняли базу данных, она была запущена 4 часа, через 4 часа вы остановили ее до конца месяца, в этом случае в конце месяца придет счет на оплату этих 4 часов. Другой пункт это то, что чем больше, чем мощнее ваш инстанс баз данных, тем дороже будет стоить каждый час ее работы. Есть два варианта опции покупки баз данных, это on demand, когда мы запускаем нашу базу данных на то количество времени, какое нам нужно. В тот момент, когда мы останавливаем, оплата не начисляется. Когда мы говорим второй вариант, это Reserved Instances, мы можем сказать, что мы определенный тип баз данных будем использовать в течении года, либо 3, и соответственно AWS на эту информацию, в зависимости от того, какую часть мы предоплатим, предоставит нам определенные скидки. Reserved Instances, как ранее мы говорили, это тот вариант, когда у вас есть постоянные нагрузки 24 часа в сутки, 7 дней в неделю. В случае, когда этого нет, рекомендуется оставаться на типе on demand. Другой вариант, фактор, который также влияет на стоимость сервиса Amazon RDS, это так называемый deployment type, то есть, грубо говоря, какое количество инстансов базы данных запущено. Когда мы деплоим нашу базу данных на одной availability зоне, то это один инстанс. Когда мы включаем опцию multiple AZ, то на нескольких availability зонах у нас поднимаются по одному инстанцу баз данных. В этом случае происходит оплата за каждый этот инстанс. Представим, что мы подняли вашу базу данных на двух availability зонах. Таким образом, стоимость будет, соответственно, в два раза дольше, чем бы она была запущена на одной availability зоне. Сюда также относится и опция read-replic. То есть, read-replica – это тот же инстанс базы данных, единственные операции записи запрещены, но при этом это полноценный инстанс с точки зрения железа. И оплата идет согласно тарифу, согласно характеристикам этого конкретного инстанца. И последнее, которое также нужно учитывать, это то, что за transfer данных, в случае если это происходит внутри одного региона, в этом случае оплата не происходит. В случае, когда у нас идет outbound data transfer, то есть в другой регион, то либо мы запрашиваем эти данные из AWS локально, в этом случае идет за outbound data transfer, идет соответствующая оплата согласно тарифу. На этом мы добрались до конца первой секции, просмотрели сервис Amazon RDS. Давайте остановимся на самых основных моментах. Первое – это то, что managed service. Таким образом большинство административных задач переходят на AWS, и мы можем сконцентрироваться на наших бизнес-задачах. Для того, чтобы работать с RDS, мы можем использовать AWS Management Console, AWS CLI, либо SDK. Так как это management, это managed решение, то вопросы скейлинга, availability, они также переходят на сторону AWS. Нам лишь необходимо ввести некоторые входные данные, которые полноценно настраивают нашу базу данных согласно требованиям бизнеса. Если мы говорим про движки, которые поддерживаются, то это Amazon Aurora, in-house решение от AWS. И далее это Postgres, MySQL, MariaDB, Oracle и Microsoft SQL Server. Мы добрались до второй части нашей сегодняшней лекции, и здесь поговорим подробнее про NoSQL решение Amazon DynamoDB. Перед тем, как мы перейдем к разбору этого сервиса, давайте остановимся на том, чем отличается релиционная база данных от нерелиционной. То есть NoSQL баз данных. Если мы говорим про единицы хранения, то в этом случае, в случае relational database, у нас есть таблицы, в таблицах есть записи, в каждой записи есть колонка. Она фиксирована, то есть схема, структура этой таблицы, она фиксирована. Если вы добавляете новую колонку, в этом случае она добавляется для всех записей. Когда мы говорим про NoSQL баз данных, в этом случае мы работаем с некоторой структурой ключ значения. В этом случае у нас структура динамическая. Например, у нас может быть одна запись, в которой определенный набор ключей соответствующими значениями, а следующая запись, она может содержать совершенно другой, не совпадающий список ключей и соответственно значения. Таким образом, структура динамическая. Когда мы говорим про то, как мы запрашиваем и как работаем с данными, в случае с релационной баз данных, мы используем язык SQL. Когда мы говорим про non-relational баз данных, то мы используем операции get и put. То есть, какие-то сложные операции, сложные запросы, в случае с NoSQL базами данных мы делать, к сожалению, не можем. Если мы говорим про масштабирование релационной базы данных, это одна сущность, одна база данных и масштабирование производится вертикально. То есть, увеличивается мощность этой конкретной базы данных, то есть сервера, на котором хостится база данных. Когда мы говорим про NoSQL решение, в этом случае особенность NoSQL баз данных такая, что данных может быть очень много и соответственно масштабируется это все горизонтально. Мы можем работать с шардами, то есть кусками данных, которые не зависят от других шардов. Таким образом, размеры NoSQL баз данных может десятки, сотни, тысячи раз превышать размеры релационных баз данных. И сами по себе данные, которые находятся внутри релационных баз данных, это достаточно структурированные, четкие данные. Когда мы говорим про NoSQL баз данных, данные они динамические, нет определенной структуры. Соответственно, мы работаем с полуструктурированными данными. Когда мы говорим про релационные базы данных, это Amazon RDS. В случае, когда мы говорим про NoSQL баз данных, это Amazon DynamoDB. То есть это то решение, которое предоставляет Managed и Serverless Service для работы с NoSQL базами данных. Размеры этой базы данных фактически не ограничены. Мы работаем с айтомами, то есть это аналог строки в релационные баз данных и может содержать различные атрибуты. Они могут динамически быть изменены на уровне каждой строки. Все запросы, которые происходят в DynamoDB, они Single Digit Millisecond, то есть отрабатывают в течение нескольких миллисекунд. В DynamoDB есть несколько основных компонентов. Это таблицы, айтомы и атрибуты. Таблицы – это набор айтомов. Айтом – это некоторый JSON документ, который состоит из набора ключ и значения. Таким образом, атрибутом выступает как раз таки ключ внутри этого документа. У нас есть два варианта, как мы можем запросить данные из таблицы DynamoDB. Первое – мы можем обратиться по его primary key, то есть уникальному ключу, и напрямую излечь нужные нам документы. Это самый дешевый вариант и самый быстрый вариант излечения данных. Второй вариант – это использование scan, то есть сканирование всех айтомов, всех документов на предмет совпадения, и, соответственно, все айтомы, которые совпали, возвращаются к пользователю. В этом случае у нас больше возможностей. Мы можем наложить дополнительные условия на атрибуты, другие не основные атрибуты. Но следует отметить, что операция scan достаточно дорогостоящая с точки зрения использования айти ресурсов, и, соответственно, в денежном выражении это также выходит дороже. Таким образом, рекомендация построить структуру таблицы DynamoDB таким образом, чтобы большинство ваших запросов происходило через primary key. Это максимально удешевит стоимость сервиса DynamoDB, при этом все ваши запросы будут отрабатывать максимально быстро. Давайте теперь рассмотрим, какие виды primary key у нас бывают. Выделяю два вида – single key и compound key. Single key – это когда уникальным ключом выступает один атрибут. То есть мы говорим, у нас есть атрибут pk, так мы его назовем, и значением каждой строчки выступает некоторое уникальное значение. Если мы говорим, что мы храним в нашей таблице DynamoDB информацию о наших товарах на веб-сайте, то в этот атрибут мы положим уникальный ID каждого товара. Другой вариант праймерики – это compound key, когда уникальным должны быть связка partition key и sort key. В этом случае partition key может быть не уникальным сам по себе, sort key также может быть не уникальным сам по себе, но связка должна быть уникальной. На этом мы добрались до конца второй секции. Мы подробно рассмотрели сервис Amazon DynamoDB. И давайте остановимся на самых основных моментах. Это сервис managed и serverless сервис, который предоставляет noSQL базы данных. NoSQL базы данных – это таблица, в которой мы работаем с JSON объектами. Эти JSON объекты, они динамически по своей структуре, и, соответственно, если мы работаем с неструктурированными данными, то DynamoDB больше нам подходит. В случае, когда мы работаем с структурированными данными, в этом случае больше нам может подойти Amazon RDS. Мы с вами добрались до третьей части нашей лекции, и подробнее поговорим про сервис Amazon Redshift. Amazon Redshift – это managed сервис, который предоставляет нам data warehouse. То есть это база данных, в которой мы проводим некоторые аналитические запросы на всех наших данных. Это та база данных, которая может агрегировать данные из нескольких источников. Если проводить аналогию с релационной баз данных Amazon RDS, то там мы работаем с транзакционными данными. То есть там мало сложных запросов. В основном мы вводим некоторые данные по нашим пользователям, например, и считываем наши данные для того, чтобы наш веб-сервис корректно работал. В случае, когда нам необходимо провести некоторый анализ, собрать данные с различных источников и передать эти агрегированные данные руководству для принятия некоторых бизнес-решений, то в этом случае Amazon Redshift лучше подходит. Redshift – это тот сервис, который может обращаться к различным другим сервисам хранения и получать оттуда данные, отрабатывать на этих данных сложнейшие SQL-запросы для того, чтобы агрегировать и получать различную перспективу на этих данных. Как примерами источников, может выступать S3, DynamoDB, RDS. Как вы видите, все основные сервисы в работе с данными могут быть интегрированы с Redshift. Если говорить про внутреннюю кухню сервиса Amazon Redshift, то она состоит из двух частей. Первая – это одна-единственная лидернода, то есть это та нода, которая передает команды нижним нодам, а эти нижние ноды фактически отрабатывают эти SQL-запросы на данных и передают уже конечный результат лидерноде. Таким образом происходит такая оптимизация работы с этими данными. Это все прозрачно для пользователей сервиса, и мы в итоге получаем достаточно мощный движок для работы с большими объемами данных. Давайте рассмотрим основные юсткейсы использования сервиса Amazon Redshift. Самый первый и самый популярный – это миграция локального DWH, то есть Data Warehouse, на облачное решение, то есть Amazon Redshift. Второе – это Big Data, то есть есть компании, которые накапливают большой объем структурированной либо неструктурированной информации и в какой-то момент решают проанализировать эти данные для того, чтобы извлечь некоторую бизнес важную информацию. В этом случае эти данные переносятся в облако, а именно переносятся в Amazon Redshift, и там эти данные анализируются с использованием стандартного SQL. И третья опция – это использование Amazon Redshift для предоставления некоторых сервиса расчетов, то есть Software as a Service. Представьте, что у вас есть некоторый веб-сайт, он производит некоторые расчеты, анализы на основе некоторых данных. Примером может быть анализ, например, страховых данных для принятия определенного решения. В этом случае страховые компании загружают эти данные на ваш веб-сайт, через этот веб-сайт попадает ваш Redshift, и производится некоторый стандартный анализ и возвращается некоторый результат уже этим страховым компаниям, вашим клиентам. Мы добрались до конца третьей части нашей сегодняшней лекции, подробнее поговорили про сервис Amazon Redshift. Давайте остановимся на самых основных моментах. Amazon Redshift – это сервис, менеджер, решение, которое предоставляет вам Data Warehouse, DWH, склад данных либо витрина данных. Это некоторая база данных, которая может содержать в себе структурированные, не структурированные информацию, также может обращаться к внешним источникам данных для того, чтобы подтягивать данные, запускать на них сложные SQL-запросы, тяжелые, и получать какую-то важную бизнес-информацию. Amazon Redshift нативно интегрируется с основными сервисами охранения, это S3, RDS, DynamoDB. А мы с вами добрались до последней части нашей сегодняшней лекции, подробно поговорим про сервис Amazon Aurora. Amazon Aurora – это сервис, который предоставляет реализационную базу данных, in-house решение, то есть внутренняя разработка AWS, базирующаяся на двух движках реализационных баз данных. Это MySQL и Postgres. Это решение, оно обладает рядом преимуществ по сравнению с любыми другими движками Amazon RDS. По ценам оно по большей части дешевле по сравнению с RDS. Более того, так как это внутреннее нативное решение самого AWS, то еще большая часть задач по администрированию вашей базы данных переносится на сторону AWS и вас еще больше разгружает. От себя хотел бы отметить, что даже если Amazon Aurora базируется на MySQL и Postgres, тем не менее в нем содержится ряд дополнительного функционала, который не существует на MySQL и Postgres. И в будущем, если вы захотите переехать от Avror на другую базу данных, это может быть очень дорого и сложно, ввиду того, что она не стопроцентно переносится на двигатель MySQL и Postgres. Перед тем, как вы начнете использование Avror в будущем, я рекомендую взвесить все за и против. В том случае, когда вы стопроцентно знаете и решили, что вы будете двигаться с AWS, не будете рассматривать сторонние облачные провайдеры, у вас никогда не будет задачи переехать на другого облачного провайдера. Также, если вы хотите получить все те преимущества, которые важны для вашего бизнеса, которых нет на стандартных движках RDS, MySQL, Postgres, либо других, то в этом случае вы можете продолжать с Avror, вы получите все преимущества, это будет решение дешевле. В том случае, если есть некоторый риск смены облачного провайдера, либо смены движка, то в этом случае настоятельно рекомендую задуматься перед тем, как начинать работу с Avror, потому как начать всегда легко, в том случае, когда вам понадобится перенос, очень много ресурсов, сил и денег может быть потрачено только на процесс миграции с Avror на любую другую базу данных. На этом слайде представлены основные преимущества сервиса Amazon Aurora, это то, что этот сервис является менеджед сервисом, оно является достаточно простым в настройке, так как это нативное решение, и то, что мы оплачиваем только за то, что мы используем. Если говорить про доступность, Amazon Aurora изначально построена высокодоступным, так как ваши данные реплицируются в 3 availability зоны, более того, бэкапы сохраняются в Amazon S3. Amazon Aurora может поднять до 15 read replic, и это минимизирует риск того, что данные будут потеряны. И в тот момент, когда возникают проблемы с основной базой данных, то одна из read replic автоматически повышается до уровня основной базы данных. На этом мы завершаем четвертую секцию, давайте остановимся на самых основных моментах. Amazon Aurora это внутреннее решение AWS, которое предоставляет вам реализационные базы данных. Оно имеет ряд преимуществ по сравнению с решением Amazon RDS, оно дешевле по сравнению с другими движками сторони Amazon RDS, и также есть в наличии ряд удобных доработок движка. Как движок может выступать? Движок MySQL либо Postgres. Единственный момент, который нужно обязательно учитывать, это то, что это внутреннее решение. Как только вы начинаете использовать Amazon Aurora, то вы привязываетесь к AWS, вы привязываетесь к конкретно этому сервису. И в случае, если вы не собираетесь в будущем мигрировать к другому облачному провайдеру, либо на другой движок, например, тот же Amazon RDS, на том же движке MySQL, то в будущем это может стоить дорого, потребовать достаточно большие ресурсы. В случае, когда такого риска нет, и вы знаете, что вы до конца будете использовать AWS и сервис Amazon Aurora как реализационный баз данных, в этом случае это очень хорошее решение. Хорошая опция и рекомендую ее использовать. На этом мы завершили все наши секции. Давайте посмотрим на этот слайд, который резюмирует все то, что мы разобрали. Если нам нужна реализационная база данных, то тот сервис, который максимально нам подходит, это Amazon RDS. Если же нам нужна NoSQL база данных, которая может бесконечно масштабироваться, то мы выбираем Amazon DynamoDB. В случае, если нам нужна база данных, где мы можем производить любые кастомизации движка, нам нужен доступ к операционной системе, где запущена база данных, в этом случае рекомендуется поднять самостоятельно базу данных на инстансе EC2. В случае, если нам нужно специфичное решение, например, для машин ленинга, для склада данных, для витрины данных, либо для работы с графами, то в этом случае есть специально созданные для этого отдельные сервисы по работе с данными на стороне AWS. На этом мы завершаем нашу лекцию. Буквально резюмируя, что мы прошли, мы познакомились с четырьмя самыми основными сервисами баз данных внутри AWS. Это RDS Relational Database Service, это DynamoDB, далее Amazon Redshift и Amazon Aurora. На этом слайде представлены ссылки, которые вам могут понадобиться для дополнительного углубленного изучения пройденных сервисов. На этом мы завершаем нашу сессию. Я надеюсь, вы получили более полное представление о пройденных сервисах. Спасибо за внимание. Увидимся с вами на следующих наших активностях.
