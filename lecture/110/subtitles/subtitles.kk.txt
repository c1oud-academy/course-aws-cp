Қайырлы күн, құрметті студенттер! Сізді келесі дәрісте көргеніме қуаныштымын. Бүгінгі дәрістің тақырыбы — Дерекқор. Дерекқорға қатысты AWS сервистері туралы сөйлесеміз. Жарайды, бастайық. Біздің бүгінгі дәрісіміз төрт бөлімнен тұрады. Бірінші Amazon Relational Database Service, қысқаша Amazon RDS туралы айтатын боламыз. Келесі - Amazon DynamoDB, NoSQL шешімі. Кейін - Amazon Redshift. Және соңында, AWS-тің in-house шешімі туралы сөйлесеміз. Бұл Amazon Aurora дерекқоры. Біз Amazon-ның ең танымал дерекқор сервисінен, Amazon Relational Database Service сервисінен бастаймыз. Көбінесе сіз оны Amazon RDS атауымен кездестіресіз. Бұл сізге managed реляционды дерекқор шешімдерін ұсынатын сервис. Осылайша, дерекқорды басқару тапсырмаларының көпшілігі AWS-ке беріледі. Мұнымен айналысудың қажеті жоқ, ал сізде негізгі бизнес міндеттеріңізге назар аударуға мүмкіндігіңіз болады. Сонымен, managed және unmanaged дегеніміз не? S3 сервисін мысалға алып талдап көрейік, атап айтқанда S3 ішіндегі feature, ол бізге static website hosting орнатуға мүмкіндік береді. Бір жағынан жергілікті провайдер бар деп елестетіп көрейік. Сіз дерекқорды, бір серверді сатып аласыз. Серверде сіз веб-серверді орнатып, сайтыңыздың мазмұнын жүктеп, сайтты орналастыра бастайсыз. Веб-сайтыңызды осы виртуалды машинада орнату кезінде сіз жүктемені теңестіру, веб-сервердің өзін конфигурациялау және автомасштабтау сияқты көптеген кеңейтілген опциялардан өтуіңіз керек. Яғни, егер жүктеме көбейсе, сіз қандай да бір жолмен пайдаланушыларыңызды азайтасыз немесе барлық пайдаланушыларыңызға қызмет көрсетесіз. Бұл сізге көбірек сыйымдылық қажет екенін және виртуалды инстанстардың саны автоматты түрде артатынын білдіреді. Бұл өз бетіңізше шешуіңіз керек тармақтар. Осы уақытқа дейін біз статикалық веб-сайтты unmanaged түрде орналастырудың мысалы туралы айттық, яғни сіз бәрін өзіңіз жасайсыз. Егер біз managed шешім туралы айтатын болсақ, мысал ретінде Amazon S3-ті айтуға болады, атап айтқанда feature static website hosting. Минималды түзетулер жасаған кезде, сіз өзіңіздің объектілеріңізді, яғни веб-сайтыңыздың мазмұнын S3 bucket-ке жүктейсіз, және сіздің веб-сайтыңыз бапталып, қол жетімді болады. Веб-серверді инстанста орнатудың қажеті жоқ және автомасштабтаумен айналысудың қажеті жоқ, себебі оның бәрі ішінде орнатылған. Сондай-ақ, қол жетімділік үшін қосымша құралдарды талдап, баптаудың қажеті жоқ. Amazon S3 оның әрқашан қол жетімді болуын, қателікке бейімділігі төмен, автоматты түрде масштабталуын қамтамасыз етеді, сол үшін сәйкесінше төлем алады. Бірақ сіздің сайтыңызға байланысты, сіздің сайтыңыздағы жүктемеге байланысты бұл шешім тиімді немесе тиімсіз болуы мүмкін. Мұны нақты мысалмен қарастырған жөн. Бірақ веб-сайтты орнатуға уақыт жоғалтпағаныңыз сізге бірнеше адам-сағатты үнемдеді. Және басынан Managed шешім тиімді екенін көресіз. Amazon RDS-ке оралсақ, ол Managed шешім ретінде әрекет етеді. Unmanaged шешім ретінде EC2 инстансында дерекқорды орнату әрекет етеді. Бұл жағдайда сіз осы дерекқорды орнатудың барлық қадамдарынан өз бетіңізше өтесіз. Сіз оны масштабтауға, құлдырауға жауап беру үшін және, тиісінше, оның қол жетімділігі үшін дербес жауаптысыз. Реляционды дерекқорларды өз бетіңізше орнату кезінде туындайтын қиындықтарды егжей-тегжейлі қарастырайық. Мұның бәрі барлық қолдаудың сізге артылатындығынан басталады. Әрі қарай, барлық бағдарламаларды, патчтарды және қауіпсіздік патчтарын теңшеу және орнату да сізге қатысты. Үшіншісі - сақтық көшірмелерді орнату және дерекқорды қалпына келтіру процесін орнату. Егер біз масштабтау туралы айтатын болсақ, онда AWS бұлт провайдерімен шексіз масштабтауға болады. Себебі біз дерекқорлардың көшірмелері мен көшірмелерінің қажетті санын сұрай аламыз. Біз сондай-ақ тігінен масштабтай аламыз, бұл біздің дерекқорымыздың қуаттылығын арттыруды білдіреді. Бұл жергілікті деректер орталығына қарағанда әлдеқайда жылдам болады. Себебі сізге тек дерекқордың түрін өзгерту керек, оны қайта іске қосу керек және сол дерекқор іске қосылады, бірақ бұл жолы жаңа, қуатты инстанста. Сервер қауіпсіздігі мәселелері ғана емес, сонымен қатар деректер қауіпсіздігі, сонымен қатар амалдық жүйені, қауіпсіздік патчтарын, амалдық жүйенің патчтарын баптау, орнату - бұл барлық процестерді, үлкен блоктар секілді, сіз өзіңіз жасауыңыз керек. Бұл слайдта сіз жергілікті деректер орталығынан бастап, содан кейін EC2 виртуалды серверінде хостингтен, Amazon RDS managed шешіміне дейінгі үш түрлі дерекқор хостинг опциясын көресіз. Сіз жұмыстар тізімі барлық үш нұсқа үшін бірдей екенін көре аласыз, ал көк түспен белгіленгендер AWS-ке берілетін жұмысты көрсетеді. Дәстүрлі хостинг, дәстүрлі деректер орталығы туралы айтатын болсақ, онда дерекқорды басқарудың барлық жұмыстары сізге беріледі. Ол үшін жеке адам, дерекқор бойынша маман бөлінеді, ол осы тармақтардың әрқайсысын өз бетінше жасайды. Келесі нұсқа - EC2 виртуалды серверінде хостинг туралы айтқанда, AWS-ке соңғы екі нұсқаны береміз. Неге? Себебі бұл екі нұсқа аппараттық құралдармен жұмыс істеуге байланысты. AWS қауіпсіздік мақсатында ешкімді өзінің деректер орталықтарына жібермейтіндіктен, ол барлығын мүмкіндігінше тиімді жұмыс істеу үшін автоматтандырды және баптады. Аппараттық құралға қатысты барлық нәрсені де AWS клиенттерінен өзіне алады. Аппараттық құралға қатысы жоқ барлық нәрсе сізде қалады және сіз осы виртуалды сервердегі амалдық жүйені, дерекқорды, қосымшаларды және т.б. өзіңіз баптауыңыз керек. Үшінші нұсқа туралы айтатын болсақ, дерекқорды басқару тапсырмаларының көпшілігі AWS-ке берілгенін көресіз. Қалғаны - Application optimization, оны сіз өзіңіз жасайсыз және төмендегі барлық жұмысты дерекқор инстансын кіріс ретінде орнатқан кезде жібере аласыз, және олар AWS жағындағы барлық жұмыстарды автоматтандыру кезінде ескеріледі. Amazon RDS жағдайында IT ресурсы дерекқор инстансы болып табылады. Ол оның class-ы мен storage-імен анықталады. Class туралы айтқанда, біз қанша CPU, қанша жедел жады және қандай желілік арна қажет екенін қосымша көрсетеміз. Storage туралы айтқанда, біз SSD немесе HDD қатқыл дискісінің түрін көрсетеміз, сонымен қатар осы қатқыл дискілерде қанша гигабайт жад қажет екенін көрсетеміз. Егер біз қолдайтын қозғалтқыштар туралы айтатын болсақ, бұл оң жақтағы тізім, MySQL, Amazon Aurora, Microsoft SQL, Postgres, MariaDB және Oracle. Енді Amazon RDS ішінде қол жетімді опцияны қарастырайық. Бұл read репликалар. Read репликалар - дерекқор инстансының толық көшірмесі бапталған кезде, бірақ онда тек оқу операциялары қолжетімді. Сіздің негізгі дерекқорыңызда жазу операциясы орын алған кезде, барлық өзгерістер жазылады және барлық read репликаларға асинхронды түрде жіберіледі және сол жерде қолданылады. Осылайша, қысқа уақыттан кейін сіздің read репликаларыңыз негізгі дерекқормен бірдей болады. Бұл опция MySQL, MariaDB, Postgres және Amazon Aurora дерекқорлары үшін қол жетімді. Әрбір read репликаларды сұраныс бойынша немесе негізгі дерекқорға бірдеңе болса, ол қол жетімсіз болған жағдайда негізгі дерекқор деңгейіне дейін жаңартуға болады. Бұл опция disaster recovery орнату кезінде жиі қолданылады, сіздің инфрақұрылымыңыз екі аймақта орнатылған кезде, негізгі аймаққа бірдеңе болған кезде, сіздің қосымшаңыздың барлық трафигі пайдаланушыларға қызмет көрсетуді жалғастыру үшін басқа аймаққа жіберіледі. Аймақ өте сирек істен шығады, бірақ ондай жағдайлар болып тұратындықтан, өте ірі компаниялар DR-ге қол жеткізе алады, бірақ disaster recovery-ді бір рет орнату арқылы олар қосымшаның әрқашан қол жетімді болатынына кепілдік береді. Айта кету керек, read репликаларды басқа аймақта баптауға болады. Осылайша, негізгі аймақта сізде негізгі дерекқор инстансы бар, ал резервтік аймақта сіз read репликаны баптайсыз. Бүкіл аймақ істен шыққан кезде Amazon RDS те істен шығады және сіздің негізгі дерекқор инстансы қол жетімді болмайды. Бұл жағдайда екінші аймақтағы read реплика автоматты түрде негізгі дерекқор деңгейіне дейін жаңартылады және жазу операциялары сол жерде қол жетімді болады. Енді сізде read репликаларды қашан қолдану керек деген сұрақ туындауы мүмкін. Атауында бәрі айқын. Егер сізде негізінен оқуды іске қосатын дерекқор болса, read репликаны теңшеу арқылы оқу жүктемелерін бірнеше дерекқор инстанстарына таратуға болады. Бұл дерекқордың жүктемесін азайтады және егер сіз барлық оқу операцияларын read репликаларына таратып, негізгі дерекқорды босатсаңыз, жазу операциясы үшін толық қол жетімді болуы мүмкін. Тағы бір мысал, сізде белгілі бір себептермен іске қосылатын күрделі сұраулар болған кезде. Бұл, мысалы, қосымша пайдаланушысы кейбір функцияларды іске қосқан кезде болуы мүмкін және бұл мүмкіндік өте қымбат және дерекқорлардағы күрделі сұрауларды іске қосады. Басқа мысалда, сіз күнделікті негізде, күніне бір рет, мүмкін күніне бірнеше рет, басшылыққа есеп беру мақсатында деректерді жинау үшін күрделі сұрауларды орындау бапталған. Яғни, барлық ақпарат жиналады, жинақталады және есеп түрінде құрастырылып, одан әрі беріледі. Кез келген күрделі сұраулар дерекқорға жүктеме түсіретіндіктен, сізде бір дерекқор бар, бұл бір бүтін инстанс, бұл күрделі сұраулар қарапайым сұрауларға әсер етеді. Осылайша, қарапайым сұраулар да жұмыс істей береді, бірақ баяу болады. Сондықтан, best practice - read жұмыс жүктемелерінің көп бөлігін read репликаға ауыстыру және жазу операцияларын жазу операциялары қол жетімді негізгі дерекқорда қалдыру. Дегенмен, репликация процесі асинхронды екенін әрқашан есте сақтаңыз, сондықтан барлық read операцияларды read репликаға ауыстыруға болмайды. Бірінші қадам ретінде, read жазбаның кейбір бөлігін read репликаға ауыстыруға болатындығын көргенде, әрқашан дерекқор инстансының қуаттылығын арттыруды қарастырыңыз. Неліктен read реплика екінші не үшінші нұсқа болып табылады, бірақ біріншісі емес, өйткені шұғыл қажеттіліксіз қосымша read реплика сіздің Amazon RDS шығындарыңызды екі есе арттырады, себебі сізде екі бірдей инстанс бар. Бұл жағдайда барлық артықшылықтар мен кемшіліктерді қарастырғаннан кейін, сіз read репликаларды қолдануды бастауыңыз керек. Amazon RDS-ті қашан пайдалану және пайдаланбау керектігін пункт бойынша қарастырайық. Amazon RDS-ті пайдаланбау керек деп айтқан кезде, EC2 инстансында дерекқорларды орналастырудан немесе басқа қолайлы AWS сервисін пайдаланудан бастап бірнеше түрлі нұсқалар бар. Amazon RDS-ті пайдалану керек болған жағдайларды қарастырайық, бізде өте күрделі сұраулар, транзакциялар болған кезде қолданамыз. Күрделі сұраулар бірнеше join-дар бар сұрауларды білдіреді, яғни сіз бір уақытта бірнеше кестелермен жұмыс жасайсыз. Содан кейін, егер сізде 30 000-ға дейін IOPS болса, бұл осы дерекқорға секундына жазу және оқу операциясы. Әрі қарай, егер сізге жоғары сенімділік қажет болса және сізге тек бір дерекқор инстансы жеткілікті болса. Кейбір жағдайларда, сізде өте үлкен көлемді деректер болған кезде, Amazon RDS қолайлы емес, өйткені сіздің деректеріңіз Big Data немесе құрылымдалмаған үлкен деректер санатына енеді. Онда басқа қолайлы сервистерді пайдалану ұсынылады. Amazon RDS-ті қолдануға болмайтын жағдайлар туралы айтатын болсақ, сізде IOPS көлемі, жазу және оқу операциялары үлкен болған кезде, мысалы, секундына 150 000 жазу немесе одан да көп, бұл жағдайда сізде шын мәнінде ауыр жүктемелер болады. S3 ішіндегі Data Lake параметрлерін немесе Amazon Redshift сервисін қарастыру керек. Тағы бір мәселе - деректерді shard-тарға бөлуге болатын кезде, бұл тәуелсіз деректер, олар өз бетінше жұмыс істей алады, өздігінен қолданыла алады, деректердің көлемі соншалықты үлкен болғандықтан, бұл деректерді shard-тарға бөлуге тура келеді. Тағы бір мәселе - күрделі SQL сұрауларын пайдаланудың қажеті жоқ кезде, бұл қарапайым GET және PUT операциялары, бұл жағдайда NoSQL дерекқорларын, мысалы, DynamoDB сервисін қарастыру керек. Соңғы пункт - сіздің дерекқорыңызды дәл баптау қажет болған кезде. Бұл жағдайда бұл опция Amazon RDS үшін қол жетімді болмауы мүмкін, бұл сізге оны өзіңіз орналастыру немесе басқа AWS сервистерін қарастыруға мүмкіндігін береді. Енді Amazon RDS сервисін пайдаланудың жалпы құнына әсер ететін факторларды қарастырайық. Біріншісі - дерекқордың жұмыс істейтін уақыты. Дерекқорды тоқтатқан кезде төлем алынбайды. Дерекқорды орнаттық деп елестетіп көрейік, ол 4 сағат бойы іске қосылып тұрды, 4 сағаттан кейін сіз оны айдың соңына дейін тоқтаттыңыз, бұл жағдайда сіз айдың соңында осы 4 сағат үшін есеп аласыз. Тағы бір мәселе, сіздің дерекқор инстансыңыз неғұрлым үлкен және қуатты болса, соғұрлым ол әр сағат сайын қымбатқа түседі. Деректер базасын сатып алудың екі нұсқасы бар, бұл On-demand, біз дерекқорды қажетті уақыт ішінде іске қосқан кезде. Біз тоқтатқан сәттен төлем алынбайды. Екінші нұсқа - Reserved Instances туралы айтсақ, дерекқордың белгілі бір түрін 1 жыл немесе 3 жыл бойы қолданамыз деп айта аламыз, сондықтан AWS қанша төлегенімізге байланысты жеңілдіктер береді. Reserved Instances, жоғарыда айтқанымыздай, аптасына 7 күн, тәулігіне 24 сағат тұрақты жұмыс жүктемесі болған кездегі опция болып табылады. Егер бұлай болмаса, On-demand нұсқасында қалу ұсынылады. Тағы бір нұсқа, Amazon RDS сервисінің құнына әсер ететін фактор, Deployment type, бұл қанша дерекқор инстанстары іске қосылғанын көрсететін параметр. Деректер базасын бір availability аймағына орналастырған кезде, бұл бір инстанс. Multiple AZ опциясын қосқанда, бірнеше availability аймақтарында, әр аймақта бір дерекқор инстансы бапталынады. Бұл жағдайда сіз әр инстанс үшін төлейсіз. Дерекқорды екі availability аймағында орналастырдық делік. Осылайша, шығындар сәйкесінше бір availability аймағында іске қосылғаннан екі есе көп болады. Бұған read replica опциясы да кіреді. Яғни, read replica - бұл деректер базасының инстансы, бірақ жазу операцияларына тыйым салынады, дегенмен бұл аппараттық құрал тұрғысынан толыққанды инстанс. Сіз осы нақты инстанс сипаттамаларына сәйкес тарифі бойынша төлейсіз. Сонымен қатар, ескеру керек соңғы нәрсе - деректерді тасымалдау, егер ол бір аймақта болса, төленбейді. Егер бізде outbound data transfer болса, яғни басқа аймаққа, біз бұл деректерді AWS-тен жергілікті түрде сұраймыз, бұл жағдайда outbound data transfer үшін төлем тарифке сәйкес алынады. Осымен біз бірінші бөлімнің соңына жеттік, Amazon RDS сервисін қарастырдық. Ең маңызды сәттерге назар аударайық. Біріншісі - бұл managed service. Осылайша әкімшілік тапсырмалардың көпшілігі AWS-ке беріледі, және біз бизнес міндеттерімізге назар аудара аламыз. Amazon RDS-пен жұмыс істеу үшін біз AWS Management Console, AWS CLI, AWS SDK қолдана аламыз. Бұл managed шешім болғандықтан, масштабтау және availability мәселелерін де AWS қабылдайды. Бізге бизнес талаптарын қанағаттандыру үшін дерекқорымызды толығымен теңшейтін кейбір кірістерді енгізу қажет. Егер біз қолдау көрсетілетін қозғалтқыштар туралы айтатын болсақ, бұл Amazon Aurora, AWS-тің in-house шешімі, одан кейін Postgres, MySQL, MariaDB, Oracle және Microsoft SQL Server. Енді біз дәрісміздің екінші бөлігіне жеттік және мұнда Amazon DynamoDB NoSQL шешімі туралы айтатын боламыз. Бұл сервисті талдауды бастамас бұрын, реляционды дерекқордың реляционды емес дерекқордан, яғни NoSQL дерекқорынан қалай ерекшеленетінін қарастырайық. Егер біз сақтау бірліктері туралы айтатын болсақ, relational database жағдайында бізде кестелер бар, кестелерде жазбалар бар және әр жазбада баған бар. Ол бекітілген, яғни осы кестенің схемасы мен құрылымы бекітілген. Егер сіз жаңа баған қоссаңыз, ол барлық жазбалар үшін қосылады. NoSQL дерекқорлары туралы айтатын болсақ, біз белгілі бір кілт-мән құрылымымен жұмыс істейміз. Бұл жағдайда біздің құрылымымыз динамикалық болады. Мысалы, бізде сәйкес мәндері бар белгілі бір кілттер жиынтығы бар бір жазба болуы мүмкін, ал келесі жазбада кілттердің мүлдем басқа, әр түрлі тізімі және сәйкесінше мәндері болуы мүмкін. Осылайша, құрылым - динамикалық. Біз қалай сұрайтынымыз және деректермен қалай жұмыс істейтініміз туралы айтқанда, реляционды дерекқор жағдайында біз SQL тілін қолданамыз. Реляционды емес дерекқор туралы айтқанда, біз GET және PUT операцияларын қолданамыз. Осылайша, өкінішке орай, біз NoSQL дерекқор жағдайында күрделі операцияларды немесе күрделі сұрауларды жасай алмаймыз. Егер біз реляционды дерекқорды масштабтау туралы айтатын болсақ, бұл бір нысан, бір дерекқор және масштабтау тігінен орындалады. Яғни, осы нақты дерекқордың, атап айтқанда дерекқор орналастырылған сервердің қуаттылығы артады. NoSQL шешімі туралы айтатын болсақ, бұл жағдайда NoSQL дерекқорының ерекшелігі - көп дерек болуы мүмкін және сәйкесінше бәрі көлденеңінен масштабталады. Біз shard-тармен жұмыс істей аламыз, яғни басқа shard-тарға тәуелді емес деректер бөліктері. Осылайша, NoSQL дерекқоры реляционды дерекқорлардан ондаған, жүздеген, мыңдаған есе үлкен болуы мүмкін. Реляционды дерекқорларда орналасқан деректердің өзі жеткілікті құрылымдалған және анық деректер болып табылады. NoSQL дерекқорлары туралы айтатын болсақ, деректер динамикалық және нақты құрылымы жоқ. Тиісінше, біз жартылай құрылымдалған деректермен жұмыс істейміз. Реляционды дерекқор туралы айтатын болсақ, бұл Amazon RDS. NoSQL дерекқорлары туралы айтатын болсақ, бұл Amazon DynamoDB. Яғни, бұл NoSQL дерекқорларымен жұмыс істеу үшін Managed және Serverless сервситерін ұсынатын шешім. Бұл дерекқордың көлемі іс жүзінде шексіз. Біз items-тармен жұмыс істейміз, яғни ол реляционды дерекқордағы жолға ұқсас және әртүрлі атрибуттарды қамтуы мүмкін. Оларды әр жол деңгейінде динамикалық түрде өзгертуге болады. DynamoDB-де болатын барлық сұраулар Single-Digit Millisecond болып табылады, яғни олар бірнеше миллисекунд ішінде өңделеді. DynamoDB бірнеше негізгі компоненттерден тұрады. Бұл кестелер, items және атрибуттар. Кестелер - бұл items жиынтығы. Item - бұл кілттер мен мәндер жиынтығынан тұратын JSON құжаты. Осылайша, атрибут осы құжаттағы кілт болып табылады. Бізде DynamoDB кестесінен деректерді сұрауға болатын екі нұсқа бар. Біріншіден, біз оның primary key, яғни бірегей кілтін қолдана аламыз және қажетті құжаттарды тікелей жүктей аламыз. Бұл деректерді жүктеудің ең арзан және жылдам әдісі. Екінші нұсқа - SCAN пайдалану, яғни барлық items-терді, сәйкестіктерге арналған барлық құжаттарды сканерлеу және сәйкес келетін барлық items-тер пайдаланушыға қайтарылады. Бұл жағдайда бізде көп мүмкіндіктер бар. Біз атрибуттарға, басқа негізгі емес атрибуттарға қосымша шарттар қоя аламыз. Бірақ SCAN операциясы IT-ресурстарын пайдалану тұрғысынан өте қымбат екенін атап өткен жөн, және, тиісінше, ол ақшалай түрде де қымбат. Осылайша, ұсыныс DynamoDB кестесін құрылымдау болып табылады, яғни сіздің сұрауларыңыздың көпшілігі primary key арқылы жасалады. Бұл DynamoDB сервисінің құнын мүмкіндігінше азайтады, ал сіздің барлық сұрауларыңыз мүмкіндігінше тез өңделеді. Енді бізде primary key-дің қандай түрлері бар екенін қарастырайық. Екі түрі бар: single key және compound key. Single key - бұл бір атрибут бірегей кілт болған кезде. Яғни, бізде pk атрибуты бар деп айтамыз, біз оны осылай атаймыз және әр жолдың мәні бірегей мән болып табылады. Егер біз өз өнімдеріміз туралы ақпаратты веб-сайтта DynamoDB кестесінде сақтаймыз десек, әр элементтің бірегей идентификаторын осы атрибутқа енгіземіз. Тағы бір primary key опциясы - бұл compound key, partition key және sort key тіркесімі бірегей болуы керек. Бұл жағдайда partition key өздігінен бірегей болмауы мүмкін, sort key де өздігінен бірегей болмауы мүмкін, бірақ тіркесімі бірегей болуы керек. Осылайша біз екінші бөлімнің соңына жеттік. Біз Amazon DynamoDB сервисін мұқият қарастырдық. Ең маңызды сәттерге назар аударайық. Бұл NoSQL дерекқорларын қамтамасыз ететін managed және serverless сервис. NoSQL дерекқорлары - бұл JSON объектілерімен жұмыс істейтін кесте. Бұл JSON объектілерінің құрылымдары динамикалық болып табылады, сондықтан егер біз құрылымдалмаған деректермен жұмыс жасасақ, DynamoDB біз үшін қолайлы. Құрылымдық деректермен жұмыс істегенде, Amazon RDS біз үшін жақсырақ нұсқа болады. Біз дәрісіміздің үшінші бөліміне жеттік және Amazon Redshift сервисі туралы айтатын боламыз. Amazon Redshift - бұл бізге data warehouse ұсынатын managed сервис. Яғни, бұл барлық деректер бойынша аналитикалық сұраулар жүргізетін дерекқор. Бұл бірнеше көздерден деректерді біріктіре алатын деректер базасы. Егер біз Amazon RDS реляционды дерекқорымен салыстырсақ, онда біз транзакциялық деректермен жұмыс жасаймыз. Яғни, онда күрделі сұраулар аз. Біз негізінен пайдаланушылар туралы кейбір деректерді енгіземіз, мысалы, веб-сервис дұрыс жұмыс істеуі үшін деректерімізді оқимыз. Кейбір бизнес шешімдерін қабылдау үшін бізге талдау жасау, әртүрлі көздерден деректерді жинау және осы жинақталған деректерді басшылықпен бөлісу қажет болғанда, Amazon Redshift сервисі сәйкес келеді. Redshift - бұл әртүрлі сақтау сервистеріне қол жеткізе алатын және сол жерден деректерді ала алатын және осы деректер бойынша әртүрлі перспективаларды біріктіру және алу үшін осы деректер бойынша күрделі SQL сұрауларын өңдей алатын сервис. Дереккөздердің мысалдарына Amazon S3, Amazon DynamoDB, Amazon RDS жатады. Көріп отырғаныңыздай, деректермен жұмыс істейтін негізгі сервистерді Redshift сервисімен біріктіруге болады. Amazon Redshift ішкі құрылымы екі бөліктен тұрады. Біріншісі - бір leader node, яғни бұл төменгі нодаларға командаларды жіберетін нода және бұл төменгі нодалар осы SQL сұрауларын деректерге өңдейді және соңғы нәтижені leader node-қа жібереді. Осылайша, осы деректермен жұмыс оңтайландырылады. Мұның бәрі сервис пайдаланушылары үшін анық, нәтижесінде біз үлкен көлемдегі деректермен жұмыс істеу үшін өте қуатты қозғалтқыш аламыз. Amazon Redshift пайдаланудың негізгі use cases қарастырайық. Бірінші және ең танымал - жергілікті DWH, яғни Data Warehouse, бұлтты шешімге, яғни Amazon Redshift, көшіру. Екіншісі - Big Data, яғни құрылымдалған немесе құрылымдалмаған ақпараттың көп мөлшерін жинақтайтын компаниялар бар және кейбір маңызды ақпаратты алу үшін осы деректерді талдауға шешім қабылдайды. Бұл жағдайда бұл деректер бұлтқа жіберіледі, атап айтқанда Amazon Redshift, онда деректер стандартты SQL көмегімен талданады. Үшінші нұсқа - Amazon Redshift қолдану арқылы белгілі бір төлем сервисін ұсыну, яғни Software as a Service. Сізде кейбір деректер негізінде кейбір есептеулер мен талдаулар жасайтын веб-сайт бар деп елестетіп көріңіз. Мысалы, нақты шешім қабылдау үшін сақтандыру деректерін талдауға болады. Бұл жағдайда сақтандыру компаниялары бұл деректерді сіздің веб-сайтыңызға жүктейді, осы веб-сайт арқылы сіздің Redshift-ке жетеді және кейбір стандартты талдау жасалады және нәтижелердің бір бөлігі осы сақтандыру компанияларына, сіздің клиенттеріңізге қайтарылады. Біз үшінші бөлімнің соңына жеттік және Amazon Redshift туралы толығырақ әңгімелестік. Ең маңызды сәттерге назар аударайық. Amazon Redshift - бұл сізге Data Warehouse, DWH, деректер қоймасын ұсынатын managed сервис. Бұл құрылымдалған, құрылымдалмаған ақпаратты қамтуы мүмкін, сонымен қатар деректерді жүктеу, оған күрделі және ауыр SQL сұрауларын іске қосу және кейбір маңызды бизнес ақпаратын алу үшін сыртқы дереккөздеріне қол жеткізе алатын дерекқор. Amazon Redshift сервисі Amazon S3, Amazon RDS, Amazon DynamoDB сияқты негізгі сақтау сервистерімен біріктірілген. Біз дәрістің соңғы бөліміне жеттік және Amazon Aurora туралы егжей-тегжейлі айтатын боламыз. Amazon Aurora - бұл реляционды дерекқорды қамтамасыз ететін сервис, in-house шешім, яғни екі реляционды дерекқор қозғалтқышына негізделген AWS ішкі жасақтамасы. Бұл MySQL және Postgres. Бұл шешім кез-келген басқа Amazon RDS қозғалтқышына қарағанда бірнеше артықшылықтарды ұсынады. Бағасы бойынша Amazon RDS-пен салыстырғанда арзанырақ. Сонымен қатар, бұл AWS-тің ішкі шешімі болғандықтан, дерекқорды басқару тапсырмаларының одан да көп бөлігі AWS-ке беріледі және жүктемелеріңіз азаяды. Айта кетейін, Amazon Aurora MySQL және Postgres-ке негізделген болса да, ол әлі де MySQL және Postgres-де жоқ бірқатар қосымша мүмкіндіктерді қамтиды. Болашақта, егер сіз Aurora-дан басқа дерекқорға ауысқыңыз келсе, ол өте қымбат және қиын болуы мүмкін, себебі ол MySQL және Postgres қозғалтқыштарына 100% тасымалданбайды. Болашақта Aurora-ны қолдануды бастамас бұрын, мен артықшылықтар мен кемшіліктерді талдауды ұсынамын. Егер AWS-пен жұмыс істейтін болсаңыз, сіз үшінші тарап бұлт провайдерлерін қарастырмасаңыз және басқа бұлт провайдеріне көшудің қажеті болмаса, сондай-ақ, стандартты RDS, MySQL, Postgres не басқа қозғалтқыштарында жоқ, бизнесіңіз үшін маңызды барлық артықшылықтарды алғыңыз келсе, онда сіз Aurora-мен жұмыс істеуді жалғастыра аласыз, барлық артықшылықтарға ие боласыз, және ол арзан болады. Егер бұлт провайдерін өзгерту немесе қозғалтқышты өзгерту қаупі бар болса, онда мен Aurora-мен жұмыс жасамас бұрын ойлануға кеңес беремін, өйткені жұмысты бастау әрқашан оңай. Ауысу қажет болғанда, Aurora-дан басқа кез келген дерекқорға көшуге көп ресурс, күш пен ақша жұмсалуы мүмкін. Бұл слайдта Amazon Aurora сервисінің негізгі артықшылықтары көрсетілген. Бұл сервис managed сервис болып табылады, оны орнату өте оңай, өйткені бұл жергілікті шешім және біз тек пайдаланғанымыз үшін төлейміз. Қол жетімділік туралы айтатын болсақ, Amazon Aurora бастапқыда жоғары қол жетімді болу үшін жасалған, өйткені сіздің деректеріңіз 3 availability аймақтарында қайталанады, ал сақтық көшірмелер Amazon S3-те сақталады. Amazon Aurora 15 read репликаға дейін баптай алады және бұл деректердің жоғалу қаупін азайтады. Негізгі дерекқорда проблемалар туындаған кезде, read replic-тардың бірі автоматты түрде негізгі дерекқор деңгейіне жаңартылады. Осымен төртінші бөлімді аяқтаймыз. Ең маңызды сәттерге назар аударайық. Amazon Aurora - бұл реляционды деректер базасын ұсынатын AWS ішкі шешімі. Оның Amazon RDS-тен бірнеше артықшылықтары бар, басқа Amazon RDS қозғалтқыштарына қарағанда арзанырақ және қозғалтқышта бірқатар ыңғайлы жақсартулар да бар. MySQL немесе Postgres қозғалтқыш ретінде әрекет ете алады. Ескеретін жалғыз нәрсе - бұл ішкі шешім. Amazon Aurora-ны пайдалануды бастағаннан кейін сіз AWS-ке, нақты сол сервиске байланасыз. Егер басқа бұлт провайдеріне немесе қозғалтқышқа, мысалы, Amazon RDS-тің MySQL қозғалтқышына ауыспайтын болсаңыз, онда болашақта ол қымбат тұруы мүмкін және көптеген ресурстарды қажет етуі мүмкін. Егер мұндай қауіп болмаса және сіз AWS және Amazon Aurora-ны реляционды дерекқор ретінде соңына дейін қолданатындығыңызға сенімді болсаңыз, онда бұл өте жақсы шешім, жақсы нұсқа және мен оны пайдалануды ұсынамын. Осымен, біз барлық бөлімдерімізді аяқтадық. Қарастырылған ақпаратты қорытындылайтын келесі слайдты талдайық. Егер бізге реляционды дерекқор қажет болса, Amazon RDS біз үшін ең жақсы сервис болып табылады. Егер бізге шексіз масштабтауға болатын NoSQL дерекқоры қажет болса, біз Amazon DynamoDB таңдаймыз. Егер бізге қозғалтқышты әрқалай теңшеуге болатын дерекқор қажет болса, бізге дерекқор жұмыс істеп тұрған операциялық жүйеге кіру қажет, бұл жағдайда EC2 инстансындағы дерекқорды өзіміз баптау ұсынылады. Егер бізге белгілі бір шешім қажет болса, мысалы, machine learning үшін, деректер қоймасы үшін немесе графиктермен жұмыс істеу үшін, онда AWS жағында осы мақсат үшін арнайы жасалған деректермен жұмыс істейтін жеке сервистер бар. Осымен біздің дәрісіміз аяқталды. Қысқаша қорытындылай келе, біз AWS ішіндегі ең негізгі төрт дерекқор сервистерімен таныстық. Бұл Amazon RDS Relational Database Service, DynamoDB, содан кейін Amazon Redshift және Amazon Aurora. Бұл слайд талдаған сервистер туралы көбірек білу үшін қажет болуы мүмкін сілтемелерді қамтиды. Осымен біз сессиямызды аяқтаймыз. Сіз өткен сервистер туралы жақсырақ түсіндіңіз деп үміттенемін. Назарларыңызға рахмет. Келесі белсенділіктерімізде көріскенше!