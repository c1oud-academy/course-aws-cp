WEBVTT

00:00:00.000 --> 00:00:06.000
Добрый день уважаемые студенты, я
рад вас всех видеть на очередной лекции.

00:00:06.000 --> 00:00:10.488
Тема сегодняшней лекции это база данных.
Мы поговорим про сервисы

00:00:10.512 --> 00:00:15.000
AWS, так или иначе связанные с базами данных.
Окей, давайте начнем.

00:00:17.000 --> 00:00:20.000
Наша сегодняшняя лекция
состоит из четырех частей.

00:00:20.000 --> 00:00:27.000
Мы в самом начале поговорим про сервис Amazon
Relational Database Service, вкратце Amazon RDS.

00:00:27.000 --> 00:00:33.000
Далее NoSQL решение Amazon DynamoDB.
После этого Amazon Redshift.

00:00:33.000 --> 00:00:44.000
И самое последнее, поговорим про in-house
решение от AWS. Это база данных Amazon Aurora.

00:00:47.000 --> 00:00:54.000
Начинаем мы с самого популярного сервиса
баз данных Amazon Relational Database Service.

00:00:54.000 --> 00:00:57.000
Чаще вы его будете
встречать как Amazon RDS.

00:00:57.000 --> 00:01:05.000
Это сервис, который предоставляет вам
managed решения реляционную базу данных.

00:01:05.000 --> 00:01:12.000
Таким образом большинство задач по
администрированию базы данных передается AWS.

00:01:12.000 --> 00:01:17.860
Вам нет необходимости заниматься
этим, а есть возможность фокусироваться

00:01:17.884 --> 00:01:23.000
на основных бизнес задачах.
Что же такое managed и unmanaged?

00:01:23.000 --> 00:01:29.488
Давайте попробуем разобрать на
примере сервиса S3, а именно feature

00:01:29.512 --> 00:01:36.000
внутри S3, которая позволяет
нам настроить static website hosting.

00:01:36.000 --> 00:01:46.000
Представим, что с одной стороны есть локальный
провайдер. Вы покупаете базу данных, один сервер.

00:01:46.000 --> 00:01:58.000
На сервере настраиваете веб-сервер, закидываете 
контент вашего сайта и начинаете этот сайт хостить.

00:01:58.000 --> 00:02:05.171
Параллельно настраиванию
вашего веб-сайта в этой виртуальной

00:02:05.195 --> 00:02:12.000
машине вам необходимо
пройти много различных аспектов,

00:02:12.000 --> 00:02:19.550
начиная от балансировки нагрузки,
настройки самого веб-сервера

00:02:19.574 --> 00:02:27.000
и заканчивая продвинутыми
опциями как автомасштабирование.

00:02:27.000 --> 00:02:31.488
То есть в случае увеличения нагрузки,
что происходит, вы как-то отсекаете

00:02:31.512 --> 00:02:36.000
ваших пользователей либо все-таки
обслуживаете всех ваших пользователей.

00:02:36.000 --> 00:02:42.129
Это говорит о том, что вам нужно больше
мощностей и происходит автоматическое увеличение

00:02:42.153 --> 00:02:48.000
количества виртуальных инстансов.
Вот эти моменты вам нужно самостоятельно решать.

00:02:48.000 --> 00:02:54.715
Когда мы говорим managed, то есть все
это время мы говорили пример хостинга

00:02:54.739 --> 00:03:02.000
статического веб-сайта в unmanaged
виде, то есть все вы делаете самостоятельно.

00:03:02.000 --> 00:03:05.209
Если мы говорим про managed
решение, как пример можем

00:03:05.233 --> 00:03:09.000
сказать Amazon S3, а именно
feature static website hosting.

00:03:09.000 --> 00:03:14.488
Когда вы делаете минимальные настройки,
загружаете в S3 bucket ваши объекты,

00:03:14.512 --> 00:03:20.000
то есть контент вашего веб-сайта и
все, ваш веб-сайт уже настроен, доступен.

00:03:20.000 --> 00:03:24.488
Вам нет необходимости поднимать
веб-сервер на инстансе, вам нет необходимости

00:03:24.512 --> 00:03:29.000
заниматься вопросами автомасштабирования,
потому что оно все внутри сидит.

00:03:29.000 --> 00:03:35.000
Также вам нет необходимости
разбираться и настраивать

00:03:35.000 --> 00:03:41.000
дополнительные инструменты
для большей доступности.

00:03:41.000 --> 00:03:47.626
Amazon S3 гарантирует, что она всегда
доступна, менее подвержена ошибкам,

00:03:47.650 --> 00:03:54.000
автомасштабируется и за это,
соответственно, берет некоторую плату.

00:03:54.000 --> 00:04:01.488
Но бывает такое, что это решение в зависимости
от вашего сайта, от нагрузки на ваш сайт,

00:04:01.512 --> 00:04:09.000
оно может быть выгоднее либо невыгодное.
Это нужно смотреть уже на конкретном примере.

00:04:09.000 --> 00:04:14.581
Но тот факт, что вы не потеряли
время на настройку этого

00:04:14.605 --> 00:04:21.000
веб-сайта, уже сэкономило
какое-то количество человеко-часов.

00:04:21.000 --> 00:04:27.000
И на старте вы видите, что Managed
решение изначально выгодное.

00:04:27.000 --> 00:04:36.000
Если мы возвращаемся обратно к сервису
Amazon RDS, то оно выступает как Managed решение.

00:04:36.000 --> 00:04:40.000
А как Unmanaged выступает
настройка базы данных на EC2 инстансе.

00:04:40.000 --> 00:04:45.000
В этом случае вы проходите самостоятельно
все этапы настройки этой базы данных.

00:04:45.000 --> 00:04:55.000
Самостоятельно отвечаете за ее масштабирование,
за реагирование на падение и, соответственно,

00:04:55.000 --> 00:05:01.593
доступность. Давайте немного подробнее посмотрим,
какие сложности возникают при самостоятельной

00:05:01.617 --> 00:05:08.000
настройке реляционных баз данных. Начинается
все с того, что вся поддержка ложится на вас.

00:05:08.000 --> 00:05:20.000
Далее, настройка и установка всех программ, патчей,
также патчи безопасности, тоже относится к вам.

00:05:20.000 --> 00:05:29.000
Третье - это настройка бэкапов, настройка
процесса восстановления базы данных.

00:05:29.000 --> 00:05:34.988
Если мы говорим про масштабирование,
то с облачным провайдером

00:05:35.012 --> 00:05:41.000
AWS есть возможность практически
неограниченно масштабироваться.

00:05:41.000 --> 00:05:47.000
Так как мы можем запросить необходимое количество
копий, реплик баз данных, сколько нам нужно.

00:05:47.000 --> 00:05:53.000
Мы также можем масштабироваться вертикально,
то есть увеличивать мощность наших баз данных.

00:05:53.000 --> 00:06:01.000
И это происходит намного быстрее по
сравнению с локальным дата-центром.

00:06:01.000 --> 00:06:06.199
Так как вам достаточно поменять тип
баз данных, перезапустить его и у вас

00:06:06.223 --> 00:06:12.000
запускается вся та же ваша база данных,
но уже на новом более мощном инстансе.

00:06:12.000 --> 00:06:19.793
Вопросы безопасности не только
сервера, но и безопасность данных,

00:06:19.817 --> 00:06:27.609
а также выбор, настройка, установка
операционной системы и патчи

00:06:27.633 --> 00:06:35.305
безопасности, патчи операционной
системы - это все те процессы,

00:06:35.329 --> 00:06:43.000
большие блоки, которые вы должны
будете делать самостоятельно.

00:06:43.000 --> 00:06:51.122
На этом слайде вы видите три различных
варианта хостинга баз данных, начиная от локального

00:06:51.146 --> 00:07:00.000
дата-центра, далее хостинг на виртуальном сервере
EC2 и заканчивая managed решением Amazon RDS.

00:07:00.000 --> 00:07:06.781
Вы видите, что список работ
такой же на всех трех вариантах

00:07:06.805 --> 00:07:13.000
и синим выделены те работы,
которые передаются AWS.

00:07:13.000 --> 00:07:18.988
Когда мы говорим про традиционный
хостинг, традиционный дата-центр, 

00:07:19.012 --> 00:07:25.000
в этом случае все работы по
администрированию баз данных передаются вам.

00:07:25.000 --> 00:07:28.988
Скорее всего, будет выделен
отдельный человек, специалист по базам

00:07:29.012 --> 00:07:33.000
данных, который каждый этот пункт
будет проделывать самостоятельно.

00:07:33.000 --> 00:07:38.988
Когда мы говорим про следующий
вариант, это хостинг на виртуальном

00:07:39.012 --> 00:07:45.000
сервере EC2, то последние два
варианта, две опции мы передаем AWS.

00:07:45.000 --> 00:07:50.000
Почему? Потому что эти две 
опции связаны с работой с железом.

00:07:50.000 --> 00:07:56.341
Так как AWS никого не подпускает в свои дата-
центры в целях безопасности, он самостоятельно

00:07:56.365 --> 00:08:02.000
автоматизировал и настроил так, чтобы
это все максимально эффективно работало.

00:08:02.000 --> 00:08:10.000
И все, что связано с железом AWS собирает
на себя от своих клиентов обычного провайдера.

00:08:10.000 --> 00:08:16.155
Все, что не связано с железом, остается у вас и
вам самостоятельно нужно настраивать операционную

00:08:16.179 --> 00:08:23.000
систему на этот виртуальный сервер, настраивать 
базу данных, дополнительные приложения и так далее.

00:08:23.000 --> 00:08:28.614
Когда мы говорим про третью опцию,
вы видите, что большинство работ,

00:08:28.638 --> 00:08:34.000
связанные с администрированием
базы данных, они передаются AWS.

00:08:34.000 --> 00:08:39.521
Остается лишь Application
optimization, это то, что вы будете

00:08:39.545 --> 00:08:45.711
проделывать самостоятельно, а
все, что ниже вы можете передать при

00:08:45.735 --> 00:08:51.856
настройке вашего инстанса базы
данных, как входные данные, и они

00:08:51.880 --> 00:08:58.000
учтутся при автоматизации всех
работ, которые есть на стороне AWS.

00:08:58.000 --> 00:09:11.000
IT-ресурсом в случае Amazon RDS является инстанс
базы данных. Он определяются его class и storage.

00:09:11.000 --> 00:09:18.488
Когда мы говорим про class, мы
дополнительно указываем, какое количество

00:09:18.512 --> 00:09:26.000
CPU, какое количество оперативной
памяти и какой канал сети нам необходим.

00:09:26.000 --> 00:09:35.488
Когда мы говорим про storage, мы в том числе
указываем, какой тип носителя, либо это SSD, либо

00:09:35.512 --> 00:09:45.000
это HDD жесткий диск, и также указываем, сколько
гигабайтов памяти нужно на этих жестких дисках.

00:09:45.000 --> 00:09:52.408
Если мы говорим про движки,
которые поддерживаются, то это список

00:09:52.432 --> 00:10:01.000
справа, MySQL, Amazon Aurora,
Microsoft SQL, Postgres, MariaDB и Oracle.

00:10:01.000 --> 00:10:10.000
Давайте теперь остановимся на опции, которая
доступна внутри Amazon RDS. Это read реплики.

00:10:10.000 --> 00:10:13.988
Read реплика – это когда поднимается
полноценная копия инстанса

00:10:14.012 --> 00:10:18.000
базы данных, но при этом там
доступны только операции чтения.

00:10:18.000 --> 00:10:24.867
Когда у вас на основной базе происходит
операция записи, то все изменения

00:10:24.891 --> 00:10:33.000
фиксируются и передаются всем read репликам
в асинхронном режиме и там применяются.

00:10:33.000 --> 00:10:37.988
Таким образом, через какой-то
короткий промежуток времени ваши

00:10:38.012 --> 00:10:43.000
read реплики становятся идентичными
вашей основной базе данных.

00:10:43.000 --> 00:10:54.000
Эта опция доступна для баз данных MySQL,
MariaDB, Postgres, а также Amazon Aurora.

00:10:54.000 --> 00:11:01.488
Каждая из ваших read реплик может быть
повышена до уровня основной базы данных по запросу,

00:11:01.512 --> 00:11:09.000
либо в случае, когда что-то происходит с
основной базой данных и она становится недоступной.

00:11:09.000 --> 00:11:14.579
Эта опция используется очень часто
при настройке disaster recovery, когда

00:11:14.603 --> 00:11:20.182
ваша инфраструктура настроена на
двух регионах, когда что-то происходит

00:11:20.206 --> 00:11:25.591
с основным регионом, то весь ваш
трафик на ваше приложение передается

00:11:25.615 --> 00:11:31.000
на другой регион, чтобы продолжать
обслуживать ваших пользователей.

00:11:31.000 --> 00:11:35.901
Так как регион падает
достаточно редко, но такое тоже

00:11:35.925 --> 00:11:41.488
бывает, то DR могут позволить
себе очень большие компании,

00:11:41.512 --> 00:11:46.744
но настроив один раз disaster
recovery, они максимально

00:11:46.768 --> 00:11:52.000
гарантируют себе, что
приложение всегда будет доступно.

00:11:52.000 --> 00:12:02.000
И здесь момент, который следует упомянуть, read 
реплики могут быть настроены на другом регионе.

00:12:02.000 --> 00:12:06.694
Таким образом, на основном
регионе у вас основной инстанс

00:12:06.718 --> 00:12:12.000
баз данных, а на запасном
регионе вы поднимаете read реплику.

00:12:12.000 --> 00:12:18.361
В случае, когда падает весь регион,
сервис Amazon RDS также падает,

00:12:18.385 --> 00:12:24.456
ваш основной инстанс баз данных
становится недоступным. В этом

00:12:24.480 --> 00:12:30.883
случае, автоматически read реплика
на втором регионе повышается до

00:12:30.907 --> 00:12:38.000
уровня основной баз данных и операции
записи там становятся доступными.

00:12:38.000 --> 00:12:42.526
Теперь у вас возникнет,
скорее всего, вопрос, когда нам

00:12:42.550 --> 00:12:48.000
необходимо использовать read реплики.
Название говорит за себя.

00:12:48.000 --> 00:12:56.988
Если у вас есть база данных, на котором в
основном запускаются операции чтения, то настроив

00:12:57.012 --> 00:13:06.000
read реплику, вы можете ваши нагрузки чтения
распределить по нескольким инстансам баз данных.

00:13:06.000 --> 00:13:14.488
Это помогает разгрузить базу данных, и если вы
все операции чтения раскидаете по read репликам

00:13:14.512 --> 00:13:23.000
и освободите основную базу данных, то она
полноценно может быть доступной для операции записи.

00:13:23.000 --> 00:13:29.232
Другой пример, это когда у вас есть
некоторые тяжелые запросы, которые

00:13:29.256 --> 00:13:35.488
по тем или иным причинам запускаются.
Это может быть, например, когда

00:13:35.512 --> 00:13:41.425
пользователь приложения запускает
некоторые функции, и эта функция

00:13:41.449 --> 00:13:48.000
достаточно дорогостоящая и запускает
сложные запросы внутри баз данных.

00:13:48.000 --> 00:13:54.430
Другой пример, у вас настроены на
ежедневной основе, раз в день, может быть,

00:13:54.454 --> 00:14:02.000
несколько раз в день, запуск тяжелых
запросов для сбора данных для отчета руководству.

00:14:02.000 --> 00:14:11.000
То есть, собирается вся информация, агрегируется
и в виде отчетов компонуется и передается дальше.

00:14:11.000 --> 00:14:18.706
Так как любые тяжелые запросы дают
нагрузку на базу данных, базы данных у вас одна,

00:14:18.730 --> 00:14:27.000
это один цельный инстанс, то эти тяжелые
запросы дают эффект на более простые запросы.

00:14:27.000 --> 00:14:33.000
Таким образом, простые запросы также продолжат
запускаться, но будут отрабатывать медленнее.

00:14:33.000 --> 00:14:43.488
Поэтому, best practice-ом является перенести
по большей части ваши read нагрузки на read

00:14:43.512 --> 00:14:54.000
реплику и операции записи оставить на основной
базе данных, где операции записи доступны.

00:14:54.000 --> 00:14:59.988
При этом всегда помните, что
процесс репликации асинхронный, таким

00:15:00.012 --> 00:15:06.000
образом, не все read операции
могут быть перенесены на read реплику.

00:15:06.000 --> 00:15:15.029
Как первый шаг, всегда рассматривайте увеличение
мощности инстанса базы данных, когда вы видите, что

00:15:15.053 --> 00:15:24.000
какую-то часть read записи можно перенести на read
реплику, в этом случае рекомендуется рассматривать.

00:15:24.000 --> 00:15:28.763
Почему read реплика это вторая
либо третья опция, но не самая

00:15:28.787 --> 00:15:33.390
первая, потому что дополнительная
read реплика без острой

00:15:33.414 --> 00:15:38.695
необходимости увеличивает почти
в два раза ваши расходы на сервис

00:15:38.719 --> 00:15:44.000
Amazon RDS, потому что у вас два
полноценных одинаковых инстанса.

00:15:44.000 --> 00:15:54.000
В этом случае нужно, взвесив все минусы и
плюсы, начинать использовать read реплики.

00:15:54.000 --> 00:15:59.488
Давайте рассмотрим по
пунктам, в каких случаях следует

00:15:59.512 --> 00:16:05.000
использовать Amazon RDS
и в каких случаях не следует.

00:16:05.000 --> 00:16:11.988
Когда мы говорим не следует использовать
Amazon RDS, есть несколько разных вариантов, начиная

00:16:12.012 --> 00:16:19.000
от хостинга баз данных на EC2 инстансе, либо
использовать другой более подходящий сервис AWS.

00:16:19.000 --> 00:16:23.308
Начнем мы с пунктов, когда нам
следует использовать Amazon RDS,

00:16:23.332 --> 00:16:27.988
это когда у нас достаточно сложные
запросы, у нас есть транзакции.

00:16:28.012 --> 00:16:32.528
Под сложными запросами подразумеваются
запросы, в которых несколько

00:16:32.552 --> 00:16:37.000
join, то есть вы работаете
одновременно с несколькими таблицами.

00:16:37.000 --> 00:16:49.000
Далее, если у вас до 30 тысяч IOPS, то есть операция 
записи и чтения в секунду в эту базу данных.

00:16:49.000 --> 00:16:56.466
Далее, если вам нужна высокая
надежность и в случае, когда вам достаточно

00:16:56.490 --> 00:17:03.540
одного инстанса базы данных.
В некоторых случаях, когда у вас очень

00:17:03.564 --> 00:17:10.770
большой объем данных, то RDS не
совсем подходит, так как ваши данные

00:17:10.794 --> 00:17:18.000
переходят в разряд Big Data или не
структурированных больших данных.

00:17:18.000 --> 00:17:26.000
Тогда рекомендуется и правильнее будет
использовать другие более подходящие сервисы.

00:17:26.000 --> 00:17:32.382
Когда мы говорим про пункты,
когда не следует использовать Amazon

00:17:32.406 --> 00:17:38.488
RDS, это когда у вас достаточно
большой объем IOPS, операции

00:17:38.512 --> 00:17:44.744
записи и чтения, например 150
тысяч операций записи в секунду

00:17:44.768 --> 00:17:51.000
или больше, в этом случае у вас
действительно большие нагрузки.

00:17:51.000 --> 00:18:00.000
Следует посмотреть в сторону Amazon
Redshift либо настройки Data Lake в S3.

00:18:00.000 --> 00:18:05.840
Другой пункт, это когда данные
могут быть поделены на shard, это так

00:18:05.864 --> 00:18:11.705
называемые независимые куски
данных между собой, которые независимо

00:18:11.729 --> 00:18:17.352
могут работать, независимо могут
использоваться, но объем данных

00:18:17.376 --> 00:18:23.000
настолько большой, что вы
вынуждены делить эти данные на shard.

00:18:23.000 --> 00:18:28.278
Другой пункт, это когда вам
нет необходимости использовать

00:18:28.302 --> 00:18:33.488
сложные запросы с использованием
языка SQL, это простые

00:18:33.512 --> 00:18:38.463
операции GET и PUT, в этом
случае следует посмотреть в

00:18:38.487 --> 00:18:44.000
сторону NoSQL баз данных, как
вариант это сервис DynamoDB.

00:18:44.000 --> 00:18:49.703
И последний пункт, это когда
вам нужна некоторая тонкая

00:18:49.727 --> 00:18:56.488
настройка вашей базы данных.
В этом случае эта опция может быть

00:18:56.512 --> 00:19:03.273
недоступна для Amazon RDS, и
остается вариант либо самостоятельно

00:19:03.297 --> 00:19:09.000
хостить, либо смотреть в
сторону других сервисов AWS.

00:19:09.000 --> 00:19:12.766
Давайте теперь рассмотрим
те факторы, которые влияют

00:19:12.790 --> 00:19:17.000
на итоговую стоимость
использования сервиса Amazon RDS.

00:19:17.000 --> 00:19:22.988
Первое - это то количество времени,
когда база данных запущена. В том

00:19:23.012 --> 00:19:29.000
случае когда вы останавливаете
базу данных, оплата она не начисляется.

00:19:29.000 --> 00:19:35.765
Представим, что мы настроили, подняли базу
данных, она была запущена 4 часа, через 4 часа вы

00:19:35.789 --> 00:19:43.000
остановили ее до конца месяца, в этом случае в
конце месяца придет счет на оплату этих 4 часов.

00:19:43.000 --> 00:19:49.038
Другой пункт - это то, что чем
больше, чем мощнее ваш инстанс

00:19:49.062 --> 00:19:55.000
баз данных, тем дороже будет
стоить каждый час ее работы.

00:19:55.000 --> 00:20:03.988
Есть два варианта опции покупки
баз данных, это On-demand, когда мы

00:20:04.012 --> 00:20:13.000
запускаем нашу базу данных на то
количество времени, какое нам нужно.

00:20:13.000 --> 00:20:16.000
В тот момент, когда мы
останавливаем, оплата не начисляется.

00:20:16.000 --> 00:20:21.355
Когда мы говорим второй вариант,
это Reserved Instances, мы можем

00:20:21.379 --> 00:20:27.488
сказать, что мы определенный тип баз
данных будем использовать в течении

00:20:27.512 --> 00:20:33.244
года, либо 3, и соответственно AWS
на эту информацию, в зависимости

00:20:33.268 --> 00:20:39.000
от того, какую часть мы предоплатим,
предоставит определенные скидки.

00:20:39.000 --> 00:20:43.988
Reserved Instances, как ранее
мы говорили, это тот вариант, когда

00:20:44.012 --> 00:20:49.000
у вас есть постоянные нагрузки
24 часа в сутки, 7 дней в неделю.

00:20:49.000 --> 00:20:59.000
В случае, когда этого нет, рекомендуется
оставаться на типе On-demand.

00:20:59.000 --> 00:21:05.150
Другой вариант, фактор, который также влияет на
стоимость сервиса Amazon RDS, это так называемый

00:21:05.174 --> 00:21:11.000
Deployment type, то есть, грубо говоря, какое
количество инстансов базы данных запущено.

00:21:11.000 --> 00:21:16.000
Когда мы деплоим нашу базу данных на
одной availability зоне, то это один инстанс.

00:21:16.000 --> 00:21:20.823
Когда мы включаем опцию Multiple
AZ, то на нескольких availability

00:21:20.847 --> 00:21:25.000
зонах у нас поднимаются по
одному инстансу баз данных.

00:21:25.000 --> 00:21:29.000
В этом случае происходит
оплата за каждый этот инстанс.

00:21:29.000 --> 00:21:37.000
Представим, что мы подняли вашу
базу данных на двух availability зонах.

00:21:37.000 --> 00:21:40.488
Таким образом, стоимость
будет, соответственно, в два раза

00:21:40.512 --> 00:21:44.000
больше, чем бы она была
запущена на одной availability зоне.

00:21:44.000 --> 00:21:47.000
Сюда также относится
и опция read replica.

00:21:47.000 --> 00:21:52.488
То есть, read replica – это тот же инстанс
базы данных, единственное, операции

00:21:52.512 --> 00:21:58.000
записи запрещены, но при этом это
полноценный инстанс с точки зрения железа.

00:21:58.000 --> 00:22:05.000
И оплата идет согласно тарифу, согласно
характеристикам этого конкретного инстанса.

00:22:05.000 --> 00:22:14.988
И последнее, которое также нужно
учитывать, это то, что за transfer данных,

00:22:15.012 --> 00:22:25.000
в случае если это происходит внутри
одного региона, оплата не происходит.

00:22:25.000 --> 00:22:31.544
В случае, когда у нас идет
outbound data transfer, то есть в

00:22:31.568 --> 00:22:39.000
другой регион, то либо мы запрашиваем
эти данные из AWS локально,

00:22:39.000 --> 00:22:45.000
в этом случае за outbound data transfer идет
соответствующая оплата согласно тарифу.

00:22:45.000 --> 00:22:53.000
На этом мы добрались до конца первой
секции, просмотрели сервис Amazon RDS.

00:22:53.000 --> 00:22:58.000
Давайте остановимся на самых основных моментах.
Первое – это то, что это managed service.

00:22:58.000 --> 00:23:01.488
Таким образом большинство
административных задач переходят на

00:23:01.512 --> 00:23:05.000
AWS, и мы можем сконцентрироваться
на наших бизнес-задачах.

00:23:05.000 --> 00:23:15.000
Для того, чтобы работать с RDS, мы можем
использовать AWS Management Console, AWS CLI, SDK.

00:23:15.000 --> 00:23:26.000
Так как это managed решение, то вопросы скейлинга,
availability, также переходят на сторону AWS.

00:23:26.000 --> 00:23:29.619
Нам лишь необходимо ввести
некоторые входные данные, которые

00:23:29.643 --> 00:23:34.000
полноценно настраивают нашу базу
данных согласно требованиям бизнеса.

00:23:34.000 --> 00:23:40.988
Если мы говорим про движки, которые
поддерживаются, то это Amazon Aurora, in-house

00:23:41.012 --> 00:23:48.000
решение от AWS, далее это Postgres,
MySQL, MariaDB, Oracle и Microsoft SQL Server.

00:23:48.000 --> 00:23:52.689
Мы добрались до второй части
нашей сегодняшней лекции, и

00:23:52.713 --> 00:23:58.000
здесь поговорим подробнее про
NoSQL решение Amazon DynamoDB.

00:23:58.000 --> 00:24:04.286
Перед тем, как мы перейдем к разбору
этого сервиса, давайте остановимся на том,

00:24:04.310 --> 00:24:11.000
чем отличается реляционная база данных
от нереляционной, то есть NoSQL баз данных.

00:24:11.000 --> 00:24:16.988
Если мы говорим про единицы
хранения, то в случае relational database, у

00:24:17.012 --> 00:24:23.000
нас есть таблицы, в таблицах есть
записи, в каждой записи есть колонка.

00:24:23.000 --> 00:24:30.000
Она фиксирована, то есть схема,
структура этой таблицы фиксирована.

00:24:30.000 --> 00:24:38.000
Если вы добавляете новую колонку, в этом
случае она добавляется для всех записей.

00:24:38.000 --> 00:24:44.712
Когда мы говорим про NoSQL баз данных,
в этом случае мы работаем с некоторой

00:24:44.736 --> 00:24:51.000
структурой ключ-значение.
В этом случае у нас структура динамическая.

00:24:51.000 --> 00:24:55.711
Например, у нас может быть одна
запись, в которой определенный

00:24:55.735 --> 00:25:00.988
набор ключей с соответствующими
значениями, а следующая запись, она

00:25:01.012 --> 00:25:05.994
может содержать совершенно
другой, не совпадающий список ключей

00:25:06.018 --> 00:25:11.000
и соответственно значения.
Таким образом, структура динамическая.

00:25:11.000 --> 00:25:15.597
Когда мы говорим про то, как
мы запрашиваем и как работаем с

00:25:15.621 --> 00:25:21.000
данными, в случае с реляционной
баз данных, мы используем язык SQL.

00:25:21.000 --> 00:25:28.023
Когда мы говорим про non-relational баз данных, то
мы используем операции GET и PUT. То есть, какие-то

00:25:28.047 --> 00:25:35.000
сложные операции, сложные запросы, в случае с
NoSQL базами данных мы делать, к сожалению, не можем.

00:25:35.000 --> 00:25:41.988
Если мы говорим про масштабирование
реляционной базы данных, это одна

00:25:42.012 --> 00:25:49.000
сущность, одна база данных и
масштабирование производится вертикально.

00:25:49.000 --> 00:25:52.233
То есть, увеличивается
мощность этой конкретной базы

00:25:52.257 --> 00:25:56.000
данных, то есть сервера, на
котором хостится база данных.

00:25:56.000 --> 00:26:01.781
Когда мы говорим про NoSQL решение, в
этом случае особенность NoSQL баз данных такая,

00:26:01.805 --> 00:26:08.000
что данных может быть очень много и
соответственно масштабируется это все горизонтально.

00:26:08.000 --> 00:26:16.000
Мы можем работать с shard-ами, то есть кусками
данных, которые не зависят от других shard-ов.

00:26:16.000 --> 00:26:21.567
Таким образом, размеры
NoSQL баз данных может десятки,

00:26:21.591 --> 00:26:28.000
сотни, тысячи раз превышать
размеры реляционных баз данных.

00:26:28.000 --> 00:26:31.988
И сами по себе данные, которые
находятся внутри реляционных

00:26:32.012 --> 00:26:36.000
баз данных, это достаточно
структурированные, четкие данные.

00:26:36.000 --> 00:26:41.000
Когда мы говорим про NoSQL баз данных,
данные динамические, нет определенной структуры.

00:26:41.000 --> 00:26:45.000
Соответственно, мы работаем с
полуструктурированными данными.

00:26:45.000 --> 00:26:53.000
Когда мы говорим про реляционные
базы данных, это Amazon RDS.

00:26:53.000 --> 00:26:59.000
В случае, когда мы говорим про NoSQL
баз данных, это Amazon DynamoDB.

00:26:59.000 --> 00:27:05.281
То есть это то решение, которое
предоставляет Managed и Serverless сервис для

00:27:05.305 --> 00:27:12.000
работы с NoSQL базами данных. Размеры этой 
базы данных фактически не ограничены.

00:27:12.000 --> 00:27:17.564
Мы работаем с items, то есть это аналог
строки в реляционной базе данных и может

00:27:17.588 --> 00:27:24.000
содержать различные атрибуты. Они могут
динамически быть изменены на уровне каждой строки.

00:27:24.000 --> 00:27:28.867
Все запросы, которые
происходят в DynamoDB, Single-Digit

00:27:28.891 --> 00:27:35.000
Millisecond, то есть отрабатывают
в течение нескольких миллисекунд.

00:27:35.000 --> 00:27:46.000
В DynamoDB есть несколько основных компонентов. Это
таблицы, items и атрибуты. Таблицы – это набор items.

00:27:46.000 --> 00:27:52.000
Item – это некоторый JSON документ,
который состоит из набора ключ и значения.

00:27:52.000 --> 00:28:02.000
Таким образом, атрибутом выступает
как раз таки ключ внутри этого документа.

00:28:02.000 --> 00:28:13.000
У нас есть два варианта, как мы можем
запросить данные из таблицы DynamoDB.

00:28:13.000 --> 00:28:17.488
Первое – мы можем обратиться
по его primary key, то есть

00:28:17.512 --> 00:28:22.000
уникальному ключу, и напрямую
излечь нужные нам документы.

00:28:22.000 --> 00:28:27.000
Это самый дешевый и самый
быстрый вариант излечения данных.

00:28:27.000 --> 00:28:30.738
Второй вариант – это использование
SCAN, то есть сканирование

00:28:30.762 --> 00:28:34.000
всех items, всех документов
на предмет совпадения,

00:28:34.000 --> 00:28:39.536
и, соответственно, все items,
которые совпали, возвращаются

00:28:39.560 --> 00:28:45.000
к пользователю. В этом случае 
у нас больше возможностей.

00:28:45.000 --> 00:28:51.000
Мы можем наложить дополнительные условия
на атрибуты, другие не основные атрибуты.

00:28:51.000 --> 00:28:56.876
Но следует отметить, что операция SCAN
достаточно дорогостоящая с точки зрения

00:28:56.900 --> 00:29:04.000
использования IT-ресурсов, и, соответственно, в
денежном выражении это также выходит дороже.

00:29:04.000 --> 00:29:09.715
Таким образом, рекомендация
построить структуру таблицы DynamoDB

00:29:09.739 --> 00:29:16.000
так, чтобы большинство ваших
запросов происходило через primary key.

00:29:16.000 --> 00:29:21.534
Это максимально удешевит
стоимость сервиса DynamoDB, при этом

00:29:21.558 --> 00:29:27.000
все ваши запросы будут
отрабатываться максимально быстро.

00:29:30.000 --> 00:29:32.988
Давайте теперь рассмотрим,
какие виды primary key у нас

00:29:33.012 --> 00:29:36.000
бывают. Выделяют два вида – 
single key и compound key.

00:29:36.000 --> 00:29:45.194
Single key – это когда уникальным ключом выступает
один атрибут. То есть мы говорим, у нас есть

00:29:45.218 --> 00:29:55.000
атрибут pk, так мы его назовем, и значением каждой
строчки выступает некоторое уникальное значение.

00:29:55.000 --> 00:30:03.520
Если мы говорим, что мы храним в нашей
таблице DynamoDB информацию о наших

00:30:03.544 --> 00:30:13.000
товарах на веб-сайте, то в этот атрибут
мы положим уникальный ID каждого товара.

00:30:13.000 --> 00:30:19.599
Другой вариант primary
key – это compound key, когда

00:30:19.623 --> 00:30:27.000
уникальным должны быть
связка partition key и sort key.

00:30:27.000 --> 00:30:31.339
В этом случае partition key может
быть не уникальным сам по себе, sort key

00:30:31.363 --> 00:30:36.000
также может быть не уникальным сам по
себе, но связка должна быть уникальной.

00:30:40.000 --> 00:30:47.000
На этом мы добрались до конца второй секции.
Мы подробно рассмотрели сервис Amazon DynamoDB.

00:30:47.000 --> 00:30:50.000
И давайте остановимся на
самых основных моментах.

00:30:50.000 --> 00:30:57.000
Это сервис managed и serverless сервис,
который предоставляет NoSQL базы данных.

00:30:57.000 --> 00:31:05.000
NoSQL базы данных – это таблица, в
которой мы работаем с JSON объектами.

00:31:05.000 --> 00:31:11.753
Эти JSON объекты динамические по
своей структуре, и, соответственно, если

00:31:11.777 --> 00:31:19.000
мы работаем с неструктурированными
данными, то DynamoDB больше нам подходит.

00:31:19.000 --> 00:31:27.000
В случае, когда мы работаем с структурированными
данными, нам лучше может подойти Amazon RDS.

00:31:29.000 --> 00:31:36.000
Мы с вами добрались до третьей части нашей лекции,
и подробнее поговорим про сервис Amazon Redshift.

00:31:36.000 --> 00:31:43.000
Amazon Redshift – это managed сервис, который
предоставляет нам data warehouse. То есть это

00:31:43.000 --> 00:31:51.000
база данных, в которой мы проводим некоторые
аналитические запросы на всех наших данных.

00:31:51.000 --> 00:31:57.000
Это та база данных, которая может
агрегировать данные из нескольких источников.

00:31:57.000 --> 00:32:03.988
Если проводить аналогию с реляционной
баз данных Amazon RDS, то там мы

00:32:04.012 --> 00:32:11.000
работаем с транзакционными данными.
То есть там мало сложных запросов.

00:32:11.000 --> 00:32:17.488
В основном мы вводим некоторые
данные по нашим пользователям, например,

00:32:17.512 --> 00:32:24.000
и считываем наши данные для того,
чтобы наш веб-сервис корректно работал.

00:32:24.000 --> 00:32:27.861
В случае, когда нам необходимо
провести некоторый анализ,

00:32:27.885 --> 00:32:31.538
собрать данные с различных
источников и передать эти

00:32:31.562 --> 00:32:35.417
агрегированные данные
руководству для принятия некоторых

00:32:35.441 --> 00:32:40.000
бизнес-решений, то в этом случае
Amazon Redshift лучше подходит.

00:32:40.000 --> 00:32:50.261
Redshift – это тот сервис, который может обращаться 
к различным сервисам хранения и получать оттуда

00:32:50.285 --> 00:32:55.833
данные, отрабатывать на этих данных
сложнейшие SQL-запросы, чтобы

00:32:55.857 --> 00:33:02.000
агрегировать и получать различную
перспективу на этих данных.

00:33:02.000 --> 00:33:07.000
Как примерами источников, может выступать
Amazon S3, Amazon DynamoDB, Amazon RDS.

00:33:07.000 --> 00:33:14.000
Как вы видите, все основные сервисы в работе
с данными могут быть интегрированы с Redshift.

00:33:14.000 --> 00:33:21.000
Если говорить про внутреннюю кухню сервиса
Amazon Redshift, то она состоит из двух частей.

00:33:21.000 --> 00:33:28.439
Первая – это одна-единственная
leader node, то есть это та нода, которая

00:33:28.463 --> 00:33:35.902
передает команды нижним нодам, а эти
нижние ноды фактически отрабатывают

00:33:35.926 --> 00:33:42.951
эти SQL-запросы на данных и
передают уже конечный результат leader

00:33:42.975 --> 00:33:50.000
node-е. Таким образом происходит
оптимизация работы с этими данными.

00:33:50.000 --> 00:33:55.531
Это все прозрачно для пользователей
сервиса, и мы в итоге получаем

00:33:55.555 --> 00:34:01.000
достаточно мощный движок для
работы с большими объемами данных.

00:34:01.000 --> 00:34:08.000
Давайте рассмотрим основные use cases
использования сервиса Amazon Redshift.

00:34:08.000 --> 00:34:12.488
Самый первый и самый популярный
– это миграция локального DWH, то

00:34:12.512 --> 00:34:17.000
есть Data Warehouse, на облачное
решение, то есть Amazon Redshift.

00:34:17.000 --> 00:34:21.117
Второе – это Big Data, т.е.
есть компании, которые накапливают

00:34:21.141 --> 00:34:24.988
большой объем структурированной
либо неструктурированной

00:34:25.012 --> 00:34:28.994
информации и в какой-то момент
решают проанализировать эти

00:34:29.018 --> 00:34:33.000
данные для того, чтобы извлечь
некоторую важную информацию.

00:34:33.000 --> 00:34:40.866
В этом случае эти данные переносятся
в облако, а именно в Amazon Redshift,

00:34:40.890 --> 00:34:48.000
и там эти данные анализируются с
использованием стандартного SQL.

00:34:48.000 --> 00:34:52.769
И третья опция – это использование
Amazon Redshift для предоставления

00:34:52.793 --> 00:34:57.000
некоторого сервиса расчетов,
то есть Software as a Service.

00:34:57.000 --> 00:35:00.118
Представьте, что у вас есть
некоторый веб-сайт, он производит

00:35:00.142 --> 00:35:03.000
некоторые расчеты, анализы
на основе некоторых данных.

00:35:03.000 --> 00:35:10.000
Примером может быть анализ, например, страховых
данных для принятия определенного решения.

00:35:10.000 --> 00:35:13.899
В этом случае страховые компании
загружают эти данные на ваш

00:35:13.923 --> 00:35:17.756
веб-сайт, через этот веб-сайт
попадают на ваш Redshift, и

00:35:17.780 --> 00:35:21.504
производится некоторый
стандартный анализ и возвращается

00:35:21.528 --> 00:35:26.000
некоторый результат уже этим
страховым компаниям, вашим клиентам.

00:35:26.000 --> 00:35:32.179
Мы добрались до конца третьей части нашей
сегодняшней лекции, подробнее поговорили

00:35:32.203 --> 00:35:38.000
про сервис Amazon Redshift. Давайте 
остановимся на самых основных моментах.

00:35:38.000 --> 00:35:43.837
Amazon Redshift – это сервис, managed
решение, которое предоставляет

00:35:43.861 --> 00:35:49.000
вам Data Warehouse, DWH,
склад данных либо витрина данных.

00:35:49.000 --> 00:35:54.691
Это некоторая база данных, которая
может содержать в себе структурированные,

00:35:54.715 --> 00:35:59.722
не структурированные информацию,
также может обращаться к внешним

00:35:59.746 --> 00:36:05.052
источникам данных для того, чтобы
подтягивать данные, запускать на них

00:36:05.076 --> 00:36:11.000
сложные и тяжелые SQL-запросы, и
получать какую-то важную бизнес-информацию.

00:36:11.000 --> 00:36:17.147
Amazon Redshift нативно
интегрируется с основными сервисами

00:36:17.171 --> 00:36:23.000
хранения, это Amazon S3,
Amazon RDS, Amazon DynamoDB.

00:36:23.000 --> 00:36:31.000
А мы с вами добрались до последней части нашей 
лекции, подробно поговорим про сервис Amazon Aurora.

00:36:31.000 --> 00:36:41.488
Amazon Aurora – это сервис, который предоставляет
реляционную базу данных, in-house решение, т.е.

00:36:41.512 --> 00:36:52.000
внутренняя разработка AWS, базирующаяся на двух
движках реляционных баз данных. Это MySQL и Postgres.

00:36:52.000 --> 00:37:05.000
Это решение обладает рядом преимуществ по
сравнению с любыми другими движками Amazon RDS.

00:37:05.000 --> 00:37:15.000
По ценам он по большей части
дешевле по сравнению с RDS.

00:37:15.000 --> 00:37:24.488
Более того, так как это внутреннее нативное
решение самого AWS, то еще большая часть задач по

00:37:24.512 --> 00:37:34.000
администрированию вашей базы данных переносится
на сторону AWS и вас еще больше разгружает.

00:37:34.000 --> 00:37:44.103
Хотел бы отметить, что даже если Amazon Aurora
базируется на MySQL и Postgres, тем не менее в нем

00:37:44.127 --> 00:37:55.000
содержится ряд дополнительного функционала,
который не существует на MySQL и Postgres.

00:37:55.000 --> 00:38:05.488
И в будущем, если вы захотите переехать от
Aurora на другую базу данных, это может быть очень

00:38:05.512 --> 00:38:16.000
дорого и сложно, ввиду того, что она не
стопроцентно переносится на движки MySQL и Postgres.

00:38:16.000 --> 00:38:25.000
Перед тем, как вы начнете использование Aurora
в будущем, я рекомендую взвесить все за и против.

00:38:25.000 --> 00:38:34.578
В том случае, когда вы стопроцентно знаете и решили,
что будете двигаться с AWS, не будете рассматривать

00:38:34.602 --> 00:38:44.000
сторонние облачные провайдеры, никогда не будет
задачи переехать на другого облачного провайдера.

00:38:44.000 --> 00:38:49.361
Также, если вы хотите получить
все те преимущества, которые

00:38:49.385 --> 00:38:55.488
важны для вашего бизнеса, которых
нет на стандартных движках RDS,

00:38:55.512 --> 00:39:01.566
MySQL, Postgres, либо других, то в
этом случае вы можете продолжать

00:39:01.590 --> 00:39:07.000
с Aurora, вы получите все
преимущества, это будет дешевле.

00:39:07.000 --> 00:39:13.988
В том случае, если есть некоторый риск смены
облачного провайдера, либо смены движка, то

00:39:14.012 --> 00:39:21.000
в этом случае настоятельно рекомендую
задуматься перед тем, как начинать работу с Aurora,

00:39:21.000 --> 00:39:28.988
потому как начать всегда легко. В том случае,
когда вам понадобится перенос, очень много ресурсов,

00:39:29.012 --> 00:39:37.000
сил и денег может быть потрачено только на процесс
миграции с Aurora на любую другую базу данных.

00:39:40.000 --> 00:39:44.000
На этом слайде представлены основные
преимущества сервиса Amazon Aurora.

00:39:44.000 --> 00:39:50.598
Это то, что этот сервис является managed
сервисом, является достаточно простым в настройке,

00:39:50.622 --> 00:39:57.000
так как это нативное решение, и то, что мы
оплачиваем только за то, что мы используем.

00:39:57.000 --> 00:40:05.488
Если говорить про доступность, Amazon Aurora
изначально построена высокодоступным, так как

00:40:05.512 --> 00:40:14.000
ваши данные реплицируются в 3 availability
зоны, более того, бэкапы сохраняются в Amazon S3.

00:40:17.000 --> 00:40:21.978
Amazon Aurora может поднять до
15 read replicas, и это минимизирует

00:40:22.002 --> 00:40:26.526
риск того, что данные будут потеряны.
И в тот момент, когда

00:40:26.550 --> 00:40:31.031
возникают проблемы с основной
базой данных, то одна из read

00:40:31.055 --> 00:40:36.000
replic автоматически повышается
до уровня основной базы данных.

00:40:39.000 --> 00:40:46.000
На этом мы завершаем четвертую секцию,
давайте остановимся на самых основных моментах.

00:40:46.000 --> 00:40:53.000
Amazon Aurora - это внутреннее решение AWS,
которое предоставляет вам реляционные базы данных.

00:40:53.000 --> 00:41:04.556
Оно имеет ряд преимуществ по сравнению с
решением Amazon RDS, оно дешевле по сравнению

00:41:04.580 --> 00:41:16.000
с другими движками Amazon RDS, и также
есть в наличии ряд удобных доработок движка.

00:41:16.000 --> 00:41:20.000
Как движок может выступать
движок MySQL либо Postgres.

00:41:20.000 --> 00:41:28.000
Единственный момент, который нужно обязательно
учитывать, это то, что это внутреннее решение.

00:41:28.000 --> 00:41:32.086
Как только вы начинаете
использовать Amazon Aurora, то вы

00:41:32.110 --> 00:41:37.000
привязываетесь к AWS, вы
привязываетесь к конкретно этому сервису.

00:41:37.000 --> 00:41:42.207
И в случае, если вы не
собираетесь в будущем мигрировать к

00:41:42.231 --> 00:41:47.988
другому облачному провайдеру,
либо на другой движок, например,

00:41:48.012 --> 00:41:53.494
тот же Amazon RDS, на том же
движке MySQL, то в будущем это

00:41:53.518 --> 00:41:59.000
может стоить дорого, потребовать
достаточно большие ресурсы.

00:41:59.000 --> 00:42:05.130
В случае, когда такого риска
нет, и вы знаете, что вы до конца

00:42:05.154 --> 00:42:11.988
будете использовать AWS и сервис
Amazon Aurora как реляционную базу

00:42:12.012 --> 00:42:18.494
данных, в этом случае это очень
хорошее решение, хорошая опция и

00:42:18.518 --> 00:42:25.000
рекомендую ее использовать.
На этом мы завершили все наши секции.

00:42:25.000 --> 00:42:30.000
Давайте посмотрим на этот слайд,
который резюмирует все то, что мы разобрали.

00:42:30.000 --> 00:42:39.000
Если нам нужна реляционная база данных, то сервис,
который максимально нам подходит, это Amazon RDS.

00:42:39.000 --> 00:42:42.552
Если же нам нужна NoSQL
база данных, которая может

00:42:42.576 --> 00:42:47.000
бесконечно масштабироваться, то
мы выбираем Amazon DynamoDB.

00:42:47.000 --> 00:42:53.990
В случае, если нам нужна база
данных, где мы можем производить

00:42:54.014 --> 00:43:00.775
любые кастомизации движка,
нам нужен доступ к операционной

00:43:00.799 --> 00:43:07.913
системе, где запущена база
данных, в этом случае рекомендуется

00:43:07.937 --> 00:43:14.000
поднять самостоятельно
базу данных на инстансе EC2.

00:43:14.000 --> 00:43:21.212
В случае, если нам нужно специфичное
решение, например, для machine

00:43:21.236 --> 00:43:29.543
learning, для склада данных, для витрины
данных, либо для работы с графами,

00:43:29.567 --> 00:43:37.271
то в этом случае есть специально
созданные для этого отдельные сервисы

00:43:37.295 --> 00:43:45.000
по работе с данными на стороне AWS.
На этом мы завершаем нашу лекцию.

00:43:45.000 --> 00:43:49.678
Буквально резюмируя, что
мы прошли, мы познакомились с

00:43:49.702 --> 00:43:55.000
четырьмя самыми основными
сервисами баз данных внутри AWS.

00:43:55.000 --> 00:44:04.000
Это Amazon RDS Relational Database Service, это
DynamoDB, далее Amazon Redshift и Amazon Aurora.

00:44:04.000 --> 00:44:12.383
На этом слайде представлены ссылки, которые
вам могут понадобиться для дополнительного

00:44:12.407 --> 00:44:20.000
углубленного изучения пройденных сервисов.
На этом мы завершаем нашу сессию.

00:44:20.000 --> 00:44:27.000
Я надеюсь, вы получили более полное
представление о пройденных сервисах.

00:44:27.000 --> 00:44:32.000
Спасибо за внимание. Увидимся с вами 
на следующих наших активностях.
