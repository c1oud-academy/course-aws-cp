WEBVTT

00:00:01.260 --> 00:00:04.470
Добрый день, уважаемые студенты!
Я рад вас видеть.

00:00:05.040 --> 00:00:11.380
Мы продолжаем погружение в облачные 
технологии и сегодня у нас модуль второй.

00:00:12.060 --> 00:00:16.457
Мы поговорим про Cloud
economics and billing, а именно,

00:00:16.481 --> 00:00:20.879
это все то, что связано с
оплатой облачных услуг – как

00:00:20.903 --> 00:00:25.419
происходит ценообразование
сервисов AWS, как можно будет

00:00:25.443 --> 00:00:30.370
посмотреть ваши затраты и как
ими управлять. Итак, поехали.

00:00:32.730 --> 00:00:35.280
Сегодняшняя сессия поделена
на пять частей.

00:00:35.790 --> 00:00:40.650
В первой части мы поговорим про
основы ценообразования сервисов AWS.

00:00:41.790 --> 00:00:45.963
Далее мы познакомимся с
таким понятием как Total cost of

00:00:45.987 --> 00:00:50.160
ownership, т.е. итоговая цена
владения IT-инфраструктурой.

00:00:50.880 --> 00:00:58.129
После этого, в третьей части мы познакомимся с
сервисом AWS Organizations, этот сервис набирает

00:00:58.153 --> 00:01:05.170
популярность и чаще используется при построении 
IT-архитектуры в облаке в последние годы.

00:01:06.300 --> 00:01:16.590
В предпоследней части мы поговорим о группе сервисов
AWS, связанных с оплатой и управлением затратами.

00:01:17.460 --> 00:01:23.940
Ну и в последней части мы поговорим про
техподдержку – какие виды бывают и чем отличаются.

00:01:26.370 --> 00:01:30.360
Первая секция: Основы
ценообразования сервисов AWS.

00:01:30.960 --> 00:01:39.660
Когда мы говорим про то, как идёт оплата
за сервис, здесь есть три основных драйвера.

00:01:40.410 --> 00:01:45.250
Это – compute, т.е. вычисление; это – storage, т.е.
хранение и data transfer, т.е. передача данных.

00:01:45.450 --> 00:01:50.369
В итоге, в зависимости от
вида AWS сервиса мы платим

00:01:50.393 --> 00:01:56.280
сервису за то, что и как мы
используем, а именно, используем

00:01:56.304 --> 00:02:01.063
какие-то вычислительные
ресурсы, либо за хранение

00:02:01.087 --> 00:02:06.940
определённого объёма данных,
либо за передачу этих данных.

00:02:07.500 --> 00:02:12.420
Теперь, поговорим
подробнее про Data Transfer.

00:02:13.080 --> 00:02:19.102
Это когда данные с одного
места переходят в другое место и

00:02:19.126 --> 00:02:25.890
пунктом назначения, либо пунктом
отправки является само облако.

00:02:26.520 --> 00:02:36.510
Когда мы передаём наши данные в облако,
облачному провайдеру, то он за это оплаты не берет.

00:02:37.470 --> 00:02:41.977
Как легко запомнить? Т.е. он с радостью 
принимает все то, что у нас

00:02:42.001 --> 00:02:46.440
есть, но когда нам нужно что-то
запросить, это уже не бесплатно.

00:02:47.640 --> 00:02:51.660
Этот вопрос косвенно, либо прямо
может прийти на AWS экзамене.

00:02:52.410 --> 00:02:57.305
Также следует отметить,
что передача данных между

00:02:57.329 --> 00:03:03.450
сервисами в рамках одного
региона тоже является бесплатной.

00:03:06.660 --> 00:03:10.743
Мы с вами помним, что внутри
региона есть availability зоны, а

00:03:10.767 --> 00:03:14.850
сама availiabilty зона – это одна
или несколько дата-центров.

00:03:15.600 --> 00:03:21.433
Таким образом, вы можете передавать
свои данные между несколькими

00:03:21.457 --> 00:03:27.930
дата-центрами в рамках одного
региона и за это никакой платы не будет.

00:03:28.560 --> 00:03:35.354
В большинстве случаев это верно,
но есть некоторые исключения для

00:03:35.378 --> 00:03:43.235
некоторых сервисов и всегда следует
смотреть страницу Pricing для каждого

00:03:43.259 --> 00:03:51.119
сервиса, который вы начинаете
использовать для того, чтобы понять за какой

00:03:51.143 --> 00:03:58.680
из трёх драйверов ценообразования
за AWS сервис вы будете оплачивать.

00:04:00.960 --> 00:04:05.794
Следующий момент, который следует
также отметить: мы с вами сказали, что

00:04:05.818 --> 00:04:11.130
данные, которые мы передаём в облако
– бесплатно, обратно принимаем – платно.

00:04:11.640 --> 00:04:18.163
Так вот, данные, которые мы
принимаем, агрегируются от всех сервисов,

00:04:18.187 --> 00:04:25.574
которые мы приняли, и весь этот объем
переданной информации передаётся одной

00:04:25.598 --> 00:04:32.457
строчкой AWS Data Transfer Out в
ежемесячно выставленном счёте от AWS в

00:04:32.481 --> 00:04:39.340
разрезе сервисов, в разрезе всего
того, за что мы должны ему оплатить.

00:04:39.960 --> 00:04:48.266
Приведу пример,  мы получили данные от сервиса
Amazon S3 в объёме 10 гигабайтов и из другого

00:04:48.290 --> 00:04:57.053
сервиса, к примеру, Amazon EC2 с наших серверов,
напрямую подключившись через интернет, тоже 10

00:04:57.077 --> 00:05:05.066
гигабайтов. Таким образом, мы просуммируем –
всего от AWS за текущий месяц мы получили 20 ГБ

00:05:05.090 --> 00:05:14.170
и эти 20 ГБ будут указаны просуммированными
в одной строчке AWS Data Transfer Out.

00:05:18.300 --> 00:05:24.053
С момента основания AWS появилось
большое количество сервисов,

00:05:24.077 --> 00:05:29.830
но это никак не изменило то,
как идёт оплата за сервисы AWS.

00:05:32.460 --> 00:05:37.863
Как мы с вами помним, мы оплачиваем
только то, что мы используем, таким образом, мы

00:05:37.887 --> 00:05:43.290
не заключаем никаких ни долгосрочных, ни
среднесрочных, ни краткосрочных контрактов.

00:05:44.100 --> 00:05:49.985
Мы ни чему не обязаны, в тот момент,
когда мы начинаем использовать

00:05:50.009 --> 00:05:55.893
сервис начинает начисляться
некоторая сумма за то, что мы используем.

00:05:55.917 --> 00:06:01.672
В тот момент, когда мы высвобождаем
наши ресурсы при использовании

00:06:01.696 --> 00:06:07.450
любого сервиса, то перестаёт
начисляться оплата за использование.

00:06:07.860 --> 00:06:12.933
В конце каждого месяца приходит
счёт с расписанной информацией о том,

00:06:12.957 --> 00:06:18.030
какой сервис, в каком объёме был
в использовании и сколько это стоит.

00:06:20.730 --> 00:06:26.310
Также следует отметить, что мы можем
оплачивать меньше, если мы резервируем.

00:06:26.970 --> 00:06:34.101
Мы про это проговорим. Также мы платим
меньше, если мы используем больше и платим

00:06:34.125 --> 00:06:42.060
меньше, когда AWS растёт. Про каждый пункт
мы поговорим на нескольких следующих слайдах.

00:06:44.310 --> 00:06:48.480
Первый – Pay for what you use –
плати только за то, что ты используешь.

00:06:49.200 --> 00:06:56.738
Этот принцип наглядно показан на слайде с правой
стороны. С левой стороны мы видим стандартную,

00:06:56.762 --> 00:07:04.140
традиционную модель, когда мы используем
локальный дата-центр, локальную IT-инфраструктуру.

00:07:05.160 --> 00:07:11.647
Плюсы и минусы мы все помним, мы все знаем. Мы
видим, что с AWS, с облачным провайдером, с облачными

00:07:11.671 --> 00:07:18.617
технологиями мы можем платить за любой период много,
когда нам нужно, а на следующий период освободиться,

00:07:18.641 --> 00:07:25.061
высвободить эти ресурсы и перестать за них платить.
Таким образом, мы можем сэкономить на том, что

00:07:25.085 --> 00:07:31.440
мы платим только за то, что мы используем, а то,
что мы не используем, мы можем быстро вернуть.

00:07:32.340 --> 00:07:38.010
Это экономит некоторые средства. В крупных
компаниях доходит до достаточно больших сумм.

00:07:38.820 --> 00:07:45.095
Здесь я хотел бы добавить ещё один
новый нюанс – некоторые сервисы, которые

00:07:45.119 --> 00:07:50.970
вы используете, это приложения,
разработанные сторонними компаниями.

00:07:51.600 --> 00:07:56.940
Таким образом, для того, чтобы
использовать их внутри AWS, нужна лицензия.

00:07:57.990 --> 00:08:06.720
У AWS есть договорённость со всеми этими компаниями,
которые предоставляют свои услуги как AWS сервис

00:08:06.744 --> 00:08:15.300
– возможность оплачивать лицензию по модели
pay-as-you-go pricing, которая включена по умолчанию.

00:08:15.840 --> 00:08:21.982
Например, когда вы запускаете
инстанс от Oracle или инстанс

00:08:22.006 --> 00:08:28.148
базы данных от Microsoft,
которые являются платными базами

00:08:28.172 --> 00:08:33.669
данных и требуют лицензии,
то вы уже в цене, которую

00:08:33.693 --> 00:08:40.270
оплачиваете AWS, также
оплачиваете за услуги лицензирования.

00:08:42.180 --> 00:08:49.285
Если же у вас есть своя собственная лицензия,
то и здесь AWS приготовил для вас решение – есть

00:08:49.309 --> 00:08:57.180
специальный сервис, куда вы загружаете свои лицензии
и можете использовать в соответствующих сервисах.

00:08:57.570 --> 00:09:04.188
Таким образом, вы при наличии этих лицензий
у вас, уже купленных, не переплачиваете

00:09:04.212 --> 00:09:10.830
AWS, платите только за использование и
лицензионный сбор не будет входить за оплату.

00:09:11.160 --> 00:09:18.053
В случае же если у вас нет лицензии,
то это очень удобно, потому как работа с

00:09:18.077 --> 00:09:24.970
лицензиями это те оплаты, которые
происходят наперёд, лицензии стоят недёшево.

00:09:25.290 --> 00:09:27.930
Таким образом, это один из
примеров капитальных расходов.

00:09:28.710 --> 00:09:34.685
Простой пример, когда капитальные
расходы не есть хорошо, если вы

00:09:34.709 --> 00:09:40.683
использовали базу данных в течение
шести месяцев, а лицензия у вас

00:09:40.707 --> 00:09:46.037
на год, т.е. если вы не используете 
эту лицензию, деньги не

00:09:46.061 --> 00:09:52.680
возвращаются в традиционной модели
и вся та оплата, она уходит впустую.

00:09:53.070 --> 00:10:01.126
В случае, когда мы говорим, что мы используем
AWS по pay-as-you-go pricing и приходим не со

00:10:01.150 --> 00:10:09.923
своими лицензиями, а уже используем внутри AWS,
то мы намного облегчаем себе работу с управлением

00:10:09.947 --> 00:10:18.095
лицензиями и высвобождаем для себя больше
времени для занятия основной частью бизнеса, делать

00:10:18.119 --> 00:10:26.800
то, что действительно нужно и не отвлекаться на
побочные работы, такие как управление лицензиями.

00:10:29.170 --> 00:10:35.968
Второй пункт – это Pay less when you reserve,
или другими словами, мы можем оплачивать

00:10:35.992 --> 00:10:42.310
меньше, если мы резервируем. Также это 
называется RI, либо Reserved Instances.

00:10:42.790 --> 00:10:47.782
Это специальная модель
оплаты, доступная для достаточно

00:10:47.806 --> 00:10:53.818
популярных и затратных сервисов
внутри любой IT-инфраструктуры и

00:10:53.842 --> 00:10:59.344
это нормально, а именно сервисы
Amazon Elastic Compute Cloud,

00:10:59.368 --> 00:11:04.870
т.е. Amazon EC2 и Amazon
RDS (Relational database service).

00:11:08.320 --> 00:11:12.739
Первое – это когда мы запрашиваем
серверные мощности (виртуальный сервер),

00:11:12.763 --> 00:11:16.940
на котором мы можем настроить её
так, как мы хотим, полный контроль.

00:11:17.320 --> 00:11:25.150
Amazon RDS – это когда мы получаем
готовую базу данных как сервис.

00:11:25.690 --> 00:11:33.244
Это достаточно популярные сервисы, которые
используются практически в любой IT-инфраструктуре

00:11:33.268 --> 00:11:40.000
и оплата за эти два сервиса может занимать
значительную часть ежемесячной оплаты.

00:11:41.980 --> 00:11:51.397
Для того, чтобы пойти навстречу и снизить расходы
в целом на облако, AWS разработала новую модель

00:11:51.421 --> 00:12:01.330
оплаты Reserved Instances, которая помогает вам
потенциально сохранить до 70% затрат на эти сервисы.

00:12:02.710 --> 00:12:06.896
Как это работает?
Когда мы говорим pay-as-you-go,

00:12:06.920 --> 00:12:12.680
подразумевается on-demand модель
оплаты (on-demand – по запросу).

00:12:12.820 --> 00:12:17.839
Значит, вы можете запросить
поднять виртуальный сервер на 20

00:12:17.863 --> 00:12:23.478
минут, после чего её отключить и
когда придёт ежемесячный счёт на

00:12:23.502 --> 00:12:29.197
оплату, вы получите сумму, которая
равняется 20 минутам использования

00:12:29.221 --> 00:12:34.160
того сервера того типа, который 
вы подняли. Это on-demand.

00:12:34.480 --> 00:12:40.540
On-demand идеально подходит для нагрузок,
которые непостоянны, либо сложно прогнозируемы.

00:12:42.400 --> 00:12:49.513
Когда мы говорим про нагрузки постоянные, т.е.
это может быть какая-то стабильно

00:12:49.537 --> 00:12:56.650
работающая компания, либо тип нагрузок
на инфраструктуру сам по себе постоянный.

00:12:57.010 --> 00:13:05.240
Например, это точно не веб-сайт, когда нагрузка
может меняться в зависимости от времени суток.

00:13:05.890 --> 00:13:14.120
Возможно, это какие-то расчёты, которые могут быть
распределены во времени и они достаточно стабильны.

00:13:15.250 --> 00:13:25.289
Для таких случаев AWS даёт возможность сэкономить
и если вы подтверждаете, что вы на определённый

00:13:25.313 --> 00:13:34.783
период готовы использовать определённый объем
вычислительных мощностей, т.е. такое-то количество

00:13:34.807 --> 00:13:44.276
инстансов такого-то типа, подписываете это
контрактом, то AWS, зная, что придёт оплата,

00:13:44.300 --> 00:13:53.770
становится легче планировать дальнейшее развитие
своей глобальной инфраструктуры, дата-центров.

00:13:54.280 --> 00:14:02.500
За это она готова давать скидки, и мы имеем
возможность экономить на затратах на облако.

00:14:05.200 --> 00:14:12.250
Выделяют три вида возможных вариантов
оплаты по модели Reserved Instances.

00:14:12.580 --> 00:14:21.100
Это No Upfront Reserved Instance, Partial Upfront
Reserved Instance и All Upfront Reserved Instance.

00:14:22.270 --> 00:14:29.040
Я специально выделил первые буквы,
потому что обычно они встречаются в виде

00:14:29.064 --> 00:14:35.833
аббревиатуры, т.е. NURI, PURI и AURI.
Чем они отличаются? Они отличаются тем,

00:14:35.857 --> 00:14:42.405
какое количество оплаты за вычислительные
мощности вы оплачиваете сразу при

00:14:42.429 --> 00:14:49.420
заключении контракта и какую скидку вы
получаете, они обратно пропорциональны.

00:14:50.560 --> 00:14:56.650
Например, No Upfront Reserved Instance –
это когда вы ничего не оплачиваете, вы лишь

00:14:56.674 --> 00:15:03.719
подписываете контракт и показываете облачному
провайдеру своё намерение, что вы такой-то период

00:15:03.743 --> 00:15:10.495
будете такой-то объем вычислительных мощностей
использовать. Даже эта информация, если она

00:15:10.519 --> 00:15:17.270
гарантирована, она полезна для облачного
провайдера, и он с радостью даёт нам за это скидки.

00:15:18.220 --> 00:15:23.610
Если же мы говорим про Partial
Upfront Reserved Instance, то мы при

00:15:23.634 --> 00:15:29.023
заключении контракта оплачиваем
50% того, что мы должны были оплатить

00:15:29.047 --> 00:15:34.437
с учётом скидки. Как это происходит?
За период высчитывается итоговая

00:15:34.461 --> 00:15:39.850
сумма с учётом скидки и с учётом
того, что мы половину сразу оплатим.

00:15:40.450 --> 00:15:46.738
Половину вы сразу оплачиваете и за
весь этот период оставшиеся 50% оплаты

00:15:46.762 --> 00:15:53.050
равномерно распределяется на этот
период и со скидкой за нее оплачиваете.

00:15:53.980 --> 00:16:00.160
За PURI, естественно, даются
скидки больше, чем за NURI.

00:16:00.520 --> 00:16:06.107
И последние All Upfront Reserved
Instance – когда высчитывается за

00:16:06.131 --> 00:16:12.235
период все расходы с учётом того,
что все сразу оплатите, вы получаете

00:16:12.259 --> 00:16:18.279
максимальную скидку, которую вообще
возможно, и должны будете оплатить

00:16:18.303 --> 00:16:23.973
его сразу, а потом за каждый
месяц в счетах, которые приходят от

00:16:23.997 --> 00:16:29.735
AWS ежемесячно за те нагрузки,
которые, допустим за Amazon EC2, либо

00:16:29.759 --> 00:16:35.325
за Amazon RDS, вы будете видеть
сколько вы потребили, т.е. какое

00:16:35.349 --> 00:16:41.387
количество какой объем мощностей
вы использовали в этом месяце, но как

00:16:41.411 --> 00:16:47.450
оплата будет стоять ноль, потому
что вы заранее уже оплату произвели.

00:16:50.650 --> 00:16:57.520
Два момента, которые следует запомнить.
Первый – не запоминайте аббревиатуры, запомните

00:16:57.544 --> 00:17:04.413
смысл. Аббревиатуры придут на экзамене, а
именно NURI, PURI и AURI вам нужно запомнить,

00:17:04.437 --> 00:17:11.547
что начинается с N это No, т.е. нет оплаты.
P – это Partial, частично. A – All, полностью.

00:17:11.571 --> 00:17:18.200
Потому как может прийти либо прямой
вопрос с этими аббревиатурами, либо косвенный.

00:17:20.110 --> 00:17:27.250
Другой момент –  когда мы говорим про
период заключения контракта, выделяют два вида.

00:17:27.730 --> 00:17:32.900
Это на один год подписывается
контракт или на три года.

00:17:33.400 --> 00:17:37.799
Таким образом, минимальная
скидка, которую вы можете получить,

00:17:37.823 --> 00:17:42.223
это в случае, когда вы делаете 
контракт NURI, т.е. No Upfront

00:17:42.247 --> 00:17:46.466
Reserved Instance, на один
год – это минимальная полезная

00:17:46.490 --> 00:17:50.710
информация, минимальный
контракт Reserved Instance для AWS.

00:17:51.640 --> 00:17:56.301
Так как вы ничего сразу не оплачиваете
и это минимальный период, который

00:17:56.325 --> 00:18:00.987
возможен, он даёт минимальную
скидку, и вы меньше рискуете, т.е. знать,

00:18:01.011 --> 00:18:05.868
что вы в течение трёх лет будете
использовать такие-то нагрузки, это тоже

00:18:05.892 --> 00:18:10.750
нужно хорошо спрогнозировать и это
может быть не так, зависит от компании.

00:18:11.950 --> 00:18:18.306
Это минимально, что вы получаете.
Если думать дальше, следуя подобной

00:18:18.330 --> 00:18:24.219
логике, то максимальную скидку
вы получаете в случае, когда вы

00:18:24.243 --> 00:18:30.124
заключаете контракт AURI, т.е.
оплачиваете все сразу и контракт

00:18:30.148 --> 00:18:36.980
заключаете на три года.
В этом случае вы получаете максимальную скидку.

00:18:37.900 --> 00:18:43.851
Последний момент, который
очень важен при работе с Reserved

00:18:43.875 --> 00:18:50.854
Instance (RI), это то, что вы должны
покупать объёмы через Reserved

00:18:50.878 --> 00:18:57.757
Instance модель только те мощности,
которые нагружены 24 часа, либо

00:18:57.781 --> 00:19:04.450
приблизительное количество
часов в день в течение всего месяца.

00:19:07.510 --> 00:19:18.110
Понимаете да, почему? Остановите это видео.
Подумайте почему. Хорошо продолжаем.

00:19:18.610 --> 00:19:24.827
Вопрос ещё раз – почему мы должны
резервировать только те инстансы,

00:19:24.851 --> 00:19:30.880
которые нагружены 24 часа в
сутки 7 дней в неделю и весь месяц?

00:19:31.660 --> 00:19:35.949
Ответ прост – потому что,
таким образом, вы сэкономите

00:19:35.973 --> 00:19:40.749
максимально, во-первых, и,
во-вторых, может быть получится

00:19:40.773 --> 00:19:44.810
так, что, представим, у
вас есть инстансы, которые

00:19:44.834 --> 00:19:49.780
нагружены полноценно на 15
дней в месяц, то есть полмесяца.

00:19:50.740 --> 00:19:54.565
И вы покупаете Reserved
Instance, зная, что каждые 15

00:19:54.589 --> 00:19:58.930
дней каждого месяца в течение
года вы будете их нагружать.

00:20:00.040 --> 00:20:07.244
И да, вы с одной стороны сэкономите, потому
что вы знаете нагрузки. Вы будете оплачивать

00:20:07.268 --> 00:20:14.224
меньше за единицу времени за каждый час
использования Amazon EC2, но вы переплатите

00:20:14.248 --> 00:20:21.037
фактически, потому что вам вот эту сумму, т.е.
оплату за часы, цену за часы нужно

00:20:21.061 --> 00:20:27.850
будет платить и за оставшиеся 15 дней
месяца, когда они просто будут простаивать.

00:20:28.240 --> 00:20:33.476
Поэтому вот этот момент учтите и
в крупных компаниях, зная, что у них

00:20:33.500 --> 00:20:38.736
определённый объем инстансов или
вычислительных мощностей постоянно

00:20:38.760 --> 00:20:44.385
требуется, то именно на них покупается
Reserved Instance, а все остальное

00:20:44.409 --> 00:20:49.720
используется on-demand, потому
что так выходит максимально выгодно.

00:20:50.080 --> 00:20:54.028
Вот этот момент запомните,
он вам пригодится не только на

00:20:54.052 --> 00:20:58.000
экзамене, но и в будущем,
когда вы устроитесь на работу.

00:21:01.180 --> 00:21:11.853
И последний третий пункт – Pay less when you
use more and as AWS grows, т.е. мы платим меньше,

00:21:11.877 --> 00:21:22.550
когда используем больше, и мы платим меньше,
когда сам AWS расширяется и растёт. Давайте поясню.

00:21:22.960 --> 00:21:28.394
Есть такое понятие как Tiered pricing.
В чем её идея?

00:21:28.418 --> 00:21:33.853
Идея в том, что вы с определённых
объёмов использования

00:21:33.877 --> 00:21:40.020
вычислительных мощностей,
ресурсов AWS, будете платить меньше

00:21:40.044 --> 00:21:45.880
за каждую последующую
eдиницу вот этой мощности ресурса.

00:21:47.320 --> 00:21:55.233
Например, мы используем сервис Amazon S3.
Я сейчас возьму цены

00:21:55.257 --> 00:22:03.170
с воздуха, а реальные цены вы
можете всегда найти и посмотреть.

00:22:04.810 --> 00:22:16.760
Допустим, за каждый терабайт
хранения данных в Amazon S3 стоит 5$.

00:22:17.980 --> 00:22:26.169
Далее, у Amazon S3 есть
некая таблица с Tiered Pricing,

00:22:26.193 --> 00:22:35.900
которая говорит, что данные в
объёме до 50 ТБ за 1 ТБ стоят 5$.

00:22:37.300 --> 00:22:46.428
Как только вы начинаете хранить больше,
то за 51-ый терабайт, который вы храните, то

00:22:46.452 --> 00:22:55.580
есть с 51-го по, например, 100-й ТБ вы за
каждый терабайт будете платить не 5$, а 4$.

00:22:55.990 --> 00:23:03.460
Таким образом, вы за объёмы каждый последующий
раз будете платить меньше, оно выходит выгоднее.

00:23:04.600 --> 00:23:08.770
Этот момент учитывайте тоже, когда
вы используете сервисы.

00:23:09.610 --> 00:23:15.058
У некоторых сервисов дойти
до следующего Tiered pricing, не

00:23:15.082 --> 00:23:20.530
всегда легко, но это все сильно
зависит от самого бизнеса.

00:23:22.390 --> 00:23:29.890
Поэтому работая с определённым сервисом, обязательно
смотрите Pricing страницу и учитывайте эти моменты.

00:23:31.120 --> 00:23:43.810
Следующее это то, что за тот период с 2006 г., как
работает AWS, он в 75 раз снизил цены за сервисы.

00:23:45.190 --> 00:23:50.852
Например, как это выглядело?
Выходит новость о том, что

00:23:50.876 --> 00:23:56.538
за Amazon EC2 за каждый
час работы такого-то инстанса,

00:23:56.562 --> 00:24:07.180
нужно оплачивать 2$, и написано в новости, что с
этого момента теперь нужно не 2$ оплачивать, а 1,5$.

00:24:07.900 --> 00:24:15.400
Таких новостей, приятных, хороших,
было 75 раз за историю существования AWS.

00:24:16.150 --> 00:24:22.700
Она этим гордится.
Это действительно хороший тренд.

00:24:23.830 --> 00:24:30.130
Клиентам становится дешевле
использовать облако, облачные технологии.

00:24:31.000 --> 00:24:36.959
Это говорит о том, что AWS
расширяется, она не уменьшается и за счёт

00:24:36.983 --> 00:24:42.853
тех масштабов, про это мы с вами
говорили, за счёт масштабов есть

00:24:42.877 --> 00:24:48.792
возможность уменьшать себестоимость
предоставления этого сервиса и,

00:24:48.816 --> 00:24:54.730
соответственно, уменьшив немного
маржу, делать счастливее клиентов.

00:24:57.940 --> 00:25:09.470
Третий вариант – это Custom pricing options.
Это такой нестандартный подход к оплате за AWS.

00:25:10.030 --> 00:25:21.730
Представим, что вы компания, у которой
инфраструктура в месяц стоит 100 000$.

00:25:22.690 --> 00:25:29.530
Таким образом, в год вы миллионы долларов
тратите только на вашу IT-инфраструктуру.

00:25:30.490 --> 00:25:39.164
Это достаточно большие суммы. Эти суммы могут
уходить даже при всех возможных акциях, в том числе

00:25:39.188 --> 00:25:47.590
RI, Tiered pricing и все эти моменты, которые
помогает оптимизировать ваши затраты в облаке.

00:25:47.980 --> 00:25:57.022
В этом случае есть возможность, т.е. когда у вас
такие затраты, скорее всего, у вас премиальный

00:25:57.046 --> 00:26:05.800
доступ к техподдержке и есть выделенный
человек со стороны AWS, который вас консультирует.

00:26:06.160 --> 00:26:10.685
Таким образом, вы можете
проконсультироваться с этим

00:26:10.709 --> 00:26:16.302
человеком и уточнить возможность
персональной скидки для вашей

00:26:16.326 --> 00:26:21.024
компании, либо за определённые
сервисы, либо какую-то

00:26:21.048 --> 00:26:26.200
общую скидку за те расходы,
которые вы несёте на облако.

00:26:28.420 --> 00:26:34.989
Зачастую бывает такое что, да,
скидки выдаются, некоторые скидки

00:26:35.013 --> 00:26:42.523
выдаются разово, некоторые скидки
выдаются в виде кредитов, а некоторые

00:26:42.547 --> 00:26:49.587
скидки, в целом, выдаются за единицу
использования ресурса, что очень

00:26:49.611 --> 00:26:56.650
хорошо и оно фактически является
не временной, а постоянной скидкой.

00:26:59.020 --> 00:27:04.366
Custom pricing, эту тему мы не
будем охватывать подробно на этом

00:27:04.390 --> 00:27:09.735
курсе, я лишь сказал те моменты,
которые я сам знаю и когда вы

00:27:09.759 --> 00:27:15.014
встретитесь, это нужно будет
уже индивидуально разговаривать с

00:27:15.038 --> 00:27:21.070
представителем AWS и таким образом,
сокращать свои расходы на облако.

00:27:24.220 --> 00:27:29.121
Следующая возможность
использования AWS не со скидками,

00:27:29.145 --> 00:27:34.485
а даже бесплатно, это – программа 
AWS Free Tier. Эта программа

00:27:34.509 --> 00:27:40.112
предназначена для новых клиентов,
новых аккаунтов AWS и длится

00:27:40.136 --> 00:27:45.739
12 месяцев, т.е. целый год.
Идея в том, что с этой программой вы

00:27:45.763 --> 00:27:51.323
можете для себя понять, подходят
ли вам некоторые AWS сервисы,

00:27:51.347 --> 00:27:56.907
которые вы хотите проверить и
попробовать что-то простое сделать

00:27:56.931 --> 00:28:02.494
на стороне AWS, чтобы понять, в
целом, этот облачный провайдер,

00:28:02.518 --> 00:28:07.810
либо вообще решения через
облако, самое главное бесплатно.

00:28:09.970 --> 00:28:13.902
Идея в том, что в AWS Free Tier
участвует большинство сервисов

00:28:13.926 --> 00:28:17.470
AWS, и на каждый сервис
выдаются определенные кредиты.

00:28:17.920 --> 00:28:23.548
Например, если мы говорим про
Amazon EC2, виртуальный сервер,

00:28:23.572 --> 00:28:29.200
на Amazon EC2 каждый месяц
выдается 720 часов – это ровно 30 дней.

00:28:29.560 --> 00:28:36.363
Фактически, вы можете расходовать как хотите
ее, например, вы можете запустить один cервер

00:28:36.387 --> 00:28:43.190
и он 30 дней будет у вас непрерывно работать,
что-то вы можете с ним делать, что хотите.

00:28:43.870 --> 00:28:49.084
Другой вариант – вы можете
запустить, если это 720 часов, то 70

00:28:49.108 --> 00:28:54.321
серверов параллельно на 10
часов и что-то там с ними сделать,

00:28:54.345 --> 00:28:59.266
какие-то расчеты, возможно,
это все будет бесплатно, так как

00:28:59.290 --> 00:29:04.796
входит в рамки AWS Free Tier.
Как только вы это все проделываете,

00:29:04.820 --> 00:29:09.992
на текущий месяц расходуются
все кредиты, в начале следующего

00:29:10.016 --> 00:29:15.188
месяца эти кредиты пополняются,
но неиспользованные кредиты не

00:29:15.212 --> 00:29:20.384
переносятся, и вы для Amazon
EC2 получаете еще 720 часов, ни

00:29:20.408 --> 00:29:25.580
больше, ни меньше и можете
расходовать дальше и так целый год.

00:29:30.280 --> 00:29:34.889
Для того, чтобы, скажем так, не
рисковать и случайно не перешагнуть

00:29:34.913 --> 00:29:38.962
за лимиты AWS Free Tier и не
потратиться лишний раз, были

00:29:38.986 --> 00:29:43.451
разработаны специальные так
называемые 10-minute tutorials, т.е.

00:29:43.475 --> 00:29:48.650
10-минутные обучающие материалы,
которые выполняют определенную задачу.

00:29:48.940 --> 00:29:55.307
Это, может быть, простая инфраструктура,
может быть какая-то задача с

00:29:55.331 --> 00:30:01.698
привлечением нескольких сервисов,
но основная идея всех этих задач в

00:30:01.722 --> 00:30:08.089
том, что они, в случае если вы не
превышаете типы или количество того,

00:30:08.113 --> 00:30:14.480
что в задаче указано, вы гарантированно
не превышаете AWS Free Tier.

00:30:14.980 --> 00:30:17.518
Таким образом, вы безопасно
для себя можете попробовать

00:30:17.542 --> 00:30:20.080
и более, скажем так, практически
ознакомиться с облаками.

00:30:20.440 --> 00:30:28.308
С этой программой  для новичков в
облаке очень удобно начинать, очень удобная

00:30:28.332 --> 00:30:36.201
возможность, если интересно, если
хочется получить больше практических знаний,

00:30:36.225 --> 00:30:43.632
либо самостоятельно использовать
консоль, посмотреть как она выглядит, то

00:30:43.656 --> 00:30:51.578
полноценная консоль без ограничений
вам доступна, регистрируйтесь, смотрите.

00:30:52.148 --> 00:30:57.528
Это все то, что вы можете использовать помимо
тех лабораторных работ, которые у нас будут на курсе.

00:31:00.518 --> 00:31:06.252
Есть определённый список AWS
сервисов, которые предоставляются на

00:31:06.276 --> 00:31:12.908
безвозмездной основе, т.е. бесплатно.
Это сделано по нескольким причинам.

00:31:14.438 --> 00:31:18.728
Я предварительно попытаюсь вам
объяснить какие это сервисы.

00:31:19.778 --> 00:31:26.888
Все мы знаем, что сервисы – это IT-ресурсы,
как мы до этого сказали, например, когда

00:31:26.912 --> 00:31:34.021
говорим про Amazon EC2, это IT-ресурс,
вам выделяется виртуальный сервер. Когда мы

00:31:34.045 --> 00:31:41.155
говорим про Amazon RDS – передается
база данных как сервис, уже готовая, ничего не

00:31:41.179 --> 00:31:48.288
устанавливаете, не настраиваете, готовая
база данных, берите, работаете, IT-ресурс.

00:31:49.268 --> 00:31:53.987
Когда мы говорим про сервисы,
которые бесплатные, сами по

00:31:54.011 --> 00:31:58.731
себе они не являются
IT-ресурсом в большинстве случаев,

00:31:58.755 --> 00:32:02.958
а являются тем сервисом,
которые или управляют или

00:32:02.982 --> 00:32:08.132
объединяют другие сервисы, 
другие IT-ресурсы. Как пример вы

00:32:08.156 --> 00:32:13.045
можете видеть Amazon VPC,
Elastic Beanstalk, Auto Scaling,

00:32:13.069 --> 00:32:17.958
AWS Cloud Formation – это
достаточно важный сервис, и IAM

00:32:17.982 --> 00:32:22.828
(AWS Identity and Access
Management) – все, что связано

00:32:22.852 --> 00:32:27.698
с безопасностью, с доступами,
проходит через этот сервис.

00:32:28.028 --> 00:32:34.444
Зачастую это те сервисы, которые очень
важны, всегда используются. Во-первых, потому

00:32:34.468 --> 00:32:41.348
что это удобно клиентам. Они упрощают
работу в облаке, где-то эту работу автоматизируют.

00:32:41.738 --> 00:32:47.168
Для самой AWS, так как это
не является IT-ресурсом, они не

00:32:47.192 --> 00:32:52.621
несут каких-то затрат на
поддержку этого сервиса, потому

00:32:52.645 --> 00:32:58.075
что нет ресурса, а лишь
написанный код, и он используется

00:32:58.099 --> 00:33:03.528
для того, чтобы управлять
другими сервисами и ресурсами.

00:33:04.328 --> 00:33:12.636
Таким образом, эти сервисы как бы мотивируют
клиентов AWS использовать больше, делать сложные и

00:33:12.660 --> 00:33:21.588
иметь возможность делать сложные архитектуры и, в
целом, оставаться и двигаться дальше вместе с AWS.

00:33:22.058 --> 00:33:30.778
Это достаточно правильный подход, это
клиентоориентированность. Мы с этими сервисами ещё

00:33:30.802 --> 00:33:40.928
столкнёмся. Вы теперь знаете, что некоторые сервисы
по определённым причинам могут быть бесплатными.

00:33:43.778 --> 00:33:51.578
Мы подошли к концу первой части. Давайте пройдёмся
по самым основным моментам, которые нужно запомнить.

00:33:52.208 --> 00:34:00.398
Первое – это то, что мы разобрали, как
происходит расчёт за услуги облачного провайдера.

00:34:01.598 --> 00:34:07.266
Также мы рассмотрели новую
модель оплаты – это Reserved Instances,

00:34:07.290 --> 00:34:13.658
какие виды бывают, чем отличаются,
когда и почему нужно их использовать.

00:34:15.038 --> 00:34:22.091
Дальше мы рассмотрели сервисы,
которые являются бесплатными и почему

00:34:22.115 --> 00:34:28.958
они таковыми являются.
И на этом мы переходим к следующей части.

00:34:32.318 --> 00:34:37.181
Вторая секция: Итоговая стоимость владения
Во второй части мы познакомимся с таким

00:34:37.205 --> 00:34:42.368
понятием как Total cost of ownership, т.е.
итоговая цена владения IT-инфраструктурой.

00:34:43.238 --> 00:34:49.229
Перед тем как мы её разберём, я хотел
бы вам напомнить, что у нас есть два вида

00:34:49.253 --> 00:34:55.628
развёртывания IT-инфраструктуры: это
локальная On-premise, и облачная, т.е. Cloud.

00:34:56.438 --> 00:35:03.409
Мы сейчас не говорим о гибридной
модели, которая тоже существует. Если мы

00:35:03.433 --> 00:35:11.278
сравниваем On-premise с Cloud, это
сравнение достаточно трудоёмкое, потому что в

00:35:11.302 --> 00:35:18.656
облаке есть то, чего нет в локальной
инфраструктуре и обратное тоже верно, в

00:35:18.680 --> 00:35:26.918
локальной инфраструктуре есть то, что
сильно отличается от того, что есть в облаке.

00:35:27.608 --> 00:35:31.978
Самый простой пример – это наши
капитальные расходы, т.е. в локальной

00:35:32.002 --> 00:35:36.758
инфраструктуре мы несём эти капитальные
расходы – это постоянные расходы.

00:35:37.958 --> 00:35:43.196
Если мы хотим увеличить наши
вычислительные мощности, то это долго и,

00:35:43.220 --> 00:35:48.458
может быть, дорого, потому что мы
покупаем целое оборудование сразу.

00:35:50.018 --> 00:35:57.064
Когда мы перестаём использовать
наши ресурсы в локальной инфраструктуре,

00:35:57.088 --> 00:36:03.338
то постоянные расходы, которые
мы несём, они никуда не уходят.

00:36:04.358 --> 00:36:11.768
В случае, когда мы говорим с облаком, там все
гибко и мы оплачиваем только то, что мы используем.

00:36:12.128 --> 00:36:20.469
Подобного рода различия они есть и
бывает достаточно сложно сравнить, что же

00:36:20.493 --> 00:36:29.948
все-таки лучше и выгоднее для бизнеса –
оставаться локально или переходить в облако?

00:36:32.708 --> 00:36:37.053
Я думаю, вы уже ответили на вопрос.
Ответ кроется в том,

00:36:37.077 --> 00:36:41.898
что же такое итоговая стоимость
владения IT-инфраструктурой.

00:36:42.548 --> 00:36:47.062
Когда мы пытаемся сравнить две
сложно сравнимые сущности, такие

00:36:47.086 --> 00:36:51.966
как развёртывание IT-инфраструктуры
локальной и в облаке, ввиду их

00:36:51.990 --> 00:36:56.570
различия, то единственный вариант
объективно сравнить и принять

00:36:56.594 --> 00:37:02.138
правильное решение, это привести все
к одной метрике или несколько метрик.

00:37:02.588 --> 00:37:07.531
В этом нам помогает Total cost of
ownership (TCO), который разбивает

00:37:07.555 --> 00:37:13.016
расходы на IT-инфраструктуру на
несколько основных групп, и внутри каждой

00:37:13.040 --> 00:37:18.057
группы указывает какие потенциальные
косвенные и прямые расходы могут

00:37:18.081 --> 00:37:23.468
быть, которые надо учитывать при
объективном расчёте стоимости владения.

00:37:24.848 --> 00:37:31.682
Основные группы расходов это – серверные
мощности, стоимость хранения, т.е. это не

00:37:31.706 --> 00:37:39.048
только стоимость ваших жёстких дисков, но
ещё и стоимость администрирования, хранения.

00:37:39.818 --> 00:37:46.478
Также если у вас локальный дата-центр,
то этот дата-центр тоже нужно обслуживать.

00:37:47.948 --> 00:37:55.518
Помимо IT-специалистов там есть
другие не IT-сотрудники, которые помогают

00:37:55.542 --> 00:38:03.113
правильно обслуживать дата-центр.
Элементарно уборщицы, которые протирают

00:38:03.137 --> 00:38:10.395
пыль, убирают мусор и другие ненужные
предметы, которых не должно там

00:38:10.419 --> 00:38:17.678
быть, чтобы не произошёл сбой 
в работе дата-центра. Вентиляция та же.

00:38:18.068 --> 00:38:23.395
Вы можете возразить, что вряд ли будут
содержать отдельного человека, который

00:38:23.419 --> 00:38:28.747
отвечает за вентиляцию.
Да, такое тоже может быть, но когда она ломается, то

00:38:28.771 --> 00:38:34.059
компания учитывает в своих расходах
вызов компании либо специалиста, который

00:38:34.083 --> 00:38:40.148
починит. Это тоже те расходы, которые
входят в стоимость владения IT-инфраструктурой.

00:38:41.108 --> 00:38:49.134
Следующая группа – это сети, т.е.
не только оборудование, но и обслуживание этих

00:38:49.158 --> 00:38:57.184
сетей. Когда вы только настраиваете ваш
локальный дата-центр, то работы по монтажу

00:38:57.208 --> 00:39:04.986
сетей, кабелей тоже сидят в стоимости владения.
Но и самое основное, зачастую

00:39:05.010 --> 00:39:12.788
одно из самых крупных среди всех групп,
это – затраты на зарплаты сотрудников.

00:39:14.438 --> 00:39:19.921
Здесь такой момент, что те разработчики,
которые у вас есть, они останутся в

00:39:19.945 --> 00:39:25.868
облаке, потому что кто-то должен
разрабатывать продукт, расходы будут одинаковы.

00:39:26.708 --> 00:39:34.234
Я сейчас хочу выделить тех сотрудников,
которые перестают быть нужными в момент,

00:39:34.258 --> 00:39:42.356
когда мы переходим в облако, а это именно
те люди, которые обслуживают техпомещения,

00:39:42.380 --> 00:39:49.858
наш дата-центр, те люди, которые,
например, администрируют базу данных и т.д.

00:39:49.882 --> 00:39:57.360
Это те люди, необходимость в которых
либо совсем исключается, либо потребность

00:39:57.384 --> 00:40:05.006
в этих специалистах сильно сокращается.
Например, то что мы перейдём в облако и

00:40:05.030 --> 00:40:12.652
будем использовать Amazon RDS, не
говорит о том, что нам не нужны администраторы

00:40:12.676 --> 00:40:20.059
баз данных. Нет, они нам нужны, но
потребность в объёме работ по обслуживанию

00:40:20.083 --> 00:40:27.368
баз данных намного меньше, потому
что большую часть уже берет на себя AWS.

00:40:27.668 --> 00:40:31.125
Например, чтобы локально
поддерживать десять баз данных,

00:40:31.149 --> 00:40:35.048
администрировать их, нам нужно
два администратора баз данных.

00:40:37.150 --> 00:40:44.589
Тогда как в облаке часть работы забирает на
себя AWS и уже не нужно двух сотрудников держать,

00:40:44.613 --> 00:40:51.646
достаточно одного, и вот это те расходы,
разница которой должна объективно указываться

00:40:51.670 --> 00:40:58.663
при сравнении общей стоимости владения.
Мы с вами проговорили те моменты, которые надо

00:40:58.687 --> 00:41:05.680
учитывать при расчёте общей итоговой
стоимости владения локальной IT-инфраструктурой.

00:41:07.270 --> 00:41:14.926
Если мы говорим про облачную, то я ранее
упоминал, что есть специальный сервис AWS Pricing

00:41:14.950 --> 00:41:22.348
Calculator, который помогает вам в зависимости
от ваших входных данных и требований к

00:41:22.372 --> 00:41:29.899
IT-инфраструктуре, высчитать ежемесячную
стоимость владения IT-инфраструктурой в облаке,

00:41:29.923 --> 00:41:37.450
хоть и недостаточно детально, но в той мере,
чтобы показывать реалистичную общую картину.

00:41:41.320 --> 00:41:48.759
Когда делают расчёт и сравнение облачной и
локальной инфраструктур, то следует ещё отметить,

00:41:48.783 --> 00:41:56.140
что есть так называемые дополнительные Benefits, 
т.е. преимущества при переходе в облако.

00:41:56.680 --> 00:42:00.910
Они делятся на две группы:
Hard Benefits и Soft Benefits.

00:42:01.720 --> 00:42:09.580
Hard Benefits это те, что мы получаем напрямую.
Soft Benefits это те, которые мы получаем косвенно.

00:42:10.210 --> 00:42:16.930
Я бы хотел подробнее рассказать про
Soft Benefits и дать вам пару примеров.

00:42:18.864 --> 00:42:27.700
Один из косвенных плюсов это то, что процессы внутри
вашей компании будут двигаться намного быстрее.

00:42:28.750 --> 00:42:36.588
Это именно те процессы, которые были
завязаны на циклы закупки железа, т.е. локально

00:42:36.612 --> 00:42:44.450
этот процесс мог занимать дни и недели, а
то и месяцы, сейчас это занимает минуты.

00:42:45.700 --> 00:42:51.812
Получается, вы можете планировать
быстрее, вы можете двигаться быстрее, таким

00:42:51.836 --> 00:42:57.868
образом, и разработчики двигаются
быстрее, а это потенциальная возможность

00:42:57.892 --> 00:43:03.601
быстрее разрабатывать и выдавать
клиентам новые features, функционал для

00:43:03.625 --> 00:43:10.060
вашего предложения и соответственно
быстрее и больше получать обратную прибыль.

00:43:10.750 --> 00:43:17.533
Другой момент это то, что вы начинаете
быстрее двигаться, процессы быстрее

00:43:17.557 --> 00:43:24.340
начинают двигаться и приводят к
большей удовлетворённости ваших клиентов.

00:43:25.210 --> 00:43:30.940
И ещё один момент это то, что с локальной
инфраструктурой вы всегда остаётесь локально.

00:43:31.270 --> 00:43:38.650
Значит, для того чтобы запуститься на нескольких
регионах, вам также нужно открывать локальную

00:43:38.674 --> 00:43:45.577
инфраструктуру там, чтобы быть на адекватном
физическом расстоянии от клиентов, потому

00:43:45.601 --> 00:43:52.342
как если вы откроете напрямую сайт, который
хостится где-то там далеко, то ping, т.е. скорость

00:43:52.366 --> 00:43:59.590
загрузки и скорость ответа через
интернет будет маленькой и это будет ощущаться.

00:44:00.160 --> 00:44:06.966
Неприятно и неудобно будет
работать на вашем сайте, если это сайт

00:44:06.990 --> 00:44:13.690
и доставлять какой-то дискомфорт
вашим потенциальным клиентам.

00:44:14.440 --> 00:44:21.119
Поэтому у AWS, это глобальная
инфраструктура, регионы по всему

00:44:21.143 --> 00:44:27.493
миру, и вы буквально за короткое
время имеете возможность

00:44:27.517 --> 00:44:33.700
всю вашу инфраструктуру
склонировать на другой регион для

00:44:33.724 --> 00:44:40.570
того, чтобы стать ближе к вашим
клиентам и стать глобальными.

00:44:41.830 --> 00:44:50.583
Это, во-первых, становится возможным.
Во-вторых, с облаками можно это сделать быстрее.

00:44:50.607 --> 00:44:59.980
Мы с вами переходим к третьей части нашей
сессии и проговорим про сервис AWS Organizations.

00:45:00.490 --> 00:45:05.720
Это такой сервис, который набирает популярность
в последние годы. Я поясню, почему. До недавнего

00:45:06.250 --> 00:45:17.023
времени, когда компания разворачивала облачную
инфраструктуру, она создавала ровно столько AWS

00:45:17.047 --> 00:45:27.820
аккаунтов, сколько было environments, т.е. среда,
в которой развёрнута копия вашей IT-инфраструктуры.

00:45:28.150 --> 00:45:33.124
Например, test environment (среда),
где тестируют, dev environment, где

00:45:33.148 --> 00:45:38.763
разрабатывают это приложение, дальше
оно перетекает в test environment, с test

00:45:38.787 --> 00:45:44.693
environment попадает в Preprod, т.е.
Pre-Production environments, где дополнительно

00:45:44.717 --> 00:45:49.900
проверяется, после этого при
отсутствии ошибок она уходит в Production.

00:45:50.260 --> 00:45:57.640
И вот для каждого environment регистрировали
отдельный e-mail, отдельный аккаунт.

00:45:58.810 --> 00:46:06.220
Это было достаточно распространённым явлением,
потому как много environments и не нужно было.

00:46:07.030 --> 00:46:13.400
Последние годы ввиду развития
CI/CD DevOps методологии и

00:46:13.424 --> 00:46:21.303
применения, мы на этом ещё
остановимся подробнее, мы пришли к тому,

00:46:21.327 --> 00:46:28.452
что можно поддерживать большое
количество сред (environments)

00:46:28.476 --> 00:46:35.600
при меньших трудозатратах,
как человеческих, так и ресурсных.

00:46:36.220 --> 00:46:44.276
Таким образом, компании стремятся все больше
environments создать по тем или иным причинам, но

00:46:44.300 --> 00:46:53.050
каждую регистрировать отдельно неудобно и для этого
используют специальный сервис AWS Organizations.

00:46:53.440 --> 00:47:01.918
Он позволяет одним мастера-аккаунтом управлять
всеми аккаунтами, зарегистрированными в вашей

00:47:01.942 --> 00:47:10.420
компании, таким образом, вы можете управлять
вашими аккаунтами и доступом централизованно.

00:47:11.230 --> 00:47:16.162
Также вы можете автоматически
создавать новые аккаунты.

00:47:16.186 --> 00:47:21.118
Не менее важная часть,
особенность AWS Organizations, это

00:47:21.142 --> 00:47:26.254
Consolidated Building, т.е.
вам не нужно заходить отдельно

00:47:26.278 --> 00:47:30.941
в каждый аккаунт, чтобы
посмотреть ежемесячный счёт

00:47:30.965 --> 00:47:36.234
выставленный, а включить этот
функционал и вы на центральный

00:47:36.258 --> 00:47:40.721
аккаунт ежемесячно будете
получать агрегированный

00:47:40.745 --> 00:47:45.610
счёт по всем вашим аккаунтам,
внутри будет разделение

00:47:45.634 --> 00:47:50.500
по аккаунтам, а также
возможность смотреть по сервисам.

00:47:51.550 --> 00:47:58.200
Но идея в том, что все это 
объединено в одном месте.

00:47:58.224 --> 00:48:05.890
Давайте поговорим подробнее об основных
понятиях сервиса AWS Organizations.

00:48:06.310 --> 00:48:12.880
Как видно на слайде, у нас есть Root Account, т.е.
основной аккаунт, с которого мы всем управляем.

00:48:13.390 --> 00:48:20.980
Далее, есть такое понятие, как OU (Organizational
Unit) или другими словами, это папка.

00:48:21.310 --> 00:48:27.600
Если мы представим аккаунт как файл,
то OU – это папка, а Root – это единственная

00:48:27.624 --> 00:48:33.441
основная папка. Таким образом, вы
можете иметь вложенные папки и в каждой

00:48:33.465 --> 00:48:39.756
папке может, как на примере, что в
первой вложенной папке есть один аккаунт, а

00:48:39.780 --> 00:48:46.070
дальше есть ещё одна папка, внутри
которой два аккаунта. С левой стороны слайда.

00:48:46.900 --> 00:48:51.508
Это возможно сделать.
Таким образом можно организовать,

00:48:51.532 --> 00:48:56.140
чтобы вести более структурированный
учёт ваших аккаунтов.

00:48:56.680 --> 00:49:01.495
Как пример, если у вас есть
несколько продуктов, то вы можете

00:49:01.519 --> 00:49:07.300
организовать в разные OU, и чтобы
ваши аккаунты сидели в нужных местах.

00:49:07.600 --> 00:49:11.920
Внутри каждого продукта у вас
может быть, например, dev-аккаунт.

00:49:12.880 --> 00:49:18.540
Может быть два-три dev-аккаунта,
это совершенно нормально, потому

00:49:18.564 --> 00:49:24.223
как в одном аккаунте вы можете
исправлять ошибки версии, которые

00:49:24.247 --> 00:49:29.326
deployed или развёрнуты на
вашем боевом приложении, боевом

00:49:29.350 --> 00:49:35.590
environment, а на другом dev-аккаунте
вы тестируете новый функционал.

00:49:36.190 --> 00:49:43.969
Таким образом, вы можете создать новый
OU с названием dev, внутри OU название

00:49:43.993 --> 00:49:51.670
направления либо продукта и там
хранить, точнее расположить ваши аккаунты.

00:49:52.870 --> 00:50:02.740
Другим немаловажным функционалом, который есть в
сервисе AWS Organizations, это так называемый Policy.

00:50:03.040 --> 00:50:11.359
Идея этих Policy в том, чтобы
предоставить возможность ограничивать

00:50:11.383 --> 00:50:18.440
аккаунт или группы аккаунтов через OU.
Приведем пример.

00:50:18.970 --> 00:50:26.163
Представим, что вы компания,
разрабатывающая некий IT-продукт и ввиду

00:50:26.187 --> 00:50:33.910
специфики вашего бизнеса вы не
используете определённый список сервисов.

00:50:34.510 --> 00:50:41.990
Может быть, потому что они дорогие или они
не подходят под вашу специфику, и так далее.

00:50:44.126 --> 00:50:47.414
Вы хотите запретить использование
этих сервисов всем аккаунтам,

00:50:47.438 --> 00:50:50.726
чтобы у них не было возможности
ничего с этим сервисом сделать.

00:50:51.236 --> 00:50:55.242
В этом случае, вы пишете Policy,
которая полностью запрещает

00:50:55.266 --> 00:50:59.816
доступ к этим сервисам и этот
Policy привязываете к Root-аккаунту.

00:51:00.446 --> 00:51:06.077
Таким образом, все, что находится под
Root-аккаунтом, это все ваши аккаунты

00:51:06.101 --> 00:51:12.266
через все ваши OU и доступ к этим сервисам
будет заблокирован. Это очень удобно.

00:51:13.076 --> 00:51:24.524
Другой момент, например, вы хотите для сервиса Amazon
EC2 для крупных типов, которые дорогие, запретить

00:51:24.548 --> 00:51:35.996
использование на dev-аккаунтах, чтобы разработчики не
включали без необходимости чересчур мощную машину.

00:51:36.386 --> 00:51:43.421
Вы знаете, что они могут свою работу сделать
и менее мощными машинами и вы не понесете

00:51:43.445 --> 00:51:51.806
дополнительных затрат, если разработчик захочет
включить мощную машину, чтобы стало чуточку быстрее.

00:51:52.316 --> 00:51:58.136
Разработчик не видит этих расходов,
поэтому он может этого и не знать.

00:51:58.796 --> 00:52:08.936
Для этого вы можете написать такую Policy,
которая блокирует запуск создания Amazon EC2 instance

00:52:08.960 --> 00:52:18.566
типа такого-то и выше, которые дорогие, и
привязать эту Policy к Organizational Unit Dev.

00:52:19.136 --> 00:52:26.706
Таким образом, у вас на этих аккаунтах
закроется доступ на указанные вами типы инстансов.

00:52:28.316 --> 00:52:32.534
Ещё один пример, показывающий,
что можно делать с Policy, это то,

00:52:32.558 --> 00:52:36.776
что необязательно указывать
чёрный список того, что нельзя делать.

00:52:37.286 --> 00:52:44.725
Вы можете внутри Policy прописать
белый список cервисов и API операции,

00:52:44.749 --> 00:52:52.826
которые вы можете сделать в рамках
этого сервиса, и которые будут доступны.

00:52:53.456 --> 00:53:01.088
Если этот список меньше того, что
разрешено, можно сделать таким образом: вы

00:53:01.112 --> 00:53:09.356
указываете белый список и привязываете,
либо к Root, либо к соответствующему OU.

00:53:09.806 --> 00:53:21.164
Забегая наперёд, скажу, если доступ к ресурсу
не предоставлен явно, то он неявно запрещен,

00:53:21.188 --> 00:53:32.546
заблокирован. Поэтому при White list все то,
что не разрешено явно, оно будет заблокировано.

00:53:35.006 --> 00:53:44.246
Про тонкости работы с IAM и написанием Policy
мы будем заниматься на следующих наших занятиях.

00:53:46.646 --> 00:53:52.076
Давайте остановимся на основных моментах,
касающихся сервиса AWS Organizations.

00:53:52.586 --> 00:54:00.799
Первое – это возможность запрещать,
либо разрешать использование тех или иных

00:54:00.823 --> 00:54:09.793
сервисов на ваши аккаунты через Policy;
возможность организовать и структурировать

00:54:09.817 --> 00:54:18.143
все ваши аккаунты через так называемые
папки OU; используя AWS Organizations,

00:54:18.167 --> 00:54:25.616
вы можете автоматизировать
создание новых аккаунтов, используя API.

00:54:26.036 --> 00:54:33.846
Это те доступные операции (Operations),
которые есть у сервиса AWS Organizations.

00:54:35.096 --> 00:54:46.222
Одна из основных возможностей то, что можно
собирать счета со всех ваших AWS аккаунтов за каждый

00:54:46.246 --> 00:54:58.076
месяц в одном месте и видеть не отдельно в каждом
аккаунте, а в одном месте – вашем мастер-аккаунте.

00:55:00.656 --> 00:55:08.011
Когда мы говорим про безопасность с
AWS Organizations, мы подразумеваем

00:55:08.035 --> 00:55:15.389
два пункта: первый – так называемые
Service Control Policies, которые

00:55:15.413 --> 00:55:22.768
позволяют добавлять Policy на
несколько аккаунтов, либо на целый OU,

00:55:22.792 --> 00:55:30.146
либо даже на целый Root-аккаунт,
чтобы распространить на все аккаунты.

00:55:31.736 --> 00:55:39.887
Когда мы говорим про доступы, специфичные
для каждого аккаунта, то мы подразумеваем

00:55:39.911 --> 00:55:48.063
сервис AWS Identity and Access Management
(IAM), который позволяет, не отвлекаясь на

00:55:48.087 --> 00:55:56.382
основные запреты и разрешения на сервисы,
персонально для каждой роли или для каждого

00:55:56.406 --> 00:56:05.196
пользователя выдать только те права, которые
необходимы для осуществления своих функций.

00:56:08.066 --> 00:56:13.717
Какими путями мы можем добраться
до AWS Organizations? Это уже

00:56:13.741 --> 00:56:19.856
знакомая нам AWS Management Console.
На неё будет отдельное демо.

00:56:20.636 --> 00:56:25.796
Другой – это наш AWS
Command Line Interface (CLI).

00:56:26.696 --> 00:56:35.146
Третий – это Software Development Kits
(SDK) – это библиотеки, специфичные для

00:56:35.170 --> 00:56:44.279
каждого языка программирования, чтобы на
более высоком уровне автоматизировать всю

00:56:44.303 --> 00:56:53.853
деятельность, связанную с облаком, написав
какой-то код. Четвёртый – это использование

00:56:53.877 --> 00:57:03.426
так называемого API через HTTPs для вызова
определённых функций или операций напрямую.

00:57:05.936 --> 00:57:12.379
Мы плавно переходим к предпоследней части
нашей сессии и поговорим про AWS Billing and

00:57:12.403 --> 00:57:18.846
Cost Management, это все то, что связано с
затратами в облаке, управлением расходами.

00:57:20.126 --> 00:57:25.120
Объединяющим сервисом, даже
не сервисом, а группой сервисов

00:57:25.144 --> 00:57:30.569
AWS Billing and Cost Management
– это специальная страница, на

00:57:30.593 --> 00:57:35.803
которой вы переходите, видите
DashBoard следующего вида, на

00:57:35.827 --> 00:57:41.036
котором можете видеть ваши
затраты в различных перспективах.

00:57:44.066 --> 00:57:51.686
С этого DashBoard можно перейти уже на конкретные
сервисы AWS для выполнения соответствующих операций.

00:57:51.986 --> 00:58:00.689
К примеру, есть AWS Budgets – специальный
сервис, который позволяет вам настроить

00:58:00.713 --> 00:58:09.416
бюджет облака, и при превышении этого
бюджета будет совершаться некое действие.

00:58:09.943 --> 00:58:18.517
Может прийти уведомление, либо вы можете запретить
превышение бюджета, но в этом случае есть риск

00:58:18.541 --> 00:58:27.026
того, что система перестанет работать, потому
что облако отключит её из-за превышения бюджета.

00:58:28.376 --> 00:58:32.061
Следующее – это AWS
Cost and Usage Report.

00:58:32.246 --> 00:58:40.351
Этот сервис позволяет вам генерировать
детальные отчёты, о том какой сервис,

00:58:40.375 --> 00:58:48.263
какая операция, в какое время, какой
ресурс был использован, сколько это

00:58:48.287 --> 00:58:55.736
стоит и другие подробности, чтобы с
этими детальными данными по вашим

00:58:55.760 --> 00:59:04.196
расходам иметь возможность строить
более сложные и кастомизированные отчёты.

00:59:04.916 --> 00:59:15.026
И третий сервис, он достаточно интересный
и полезный сервис – AWS Cost Explorer.

00:59:16.136 --> 00:59:20.467
На нем можно через достаточно
удобный User Interface накликать себе

00:59:20.491 --> 00:59:24.756
просмотр отчёта по вашим расходам
в удобной для вас перспективе.

00:59:25.886 --> 00:59:33.841
Вы можете сортировать по разным группам,
например, сгруппировать ваши расходы по аккаунтам;

00:59:33.865 --> 00:59:41.819
по сервису и так далее. Более того, можно
фильтровать, вы можете сгруппировать по сервису,

00:59:41.843 --> 00:59:50.109
при этом исключить или наоборот, включить
некоторые аккаунты, тогда вы увидите соответствующую

00:59:50.133 --> 00:59:57.776
перспективу на ваши расходы, чтобы сделать
какие-то выводы, возможно, оптимизировать.

00:59:58.586 --> 01:00:06.734
AWS Cost Explorer базируется на всех тех же
данных, которые генерирует AWS Cost and Usage

01:00:06.758 --> 01:00:14.906
Report, второй сервис на слайде. Давайте
посмотрим на каждый из перечисленных сервисов.

01:00:16.406 --> 01:00:23.628
Самый первый, который охватывает другие наши
сервисы, он помимо того, что объединяет сервисы,

01:00:23.652 --> 01:00:31.346
связанные с затратами в облаке, также предоставляет
хранение всех счетов AWS, которые у вас были.

01:00:32.186 --> 01:00:39.418
Там вы можете увидеть, это часть скриншота
с AWS Management Console, в которой

01:00:39.442 --> 01:00:46.297
вы видите ваши затраты с AWS
Marketplace Charges, это когда вы покупаете

01:00:46.321 --> 01:00:53.177
сторонний продукт или приложение и
используете в облаке, либо AWS Service

01:00:53.201 --> 01:01:00.056
Charges – это те сервисы, которые
есть в AWS и соответствующие расходы.

01:01:02.080 --> 01:01:07.467
Когда мы говорим про AWS Cost
Explorer, вы видите подобный график.

01:01:07.491 --> 01:01:12.879
Он сейчас в упрощённом виде.
Есть отдельные блоки внутри страницы,

01:01:12.903 --> 01:01:18.127
которая помогает вам фильтровать,
есть соответствующая Dropdown,

01:01:18.151 --> 01:01:23.210
т.е. выпадающее меню для
группировки по нужным вам разрезам.

01:01:25.030 --> 01:01:34.030
Далее, если мы говорим про AWS Budgets,
то интерфейс выглядит следующим образом.

01:01:34.510 --> 01:01:43.237
Вы можете прописать на уровне каждого сервиса,
либо затрат на ваш аккаунт расходы, которые

01:01:43.261 --> 01:01:51.987
вы заложили и соответствующие действия, что
будет происходить. Также он показывает текущие

01:01:52.011 --> 01:02:00.544
расходы на сегодняшний день и Forecasted, т.е.
прогнозируемый расход, который будет при

01:02:00.568 --> 01:02:09.100
том же уровне, темпе потребления ресурсов
и до конца месяца, т.е. расход за весь месяц.

01:02:13.870 --> 01:02:21.598
И последнее – это Cost and Usage Reporting.
Вы можете видеть лишь малую часть отчёта, который

01:02:21.622 --> 01:02:29.350
генерируется, а также примеры полей, которые
есть для построения своих персональных отчётов.

01:02:32.080 --> 01:02:37.970
Мы переходим к последней части нашей
сессии и поговорим про техподдержку.

01:02:39.640 --> 01:02:46.870
Что из себя представляет техподдержка AWS?
Первое – это Technical Account Manager (TAM).

01:02:48.070 --> 01:02:53.603
Это – живой отдельно выделенный
человек для вашего аккаунта, с которым

01:02:53.627 --> 01:02:59.080
можно выйти на связь, чтобы
проконсультироваться по любым вопросам.

01:03:00.670 --> 01:03:05.050
Второе – это AWS Trusted
Advisor – это специально

01:03:05.074 --> 01:03:10.918
разработанный сервис, который
позволяет вам видеть рекомендации

01:03:10.942 --> 01:03:16.054
по оптимизации затрат, либо
любых других моментов, которые

01:03:16.078 --> 01:03:21.190
рекомендует сделать команда
AWS в виде удобного сервиса.

01:03:23.350 --> 01:03:31.043
Третье – это AWS Support Concierge – это
опять же живой человек, с ним общение идет

01:03:31.067 --> 01:03:38.760
по переписке и здесь вы можете получить
любые ответы на ваши вопросы, не связанные с

01:03:38.784 --> 01:03:47.078
техническими моментами, т.е. не на уровне
сервисов, где что как сделать подсказать помочь,

01:03:47.102 --> 01:03:55.210
а больше про ваши затраты на уровне аккаунта
и другие подобные не технические вопросы.

01:03:57.520 --> 01:04:03.688
Когда мы говорим про Support
plans, существует четыре вида: Basic

01:04:03.712 --> 01:04:09.880
Support, Developer Support,
Business Support, Enterprise Support.

01:04:11.950 --> 01:04:16.921
В порядке перечисления они
становятся дороже, но и несут некоторый

01:04:16.945 --> 01:04:22.300
функционал, возможности, которые
могут быть нужны для вашего бизнеса.

01:04:23.860 --> 01:04:28.618
Чем именно они отличаются,
недостатки и преимущества, мы разберём

01:04:28.642 --> 01:04:33.400
позже на следующих занятиях, я
не хочу сейчас вас сильно нагружать.

01:04:33.730 --> 01:04:40.738
Цель этого слайда – дать вам
информацию, что есть такие Support

01:04:40.762 --> 01:04:47.770
plans, выделяют четыре вида, и
пару слов скажу о Basic Support.

01:04:48.880 --> 01:05:00.250
Он дается вам по умолчанию при создании нового
AWS аккаунта, он бесплатный, вы за него не платите.

01:05:00.910 --> 01:05:08.443
В нем есть возможность задать любой вопрос,
касающийся ваших затрат на облако, и они вам ответят.

01:05:08.467 --> 01:05:16.550
Ответ приходит в течение 24 часов, если повезёт,
придёт раньше, если нет то +\- 2-4 часа будете ждать.

01:05:18.310 --> 01:05:24.420
Другой момент, у вас нет возможности
спросить какой-то технический вопрос про

01:05:24.444 --> 01:05:30.553
какой-то определённый сервис.
Идея в том, что вы ищете это внутри документации,

01:05:30.577 --> 01:05:36.687
если не находите в документации, то
на просторах интернета, но при этом есть

01:05:36.711 --> 01:05:42.820
возможность увеличивать лимиты, квоты
на уровне аккаунта на любой из сервисов.

01:05:43.870 --> 01:05:49.676
Это важно, потому что для только
созданных аккаунтов стараются

01:05:49.700 --> 01:05:55.506
максимально поставить большое
количество лимитов, которые можно

01:05:55.530 --> 01:06:01.243
поменять, чтобы потенциально
новые клиенты не навредили себе,

01:06:01.267 --> 01:06:06.980
не «выстрелили себе в ногу» и
не нагенерили случайно большие

01:06:07.004 --> 01:06:12.903
затраты, не специально, не важно.
И чтобы подобных разочарований

01:06:12.927 --> 01:06:18.357
не было, они максимально
ограничивают, но эти ограничения

01:06:18.381 --> 01:06:24.850
гибкие, их можно поменять, а все
то, что разрешено, оно в большинстве

01:06:24.874 --> 01:06:30.580
случаев подходит для изначально
с нуля созданных аккаунтов.

01:06:31.480 --> 01:06:39.408
Если же вам нужно что-то увеличить, то
в любом из Support plans, начиная от Basic

01:06:39.432 --> 01:06:47.260
Support, есть возможность через сервис
AWS Quotas запросить увеличение лимита.

01:06:47.590 --> 01:06:54.476
Вам её увеличат, если это возможно, если
увеличить нельзя, то вы по соответствующей

01:06:54.500 --> 01:07:00.460
линии получите эту информацию
среди списка всех лимитов, которые есть.

01:07:01.630 --> 01:07:11.330
Приведу пример. На уровне каждого аккаунта
можно создать не более ста Amazon S3 buckets.

01:07:13.030 --> 01:07:17.531
Это ограничение – Soft, это значит,
его можно подвинуть, вы запрашиваете,

01:07:17.555 --> 01:07:21.366
какое количество вам нужно.
Для некоторых сервисов поддержка

01:07:21.390 --> 01:07:25.135
дополнительно проверяет,
действительно ли у вас дошло до ста

01:07:25.159 --> 01:07:29.350
Amazon S3 buckets и вам
действительно ли нужно увеличить или нет.

01:07:29.770 --> 01:07:34.404
В некоторых случаях запрашивают,
в некоторых не запрашивает. Таким

01:07:34.428 --> 01:07:39.490
образом, Soft можно подвинуть, он
увеличивается и для вас расширяется.

01:07:40.000 --> 01:07:44.680
Все то, что Hard лимит, есть и
такое, это связано с особенностями

01:07:44.704 --> 01:07:49.750
реализации этих сервисов, и, к
сожалению, их подвинуть не получится.

01:07:53.140 --> 01:07:58.120
На этом всё, это базовая информация,
которую вам достаточно знать.

01:07:58.630 --> 01:08:04.903
Что следует запомнить и придёт
на экзамене – это названия Support

01:08:04.927 --> 01:08:11.200
plans, есть такие вопросы: Basic,
Developer, Business и Enterprise.

01:08:12.460 --> 01:08:15.678
Есть вопросы,  уточняющие
некоторые детали и отличия

01:08:15.702 --> 01:08:19.300
Support plans, о них мы
поговорим на следующих занятиях.

01:08:19.750 --> 01:08:27.397
Я ранее упоминал, что вы не
можете создавать кейсы, т.е. не можете

01:08:27.421 --> 01:08:35.068
написать какой-то технический
вопрос техподдержке на Basic Support

01:08:35.092 --> 01:08:42.739
plan, поэтому вы видите, что для
любой срочности кейсов, начиная от

01:08:42.763 --> 01:08:50.410
low, normal, high, urgent, critical,
нет возможности создать кейс.

01:08:52.540 --> 01:09:01.808
И начиная от Developer, и выше мы можем
создать с каждым разом большее количество

01:09:01.832 --> 01:09:10.520
кейсов с увеличенным приоритетом, т.е.
меньший приоритет это справа – Low.

01:09:11.080 --> 01:09:20.206
Высший приоритет это Critical, это очень срочно.
Когда мы говорим low, это кейсы с

01:09:20.230 --> 01:09:30.484
периодом ожидания до 24 часов, у вас ничего
не сломается за это время в IT-инфраструктуре.

01:09:30.508 --> 01:09:40.537
Когда мы говорим Normal, желательно получить
ответ не позднее 12 часов. Если мы говорим

01:09:40.561 --> 01:09:50.590
High, то есть высокий приоритет – это 4 часа.
Urgent – это cрочный вопрос в течение часа.

01:09:51.340 --> 01:10:00.354
И есть Critical, доступен только в Enterprise
plan, там вам ответят в течение 15 минут, не более.

01:10:00.760 --> 01:10:11.981
Вы видите, что с увеличением plan
количество доступных состоянии по срочности

01:10:12.005 --> 01:10:22.930
ваших вопросов расширяется.
Вам не нужно запоминать детально эту таблицу.

01:10:23.470 --> 01:10:33.790
Вы в целом помните, что есть пять видов срочности
кейса, кейсы можно создавать с Developer plan и выше.

01:10:34.510 --> 01:10:43.220
У каждой срочности есть свой промежуток времени,
внутри которого вам гарантированно ответят, начиная

01:10:43.244 --> 01:10:51.954
с low, не более 24 часов до получения ответа, до
Critical, когда вы получаете ответ в течение 15 минут

01:10:51.978 --> 01:11:00.900
после запроса. Все остальное, если есть возможность
можете запомнить, если нет, то когда придёт вопрос, с

01:11:00.924 --> 01:11:09.846
учётом того, что вот основные моменты вы запомнили,
можно будет подумать и правильно ответить на вопрос.

01:11:11.526 --> 01:11:19.896
На этом мы подошли к концу нашей сегодняшней
сессии. Давайте пройдёмся по основным моментам.

01:11:20.046 --> 01:11:24.826
Мы сегодня говорили про то, как
происходит ценообразование сервисов AWS.

01:11:25.056 --> 01:11:31.019
После этого мы ознакомились с
понятием Total Cost of Ownership,

01:11:31.043 --> 01:11:36.524
что это такое, для чего нужно, 
как его считают. Далее мы

01:11:36.548 --> 01:11:42.945
познакомились с так называемым
сервисом AWS Pricing Calculator для

01:11:42.969 --> 01:11:49.366
возможности расчётов на стороне
облака на вашу IT-инфраструктуру.

01:11:49.596 --> 01:11:54.875
Далее проговорили про AWS
Organizations, это такой сервис, который

01:11:54.899 --> 01:12:00.096
набирает популярность и поняли
почему он набирает популярность.

01:12:00.696 --> 01:12:05.259
Далее познакомились с теми
четырьмя сервисами, которые связаны

01:12:05.283 --> 01:12:09.546
с затратами на облако Billing
DashBoard и другие детали.

01:12:10.176 --> 01:12:15.963
Ну и самым последним мы проговорили
про техподдержку от AWS, какая она

01:12:15.987 --> 01:12:22.446
бывает, какие виды, какие существуют
виды Support plan и чем они отличаются.

01:12:23.856 --> 01:12:29.616
Здесь вы можете видеть ссылки, которые
помогут вам получить более подробную информацию.

01:12:31.746 --> 01:12:37.386
На этом у меня все, спасибо большое, рад
был вас видеть, увидимся на следующих занятиях!